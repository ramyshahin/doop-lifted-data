<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	<Neighbor: Vertex getOtherVertex(Vertex)>	@GN_OnlyNeighbors
<Vertex: void nodeSearch(WorkSpace)>/@this	<Vertex: void nodeSearch(WorkSpace)>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l2#_0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Vertex$EdgeIter1: EdgeIfc next()>/$r1	<Vertex$EdgeIter1: EdgeIfc next()>	@EdgeObjects /\ G_NoEdges
<CycleWorkSpace: void preVisitAction(Vertex)>/$numconstant0	<CycleWorkSpace: void preVisitAction(Vertex)>
<Main: void main(java.lang.String[])>/$r5	<Main: void main(java.lang.String[])>	@Prog
<Neighbor: void display()>/$r4	<Neighbor: void display()>	@GN_OnlyNeighbors
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@SearchBase
<Graph: void runBenchmark(java.lang.String)>/$r6	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/v#_0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@StronglyConnected
<Vertex: void display()>/$r29	<Vertex: void display()>
<Graph: int readNumber()>/ch_$$A_1#_211	<Graph: int readNumber()>	@Benchmark
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_3#_51	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void display()>/this#_0	<Vertex: void display()>
<Graph: int readNumber()>/$r5	<Graph: int readNumber()>	@Benchmark
<Graph: Graph kruskal()>/v_$$A_2#_471	<Graph: Graph kruskal()>
<CycleWorkSpace: void postVisitAction(Vertex)>/v#_0	<CycleWorkSpace: void postVisitAction(Vertex)>	@Cycle
<Vertex: void addAdjacent(Vertex)>/@parameter0	<Vertex: void addAdjacent(Vertex)>	@G_NoEdges
<Vertex: void adjustAdorns(Vertex,int)>/this#_0	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Graph: void graphSearch(WorkSpace)>/v_$$A_3#_306	<Graph: void graphSearch(WorkSpace)>
<Vertex$VertexIter1: Vertex next()>/$r1	<Vertex$VertexIter1: Vertex next()>	@G_NoEdges
<Neighbor: void <init>(Vertex,int)>/theNeighbor#_0	<Neighbor: void <init>(Vertex,int)>
<Vertex: int getWeight()>/this#_0	<Vertex: int getWeight()>	@G_NoEdges
<Main: EdgeIfc addEdge(Graph,int)>/n#_0	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<CycleWorkSpace: void postVisitAction(Vertex)>/@this	<CycleWorkSpace: void postVisitAction(Vertex)>	@Cycle
<Graph: Graph kruskal()>/theEdge#_499	<Graph: Graph kruskal()>
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/v#_0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@StronglyConnected
<Main: void main(java.lang.String[])>/$r4	<Main: void main(java.lang.String[])>	@Prog
<Vertex$EdgeIter3: void <init>(Vertex)>/l1#_0	<Vertex$EdgeIter3: void <init>(Vertex)>
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_8#_67	<Main: void main(java.lang.String[])>	@Prog
<Main: void main(java.lang.String[])>/$r10	<Main: void main(java.lang.String[])>	@Prog
<Vertex$VertexIter1: Vertex next()>/$r0	<Vertex$VertexIter1: Vertex next()>	@G_NoEdges
<Graph: void run(Vertex)>/$r3	<Graph: void run(Vertex)>
<Neighbor: void <init>(Vertex,int)>/this#_0	<Neighbor: void <init>(Vertex,int)>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Vertex: VertexIter getNeighbors()>/$r0	<Vertex: VertexIter getNeighbors()>	@G_NoEdges
<Vertex$EdgeIter3: EdgeIfc next()>/$r3	<Vertex$EdgeIter3: EdgeIfc next()>	@EdgeObjects /\ GEN_Edges
<Graph: Graph kruskal()>/edgeiter#_428	<Graph: Graph kruskal()>
<Graph: Graph strongComponents()>/@this	<Graph: Graph strongComponents()>
<Vertex: void adjustAdorns(Vertex,int)>/the_vertex#_0	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<WorkSpace: void postVisitAction(Vertex)>/@parameter0	<WorkSpace: void postVisitAction(Vertex)>	@SearchBase
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z3	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph: int readNumber()>/ch_$$A_1_$$A_2#_213	<Graph: int readNumber()>	@Benchmark
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter1	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Edge: int getWeight()>/this#_0	<Edge: int getWeight()>	@EdgeObjects /\ Weighted
<Main: void main(java.lang.String[])>/$r11	<Main: void main(java.lang.String[])>	@Prog
<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter1	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Vertex$VertexIter2: void <init>(Vertex)>/$r1	<Vertex$VertexIter2: void <init>(Vertex)>
<Neighbor: void display()>/$r2	<Neighbor: void display()>	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$r6	<Main: void main(java.lang.String[])>	@Prog
<WorkSpace: void init_vertex(Vertex)>/@this	<WorkSpace: void init_vertex(Vertex)>	@SearchBase
<Graph: Graph prim(Vertex)>/$z11	<Graph: Graph prim(Vertex)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter1	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Vertex: void display()>/$r33	<Vertex: void display()>
<Vertex$EdgeIter1: boolean hasNext()>/@this	<Vertex$EdgeIter1: boolean hasNext()>	@EdgeObjects /\ G_NoEdges
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Edge: Vertex getOtherVertex(Vertex)>/vertex#_0	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Vertex: void display()>/$r54	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/$r5	<Graph: Graph prim(Vertex)>
<NumberWorkSpace: void preVisitAction(Vertex)>/v#_0	<NumberWorkSpace: void preVisitAction(Vertex)>
<Vertex: void adjustAdorns(Neighbor)>/@parameter0	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/$r0	<Graph: Graph prim(Vertex)>
<Vertex: void addEdge(Neighbor)>/@this	<Vertex: void addEdge(Neighbor)>	@GN_OnlyNeighbors
<WorkSpace: void nextRegionAction(Vertex)>/this#_0	<WorkSpace: void nextRegionAction(Vertex)>	@SearchBase
<Graph: void addEdge(Vertex,Neighbor)>/start#_0	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Graph: Graph strongComponents()>/FTWS#_324	<Graph: Graph strongComponents()>
<Main: void main(java.lang.String[])>/$r12	<Main: void main(java.lang.String[])>	@Prog
<CycleWorkSpace: void init_vertex(Vertex)>/$numconstant0	<CycleWorkSpace: void init_vertex(Vertex)>	@Cycle
<WorkSpace: void nextRegionAction(Vertex)>/v#_0	<WorkSpace: void nextRegionAction(Vertex)>	@SearchBase
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l0#_0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<RegionWorkSpace: void postVisitAction(Vertex)>/this#_0	<RegionWorkSpace: void postVisitAction(Vertex)>	@Connected
<RegionWorkSpace: void nextRegionAction(Vertex)>/$i1	<RegionWorkSpace: void nextRegionAction(Vertex)>	@Connected
<Graph: Graph kruskal()>/vaux_$$A_1#_449	<Graph: Graph kruskal()>
<VertexIter: void <init>(Graph)>/$r1	<VertexIter: void <init>(Graph)>
<Graph: void display()>/$r1	<Graph: void display()>
<Graph: Graph strongComponents()>/gaux#_334	<Graph: Graph strongComponents()>
<Graph: Graph kruskal()>/j_$$A_4#_460	<Graph: Graph kruskal()>
<Vertex$EdgeIter3: void <init>(Vertex)>/@parameter0	<Vertex$EdgeIter3: void <init>(Vertex)>
<WorkSpaceTranspose: void <init>()>/$numconstant0	<WorkSpaceTranspose: void <init>()>
<Vertex$VertexIter2: Vertex next()>/this#_0	<Vertex$VertexIter2: Vertex next()>	@GN_OnlyNeighbors
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i3	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Edge: void adjustAdorns(EdgeIfc)>/@parameter0	<Edge: void adjustAdorns(EdgeIfc)>	@EdgeObjects
<Vertex: void adjustAdorns(EdgeIfc)>/@this	<Vertex: void adjustAdorns(EdgeIfc)>	@G_NoEdges
<Vertex: void display()>/$r19	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/indx#_540	<Graph: Graph prim(Vertex)>
<Main: void main(java.lang.String[])>/num_vertices_$$A_1_$$A_2#_63	<Main: void main(java.lang.String[])>	@Prog
<CycleWorkSpace: void preVisitAction(Vertex)>/@parameter0	<CycleWorkSpace: void preVisitAction(Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>/$r0	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i1	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Vertex$VertexIter2: void <init>(Vertex)>/@parameter0	<Vertex$VertexIter2: void <init>(Vertex)>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@this	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<Vertex: void setWeight(int)>/this#_0	<Vertex: void setWeight(int)>	@Weighted /\ G_NoEdges
<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	<Graph$EdgeIter1: void <init>(Graph)>
<Vertex$EdgeIter2: boolean hasNext()>/$z0	<Vertex$EdgeIter2: boolean hasNext()>	@EdgeObjects /\ GN_OnlyNeighbors
<EdgeIter: boolean hasNext()>/@this	<EdgeIter: boolean hasNext()>
<Vertex: void display()>/$r0	<Vertex: void display()>
<Vertex: Vertex getOtherVertex(Vertex)>/@this	<Vertex: Vertex getOtherVertex(Vertex)>	@G_NoEdges
<Main: void main(java.lang.String[])>/$r13	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void display()>/$r39	<Vertex: void display()>
<Graph: void run(Vertex)>/$r2	<Graph: void run(Vertex)>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter1	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<Graph: void display()>/$r2	<Graph: void display()>
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l1#_0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<EdgeIter: EdgeIfc next()>/@this	<EdgeIter: EdgeIfc next()>
<Graph$Comparator2: void <init>(Graph)>/l1#_0	<Graph$Comparator2: void <init>(Graph)>
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_4#_591	<Graph: Graph prim(Vertex)>
<GlobalVarsWrapper: void <init>()>/this#_0	<GlobalVarsWrapper: void <init>()>
<Vertex: void display()>/$r23	<Vertex: void display()>
<Neighbor: void setWeight(int)>/this#_0	<Neighbor: void setWeight(int)>	@Weighted /\ GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$r0	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph prim(Vertex)>/vxiter_$$A_3#_611	<Graph: Graph prim(Vertex)>
<Vertex$VertexIter3: boolean hasNext()>/@this	<Vertex$VertexIter3: boolean hasNext()>	@GEN_Edges
<Main: void main(java.lang.String[])>/$r7	<Main: void main(java.lang.String[])>	@Prog
<Graph: boolean cycleCheck()>/$z0	<Graph: boolean cycleCheck()>	@Cycle
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i1	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Neighbor: void display()>/$r6	<Neighbor: void display()>	@GN_OnlyNeighbors
<Vertex$VertexIter2: Vertex next()>/$r2	<Vertex$VertexIter2: Vertex next()>	@GN_OnlyNeighbors
<Graph: Graph computeTranspose(Graph)>/$r0	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Neighbor: Vertex getEnd()>/@this	<Neighbor: Vertex getEnd()>	@GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/edgeiter#_580	<Graph: Graph prim(Vertex)>
<Vertex$EdgeIter2: EdgeIfc next()>/$r0	<Vertex$EdgeIter2: EdgeIfc next()>	@EdgeObjects /\ GN_OnlyNeighbors
<Vertex: void nodeSearch(WorkSpace)>/$r0	<Vertex: void nodeSearch(WorkSpace)>
<Graph$EdgeIter1: EdgeIfc next()>/this#_0	<Graph$EdgeIter1: EdgeIfc next()>	@EdgeObjects
<Graph: void endProfile()>/$l6	<Graph: void endProfile()>	@Benchmark
<Graph: Graph prim(Vertex)>/$r12	<Graph: Graph prim(Vertex)>
<Graph: void numberVertices()>/@this	<Graph: void numberVertices()>	@Number
<Graph: Graph prim(Vertex)>/$null2	<Graph: Graph prim(Vertex)>
<Main: EdgeIfc addEdge(Graph,int)>/$numconstant0	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Graph: Graph prim(Vertex)>/residue#_604	<Graph: Graph prim(Vertex)>
<RegionWorkSpace: void nextRegionAction(Vertex)>/v#_0	<RegionWorkSpace: void nextRegionAction(Vertex)>	@Connected
<Vertex$VertexIter1: boolean hasNext()>/this#_0	<Vertex$VertexIter1: boolean hasNext()>	@G_NoEdges
<Graph: void addEdge(Vertex,Neighbor)>/@this	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Neighbor: void <init>(Vertex,Edge)>/@this	<Neighbor: void <init>(Vertex,Edge)>
<Graph: Graph kruskal()>/$i0	<Graph: Graph kruskal()>
<Edge: Vertex getStart()>/$r0	<Edge: Vertex getStart()>	@EdgeObjects
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i5	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex: void nodeSearch(WorkSpace)>/v#_211	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: Vertex getEnd()>/this#_0	<Vertex: Vertex getEnd()>	@G_NoEdges
<Graph: Graph computeTranspose(Graph)>/$r3	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Vertex: void adjustAdorns(Neighbor)>/$i0	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<Vertex: void nodeSearch(WorkSpace)>/$z2	<Vertex: void nodeSearch(WorkSpace)>
<Vertex$VertexIter1: boolean hasNext()>/$z0	<Vertex$VertexIter1: boolean hasNext()>	@G_NoEdges
<Vertex: void nodeSearch(WorkSpace)>/v_$$A_2#_224	<Vertex: void nodeSearch(WorkSpace)>
<Graph: Graph kruskal()>/$z1	<Graph: Graph kruskal()>
<Vertex: void addWeight(int)>/$r1	<Vertex: void addWeight(int)>	@Weighted
<Vertex$VertexIter1: Vertex next()>/$r2	<Vertex$VertexIter1: Vertex next()>	@G_NoEdges
<Graph: void run(Vertex)>/$r1	<Graph: void run(Vertex)>
<Main: void main(java.lang.String[])>/$r2	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void addEdge(Neighbor)>/@parameter0	<Vertex: void addEdge(Neighbor)>	@GN_OnlyNeighbors
<Graph: void stopBenchmark()>/@this	<Graph: void stopBenchmark()>	@Benchmark
<Edge: Vertex getStart()>/this#_0	<Edge: Vertex getStart()>	@EdgeObjects
<Graph: void sortEdges(java.util.Comparator)>/c#_0	<Graph: void sortEdges(java.util.Comparator)>	@EdgeObjects
<Graph: Graph kruskal()>/i_$$A_2#_497	<Graph: Graph kruskal()>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Graph: Graph kruskal()>/$r11	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_1#_431	<Graph: Graph kruskal()>
<Neighbor: void display()>/this#_0	<Neighbor: void display()>	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$r9	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void display()>/$r34	<Vertex: void display()>
<Main: EdgeIfc addEdge(Graph,int)>/g#_0	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Edge: int getWeight()>/$i0	<Edge: int getWeight()>	@EdgeObjects /\ Weighted
<Neighbor: Vertex getStart()>/this#_0	<Neighbor: Vertex getStart()>	@GN_OnlyNeighbors
<Vertex: void adjustAdorns(Vertex,int)>/$r1	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Vertex: void display()>/$r22	<Vertex: void display()>
<Graph: void graphSearch(WorkSpace)>/v_$$A_2#_310	<Graph: void graphSearch(WorkSpace)>
<Graph$EdgeIter1: void <init>(Graph)>/this#_0	<Graph$EdgeIter1: void <init>(Graph)>
<Edge: void adjustAdorns(EdgeIfc)>/$i0	<Edge: void adjustAdorns(EdgeIfc)>	@EdgeObjects
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/$i0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Vertex: void display()>/$stringconstant9	<Vertex: void display()>
<Vertex: void display()>/v#_266	<Vertex: void display()>
<Graph: Graph kruskal()>/$r17	<Graph: Graph kruskal()>
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l2#_0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_2#_498	<Graph: Graph kruskal()>
<Main: void main(java.lang.String[])>/totalTime_$$A_1_$$A_1#_56	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph kruskal()>/$r29	<Graph: Graph kruskal()>
<Graph$EdgeIter1: EdgeIfc next()>/$r1	<Graph$EdgeIter1: EdgeIfc next()>	@EdgeObjects
<RegionWorkSpace: void postVisitAction(Vertex)>/$i0	<RegionWorkSpace: void postVisitAction(Vertex)>	@Connected
<NumberWorkSpace: void preVisitAction(Vertex)>/this#_0	<NumberWorkSpace: void preVisitAction(Vertex)>
<Edge: void adjustAdorns(EdgeIfc)>/@this	<Edge: void adjustAdorns(EdgeIfc)>	@EdgeObjects
<Vertex: void display()>/$r13	<Vertex: void display()>
<EdgeIter: boolean hasNext()>/this#_0	<EdgeIter: boolean hasNext()>
<Graph: void runBenchmark(java.lang.String)>/$r1	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Graph: Graph prim(Vertex)>/x_$$A_3#_546	<Graph: Graph prim(Vertex)>
<WorkSpace: void init_vertex(Vertex)>/this#_0	<WorkSpace: void init_vertex(Vertex)>	@SearchBase
<Vertex$VertexIter1: boolean hasNext()>/@this	<Vertex$VertexIter1: boolean hasNext()>	@G_NoEdges
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_1#_579	<Graph: Graph prim(Vertex)>
<Vertex: void display()>/$i2	<Vertex: void display()>
<Vertex: void display()>/$r49	<Vertex: void display()>
<Main: void main(java.lang.String[])>/num_vertices#_21	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void display()>/$r6	<Vertex: void display()>
<Vertex$VertexIter1: void <init>(Vertex)>/$r0	<Vertex$VertexIter1: void <init>(Vertex)>
<Graph: void stopBenchmark()>/$r0	<Graph: void stopBenchmark()>	@Benchmark
<Edge: void setWeight(int)>/weight#_0	<Edge: void setWeight(int)>	@EdgeObjects /\ Weighted
<Graph: void run(Vertex)>/$stringconstant0	<Graph: void run(Vertex)>
<Vertex: void nodeSearch(WorkSpace)>/v_$$A_1#_208	<Vertex: void nodeSearch(WorkSpace)>
<Graph: Graph kruskal()>/$i5	<Graph: Graph kruskal()>
<Vertex: void addWeight(int)>/$r2	<Vertex: void addWeight(int)>	@Weighted
<Graph: void addEdge(Vertex,Neighbor)>/end#_148	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Edge: void <init>(Vertex,Vertex,int)>/@this	<Edge: void <init>(Vertex,Vertex,int)>
<Graph: Graph prim(Vertex)>/$i3	<Graph: Graph prim(Vertex)>
<Vertex: Vertex assignName(java.lang.String)>/this#_0	<Vertex: Vertex assignName(java.lang.String)>
<Vertex: EdgeIter getEdges()>/$r0	<Vertex: EdgeIter getEdges()>	@EdgeObjects /\ G_NoEdges
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l0#_0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Main: void main(java.lang.String[])>/totalTime_$$A_2#_63	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_2#_581	<Graph: Graph prim(Vertex)>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$z0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@StronglyConnected
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Graph: Graph computeTranspose(Graph)>/$z2	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<Graph$EdgeIter1: EdgeIfc next()>/@this	<Graph$EdgeIter1: EdgeIfc next()>	@EdgeObjects
<Vertex$EdgeIter2: boolean hasNext()>/$r0	<Vertex$EdgeIter2: boolean hasNext()>	@EdgeObjects /\ GN_OnlyNeighbors
<VertexIter: Vertex next()>/$r2	<VertexIter: Vertex next()>
<Graph: void graphSearch(WorkSpace)>/v_$$A_1#_300	<Graph: void graphSearch(WorkSpace)>
<Graph: void numberVertices()>/this#_0	<Graph: void numberVertices()>	@Number
<Main: void main(java.lang.String[])>/$r19	<Main: void main(java.lang.String[])>	@Prog
<Main: EdgeIfc addEdge(Graph,int)>/$r1	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Graph: Graph prim(Vertex)>/$i1	<Graph: Graph prim(Vertex)>
<Vertex: Vertex getOtherVertex(Vertex)>/@parameter0	<Vertex: Vertex getOtherVertex(Vertex)>	@G_NoEdges
<Neighbor: void <init>(Vertex,int)>/@this	<Neighbor: void <init>(Vertex,int)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l2#_0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Graph: Graph kruskal()>/vaux_$$A_4#_461	<Graph: Graph kruskal()>
<Vertex: void addNeighbor(Neighbor)>/this#_0	<Vertex: void addNeighbor(Neighbor)>	@GEN_Edges
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Vertex: void addAdjacent(Vertex)>/@this	<Vertex: void addAdjacent(Vertex)>	@G_NoEdges
<Vertex: void display()>/$r53	<Vertex: void display()>
<Edge: void display()>/$i0	<Edge: void display()>	@EdgeObjects
<Graph: void graphSearch(WorkSpace)>/w#_0	<Graph: void graphSearch(WorkSpace)>
<Graph: void runBenchmark(java.lang.String)>/$r4	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Graph: Graph prim(Vertex)>/$r14	<Graph: Graph prim(Vertex)>
<Graph: void runBenchmark(java.lang.String)>/@this	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<CycleWorkSpace: void <init>()>/$numconstant1	<CycleWorkSpace: void <init>()>
<Graph$EdgeIter1: EdgeIfc next()>/$r2	<Graph$EdgeIter1: EdgeIfc next()>	@EdgeObjects
<Graph: Graph kruskal()>/$r3	<Graph: Graph kruskal()>
<Graph: void stopProfile()>/$l2	<Graph: void stopProfile()>	@Benchmark
<Graph: int readNumber()>/@this	<Graph: int readNumber()>	@Benchmark
<Vertex: void nodeSearch(WorkSpace)>/$numconstant0	<Vertex: void nodeSearch(WorkSpace)>
<Vertex$EdgeIter3: EdgeIfc next()>/this#_0	<Vertex$EdgeIter3: EdgeIfc next()>	@EdgeObjects /\ GEN_Edges
<Graph$EdgeIter1: boolean hasNext()>/this#_0	<Graph$EdgeIter1: boolean hasNext()>	@EdgeObjects
<WorkSpace: void postVisitAction(Vertex)>/@this	<WorkSpace: void postVisitAction(Vertex)>	@SearchBase
<Graph: void stopProfile()>/$l3	<Graph: void stopProfile()>	@Benchmark
<CycleWorkSpace: void preVisitAction(Vertex)>/this#_0	<CycleWorkSpace: void preVisitAction(Vertex)>
<Graph: int readNumber()>/$r0	<Graph: int readNumber()>	@Benchmark
<Main: void main(java.lang.String[])>/$r1	<Main: void main(java.lang.String[])>	@Prog
<Neighbor: void <init>(Vertex,Edge)>/@parameter1	<Neighbor: void <init>(Vertex,Edge)>
<Vertex: void display()>/$r7	<Vertex: void display()>
<Vertex: void adjustAdorns(Vertex,int)>/$r4	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Graph: void display()>/edgeiter#_173	<Graph: void display()>
<Graph: int readNumber()>/theString#_224	<Graph: int readNumber()>	@Benchmark
<Main: void main(java.lang.String[])>/$r8	<Main: void main(java.lang.String[])>	@Prog
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@this	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Graph: void graphSearch(WorkSpace)>/$z0	<Graph: void graphSearch(WorkSpace)>
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@StronglyConnected
<Main: EdgeIfc addEdge(Graph,int)>/$r2	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Graph: void runBenchmark(java.lang.String)>/FileName#_0	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Graph: Graph prim(Vertex)>/r#_0	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void postVisitAction(Vertex)>/@parameter0	<CycleWorkSpace: void postVisitAction(Vertex)>	@Cycle
<Main: void main(java.lang.String[])>/args#_0	<Main: void main(java.lang.String[])>	@Prog
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l0#_0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<Graph: Graph kruskal()>/v_$$A_1#_407	<Graph: Graph kruskal()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter1	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Graph: int readNumber()>/ch_$$A_1_$$A_3#_221	<Graph: int readNumber()>	@Benchmark
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/$i1	<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@StronglyConnected
<VertexIter: boolean hasNext()>/this#_0	<VertexIter: boolean hasNext()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l2#_0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<Vertex: void setWeight(int)>/$r0	<Vertex: void setWeight(int)>	@Weighted /\ G_NoEdges
<NumberWorkSpace: void preVisitAction(Vertex)>/@parameter0	<NumberWorkSpace: void preVisitAction(Vertex)>
<Graph: Vertex findsVertex(java.lang.String)>/this#_0	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Graph kruskal()>/$r28	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_2#_581	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/$z0	<Graph: Graph prim(Vertex)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l1#_0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Vertex: void display()>/$r18	<Vertex: void display()>
<Vertex$EdgeIter1: void <init>(Vertex)>/$r0	<Vertex$EdgeIter1: void <init>(Vertex)>
<EdgeIfc: void adjustAdorns(EdgeIfc)>/@this	<EdgeIfc: void adjustAdorns(EdgeIfc)>
<Vertex: void display()>/$stringconstant8	<Vertex: void display()>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter1	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<VertexIter: Vertex next()>/@this	<VertexIter: Vertex next()>
<Graph$EdgeIter1: void <init>(Graph)>/$r0	<Graph$EdgeIter1: void <init>(Graph)>
<Graph: Vertex findsVertex(java.lang.String)>/@parameter0	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Graph prim(Vertex)>/$numconstant2	<Graph: Graph prim(Vertex)>
<Vertex: void adjustAdorns(Neighbor)>/$r1	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<WorkSpace: void init_vertex(Vertex)>/@parameter0	<WorkSpace: void init_vertex(Vertex)>	@SearchBase
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Graph: Graph computeTranspose(Graph)>/theNeighbor#_377	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Vertex: Vertex assignName(java.lang.String)>/@parameter0	<Vertex: Vertex assignName(java.lang.String)>
<Main: void main(java.lang.String[])>/i#_34	<Main: void main(java.lang.String[])>	@Prog
<VertexIter: boolean hasNext()>/$r0	<VertexIter: boolean hasNext()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/this#_0	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_3#_587	<Graph: Graph prim(Vertex)>
<Graph: void run(Vertex)>/v#_0	<Graph: void run(Vertex)>
<Graph: int readNumber()>/$r2	<Graph: int readNumber()>	@Benchmark
<Main: void main(java.lang.String[])>/$r16	<Main: void main(java.lang.String[])>	@Prog
<Graph$Comparator3: void <init>(Graph)>/@parameter0	<Graph$Comparator3: void <init>(Graph)>
<Graph: Graph prim(Vertex)>/$r8	<Graph: Graph prim(Vertex)>
<Graph: void graphSearch(WorkSpace)>/$z2	<Graph: void graphSearch(WorkSpace)>
<Graph: Graph prim(Vertex)>/edgeiter_$$A_1#_635	<Graph: Graph prim(Vertex)>
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@parameter0	<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@StronglyConnected
<Graph: Graph prim(Vertex)>/$z13	<Graph: Graph prim(Vertex)>
<RegionWorkSpace: void <init>()>/this#_0	<RegionWorkSpace: void <init>()>
<Graph: Graph kruskal()>/v_$$A_3#_432	<Graph: Graph kruskal()>
<Vertex: void nodeSearch(WorkSpace)>/@parameter0	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void adjustAdorns(Vertex,int)>/@this	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Graph: void <init>()>/$r0	<Graph: void <init>()>
<Graph: Graph kruskal()>/$r12	<Graph: Graph kruskal()>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Edge: void display()>/$r11	<Edge: void display()>	@EdgeObjects
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@parameter0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@StronglyConnected
<Vertex: void addNeighbor(Neighbor)>/@parameter0	<Vertex: void addNeighbor(Neighbor)>	@GEN_Edges
<VertexIter: boolean hasNext()>/@this	<VertexIter: boolean hasNext()>
<Graph: Graph prim(Vertex)>/vtx_$$A_1#_634	<Graph: Graph prim(Vertex)>
<Vertex$VertexIter3: boolean hasNext()>/this#_0	<Vertex$VertexIter3: boolean hasNext()>	@GEN_Edges
<Neighbor: Vertex getEnd()>/$r0	<Neighbor: Vertex getEnd()>	@GN_OnlyNeighbors
<Graph$Comparator3: void <init>(Graph)>/this#_0	<Graph$Comparator3: void <init>(Graph)>
<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0	<Vertex: void adjustAdorns(EdgeIfc)>	@G_NoEdges
<EdgeIfc: Vertex getStart()>/@this	<EdgeIfc: Vertex getStart()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r4	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex: void adjustAdorns(Vertex,int)>/$r3	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@this	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@SearchBase
<Graph: Graph kruskal()>/vxiter_$$A_2#_471	<Graph: Graph kruskal()>
<Vertex$EdgeIter1: void <init>(Vertex)>/this#_0	<Vertex$EdgeIter1: void <init>(Vertex)>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/this#_0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@StronglyConnected
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@this	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Graph: Graph prim(Vertex)>/$r10	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex: void display()>/$i1	<Vertex: void display()>
<Vertex: void display()>/$r38	<Vertex: void display()>
<Edge: Vertex getOtherVertex(Vertex)>/$r3	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Vertex: void display()>/$r2	<Vertex: void display()>
<Vertex: void display()>/$r14	<Vertex: void display()>
<Vertex: void init_vertex(WorkSpace)>/@this	<Vertex: void init_vertex(WorkSpace)>	@SearchBase
<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0	<Vertex: void adjustAdorns(EdgeIfc)>	@G_NoEdges
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph: void runBenchmark(java.lang.String)>/e#_197	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Neighbor: void <init>(Vertex,int)>/@parameter1	<Neighbor: void <init>(Vertex,int)>
<Vertex: void display()>/$r5	<Vertex: void display()>
<Main: void main(java.lang.String[])>/i_$$A_1#_43	<Main: void main(java.lang.String[])>	@Prog
<Graph: void graphSearch(WorkSpace)>/vxiter#_293	<Graph: void graphSearch(WorkSpace)>
<Vertex: Vertex getOtherVertex(Vertex)>/this#_0	<Vertex: Vertex getOtherVertex(Vertex)>	@G_NoEdges
<Vertex: void display()>/$r59	<Vertex: void display()>
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/$i0	<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@StronglyConnected
<Vertex: void display()>/$r21	<Vertex: void display()>
<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0	<RegionWorkSpace: void nextRegionAction(Vertex)>	@Connected
<Vertex: void nodeSearch(WorkSpace)>/this#_0	<Vertex: void nodeSearch(WorkSpace)>
<Graph: int readNumber()>/this#_0	<Graph: int readNumber()>	@Benchmark
<Graph: Graph computeTranspose(Graph)>/the_graph#_0	<Graph: Graph computeTranspose(Graph)>	@Transpose
<NumberWorkSpace: void <init>()>/@this	<NumberWorkSpace: void <init>()>
<Vertex: void adjustAdorns(Neighbor)>/$r2	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<Vertex: void addWeight(int)>/$r0	<Vertex: void addWeight(int)>	@Weighted
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i0	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/$i0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@StronglyConnected
<Vertex: void display()>/$r35	<Vertex: void display()>
<Vertex: int getWeight()>/$numconstant0	<Vertex: int getWeight()>	@G_NoEdges
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Graph: void display()>/this#_0	<Graph: void display()>
<Vertex: void <init>()>/$r1	<Vertex: void <init>()>
<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_3#_500	<Graph: Graph kruskal()>
<Neighbor: void <init>(Vertex,int)>/@parameter0	<Neighbor: void <init>(Vertex,int)>
<Graph$Comparator1: void <init>(Graph)>/this#_0	<Graph$Comparator1: void <init>(Graph)>
<Neighbor: int getWeight()>/$i0	<Neighbor: int getWeight()>	@Weighted /\ GN_OnlyNeighbors
<Graph: void runBenchmark(java.lang.String)>/$r2	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Vertex: void display()>/$i4	<Vertex: void display()>
<Vertex: void display()>/$r45	<Vertex: void display()>
<Graph$Comparator2: void <init>(Graph)>/@this	<Graph$Comparator2: void <init>(Graph)>
<Vertex: java.lang.String getName()>/$r0	<Vertex: java.lang.String getName()>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$numconstant0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex$EdgeIter2: EdgeIfc next()>/this#_0	<Vertex$EdgeIter2: EdgeIfc next()>	@EdgeObjects /\ GN_OnlyNeighbors
<Edge: void display()>/$r12	<Edge: void display()>	@EdgeObjects
<Graph$Comparator3: void <init>(Graph)>/@this	<Graph$Comparator3: void <init>(Graph)>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l1#_0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Vertex$VertexIter3: void <init>(Vertex)>/this#_0	<Vertex$VertexIter3: void <init>(Vertex)>
<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305	<Graph: void graphSearch(WorkSpace)>
<Vertex: void setWeight(int)>/weight#_0	<Vertex: void setWeight(int)>	@Weighted /\ G_NoEdges
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633	<Graph: Graph prim(Vertex)>
<Graph: void run(Vertex)>/$z0	<Graph: void run(Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>/$r2	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Graph: Graph prim(Vertex)>/root#_522	<Graph: Graph prim(Vertex)>
<RegionWorkSpace: void init_vertex(Vertex)>/@this	<RegionWorkSpace: void init_vertex(Vertex)>	@Connected
<Neighbor: void <init>(Vertex,Edge)>/v#_0	<Neighbor: void <init>(Vertex,Edge)>
<Vertex: void nodeSearch(WorkSpace)>/header#_230	<Vertex: void nodeSearch(WorkSpace)>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Graph: Graph prim(Vertex)>/$r2	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545	<Graph: Graph prim(Vertex)>
<NumberWorkSpace: void <init>()>/$numconstant0	<NumberWorkSpace: void <init>()>
<Graph: Graph kruskal()>/$z9	<Graph: Graph kruskal()>
<Neighbor: void setWeight(int)>/weight#_0	<Neighbor: void setWeight(int)>	@Weighted /\ GN_OnlyNeighbors
<Main: void readWeights(Graph,int)>/g#_0	<Main: void readWeights(Graph,int)>	@Prog
<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	<Graph$EdgeIter1: void <init>(Graph)>
<Graph: Graph kruskal()>/v_$$A_4#_498	<Graph: Graph kruskal()>
<Vertex: void display()>/$stringconstant3	<Vertex: void display()>
<Graph: void stopBenchmark()>/this#_0	<Graph: void stopBenchmark()>	@Benchmark
<Neighbor: int getWeight()>/@this	<Neighbor: int getWeight()>	@Weighted /\ GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$stringconstant0	<Main: void main(java.lang.String[])>	@Prog
<Vertex$VertexIter3: Vertex next()>/this#_0	<Vertex$VertexIter3: Vertex next()>	@GEN_Edges
<Graph: void sortEdges(java.util.Comparator)>/this#_0	<Graph: void sortEdges(java.util.Comparator)>	@EdgeObjects
<WorkSpaceTranspose: void preVisitAction(Vertex)>/@this	<WorkSpaceTranspose: void preVisitAction(Vertex)>	@StronglyConnected
<Graph: void sortEdges(java.util.Comparator)>/$r0	<Graph: void sortEdges(java.util.Comparator)>	@EdgeObjects
<Graph: Graph kruskal()>/v#_410	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/x#_530	<Graph: Graph prim(Vertex)>
<VertexIter: Vertex next()>/$r0	<VertexIter: Vertex next()>
<Graph: boolean cycleCheck()>/$r0	<Graph: boolean cycleCheck()>	@Cycle
<Vertex: void display()>/$r27	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/wuv#_592	<Graph: Graph prim(Vertex)>
<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Vertex$EdgeIter1: void <init>(Vertex)>/l1#_0	<Vertex$EdgeIter1: void <init>(Vertex)>
<Vertex: void setWeight(int)>/$r2	<Vertex: void setWeight(int)>	@Weighted /\ G_NoEdges
<Vertex: void display()>/$r11	<Vertex: void display()>
<VertexIter: void <init>(Graph)>/g#_0	<VertexIter: void <init>(Graph)>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/$i0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l2#_0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@this	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Vertex: void adjustAdorns(Vertex,int)>/index#_0	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Vertex: void nodeSearch(WorkSpace)>/$z4	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void display()>/$stringconstant10	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/theNewEdge#_663	<Graph: Graph prim(Vertex)>
<Graph: Vertex findsVertex(java.lang.String)>/theVertex#_162	<Graph: Vertex findsVertex(java.lang.String)>
<Vertex: void nodeSearch(WorkSpace)>/$z0	<Vertex: void nodeSearch(WorkSpace)>
<Graph: boolean cycleCheck()>/c#_393	<Graph: boolean cycleCheck()>	@Cycle
<Main: void main(java.lang.String[])>/beginning#_13	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph kruskal()>/vrep#_441	<Graph: Graph kruskal()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter0	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Graph: int readNumber()>/$numconstant0	<Graph: int readNumber()>	@Benchmark
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/$r1	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Graph: void runBenchmark(java.lang.String)>/$r3	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@SearchBase
<Neighbor: void <init>()>/this#_0	<Neighbor: void <init>()>
<Graph: void run(Vertex)>/gaux2#_271	<Graph: void run(Vertex)>
<Main: void main(java.lang.String[])>/totalTime_$$A_1#_75	<Main: void main(java.lang.String[])>	@Prog
<WorkSpaceTranspose: void preVisitAction(Vertex)>/$i0	<WorkSpaceTranspose: void preVisitAction(Vertex)>	@StronglyConnected
<NumberWorkSpace: void preVisitAction(Vertex)>/$i0	<NumberWorkSpace: void preVisitAction(Vertex)>
<Graph: Graph strongComponents()>/$r2	<Graph: Graph strongComponents()>
<Vertex: void display()>/$r8	<Vertex: void display()>
<Graph: void addEdge(Vertex,Neighbor)>/@parameter1	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Graph: void <init>()>/$r1	<Graph: void <init>()>
<Graph: Graph kruskal()>/$r21	<Graph: Graph kruskal()>
<Edge: void <init>(Vertex,Vertex,int)>/this#_0	<Edge: void <init>(Vertex,Vertex,int)>
<Vertex: Vertex getEnd()>/@this	<Vertex: Vertex getEnd()>	@G_NoEdges
<FinishTimeWorkSpace: void <init>()>/@this	<FinishTimeWorkSpace: void <init>()>
<Graph: Graph kruskal()>/$r23	<Graph: Graph kruskal()>
<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@Prog
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/$i0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Neighbor: Vertex getEnd()>/this#_0	<Neighbor: Vertex getEnd()>	@GN_OnlyNeighbors
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter1	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Edge: void <init>(Vertex,Vertex,int)>/aweight#_0	<Edge: void <init>(Vertex,Vertex,int)>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l1#_0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Graph: void display()>/$stringconstant0	<Graph: void display()>
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/v#_0	<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@StronglyConnected
<Edge: void setWeight(int)>/@parameter0	<Edge: void setWeight(int)>	@EdgeObjects /\ Weighted
<Vertex$EdgeIter2: void <init>(Vertex)>/$r0	<Vertex$EdgeIter2: void <init>(Vertex)>
<Graph: Graph prim(Vertex)>/x_$$A_1#_527	<Graph: Graph prim(Vertex)>
<Graph: Graph kruskal()>/$r13	<Graph: Graph kruskal()>
<CycleWorkSpace: void preVisitAction(Vertex)>/$i1	<CycleWorkSpace: void preVisitAction(Vertex)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/this#_0	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/u#_573	<Graph: Graph prim(Vertex)>
<Graph: Graph computeTranspose(Graph)>/$z1	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: Graph computeTranspose(Graph)>/$r2	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Main: void main(java.lang.String[])>/$l5	<Main: void main(java.lang.String[])>	@Prog
<Main: EdgeIfc addEdge(Graph,int)>/$r0	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Edge: Vertex getOtherVertex(Vertex)>/@this	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Vertex: void display()>/$z0	<Vertex: void display()>
<EdgeIfc: Vertex getOtherVertex(Vertex)>/@parameter0	<EdgeIfc: Vertex getOtherVertex(Vertex)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant1	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: void display()>/$z0	<Graph: void display()>
<Edge: void display()>/$r9	<Edge: void display()>	@EdgeObjects
<Main: void main(java.lang.String[])>/$r17	<Main: void main(java.lang.String[])>	@Prog
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter2	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Graph: Graph kruskal()>/A#_401	<Graph: Graph kruskal()>
<Graph: void run(Vertex)>/gaux#_259	<Graph: void run(Vertex)>
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_6#_67	<Main: void main(java.lang.String[])>	@Prog
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/$r1	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Neighbor: void <init>(Vertex,int)>/aweight#_0	<Neighbor: void <init>(Vertex,int)>
<Graph: void run(Vertex)>/@parameter0	<Graph: void run(Vertex)>
<Vertex: EdgeIter getEdges()>/@this	<Vertex: EdgeIter getEdges()>	@EdgeObjects /\ G_NoEdges
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$i0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@StronglyConnected
<Vertex: void <init>()>/$r2	<Vertex: void <init>()>
<Graph: Graph prim(Vertex)>/$z6	<Graph: Graph prim(Vertex)>
<Graph: VertexIter getVertices()>/@this	<Graph: VertexIter getVertices()>
<CycleWorkSpace: void postVisitAction(Vertex)>/$i0	<CycleWorkSpace: void postVisitAction(Vertex)>	@Cycle
<Neighbor: void setWeight(int)>/@this	<Neighbor: void setWeight(int)>	@Weighted /\ GN_OnlyNeighbors
<Vertex: void display()>/$stringconstant1	<Vertex: void display()>
<Vertex$EdgeIter1: void <init>(Vertex)>/@this	<Vertex$EdgeIter1: void <init>(Vertex)>
<Vertex$VertexIter3: boolean hasNext()>/$z0	<Vertex$VertexIter3: boolean hasNext()>	@GEN_Edges
<Graph: Graph kruskal()>/e1_$$A_1#_481	<Graph: Graph kruskal()>
<Graph: Vertex findsVertex(java.lang.String)>/name#_0	<Graph: Vertex findsVertex(java.lang.String)>
<Vertex: void nodeSearch(WorkSpace)>/w#_0	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void adjustAdorns(Neighbor)>/sourceNeighbor#_0	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<Vertex: java.util.LinkedList getNeighborsObj()>/this#_0	<Vertex: java.util.LinkedList getNeighborsObj()>	@GN_OnlyNeighbors
<Graph: Graph kruskal()>/$r9	<Graph: Graph kruskal()>
<Vertex$EdgeIter2: EdgeIfc next()>/@this	<Vertex$EdgeIter2: EdgeIfc next()>	@EdgeObjects /\ GN_OnlyNeighbors
<Graph: void display()>/edgeiter_$$A_1_$$A_1#_174	<Graph: void display()>
<CycleWorkSpace: void postVisitAction(Vertex)>/$i1	<CycleWorkSpace: void postVisitAction(Vertex)>	@Cycle
<Graph$EdgeIter1: EdgeIfc next()>/$r0	<Graph$EdgeIter1: EdgeIfc next()>	@EdgeObjects
<Graph: void graphSearch(WorkSpace)>/v#_302	<Graph: void graphSearch(WorkSpace)>
<Vertex: void nodeSearch(WorkSpace)>/$r3	<Vertex: void nodeSearch(WorkSpace)>
<Graph: Graph prim(Vertex)>/en#_582	<Graph: Graph prim(Vertex)>
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_7#_68	<Main: void main(java.lang.String[])>	@Prog
<Graph: void sortVertices(java.util.Comparator)>/this#_0	<Graph: void sortVertices(java.util.Comparator)>
<Neighbor: void adjustAdorns(EdgeIfc)>/@this	<Neighbor: void adjustAdorns(EdgeIfc)>	@GN_OnlyNeighbors
<Graph: void display()>/$r0	<Graph: void display()>
<Graph: Graph kruskal()>/$r4	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/i#_497	<Graph: Graph kruskal()>
<Main: void main(java.lang.String[])>/$i3	<Main: void main(java.lang.String[])>	@Prog
<Neighbor: void adjustAdorns(EdgeIfc)>/this#_0	<Neighbor: void adjustAdorns(EdgeIfc)>	@GN_OnlyNeighbors
<Graph: void <clinit>()>/$numconstant0	<Graph: void <clinit>()>
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@SearchBase
<Graph: Graph kruskal()>/j_$$A_1_$$A_1#_448	<Graph: Graph kruskal()>
<RegionWorkSpace: void postVisitAction(Vertex)>/@this	<RegionWorkSpace: void postVisitAction(Vertex)>	@Connected
<Vertex: java.lang.String getName()>/@this	<Vertex: java.lang.String getName()>
<Vertex: void display()>/$r40	<Vertex: void display()>
<Graph: Graph kruskal()>/$r1	<Graph: Graph kruskal()>
<Vertex: void addWeight(int)>/@parameter0	<Vertex: void addWeight(int)>	@Weighted
<Graph: Graph prim(Vertex)>/$z10	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i6	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex: void display()>/$r43	<Vertex: void display()>
<WorkSpace: void <init>()>/@this	<WorkSpace: void <init>()>
<Neighbor: void <init>(Vertex,Edge)>/e#_0	<Neighbor: void <init>(Vertex,Edge)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i3	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	<Graph: java.util.LinkedList access$0(Graph)>
<RegionWorkSpace: void postVisitAction(Vertex)>/v#_0	<RegionWorkSpace: void postVisitAction(Vertex)>	@Connected
<Graph: void display()>/$stringconstant1	<Graph: void display()>
<Graph: Graph kruskal()>/$i3	<Graph: Graph kruskal()>
<Vertex$VertexIter2: Vertex next()>/$r0	<Vertex$VertexIter2: Vertex next()>	@GN_OnlyNeighbors
<CycleWorkSpace: void postVisitAction(Vertex)>/$numconstant0	<CycleWorkSpace: void postVisitAction(Vertex)>	@Cycle
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_1#_45	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void display()>/$i7	<Vertex: void display()>
<WorkSpace: void postVisitAction(Vertex)>/this#_0	<WorkSpace: void postVisitAction(Vertex)>	@SearchBase
<Vertex: void addWeight(int)>/this#_0	<Vertex: void addWeight(int)>	@Weighted
<Main: EdgeIfc addEdge(Graph,int)>/@parameter0	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<WorkSpaceTranspose: void <init>()>/@this	<WorkSpaceTranspose: void <init>()>
<Vertex: void display()>/$r56	<Vertex: void display()>
<Graph: void endProfile()>/$stringconstant0	<Graph: void endProfile()>	@Benchmark
<Edge: void adjustAdorns(EdgeIfc)>/the_edge#_0	<Edge: void adjustAdorns(EdgeIfc)>	@EdgeObjects
<Vertex: void display()>/$r32	<Vertex: void display()>
<Graph: Graph kruskal()>/j_$$A_5#_461	<Graph: Graph kruskal()>
<Graph: void display()>/@this	<Graph: void display()>
<CycleWorkSpace: void <init>()>/$numconstant0	<CycleWorkSpace: void <init>()>
<Edge: void <init>(Vertex,Vertex,int)>/the_end#_0	<Edge: void <init>(Vertex,Vertex,int)>
<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218	<Vertex: void nodeSearch(WorkSpace)>
<Edge: Vertex getEnd()>/this#_0	<Edge: Vertex getEnd()>	@EdgeObjects
<Graph: int readNumber()>/ch_$$A_1_$$A_4#_220	<Graph: int readNumber()>	@Benchmark
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph$EdgeIter1: boolean hasNext()>/$z0	<Graph$EdgeIter1: boolean hasNext()>	@EdgeObjects
<Graph: Graph kruskal()>/j_$$A_6#_460	<Graph: Graph kruskal()>
<Vertex$EdgeIter1: boolean hasNext()>/$z0	<Vertex$EdgeIter1: boolean hasNext()>	@EdgeObjects /\ G_NoEdges
<RegionWorkSpace: void nextRegionAction(Vertex)>/@this	<RegionWorkSpace: void nextRegionAction(Vertex)>	@Connected
<Main: void main(java.lang.String[])>/$r14	<Main: void main(java.lang.String[])>	@Prog
<VertexIter: void <init>(Graph)>/this#_0	<VertexIter: void <init>(Graph)>
<Vertex: void display()>/$r24	<Vertex: void display()>
<Vertex: void display()>/$r48	<Vertex: void display()>
<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	<Graph: java.util.LinkedList access$0(Graph)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r6	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex: void addEdge(Neighbor)>/this#_0	<Vertex: void addEdge(Neighbor)>	@GN_OnlyNeighbors
<Vertex$EdgeIter3: void <init>(Vertex)>/@this	<Vertex$EdgeIter3: void <init>(Vertex)>
<Vertex$VertexIter3: Vertex next()>/$r3	<Vertex$VertexIter3: Vertex next()>	@GEN_Edges
<Graph: Graph computeTranspose(Graph)>/theName#_354	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Main: void main(java.lang.String[])>/@parameter0	<Main: void main(java.lang.String[])>	@Prog
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i3	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Main: void readWeights(Graph,int)>/@parameter0	<Main: void readWeights(Graph,int)>	@Prog
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/$r0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Graph: Graph kruskal()>/$r26	<Graph: Graph kruskal()>
<Edge: void adjustAdorns(EdgeIfc)>/this#_0	<Edge: void adjustAdorns(EdgeIfc)>	@EdgeObjects
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/this#_0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r2	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Main: void main(java.lang.String[])>/$r3	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph kruskal()>/$r18	<Graph: Graph kruskal()>
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l0#_0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Vertex: void display()>/$r16	<Vertex: void display()>
<VertexIter: void <init>()>/this#_0	<VertexIter: void <init>()>
<Vertex: void display()>/vxiter_$$A_1_$$A_1#_260	<Vertex: void display()>
<Graph: void resumeProfile()>/$l0	<Graph: void resumeProfile()>	@Benchmark
<Graph: VertexIter getVertices()>/this#_0	<Graph: VertexIter getVertices()>
<Graph: int readNumber()>/$i0	<Graph: int readNumber()>	@Benchmark
<Vertex: VertexIter getNeighbors()>/@this	<Vertex: VertexIter getNeighbors()>	@G_NoEdges
<Edge: void display()>/$r10	<Edge: void display()>	@EdgeObjects
<Neighbor: void <init>(Vertex,Edge)>/@parameter0	<Neighbor: void <init>(Vertex,Edge)>
<Graph: int readNumber()>/$r1	<Graph: int readNumber()>	@Benchmark
<Graph: Graph computeTranspose(Graph)>/v#_358	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: void connectedComponents()>/this#_0	<Graph: void connectedComponents()>	@Connected
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter1	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<WorkSpace: void preVisitAction(Vertex)>/this#_0	<WorkSpace: void preVisitAction(Vertex)>	@SearchBase
<Graph: void graphSearch(WorkSpace)>/$z1	<Graph: void graphSearch(WorkSpace)>
<Graph: Graph kruskal()>/$r10	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/vxiter#_526	<Graph: Graph prim(Vertex)>
<RegionWorkSpace: void init_vertex(Vertex)>/$numconstant0	<RegionWorkSpace: void init_vertex(Vertex)>	@Connected
<Vertex$VertexIter3: void <init>(Vertex)>/l1#_0	<Vertex$VertexIter3: void <init>(Vertex)>
<Vertex: void init_vertex(WorkSpace)>/w#_0	<Vertex: void init_vertex(WorkSpace)>	@SearchBase
<Main: void main(java.lang.String[])>/totalTime_$$A_3#_64	<Main: void main(java.lang.String[])>	@Prog
<Vertex$EdgeIter3: EdgeIfc next()>/$r1	<Vertex$EdgeIter3: EdgeIfc next()>	@EdgeObjects /\ GEN_Edges
<EdgeIfc: void adjustAdorns(EdgeIfc)>/@parameter0	<EdgeIfc: void adjustAdorns(EdgeIfc)>
<Vertex: VertexIter getNeighbors()>/$null0	<Vertex: VertexIter getNeighbors()>	@G_NoEdges
<Graph: Graph prim(Vertex)>/$r17	<Graph: Graph prim(Vertex)>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@this	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Edge: void display()>/$r0	<Edge: void display()>	@EdgeObjects
<Vertex$VertexIter2: void <init>(Vertex)>/this#_0	<Vertex$VertexIter2: void <init>(Vertex)>
<Vertex: void display()>/$stringconstant6	<Vertex: void display()>
<Graph: void runBenchmark(java.lang.String)>/@parameter0	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Graph: Graph prim(Vertex)>/$i2	<Graph: Graph prim(Vertex)>
<WorkSpace: void nextRegionAction(Vertex)>/@parameter0	<WorkSpace: void nextRegionAction(Vertex)>	@SearchBase
<Vertex: Vertex getOtherVertex(Vertex)>/vertex#_0	<Vertex: Vertex getOtherVertex(Vertex)>	@G_NoEdges
<Vertex: void display()>/$stringconstant5	<Vertex: void display()>
<Graph: void display()>/edgeiter_$$A_1#_177	<Graph: void display()>
<Graph: void stopProfile()>/$l5	<Graph: void stopProfile()>	@Benchmark
<Graph: void addEdge(Vertex,Neighbor)>/@parameter0	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Edge: void display()>/$r2	<Edge: void display()>	@EdgeObjects
<Main: void main(java.lang.String[])>/$r20	<Main: void main(java.lang.String[])>	@Prog
<Graph: VertexIter getVertices()>/$r0	<Graph: VertexIter getVertices()>
<Graph: Graph computeTranspose(Graph)>/v_$$A_4#_381	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: void endProfile()>/$r1	<Graph: void endProfile()>	@Benchmark
<GlobalVarsWrapper: void <clinit>()>/$r0	<GlobalVarsWrapper: void <clinit>()>	@BFS
<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: void display()>/$stringconstant3	<Graph: void display()>
<Vertex: void display()>/$r26	<Vertex: void display()>
<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	<Vertex: void adjustAdorns(EdgeIfc)>	@G_NoEdges
<Neighbor: void display()>/$r5	<Neighbor: void display()>	@GN_OnlyNeighbors
<RegionWorkSpace: void <init>()>/$numconstant0	<RegionWorkSpace: void <init>()>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/weight#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Vertex: java.util.LinkedList getNeighborsObj()>/@this	<Vertex: java.util.LinkedList getNeighborsObj()>	@GN_OnlyNeighbors
<Neighbor: void setWeight(int)>/@parameter0	<Neighbor: void setWeight(int)>	@Weighted /\ GN_OnlyNeighbors
<Graph: int readNumber()>/word#_208	<Graph: int readNumber()>	@Benchmark
<Graph: Graph prim(Vertex)>/@parameter0	<Graph: Graph prim(Vertex)>
<WorkSpaceTranspose: void preVisitAction(Vertex)>/@parameter0	<WorkSpaceTranspose: void preVisitAction(Vertex)>	@StronglyConnected
<Graph: Vertex findsVertex(java.lang.String)>/$null0	<Graph: Vertex findsVertex(java.lang.String)>
<Neighbor: void <init>(Vertex,Edge)>/this#_0	<Neighbor: void <init>(Vertex,Edge)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$null0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph: EdgeIter getEdges()>/$r0	<Graph: EdgeIter getEdges()>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/$r0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Graph: EdgeIter getEdges()>/this#_0	<Graph: EdgeIter getEdges()>
<Vertex$EdgeIter1: void <init>(Vertex)>/@parameter0	<Vertex$EdgeIter1: void <init>(Vertex)>
<Graph: void <clinit>()>/$numconstant2	<Graph: void <clinit>()>
<Graph: Graph computeTranspose(Graph)>/neighbors#_374	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Vertex$EdgeIter3: boolean hasNext()>/$r0	<Vertex$EdgeIter3: boolean hasNext()>	@EdgeObjects /\ GEN_Edges
<RegionWorkSpace: void init_vertex(Vertex)>/this#_0	<RegionWorkSpace: void init_vertex(Vertex)>	@Connected
<Vertex$VertexIter3: void <init>(Vertex)>/@this	<Vertex$VertexIter3: void <init>(Vertex)>
<Graph: Graph prim(Vertex)>/isNeighborInQueue#_565	<Graph: Graph prim(Vertex)>
<Main: void main(java.lang.String[])>/$r22	<Main: void main(java.lang.String[])>	@Prog
<Vertex$VertexIter2: Vertex next()>/$r3	<Vertex$VertexIter2: Vertex next()>	@GN_OnlyNeighbors
<Vertex: void addAdjacent(Vertex)>/n#_0	<Vertex: void addAdjacent(Vertex)>	@G_NoEdges
<Vertex: void display()>/$i6	<Vertex: void display()>
<Vertex: void display()>/$r47	<Vertex: void display()>
<Graph: void startProfile()>/$l0	<Graph: void startProfile()>	@Benchmark
<Graph: void endProfile()>/$l4	<Graph: void endProfile()>	@Benchmark
<RegionWorkSpace: void init_vertex(Vertex)>/v#_0	<RegionWorkSpace: void init_vertex(Vertex)>	@Connected
<Vertex$EdgeIter2: void <init>(Vertex)>/$r1	<Vertex$EdgeIter2: void <init>(Vertex)>
<EdgeIfc: Vertex getOtherVertex(Vertex)>/@this	<EdgeIfc: Vertex getOtherVertex(Vertex)>
<Edge: void display()>/$r4	<Edge: void display()>	@EdgeObjects
<Graph: void connectedComponents()>/$r0	<Graph: void connectedComponents()>	@Connected
<Vertex: void display()>/$r57	<Vertex: void display()>
<Main: EdgeIfc addEdge(Graph,int)>/$r3	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Vertex$EdgeIter3: void <init>(Vertex)>/this#_0	<Vertex$EdgeIter3: void <init>(Vertex)>
<Graph: Graph strongComponents()>/$r1	<Graph: Graph strongComponents()>
<Graph: Graph computeTranspose(Graph)>/newvxiter#_366	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Edge: void display()>/$r3	<Edge: void display()>	@EdgeObjects
<Graph: Graph kruskal()>/theNewEnd#_505	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/v#_584	<Graph: Graph prim(Vertex)>
<Graph: Graph kruskal()>/j#_471	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/$z11	<Graph: Graph kruskal()>
<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1#_370	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Main: void main(java.lang.String[])>/$r21	<Main: void main(java.lang.String[])>	@Prog
<Graph: void display()>/edgeiter_$$A_2#_173	<Graph: void display()>
<Vertex: void display()>/$r51	<Vertex: void display()>
<Graph: void display()>/$r6	<Graph: void display()>
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@this	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph: Graph kruskal()>/$r0	<Graph: Graph kruskal()>
<Graph: void startProfile()>/$numconstant0	<Graph: void startProfile()>	@Benchmark
<Neighbor: void display()>/$r3	<Neighbor: void display()>	@GN_OnlyNeighbors
<Vertex: void display()>/$r30	<Vertex: void display()>
<VertexIter: Vertex next()>/this#_0	<VertexIter: Vertex next()>
<Vertex$VertexIter1: void <init>(Vertex)>/this#_0	<Vertex$VertexIter1: void <init>(Vertex)>
<Graph: Graph strongComponents()>/WST#_337	<Graph: Graph strongComponents()>
<Graph: Vertex findsVertex(java.lang.String)>/$z0	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z1	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex: void nodeSearch(WorkSpace)>/v_$$A_3#_219	<Vertex: void nodeSearch(WorkSpace)>
<Graph: Graph kruskal()>/$r15	<Graph: Graph kruskal()>
<Vertex: void adjustAdorns(Neighbor)>/@this	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<Graph: Graph kruskal()>/@this	<Graph: Graph kruskal()>
<Vertex: void <init>()>/$null0	<Vertex: void <init>()>
<WorkSpaceTranspose: void preVisitAction(Vertex)>/this#_0	<WorkSpaceTranspose: void preVisitAction(Vertex)>	@StronglyConnected
<Vertex: void nodeSearch(WorkSpace)>/$r4	<Vertex: void nodeSearch(WorkSpace)>
<CycleWorkSpace: void init_vertex(Vertex)>/v#_0	<CycleWorkSpace: void init_vertex(Vertex)>	@Cycle
<Neighbor: void display()>/$r1	<Neighbor: void display()>	@GN_OnlyNeighbors
<Vertex$VertexIter3: Vertex next()>/$r0	<Vertex$VertexIter3: Vertex next()>	@GEN_Edges
<Vertex$VertexIter1: Vertex next()>/this#_0	<Vertex$VertexIter1: Vertex next()>	@G_NoEdges
<Vertex: void nodeSearch(WorkSpace)>/$z1	<Vertex: void nodeSearch(WorkSpace)>
<Edge: void <init>(Vertex,Vertex,int)>/@parameter2	<Edge: void <init>(Vertex,Vertex,int)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theEdge#_280	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex$VertexIter3: Vertex next()>/$r1	<Vertex$VertexIter3: Vertex next()>	@GEN_Edges
<Graph: void sortEdges(java.util.Comparator)>/@parameter0	<Graph: void sortEdges(java.util.Comparator)>	@EdgeObjects
<Main: void main(java.lang.String[])>/$r24	<Main: void main(java.lang.String[])>	@Prog
<Neighbor: Vertex getStart()>/@this	<Neighbor: Vertex getStart()>	@GN_OnlyNeighbors
<Vertex: void addNeighbor(Neighbor)>/$r0	<Vertex: void addNeighbor(Neighbor)>	@GEN_Edges
<EdgeIfc: Vertex getEnd()>/@this	<EdgeIfc: Vertex getEnd()>
<Graph: void display()>/$r7	<Graph: void display()>
<Graph: void run(Vertex)>/this#_0	<Graph: void run(Vertex)>
<Graph$Comparator3: void <init>(Graph)>/l1#_0	<Graph$Comparator3: void <init>(Graph)>
<Neighbor: Vertex getOtherVertex(Vertex)>/@parameter0	<Neighbor: Vertex getOtherVertex(Vertex)>	@GN_OnlyNeighbors
<Vertex$EdgeIter2: EdgeIfc next()>/$r2	<Vertex$EdgeIter2: EdgeIfc next()>	@EdgeObjects /\ GN_OnlyNeighbors
<Graph: Graph kruskal()>/v_$$A_5#_501	<Graph: Graph kruskal()>
<Vertex: void display()>/$r4	<Vertex: void display()>
<Vertex: void display()>/$r15	<Vertex: void display()>
<Graph: void runBenchmark(java.lang.String)>/$r0	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i2	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l2#_0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Vertex: void adjustAdorns(Vertex,int)>/$r0	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Graph: Graph prim(Vertex)>/$r13	<Graph: Graph prim(Vertex)>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l2#_0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Graph$Comparator1: void <init>(Graph)>/l1#_0	<Graph$Comparator1: void <init>(Graph)>
<Main: void main(java.lang.String[])>/totalTime#_55	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void adjustAdorns(Neighbor)>/this#_0	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<Graph: void addVertex(Vertex)>/$r0	<Graph: void addVertex(Vertex)>
<Graph: Vertex findsVertex(java.lang.String)>/$z1	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Graph prim(Vertex)>/theNewPred#_659	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/$r1	<Graph: Graph prim(Vertex)>
<Vertex$VertexIter2: boolean hasNext()>/$r0	<Vertex$VertexIter2: boolean hasNext()>	@GN_OnlyNeighbors
<Vertex: void display()>/$i0	<Vertex: void display()>
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter1	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter1	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<Vertex$EdgeIter3: boolean hasNext()>/$z0	<Vertex$EdgeIter3: boolean hasNext()>	@EdgeObjects /\ GEN_Edges
<Neighbor: void display()>/@this	<Neighbor: void display()>	@GN_OnlyNeighbors
<Vertex: void display()>/$z1	<Vertex: void display()>
<Edge: void <init>(Vertex,Vertex,int)>/the_start#_0	<Edge: void <init>(Vertex,Vertex,int)>
<WorkSpace: void nextRegionAction(Vertex)>/@this	<WorkSpace: void nextRegionAction(Vertex)>	@SearchBase
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@this	<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@StronglyConnected
<Edge: void display()>/$r1	<Edge: void display()>	@EdgeObjects
<GlobalVarsWrapper: void <init>()>/@this	<GlobalVarsWrapper: void <init>()>
<Graph: Graph kruskal()>/vxiter_$$A_1#_415	<Graph: Graph kruskal()>
<Graph: EdgeIter getEdges()>/@this	<Graph: EdgeIter getEdges()>
<Graph: Graph kruskal()>/$i2	<Graph: Graph kruskal()>
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/$i1	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@StronglyConnected
<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant0	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Main: void main(java.lang.String[])>/i_$$A_2#_44	<Main: void main(java.lang.String[])>	@Prog
<Graph: int readNumber()>/index_$$A_2#_219	<Graph: int readNumber()>	@Benchmark
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@this	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<RegionWorkSpace: void init_vertex(Vertex)>/@parameter0	<RegionWorkSpace: void init_vertex(Vertex)>	@Connected
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l0#_0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Vertex: void <init>()>/$r3	<Vertex: void <init>()>
<Graph: Graph kruskal()>/$r25	<Graph: Graph kruskal()>
<EdgeIfc: int getWeight()>/@this	<EdgeIfc: int getWeight()>
<Edge: void display()>/$r6	<Edge: void display()>	@EdgeObjects
<Neighbor: void adjustAdorns(EdgeIfc)>/@parameter0	<Neighbor: void adjustAdorns(EdgeIfc)>	@GN_OnlyNeighbors
<Vertex: java.lang.String getName()>/this#_0	<Vertex: java.lang.String getName()>
<Vertex$EdgeIter3: boolean hasNext()>/this#_0	<Vertex$EdgeIter3: boolean hasNext()>	@EdgeObjects /\ GEN_Edges
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l0#_0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Graph: Graph computeTranspose(Graph)>/$z0	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Neighbor: Vertex getOtherVertex(Vertex)>/this#_0	<Neighbor: Vertex getOtherVertex(Vertex)>	@GN_OnlyNeighbors
<Graph: Graph strongComponents()>/this#_0	<Graph: Graph strongComponents()>
<Vertex: void display()>/$r46	<Vertex: void display()>
<Vertex$VertexIter2: boolean hasNext()>/this#_0	<Vertex$VertexIter2: boolean hasNext()>	@GN_OnlyNeighbors
<CycleWorkSpace: void preVisitAction(Vertex)>/$i0	<CycleWorkSpace: void preVisitAction(Vertex)>
<Graph: Graph computeTranspose(Graph)>/newVertices#_347	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_5#_51	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph prim(Vertex)>/$r16	<Graph: Graph prim(Vertex)>
<Graph: void addEdge(Vertex,Neighbor)>/$i0	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Vertex: void display()>/$r10	<Vertex: void display()>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$i1	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@StronglyConnected
<Edge: void display()>/this#_0	<Edge: void display()>	@EdgeObjects
<Vertex: void addNeighbor(Neighbor)>/n#_0	<Vertex: void addNeighbor(Neighbor)>	@GEN_Edges
<Graph: Vertex findsVertex(java.lang.String)>/$null1	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Graph prim(Vertex)>/$r11	<Graph: Graph prim(Vertex)>
<Vertex$VertexIter3: void <init>(Vertex)>/$r1	<Vertex$VertexIter3: void <init>(Vertex)>
<Vertex: void display()>/$i5	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_3#_580	<Graph: Graph prim(Vertex)>
<Vertex: void display()>/$r58	<Vertex: void display()>
<Vertex$EdgeIter3: EdgeIfc next()>/@this	<Vertex$EdgeIter3: EdgeIfc next()>	@EdgeObjects /\ GEN_Edges
<Vertex: void <init>()>/this#_0	<Vertex: void <init>()>
<NumberWorkSpace: void preVisitAction(Vertex)>/$z0	<NumberWorkSpace: void preVisitAction(Vertex)>
<Edge: void display()>/$r8	<Edge: void display()>	@EdgeObjects
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Graph: Graph kruskal()>/j_$$A_1#_504	<Graph: Graph kruskal()>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l0#_0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Vertex$VertexIter1: Vertex next()>/@this	<Vertex$VertexIter1: Vertex next()>	@G_NoEdges
<Edge: Vertex getOtherVertex(Vertex)>/$r1	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<WorkSpaceTranspose: void preVisitAction(Vertex)>/v#_0	<WorkSpaceTranspose: void preVisitAction(Vertex)>	@StronglyConnected
<Graph: Graph prim(Vertex)>/$r4	<Graph: Graph prim(Vertex)>
<Graph: Graph computeTranspose(Graph)>/this#_0	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: Graph prim(Vertex)>/$numconstant0	<Graph: Graph prim(Vertex)>
<WorkSpace: void <init>()>/this#_0	<WorkSpace: void <init>()>
<Vertex: void <init>()>/$numconstant0	<Vertex: void <init>()>
<Vertex: void display()>/$r25	<Vertex: void display()>
<Main: EdgeIfc addEdge(Graph,int)>/$i1	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Main: void main(java.lang.String[])>/num_edges#_27	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void display()>/$r37	<Vertex: void display()>
<Graph: void display()>/$r5	<Graph: void display()>
<Graph: Graph kruskal()>/$r6	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/vaux_$$A_2#_449	<Graph: Graph kruskal()>
<Graph: void addVertex(Vertex)>/@this	<Graph: void addVertex(Vertex)>
<CycleWorkSpace: void preVisitAction(Vertex)>/@this	<CycleWorkSpace: void preVisitAction(Vertex)>
<Graph: Graph kruskal()>/$null0	<Graph: Graph kruskal()>
<Vertex$VertexIter3: boolean hasNext()>/$r0	<Vertex$VertexIter3: boolean hasNext()>	@GEN_Edges
<Graph: void display()>/$stringconstant2	<Graph: void display()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Neighbor: Vertex getStart()>/$null0	<Neighbor: Vertex getStart()>	@GN_OnlyNeighbors
<Vertex: void display()>/$r50	<Vertex: void display()>
<Vertex$VertexIter1: void <init>(Vertex)>/@parameter0	<Vertex$VertexIter1: void <init>(Vertex)>
<Graph$Comparator2: void <init>(Graph)>/@parameter0	<Graph$Comparator2: void <init>(Graph)>
<Neighbor: void <init>()>/$null0	<Neighbor: void <init>()>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Graph: Graph prim(Vertex)>/$r6	<Graph: Graph prim(Vertex)>
<Vertex: void display()>/$r62	<Vertex: void display()>
<Vertex: void addWeight(int)>/$r3	<Vertex: void addWeight(int)>	@Weighted
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@this	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<Vertex: void init_vertex(WorkSpace)>/@parameter0	<Vertex: void init_vertex(WorkSpace)>	@SearchBase
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i4	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph: void sortVertices(java.util.Comparator)>/@this	<Graph: void sortVertices(java.util.Comparator)>
<Vertex$EdgeIter1: EdgeIfc next()>/$r2	<Vertex$EdgeIter1: EdgeIfc next()>	@EdgeObjects /\ G_NoEdges
<Vertex$VertexIter2: void <init>(Vertex)>/@this	<Vertex$VertexIter2: void <init>(Vertex)>
<Vertex: VertexIter getNeighbors()>/this#_0	<Vertex: VertexIter getNeighbors()>	@G_NoEdges
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l0#_0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: Graph computeTranspose(Graph)>/$r1	<Graph: Graph computeTranspose(Graph)>	@Transpose
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@SearchBase
<RegionWorkSpace: void <init>()>/@this	<RegionWorkSpace: void <init>()>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Main: void <init>()>/this#_0	<Main: void <init>()>
<Main: void main(java.lang.String[])>/$i4	<Main: void main(java.lang.String[])>	@Prog
<Main: void main(java.lang.String[])>/num_edges_$$A_3#_35	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void setWeight(int)>/$r1	<Vertex: void setWeight(int)>	@Weighted /\ G_NoEdges
<Graph: void stopProfile()>/$l1	<Graph: void stopProfile()>	@Benchmark
<Graph: void stopProfile()>/$l0	<Graph: void stopProfile()>	@Benchmark
<Vertex: void display()>/$r41	<Vertex: void display()>
<Vertex: void adjustAdorns(Vertex,int)>/$r2	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Graph: void numberVertices()>/$r0	<Graph: void numberVertices()>	@Number
<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646	<Graph: Graph prim(Vertex)>
<Vertex: void display()>/$r61	<Vertex: void display()>
<Graph: Graph kruskal()>/$r7	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/this#_0	<Graph: Graph kruskal()>
<Graph$EdgeIter1: void <init>(Graph)>/@this	<Graph$EdgeIter1: void <init>(Graph)>
<CycleWorkSpace: void <init>()>/@this	<CycleWorkSpace: void <init>()>
<Graph: Graph strongComponents()>/$r0	<Graph: Graph strongComponents()>
<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367	<Graph: Graph computeTranspose(Graph)>	@Transpose
<CycleWorkSpace: void postVisitAction(Vertex)>/this#_0	<CycleWorkSpace: void postVisitAction(Vertex)>	@Cycle
<Vertex$VertexIter2: Vertex next()>/@this	<Vertex$VertexIter2: Vertex next()>	@GN_OnlyNeighbors
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l1#_0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Vertex: void init_vertex(WorkSpace)>/this#_0	<Vertex: void init_vertex(WorkSpace)>	@SearchBase
<Vertex$VertexIter2: Vertex next()>/$r1	<Vertex$VertexIter2: Vertex next()>	@GN_OnlyNeighbors
<Vertex$VertexIter3: void <init>(Vertex)>/$r0	<Vertex$VertexIter3: void <init>(Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>/this#_0	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Graph$EdgeIter1: void <init>(Graph)>/$r1	<Graph$EdgeIter1: void <init>(Graph)>
<Graph: Graph kruskal()>/$r20	<Graph: Graph kruskal()>
<EdgeIter: void <init>()>/this#_0	<EdgeIter: void <init>()>
<Graph: void runBenchmark(java.lang.String)>/this#_0	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Vertex: Vertex getStart()>/this#_0	<Vertex: Vertex getStart()>	@Undirected /\ G_NoEdges
<Graph: void <init>()>/@this	<Graph: void <init>()>
<Vertex: void display()>/$r3	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/vn#_581	<Graph: Graph prim(Vertex)>
<Main: void main(java.lang.String[])>/$r23	<Main: void main(java.lang.String[])>	@Prog
<Vertex: void addWeight(int)>/@this	<Vertex: void addWeight(int)>	@Weighted
<Vertex$EdgeIter1: void <init>(Vertex)>/$r1	<Vertex$EdgeIter1: void <init>(Vertex)>
<Graph: Graph prim(Vertex)>/$r18	<Graph: Graph prim(Vertex)>
<Vertex: void display()>/$stringconstant0	<Vertex: void display()>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<NumberWorkSpace: void <init>()>/this#_0	<NumberWorkSpace: void <init>()>
<Main: void main(java.lang.String[])>/$stringconstant1	<Main: void main(java.lang.String[])>	@Prog
<Vertex$VertexIter2: boolean hasNext()>/@this	<Vertex$VertexIter2: boolean hasNext()>	@GN_OnlyNeighbors
<Vertex: EdgeIter getEdges()>/$null0	<Vertex: EdgeIter getEdges()>	@EdgeObjects /\ G_NoEdges
<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant0	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Main: void main(java.lang.String[])>/num_vertices_$$A_1_$$A_1#_29	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph prim(Vertex)>/uneighbors#_577	<Graph: Graph prim(Vertex)>
<Graph: Vertex findsVertex(java.lang.String)>/$r0	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter1	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph: void sortVertices(java.util.Comparator)>/c#_0	<Graph: void sortVertices(java.util.Comparator)>
<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	<Graph: Graph computeTranspose(Graph)>	@Transpose
<CycleWorkSpace: void <init>()>/this#_0	<CycleWorkSpace: void <init>()>
<Vertex$EdgeIter1: boolean hasNext()>/this#_0	<Vertex$EdgeIter1: boolean hasNext()>	@EdgeObjects /\ G_NoEdges
<Vertex: void display()>/$stringconstant4	<Vertex: void display()>
<Vertex: int getWeight()>/@this	<Vertex: int getWeight()>	@G_NoEdges
<Vertex$VertexIter2: void <init>(Vertex)>/l1#_0	<Vertex$VertexIter2: void <init>(Vertex)>
<Graph: void display()>/$r8	<Graph: void display()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter1	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Vertex$EdgeIter1: boolean hasNext()>/$r0	<Vertex$EdgeIter1: boolean hasNext()>	@EdgeObjects /\ G_NoEdges
<Graph: Graph prim(Vertex)>/vtx_$$A_2#_666	<Graph: Graph prim(Vertex)>
<Vertex$EdgeIter1: EdgeIfc next()>/$r0	<Vertex$EdgeIter1: EdgeIfc next()>	@EdgeObjects /\ G_NoEdges
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex$EdgeIter2: boolean hasNext()>/@this	<Vertex$EdgeIter2: boolean hasNext()>	@EdgeObjects /\ GN_OnlyNeighbors
<Graph: Graph kruskal()>/$r16	<Graph: Graph kruskal()>
<Edge: void display()>/$r7	<Edge: void display()>	@EdgeObjects
<EdgeIter: boolean hasNext()>/$numconstant0	<EdgeIter: boolean hasNext()>
<Graph$EdgeIter1: boolean hasNext()>/@this	<Graph$EdgeIter1: boolean hasNext()>	@EdgeObjects
<Graph$EdgeIter1: boolean hasNext()>/$r0	<Graph$EdgeIter1: boolean hasNext()>	@EdgeObjects
<Neighbor: void <init>()>/@this	<Neighbor: void <init>()>
<Graph: int readNumber()>/$r4	<Graph: int readNumber()>	@Benchmark
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$numconstant1	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/this#_0	<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@StronglyConnected
<WorkSpace: void preVisitAction(Vertex)>/v#_0	<WorkSpace: void preVisitAction(Vertex)>	@SearchBase
<Vertex: java.util.LinkedList getNeighborsObj()>/$r0	<Vertex: java.util.LinkedList getNeighborsObj()>	@GN_OnlyNeighbors
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant2	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex: void addWeight(int)>/$r4	<Vertex: void addWeight(int)>	@Weighted
<Graph: Graph kruskal()>/$r24	<Graph: Graph kruskal()>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l0#_0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<Vertex: void addAdjacent(Vertex)>/$r0	<Vertex: void addAdjacent(Vertex)>	@G_NoEdges
<Vertex: void adjustAdorns(Vertex,int)>/the_weight#_97	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<Edge: void setWeight(int)>/this#_0	<Edge: void setWeight(int)>	@EdgeObjects /\ Weighted
<Edge: void setWeight(int)>/@this	<Edge: void setWeight(int)>	@EdgeObjects /\ Weighted
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant1	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Graph: Graph kruskal()>/$r5	<Graph: Graph kruskal()>
<EdgeIfc: void display()>/@this	<EdgeIfc: void display()>
<WorkSpace: void preVisitAction(Vertex)>/@this	<WorkSpace: void preVisitAction(Vertex)>	@SearchBase
<EdgeIter: void <init>()>/@this	<EdgeIter: void <init>()>
<Graph: java.util.LinkedList access$0(Graph)>/$r0	<Graph: java.util.LinkedList access$0(Graph)>
<Graph: int readNumber()>/ch#_209	<Graph: int readNumber()>	@Benchmark
<Neighbor: int getWeight()>/this#_0	<Neighbor: int getWeight()>	@Weighted /\ GN_OnlyNeighbors
<Graph: void display()>/$r4	<Graph: void display()>
<Graph: void endProfile()>/$l3	<Graph: void endProfile()>	@Benchmark
<EdgeIfc: void setWeight(int)>/@this	<EdgeIfc: void setWeight(int)>
<Graph: Graph kruskal()>/$i1	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/vaux#_471	<Graph: Graph kruskal()>
<Vertex: void display()>/$r17	<Vertex: void display()>
<Graph: void graphSearch(WorkSpace)>/@this	<Graph: void graphSearch(WorkSpace)>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Graph: void sortVertices(java.util.Comparator)>/$r0	<Graph: void sortVertices(java.util.Comparator)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant2	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i1	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@this	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@StronglyConnected
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i2	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Vertex: void nodeSearch(WorkSpace)>/$r2	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void setWeight(int)>/@this	<Vertex: void setWeight(int)>	@Weighted /\ G_NoEdges
<Graph: Graph prim(Vertex)>/$null0	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	<Graph: Graph prim(Vertex)>
<Edge: Vertex getEnd()>/$r0	<Edge: Vertex getEnd()>	@EdgeObjects
<Graph: int readNumber()>/$i2	<Graph: int readNumber()>	@Benchmark
<Graph: int readNumber()>/ch_$$A_1_$$A_1#_214	<Graph: int readNumber()>	@Benchmark
<CycleWorkSpace: void preVisitAction(Vertex)>/v#_0	<CycleWorkSpace: void preVisitAction(Vertex)>
<Graph: Graph kruskal()>/j_$$A_2#_449	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/this#_0	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void init_vertex(Vertex)>/$numconstant1	<CycleWorkSpace: void init_vertex(Vertex)>	@Cycle
<Edge: void display()>/$stringconstant1	<Edge: void display()>	@EdgeObjects
<Vertex: void display()>/vxiter#_259	<Vertex: void display()>
<EdgeIfc: void setWeight(int)>/@parameter0	<EdgeIfc: void setWeight(int)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i0	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<CycleWorkSpace: void init_vertex(Vertex)>/this#_0	<CycleWorkSpace: void init_vertex(Vertex)>	@Cycle
<Vertex: void display()>/$r60	<Vertex: void display()>
<Graph: void stopProfile()>/$l4	<Graph: void stopProfile()>	@Benchmark
<Graph$Comparator1: void <init>(Graph)>/@this	<Graph$Comparator1: void <init>(Graph)>
<Graph: void <init>()>/this#_0	<Graph: void <init>()>
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@SearchBase
<Graph: Graph computeTranspose(Graph)>/@parameter0	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: Graph kruskal()>/$r8	<Graph: Graph kruskal()>
<Edge: void display()>/$r13	<Edge: void display()>	@EdgeObjects
<Vertex$VertexIter2: void <init>(Vertex)>/$r0	<Vertex$VertexIter2: void <init>(Vertex)>
<Graph: Graph computeTranspose(Graph)>/$numconstant0	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: void endProfile()>/$r0	<Graph: void endProfile()>	@Benchmark
<FinishTimeWorkSpace: void <init>()>/$numconstant0	<FinishTimeWorkSpace: void <init>()>
<Main: void readWeights(Graph,int)>/num_edges#_0	<Main: void readWeights(Graph,int)>	@Prog
<Graph: void addVertex(Vertex)>/v#_0	<Graph: void addVertex(Vertex)>
<Graph: Graph prim(Vertex)>/$r15	<Graph: Graph prim(Vertex)>
<FinishTimeWorkSpace: void <init>()>/this#_0	<FinishTimeWorkSpace: void <init>()>
<Edge: Vertex getEnd()>/@this	<Edge: Vertex getEnd()>	@EdgeObjects
<Vertex$EdgeIter2: void <init>(Vertex)>/@parameter0	<Vertex$EdgeIter2: void <init>(Vertex)>
<EdgeIter: EdgeIfc next()>/this#_0	<EdgeIter: EdgeIfc next()>
<CycleWorkSpace: void preVisitAction(Vertex)>/$z0	<CycleWorkSpace: void preVisitAction(Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z2	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex: void nodeSearch(WorkSpace)>/$numconstant1	<Vertex: void nodeSearch(WorkSpace)>
<Graph: Graph kruskal()>/vxiter#_406	<Graph: Graph kruskal()>
<Vertex: void addNeighbor(Neighbor)>/@this	<Vertex: void addNeighbor(Neighbor)>	@GEN_Edges
<Neighbor: void <init>()>/$null2	<Neighbor: void <init>()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant1	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Vertex: void addAdjacent(Vertex)>/this#_0	<Vertex: void addAdjacent(Vertex)>	@G_NoEdges
<Vertex: void display()>/$r42	<Vertex: void display()>
<VertexIter: Vertex next()>/$r1	<VertexIter: Vertex next()>
<Vertex: void adjustAdorns(Vertex,int)>/@parameter0	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<WorkSpaceTranspose: void <init>()>/this#_0	<WorkSpaceTranspose: void <init>()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i1	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Graph: Graph computeTranspose(Graph)>/newAdjacent#_372	<Graph: Graph computeTranspose(Graph)>	@Transpose
<RegionWorkSpace: void nextRegionAction(Vertex)>/$i0	<RegionWorkSpace: void nextRegionAction(Vertex)>	@Connected
<Graph: Graph kruskal()>/$r2	<Graph: Graph kruskal()>
<Vertex: void <init>()>/$r0	<Vertex: void <init>()>
<Graph: void endProfile()>/$l5	<Graph: void endProfile()>	@Benchmark
<Vertex$VertexIter1: void <init>(Vertex)>/@this	<Vertex$VertexIter1: void <init>(Vertex)>
<Graph: Graph kruskal()>/urep#_440	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/i_$$A_1#_498	<Graph: Graph kruskal()>
<Vertex: void display()>/vxiter_$$A_2#_259	<Vertex: void display()>
<Vertex: void display()>/$stringconstant7	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	<Graph: Graph prim(Vertex)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Graph: Graph kruskal()>/$r27	<Graph: Graph kruskal()>
<Edge: Vertex getStart()>/@this	<Edge: Vertex getStart()>	@EdgeObjects
<Vertex: void nodeSearch(WorkSpace)>/$r1	<Vertex: void nodeSearch(WorkSpace)>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Neighbor: void adjustAdorns(EdgeIfc)>/the_edge#_0	<Neighbor: void adjustAdorns(EdgeIfc)>	@GN_OnlyNeighbors
<Vertex$EdgeIter2: boolean hasNext()>/this#_0	<Vertex$EdgeIter2: boolean hasNext()>	@EdgeObjects /\ GN_OnlyNeighbors
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<Graph: void <clinit>()>/$numconstant1	<Graph: void <clinit>()>
<Graph: Graph prim(Vertex)>/$i0	<Graph: Graph prim(Vertex)>
<Graph$Comparator1: void <init>(Graph)>/@parameter0	<Graph$Comparator1: void <init>(Graph)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter0	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: void addVertex(Vertex)>/@parameter0	<Graph: void addVertex(Vertex)>
<Graph: Graph kruskal()>/$r19	<Graph: Graph kruskal()>
<EdgeIter: EdgeIfc next()>/$null0	<EdgeIter: EdgeIfc next()>
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph: void addEdge(Vertex,Neighbor)>/this#_0	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/e#_664	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex$EdgeIter1: EdgeIfc next()>/this#_0	<Vertex$EdgeIter1: EdgeIfc next()>	@EdgeObjects /\ G_NoEdges
<Vertex$VertexIter1: void <init>(Vertex)>/$r1	<Vertex$VertexIter1: void <init>(Vertex)>
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_4#_52	<Main: void main(java.lang.String[])>	@Prog
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z4	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph: boolean cycleCheck()>/@this	<Graph: boolean cycleCheck()>	@Cycle
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/$r1	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Edge: Vertex getOtherVertex(Vertex)>/$null0	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Main: EdgeIfc addEdge(Graph,int)>/$i0	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Graph: Graph computeTranspose(Graph)>/newGraph#_350	<Graph: Graph computeTranspose(Graph)>	@Transpose
<CycleWorkSpace: void init_vertex(Vertex)>/@this	<CycleWorkSpace: void init_vertex(Vertex)>	@Cycle
<Edge: void display()>/$stringconstant0	<Edge: void display()>	@EdgeObjects
<Graph: void run(Vertex)>/gaux1#_264	<Graph: void run(Vertex)>
<Edge: int getWeight()>/@this	<Edge: int getWeight()>	@EdgeObjects /\ Weighted
<Main: void <init>()>/@this	<Main: void <init>()>
<Edge: void <init>(Vertex,Vertex,int)>/@parameter1	<Edge: void <init>(Vertex,Vertex,int)>
<Vertex: Vertex getStart()>/@this	<Vertex: Vertex getStart()>	@Undirected /\ G_NoEdges
<Graph: Graph kruskal()>/$i4	<Graph: Graph kruskal()>
<NumberWorkSpace: void preVisitAction(Vertex)>/$i1	<NumberWorkSpace: void preVisitAction(Vertex)>
<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484	<Graph: Graph kruskal()>
<Vertex$EdgeIter3: boolean hasNext()>/@this	<Vertex$EdgeIter3: boolean hasNext()>	@EdgeObjects /\ GEN_Edges
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i2	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<Graph: Graph prim(Vertex)>/$r3	<Graph: Graph prim(Vertex)>
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@StronglyConnected
<Graph: Graph prim(Vertex)>/vxiter_$$A_2#_581	<Graph: Graph prim(Vertex)>
<WorkSpace: void preVisitAction(Vertex)>/@parameter0	<WorkSpace: void preVisitAction(Vertex)>	@SearchBase
<Graph: void display()>/$r9	<Graph: void display()>
<Main: EdgeIfc addEdge(Graph,int)>/$r4	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant2	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: Graph computeTranspose(Graph)>/$r6	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Vertex$EdgeIter2: void <init>(Vertex)>/l1#_0	<Vertex$EdgeIter2: void <init>(Vertex)>
<Vertex$VertexIter1: boolean hasNext()>/$r0	<Vertex$VertexIter1: boolean hasNext()>	@G_NoEdges
<Graph: void startProfile()>/$l1	<Graph: void startProfile()>	@Benchmark
<Vertex: void addWeight(int)>/weight#_0	<Vertex: void addWeight(int)>	@Weighted
<Graph: Graph prim(Vertex)>/$null1	<Graph: Graph prim(Vertex)>
<Graph: Graph kruskal()>/$z5	<Graph: Graph kruskal()>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Main: void main(java.lang.String[])>/num_edges_$$A_2#_63	<Main: void main(java.lang.String[])>	@Prog
<Graph: void run(Vertex)>/$r0	<Graph: void run(Vertex)>
<Graph: void connectedComponents()>/@this	<Graph: void connectedComponents()>	@Connected
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r7	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex: void display()>/$r9	<Vertex: void display()>
<Graph: Graph kruskal()>/$r30	<Graph: Graph kruskal()>
<Vertex: void nodeSearch(WorkSpace)>/$i0	<Vertex: void nodeSearch(WorkSpace)>
<Graph: void sortVertices(java.util.Comparator)>/@parameter0	<Graph: void sortVertices(java.util.Comparator)>
<Vertex: void display()>/@this	<Vertex: void display()>
<Vertex$VertexIter1: void <init>(Vertex)>/l1#_0	<Vertex$VertexIter1: void <init>(Vertex)>
<Graph: Graph prim(Vertex)>/$z12	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void init_vertex(Vertex)>/@parameter0	<CycleWorkSpace: void init_vertex(Vertex)>	@Cycle
<Vertex: Vertex assignName(java.lang.String)>/@this	<Vertex: Vertex assignName(java.lang.String)>
<Edge: void <init>(Vertex,Vertex,int)>/@parameter0	<Edge: void <init>(Vertex,Vertex,int)>
<Graph: void display()>/$stringconstant4	<Graph: void display()>
<WorkSpace: void postVisitAction(Vertex)>/v#_0	<WorkSpace: void postVisitAction(Vertex)>	@SearchBase
<Vertex$VertexIter3: Vertex next()>/@this	<Vertex$VertexIter3: Vertex next()>	@GEN_Edges
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r1	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Graph$Comparator1: int compare(Vertex,Vertex)>/@this	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_2#_44	<Main: void main(java.lang.String[])>	@Prog
<Edge: void display()>/@this	<Edge: void display()>	@EdgeObjects
<Graph: Graph kruskal()>/$z0	<Graph: Graph kruskal()>
<Vertex: void adjustAdorns(Vertex,int)>/@parameter1	<Vertex: void adjustAdorns(Vertex,int)>	@G_NoEdges
<RegionWorkSpace: void nextRegionAction(Vertex)>/@parameter0	<RegionWorkSpace: void nextRegionAction(Vertex)>	@Connected
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_5#_592	<Graph: Graph prim(Vertex)>
<Main: void main(java.lang.String[])>/num_edges_$$A_1#_30	<Main: void main(java.lang.String[])>	@Prog
<Vertex: EdgeIter getEdges()>/this#_0	<Vertex: EdgeIter getEdges()>	@EdgeObjects /\ G_NoEdges
<Vertex: void addEdge(Neighbor)>/$r0	<Vertex: void addEdge(Neighbor)>	@GN_OnlyNeighbors
<Vertex: void setWeight(int)>/@parameter0	<Vertex: void setWeight(int)>	@Weighted /\ G_NoEdges
<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void adjustAdorns(Neighbor)>/$r0	<Vertex: void adjustAdorns(Neighbor)>	@GN_OnlyNeighbors
<WorkSpace: void init_vertex(Vertex)>/v#_0	<WorkSpace: void init_vertex(Vertex)>	@SearchBase
<NumberWorkSpace: void preVisitAction(Vertex)>/@this	<NumberWorkSpace: void preVisitAction(Vertex)>
<Main: void main(java.lang.String[])>/$r18	<Main: void main(java.lang.String[])>	@Prog
<VertexIter: void <init>(Graph)>/$r0	<VertexIter: void <init>(Graph)>
<Graph: Graph prim(Vertex)>/vtx#_638	<Graph: Graph prim(Vertex)>
<Graph: int readNumber()>/$c1	<Graph: int readNumber()>	@Benchmark
<Vertex: void addEdge(Neighbor)>/n#_0	<Vertex: void addEdge(Neighbor)>	@GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/x_$$A_2#_551	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_1#_581	<Graph: Graph prim(Vertex)>
<Graph: Graph computeTranspose(Graph)>/vxiter#_353	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: void endProfile()>/$l0	<Graph: void endProfile()>	@Benchmark
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex: void display()>/$r31	<Vertex: void display()>
<Vertex: Vertex getEnd()>/$null0	<Vertex: Vertex getEnd()>	@G_NoEdges
<Vertex: void display()>/$r1	<Vertex: void display()>
<Neighbor: Vertex getOtherVertex(Vertex)>/@this	<Neighbor: Vertex getOtherVertex(Vertex)>	@GN_OnlyNeighbors
<Main: EdgeIfc addEdge(Graph,int)>/@parameter1	<Main: EdgeIfc addEdge(Graph,int)>	@Prog
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l2#_0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Graph: EdgeIter getEdges()>/$null0	<Graph: EdgeIter getEdges()>
<Graph: Graph kruskal()>/edgeiter_$$A_1#_485	<Graph: Graph kruskal()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v2#_281	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex$EdgeIter3: void <init>(Vertex)>/$r1	<Vertex$EdgeIter3: void <init>(Vertex)>
<Vertex: void init_vertex(WorkSpace)>/$numconstant0	<Vertex: void init_vertex(WorkSpace)>	@SearchBase
<Graph: void endProfile()>/$r4	<Graph: void endProfile()>	@Benchmark
<Neighbor: void <init>()>/$null1	<Neighbor: void <init>()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i2	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: Vertex findsVertex(java.lang.String)>/@this	<Graph: Vertex findsVertex(java.lang.String)>
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@this	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Vertex: void display()>/$r52	<Vertex: void display()>
<Vertex: void display()>/$r55	<Vertex: void display()>
<Graph: void resumeProfile()>/$l1	<Graph: void resumeProfile()>	@Benchmark
<Main: void main(java.lang.String[])>/num_vertices_$$A_1#_26	<Main: void main(java.lang.String[])>	@Prog
<Graph: void display()>/$i0	<Graph: void display()>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/$r0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<VertexIter: void <init>(Graph)>/@this	<VertexIter: void <init>(Graph)>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@MSTKruskal
<RegionWorkSpace: void postVisitAction(Vertex)>/@parameter0	<RegionWorkSpace: void postVisitAction(Vertex)>	@Connected
<Vertex$EdgeIter2: void <init>(Vertex)>/this#_0	<Vertex$EdgeIter2: void <init>(Vertex)>
<Graph: void graphSearch(WorkSpace)>/@parameter0	<Graph: void graphSearch(WorkSpace)>
<Graph: Graph kruskal()>/$z12	<Graph: Graph kruskal()>
<Graph: void graphSearch(WorkSpace)>/$z3	<Graph: void graphSearch(WorkSpace)>
<Vertex: void display()>/$r20	<Vertex: void display()>
<Graph: void endProfile()>/$l1	<Graph: void endProfile()>	@Benchmark
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter1	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph: void run(Vertex)>/@this	<Graph: void run(Vertex)>
<Graph: Graph prim(Vertex)>/$r7	<Graph: Graph prim(Vertex)>
<Graph: int readNumber()>/index_$$A_1#_221	<Graph: int readNumber()>	@Benchmark
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Graph: void runBenchmark(java.lang.String)>/$r5	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l2#_0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/@this	<Graph$Comparator2: int compare(Vertex,Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/@this	<Graph: Graph prim(Vertex)>
<Vertex: void display()>/$i3	<Vertex: void display()>
<Vertex: void display()>/$r44	<Vertex: void display()>
<Vertex$EdgeIter3: EdgeIfc next()>/$r2	<Vertex$EdgeIter3: EdgeIfc next()>	@EdgeObjects /\ GEN_Edges
<Vertex$VertexIter2: boolean hasNext()>/$z0	<Vertex$VertexIter2: boolean hasNext()>	@GN_OnlyNeighbors
<Graph: void endProfile()>/$r3	<Graph: void endProfile()>	@Benchmark
<Vertex: void display()>/vxiter_$$A_1#_265	<Vertex: void display()>
<Vertex: void <init>()>/@this	<Vertex: void <init>()>
<Graph: void runBenchmark(java.lang.String)>/$stringconstant0	<Graph: void runBenchmark(java.lang.String)>	@Benchmark
<Graph: boolean cycleCheck()>/this#_0	<Graph: boolean cycleCheck()>	@Cycle
<Neighbor: void display()>/$r0	<Neighbor: void display()>	@GN_OnlyNeighbors
<Graph: void sortEdges(java.util.Comparator)>/@this	<Graph: void sortEdges(java.util.Comparator)>	@EdgeObjects
<Vertex$EdgeIter1: EdgeIfc next()>/@this	<Vertex$EdgeIter1: EdgeIfc next()>	@EdgeObjects /\ G_NoEdges
<VertexIter: void <init>()>/@this	<VertexIter: void <init>()>
<Graph: Graph strongComponents()>/$null0	<Graph: Graph strongComponents()>
<Edge: Vertex getOtherVertex(Vertex)>/@parameter0	<Edge: Vertex getOtherVertex(Vertex)>	@EdgeObjects
<Edge: void display()>/$r5	<Edge: void display()>	@EdgeObjects
<VertexIter: void <init>(Graph)>/@parameter0	<VertexIter: void <init>(Graph)>
<Vertex: void display()>/$r36	<Vertex: void display()>
<Vertex: void display()>/$r12	<Vertex: void display()>
<Vertex$VertexIter3: Vertex next()>/$r2	<Vertex$VertexIter3: Vertex next()>	@GEN_Edges
<Graph: void addEdge(Vertex,Neighbor)>/$r0	<Graph: void addEdge(Vertex,Neighbor)>	@GN_OnlyNeighbors
<Graph: Graph computeTranspose(Graph)>/$r5	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: Graph kruskal()>/vaux_$$A_3#_461	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/e1#_430	<Graph: Graph kruskal()>
<Main: void main(java.lang.String[])>/num_vertices_$$A_1_$$A_3#_35	<Main: void main(java.lang.String[])>	@Prog
<Graph: Graph prim(Vertex)>/theNewVertex#_658	<Graph: Graph prim(Vertex)>
<Main: void readWeights(Graph,int)>/@parameter1	<Main: void readWeights(Graph,int)>	@Prog
<Graph: void endProfile()>/$l2	<Graph: void endProfile()>	@Benchmark
<Graph: Graph kruskal()>/$r14	<Graph: Graph kruskal()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r5	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Vertex$VertexIter3: void <init>(Vertex)>/@parameter0	<Vertex$VertexIter3: void <init>(Vertex)>
<Graph: void graphSearch(WorkSpace)>/this#_0	<Graph: void graphSearch(WorkSpace)>
<Vertex: void display()>/$r28	<Vertex: void display()>
<Vertex$EdgeIter3: EdgeIfc next()>/$r0	<Vertex$EdgeIter3: EdgeIfc next()>	@EdgeObjects /\ GEN_Edges
<Graph: Graph prim(Vertex)>/vtx_$$A_3#_650	<Graph: Graph prim(Vertex)>
<Vertex: void display()>/$stringconstant2	<Vertex: void display()>
<Graph: void display()>/$r3	<Graph: void display()>
<Graph: void endProfile()>/$r2	<Graph: void endProfile()>	@Benchmark
<Graph: void <init>()>/$numconstant0	<Graph: void <init>()>
<Graph: Graph computeTranspose(Graph)>/@this	<Graph: Graph computeTranspose(Graph)>	@Transpose
<Graph: void addVertex(Vertex)>/this#_0	<Graph: void addVertex(Vertex)>
<Graph: Graph kruskal()>/$r22	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/vxiter_$$A_4#_648	<Graph: Graph prim(Vertex)>
<Graph$Comparator2: void <init>(Graph)>/this#_0	<Graph$Comparator2: void <init>(Graph)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r3	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@EdgeObjects
<Neighbor: Vertex getOtherVertex(Vertex)>/vertex#_0	<Neighbor: Vertex getOtherVertex(Vertex)>	@GN_OnlyNeighbors
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i3	<Graph$Comparator1: int compare(Vertex,Vertex)>	@StronglyConnected
<Graph: Graph kruskal()>/j_$$A_3#_448	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/$numconstant1	<Graph: Graph prim(Vertex)>
<Graph: int readNumber()>/theString_$$A_1#_226	<Graph: int readNumber()>	@Benchmark
<Vertex: Vertex assignName(java.lang.String)>/name#_0	<Vertex: Vertex assignName(java.lang.String)>
<Graph: Graph prim(Vertex)>/$i4	<Graph: Graph prim(Vertex)>
<WorkSpaceTranspose: void preVisitAction(Vertex)>/$z0	<WorkSpaceTranspose: void preVisitAction(Vertex)>	@StronglyConnected
<Vertex$EdgeIter2: EdgeIfc next()>/$r1	<Vertex$EdgeIter2: EdgeIfc next()>	@EdgeObjects /\ GN_OnlyNeighbors
<Graph: Graph kruskal()>/theNewEdge#_511	<Graph: Graph kruskal()>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@parameter0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@StronglyConnected
<VertexIter: boolean hasNext()>/$z0	<VertexIter: boolean hasNext()>
<Main: void main(java.lang.String[])>/$r25	<Main: void main(java.lang.String[])>	@Prog
<Vertex$EdgeIter2: void <init>(Vertex)>/@this	<Vertex$EdgeIter2: void <init>(Vertex)>
<Graph: int readNumber()>/index#_207	<Graph: int readNumber()>	@Benchmark
<Vertex$EdgeIter3: void <init>(Vertex)>/$r0	<Vertex$EdgeIter3: void <init>(Vertex)>
<Graph: int readNumber()>/$r3	<Graph: int readNumber()>	@Benchmark
