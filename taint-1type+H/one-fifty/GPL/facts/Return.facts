<Graph: VertexIter getVertices()>/return/instruction4	4	<Graph: VertexIter getVertices()>/$r0	<Graph: VertexIter getVertices()>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/return/instruction15	15	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant2	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
<Vertex: EdgeIter getEdges()>/return/instruction5	5	<Vertex: EdgeIter getEdges()>/$r0	<Vertex: EdgeIter getEdges()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/return/instruction13	13	<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant1	<Graph$Comparator1: int compare(Vertex,Vertex)>
<Vertex$VertexIter2: boolean hasNext()>/return/instruction4	4	<Vertex$VertexIter2: boolean hasNext()>/$z0	<Vertex$VertexIter2: boolean hasNext()>
<Edge: Vertex getOtherVertex(Vertex)>/return/instruction12	12	<Edge: Vertex getOtherVertex(Vertex)>/$null0	<Edge: Vertex getOtherVertex(Vertex)>
<Graph: Graph strongComponents()>/return/instruction15	15	<Graph: Graph strongComponents()>/gaux#_334	<Graph: Graph strongComponents()>
<Graph$EdgeIter1: EdgeIfc next()>/return/instruction5	5	<Graph$EdgeIter1: EdgeIfc next()>/$r2	<Graph$EdgeIter1: EdgeIfc next()>
<Graph: int readNumber()>/return/instruction37	37	<Graph: int readNumber()>/$i2	<Graph: int readNumber()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/return/instruction15	15	<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant2	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Vertex$EdgeIter2: boolean hasNext()>/return/instruction4	4	<Vertex$EdgeIter2: boolean hasNext()>/$z0	<Vertex$EdgeIter2: boolean hasNext()>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/return/instruction7	7	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/$i0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Graph: Graph computeTranspose(Graph)>/return/instruction43	43	<Graph: Graph computeTranspose(Graph)>/newGraph#_350	<Graph: Graph computeTranspose(Graph)>
<Graph$Comparator1: int compare(Vertex,Vertex)>/return/instruction8	8	<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant0	<Graph$Comparator1: int compare(Vertex,Vertex)>
<Graph: java.util.LinkedList access$0(Graph)>/return/instruction3	3	<Graph: java.util.LinkedList access$0(Graph)>/$r0	<Graph: java.util.LinkedList access$0(Graph)>
<Graph$EdgeIter1: boolean hasNext()>/return/instruction4	4	<Graph$EdgeIter1: boolean hasNext()>/$z0	<Graph$EdgeIter1: boolean hasNext()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/return/instruction13	13	<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant1	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Vertex: VertexIter getNeighbors()>/return/instruction5	5	<Vertex: VertexIter getNeighbors()>/$r0	<Vertex: VertexIter getNeighbors()>
<Edge: Vertex getOtherVertex(Vertex)>/return/instruction10	10	<Edge: Vertex getOtherVertex(Vertex)>/$r2	<Edge: Vertex getOtherVertex(Vertex)>
<VertexIter: boolean hasNext()>/return/instruction4	4	<VertexIter: boolean hasNext()>/$z0	<VertexIter: boolean hasNext()>
<Vertex$VertexIter3: boolean hasNext()>/return/instruction4	4	<Vertex$VertexIter3: boolean hasNext()>/$z0	<Vertex$VertexIter3: boolean hasNext()>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/return/instruction7	7	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/$i0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<VertexIter: Vertex next()>/return/instruction5	5	<VertexIter: Vertex next()>/$r2	<VertexIter: Vertex next()>
<Vertex: java.lang.String getName()>/return/instruction3	3	<Vertex: java.lang.String getName()>/$r0	<Vertex: java.lang.String getName()>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/return/instruction13	13	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant1	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
<Vertex$VertexIter3: Vertex next()>/return/instruction6	6	<Vertex$VertexIter3: Vertex next()>/$r3	<Vertex$VertexIter3: Vertex next()>
<Vertex$VertexIter2: Vertex next()>/return/instruction6	6	<Vertex$VertexIter2: Vertex next()>/$r3	<Vertex$VertexIter2: Vertex next()>
<EdgeIter: boolean hasNext()>/return/instruction3	3	<EdgeIter: boolean hasNext()>/$numconstant0	<EdgeIter: boolean hasNext()>
<Graph: Vertex findsVertex(java.lang.String)>/return/instruction16	16	<Graph: Vertex findsVertex(java.lang.String)>/$null1	<Graph: Vertex findsVertex(java.lang.String)>
<Edge: Vertex getStart()>/return/instruction3	3	<Edge: Vertex getStart()>/$r0	<Edge: Vertex getStart()>
<Graph: Graph kruskal()>/return/instruction149	149	<Graph: Graph kruskal()>/e1_$$A_1#_481	<Graph: Graph kruskal()>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/return/instruction8	8	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
<Graph: Vertex findsVertex(java.lang.String)>/return/instruction12	12	<Graph: Vertex findsVertex(java.lang.String)>/theVertex#_162	<Graph: Vertex findsVertex(java.lang.String)>
<Vertex$EdgeIter1: EdgeIfc next()>/return/instruction5	5	<Vertex$EdgeIter1: EdgeIfc next()>/$r2	<Vertex$EdgeIter1: EdgeIfc next()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/return/instruction29	29	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$null0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Vertex: Vertex getOtherVertex(Vertex)>/return/instruction3	3	<Vertex: Vertex getOtherVertex(Vertex)>/this#_0	<Vertex: Vertex getOtherVertex(Vertex)>
<Vertex$VertexIter1: Vertex next()>/return/instruction5	5	<Vertex$VertexIter1: Vertex next()>/$r2	<Vertex$VertexIter1: Vertex next()>
<Neighbor: Vertex getEnd()>/return/instruction3	3	<Neighbor: Vertex getEnd()>/$r0	<Neighbor: Vertex getEnd()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/return/instruction25	25	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theEdge#_280	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Graph: Graph prim(Vertex)>/return/instruction134	134	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	<Graph: Graph prim(Vertex)>
<Vertex$EdgeIter3: boolean hasNext()>/return/instruction4	4	<Vertex$EdgeIter3: boolean hasNext()>/$z0	<Vertex$EdgeIter3: boolean hasNext()>
<Vertex$EdgeIter2: EdgeIfc next()>/return/instruction5	5	<Vertex$EdgeIter2: EdgeIfc next()>/$r2	<Vertex$EdgeIter2: EdgeIfc next()>
<Graph: Vertex findsVertex(java.lang.String)>/return/instruction5	5	<Graph: Vertex findsVertex(java.lang.String)>/$null0	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/return/instruction9	9	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Vertex: Vertex getEnd()>/return/instruction3	3	<Vertex: Vertex getEnd()>/$null0	<Vertex: Vertex getEnd()>
<Graph: boolean cycleCheck()>/return/instruction7	7	<Graph: boolean cycleCheck()>/$z0	<Graph: boolean cycleCheck()>
<Edge: int getWeight()>/return/instruction3	3	<Edge: int getWeight()>/$i0	<Edge: int getWeight()>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/return/instruction7	7	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/$i0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Vertex$EdgeIter1: boolean hasNext()>/return/instruction4	4	<Vertex$EdgeIter1: boolean hasNext()>/$z0	<Vertex$EdgeIter1: boolean hasNext()>
<Vertex: int getWeight()>/return/instruction3	3	<Vertex: int getWeight()>/$numconstant0	<Vertex: int getWeight()>
<Neighbor: Vertex getOtherVertex(Vertex)>/return/instruction4	4	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	<Neighbor: Vertex getOtherVertex(Vertex)>
<Neighbor: int getWeight()>/return/instruction3	3	<Neighbor: int getWeight()>/$i0	<Neighbor: int getWeight()>
<Vertex$VertexIter1: boolean hasNext()>/return/instruction4	4	<Vertex$VertexIter1: boolean hasNext()>/$z0	<Vertex$VertexIter1: boolean hasNext()>
<Edge: Vertex getOtherVertex(Vertex)>/return/instruction6	6	<Edge: Vertex getOtherVertex(Vertex)>/$r3	<Edge: Vertex getOtherVertex(Vertex)>
<Vertex: Vertex getStart()>/return/instruction2	2	<Vertex: Vertex getStart()>/this#_0	<Vertex: Vertex getStart()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/return/instruction15	15	<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant2	<Graph$Comparator1: int compare(Vertex,Vertex)>
<Vertex: java.util.LinkedList getNeighborsObj()>/return/instruction3	3	<Vertex: java.util.LinkedList getNeighborsObj()>/$r0	<Vertex: java.util.LinkedList getNeighborsObj()>
<Main: EdgeIfc addEdge(Graph,int)>/return/instruction13	13	<Main: EdgeIfc addEdge(Graph,int)>/$r4	<Main: EdgeIfc addEdge(Graph,int)>
<EdgeIter: EdgeIfc next()>/return/instruction3	3	<EdgeIter: EdgeIfc next()>/$null0	<EdgeIter: EdgeIfc next()>
<Graph: EdgeIter getEdges()>/return/instruction5	5	<Graph: EdgeIter getEdges()>/$r0	<Graph: EdgeIter getEdges()>
<Edge: Vertex getEnd()>/return/instruction3	3	<Edge: Vertex getEnd()>/$r0	<Edge: Vertex getEnd()>
<Vertex: Vertex assignName(java.lang.String)>/return/instruction4	4	<Vertex: Vertex assignName(java.lang.String)>/this#_0	<Vertex: Vertex assignName(java.lang.String)>
<Neighbor: Vertex getStart()>/return/instruction3	3	<Neighbor: Vertex getStart()>/$null0	<Neighbor: Vertex getStart()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/return/instruction8	8	<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant0	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Vertex$EdgeIter3: EdgeIfc next()>/return/instruction6	6	<Vertex$EdgeIter3: EdgeIfc next()>/$r3	<Vertex$EdgeIter3: EdgeIfc next()>
