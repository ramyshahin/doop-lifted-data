<Vertex$EdgeIter3: boolean hasNext()>/this#_0	Vertex$EdgeIter3	@EdgeObjects /\ GEN_Edges
<Neighbor: void <init>(Vertex,Edge)>/@parameter1	Edge
<Edge: void display()>/$stringconstant1	java.lang.String	@EdgeObjects
<Graph: void sortEdges(java.util.Comparator)>/c#_0	java.util.Comparator	@EdgeObjects
<Neighbor: void <init>(Vertex,Edge)>/e#_0	Edge
<Graph: Graph prim(Vertex)>/theNewPred#_659	Vertex
<Neighbor: void display()>/$r5	java.lang.StringBuilder	@GN_OnlyNeighbors
<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	Vertex	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$r20	java.lang.StringBuilder	@Prog
<Graph: void sortVertices(java.util.Comparator)>/this#_0	Graph
<EdgeIfc: int getWeight()>/@this	EdgeIfc
<Graph: void stopBenchmark()>/this#_0	Graph	@Benchmark
<Vertex: void display()>/$r45	java.lang.StringBuilder
<Graph$EdgeIter1: boolean hasNext()>/this#_0	Graph$EdgeIter1	@EdgeObjects
<Vertex: void nodeSearch(WorkSpace)>/$numconstant0	int
<Graph: Graph prim(Vertex)>/vxiter_$$A_4#_648	Vertex
<Graph: Graph prim(Vertex)>/edgeiter#_580	EdgeIter
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	Graph
<Graph: Graph kruskal()>/v_$$A_1#_407	Vertex
<VertexIter: void <init>(Graph)>/this#_0	VertexIter
<Vertex: void nodeSearch(WorkSpace)>/@parameter0	WorkSpace
<Graph: Graph kruskal()>/@this	Graph
<Vertex$VertexIter2: void <init>(Vertex)>/this#_0	Vertex$VertexIter2
<Graph: Graph prim(Vertex)>/$r12	java.lang.String
<Graph: void display()>/edgeiter_$$A_1#_177	EdgeIter
<Main: EdgeIfc addEdge(Graph,int)>/$i1	int	@Prog
<Main: void main(java.lang.String[])>/i#_34	java.io.IOException	@Prog
<Graph: void <init>()>/this#_0	Graph
<Edge: void adjustAdorns(EdgeIfc)>/@this	Edge	@EdgeObjects
<Vertex: void <init>()>/$r3	java.util.LinkedList
<Graph: Graph prim(Vertex)>/vtx_$$A_1#_634	Vertex
<Graph: Graph prim(Vertex)>/$r15	Vertex
<Graph: void display()>/$r6	java.io.PrintStream
<Edge: Vertex getStart()>/$r0	Vertex	@EdgeObjects
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l1#_0	java.lang.Object
<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_1#_431	Vertex
<Graph: void stopBenchmark()>/@this	Graph	@Benchmark
<Vertex: void nodeSearch(WorkSpace)>/$z2	boolean
<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	Graph
<Main: void main(java.lang.String[])>/$r14	int[]	@Prog
<Graph: void runBenchmark(java.lang.String)>/$r5	java.lang.StringBuilder	@Benchmark
<Graph: Graph prim(Vertex)>/$r8	java.lang.String
<Main: void main(java.lang.String[])>/$r13	int[]	@Prog
<Vertex$VertexIter2: Vertex next()>/$r3	Vertex	@GN_OnlyNeighbors
<Graph: Graph computeTranspose(Graph)>/@parameter0	Graph	@Transpose
<Neighbor: void <init>()>/@this	Neighbor
<Graph$Comparator2: void <init>(Graph)>/@parameter0	Graph
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l0#_0	Graph$Comparator2
<Graph$Comparator2: void <init>(Graph)>/this#_0	Graph$Comparator2
<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter1	Vertex	@MSTPrim
<Main: void main(java.lang.String[])>/$r6	Vertex[]	@Prog
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i3	int
<Graph: Graph prim(Vertex)>/uneighbors#_577	java.util.LinkedList
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@this	Graph$EdgeIter1
<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0	Neighbor	@GN_OnlyNeighbors
<Graph: Graph computeTranspose(Graph)>/$numconstant0	int	@Transpose
<Graph: Graph prim(Vertex)>/$r6	java.lang.Object
<Graph: Graph kruskal()>/theEdge#_499	EdgeIfc
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/$i0	int	@StronglyConnected
<Neighbor: void <init>(Vertex,Edge)>/this#_0	Neighbor
<Vertex: void display()>/$r28	java.lang.StringBuilder
<Vertex: void addWeight(int)>/weight#_0	int	@Weighted
<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_3#_500	Vertex
<CycleWorkSpace: void init_vertex(Vertex)>/$numconstant0	int	@Cycle
<Graph: Graph kruskal()>/$i1	int
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$null0	EdgeIfc	@EdgeObjects
<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant0	int	@StronglyConnected
<Graph: Graph kruskal()>/j_$$A_3#_448	int
<Graph: void numberVertices()>/@this	Graph	@Number
<Vertex$VertexIter3: Vertex next()>/$r2	Neighbor	@GEN_Edges
<Vertex: void display()>/$r19	java.lang.String
<CycleWorkSpace: void preVisitAction(Vertex)>/$i0	int
<Graph: Graph computeTranspose(Graph)>/the_graph#_0	Graph	@Transpose
<Graph: void endProfile()>/$l1	long	@Benchmark
<Neighbor: void display()>/$r0	java.lang.StringBuilder	@GN_OnlyNeighbors
<Graph$Comparator1: void <init>(Graph)>/@this	Graph$Comparator1
<Graph: void endProfile()>/$l4	long	@Benchmark
<Vertex: void addWeight(int)>/$r4	Neighbor	@Weighted
<Graph: Graph prim(Vertex)>/en#_582	EdgeIfc
<Graph: void graphSearch(WorkSpace)>/vxiter#_293	VertexIter
<Vertex: void addNeighbor(Neighbor)>/$r0	java.util.LinkedList	@GEN_Edges
<Graph: Graph kruskal()>/$r22	java.util.LinkedList
<Graph: void <init>()>/$r0	java.util.LinkedList
<Vertex: void display()>/$r21	java.lang.String
<Vertex: void addEdge(Neighbor)>/$r0	java.util.LinkedList	@GN_OnlyNeighbors
<Main: EdgeIfc addEdge(Graph,int)>/@parameter1	int	@Prog
<Vertex: void nodeSearch(WorkSpace)>/v#_211	Vertex
<Graph: void sortVertices(java.util.Comparator)>/c#_0	java.util.Comparator
<WorkSpace: void preVisitAction(Vertex)>/@parameter0	Vertex	@SearchBase
<Vertex: void display()>/$r37	java.lang.StringBuilder
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r3	java.lang.String	@EdgeObjects
<Graph: Graph computeTranspose(Graph)>/$r3	Vertex	@Transpose
<Main: void main(java.lang.String[])>/$r8	java.lang.StringBuilder	@Prog
<Graph: Graph prim(Vertex)>/$r1	java.util.HashSet
<Neighbor: void <init>(Vertex,int)>/@parameter1	int
<Graph: Vertex findsVertex(java.lang.String)>/$z0	boolean
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l2#_0	java.lang.Object
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter0	EdgeIfc	@MSTKruskal
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$i0	int	@StronglyConnected
<Main: void main(java.lang.String[])>/args#_0	java.lang.String[]	@Prog
<Graph: void runBenchmark(java.lang.String)>/e#_197	java.io.IOException	@Benchmark
<Vertex$VertexIter3: Vertex next()>/$r1	java.lang.Object	@GEN_Edges
<Graph$Comparator1: int compare(Vertex,Vertex)>/@this	Graph$Comparator1	@StronglyConnected
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	Vertex
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter1	EdgeIfc	@MSTKruskal
<Vertex$VertexIter2: boolean hasNext()>/@this	Vertex$VertexIter2	@GN_OnlyNeighbors
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l1#_0	java.lang.Object
<Vertex$EdgeIter3: void <init>(Vertex)>/$r1	java.util.Iterator
<Graph$Comparator1: void <init>(Graph)>/this#_0	Graph$Comparator1
<RegionWorkSpace: void init_vertex(Vertex)>/v#_0	Vertex	@Connected
<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545	VertexIter
<Vertex$VertexIter2: Vertex next()>/$r1	java.lang.Object	@GN_OnlyNeighbors
<Edge: void display()>/$r3	java.lang.String	@EdgeObjects
<Graph: Graph computeTranspose(Graph)>/$r0	java.util.HashMap	@Transpose
<RegionWorkSpace: void postVisitAction(Vertex)>/v#_0	Vertex	@Connected
<Vertex: void setWeight(int)>/$r0	java.util.LinkedList	@Weighted /\ G_NoEdges
<Vertex$EdgeIter2: boolean hasNext()>/@this	Vertex$EdgeIter2	@EdgeObjects /\ GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/num_vertices_$$A_1_$$A_1#_29	int	@Prog
<Vertex$EdgeIter1: void <init>(Vertex)>/$r1	java.util.Iterator
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l1#_0	java.lang.Object
<Vertex: void display()>/$r59	java.lang.String
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i2	int
<Edge: Vertex getOtherVertex(Vertex)>/@this	Edge	@EdgeObjects
<Graph: Graph prim(Vertex)>/v#_584	Vertex
<Graph$Comparator3: void <init>(Graph)>/@this	Graph$Comparator3
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter0	java.lang.Object
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i1	int	@MSTKruskal
<RegionWorkSpace: void postVisitAction(Vertex)>/@parameter0	Vertex	@Connected
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_4#_591	boolean
<Vertex$EdgeIter1: EdgeIfc next()>/$r2	EdgeIfc	@EdgeObjects /\ G_NoEdges
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l2#_0	java.lang.Object
<Vertex$VertexIter3: void <init>(Vertex)>/@parameter0	Vertex
<Vertex: void nodeSearch(WorkSpace)>/header#_230	Vertex
<Vertex: void display()>/$r10	java.lang.StringBuilder
<Graph: Graph kruskal()>/$i2	int
<Vertex: void display()>/$stringconstant0	java.lang.String
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0	Graph
<Vertex: void adjustAdorns(Vertex,int)>/@parameter0	Vertex	@G_NoEdges
<Vertex: Vertex getOtherVertex(Vertex)>/@parameter0	Vertex	@G_NoEdges
<Neighbor: void setWeight(int)>/weight#_0	int	@Weighted /\ GN_OnlyNeighbors
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l2#_0	java.lang.Object
<Graph$EdgeIter1: EdgeIfc next()>/this#_0	Graph$EdgeIter1	@EdgeObjects
<Graph: Graph kruskal()>/$r28	java.lang.Object
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter1	java.lang.Object
<Graph: void addEdge(Vertex,Neighbor)>/@parameter1	Neighbor	@GN_OnlyNeighbors
<Graph: Graph kruskal()>/j_$$A_6#_460	int
<Vertex: void <init>()>/$r1	java.util.LinkedList
<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	Vertex	@Transpose
<Main: void main(java.lang.String[])>/num_vertices#_21	java.io.IOException	@Prog
<CycleWorkSpace: void preVisitAction(Vertex)>/$i1	int
<Neighbor: void <init>()>/$null0	Vertex
<Graph: void stopProfile()>/$l4	long	@Benchmark
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r5	java.lang.String	@EdgeObjects
<Graph: void stopProfile()>/$l1	long	@Benchmark
<Edge: Vertex getStart()>/@this	Edge	@EdgeObjects
<Graph: Graph kruskal()>/i#_497	int
<Vertex: void display()>/$r12	java.lang.String
<Graph: Graph prim(Vertex)>/vn#_581	NeighborIfc
<RegionWorkSpace: void nextRegionAction(Vertex)>/@this	RegionWorkSpace	@Connected
<Vertex: Vertex getEnd()>/@this	Vertex	@G_NoEdges
<Vertex$EdgeIter3: EdgeIfc next()>/@this	Vertex$EdgeIter3	@EdgeObjects /\ GEN_Edges
<Neighbor: void <init>(Vertex,int)>/theNeighbor#_0	Vertex
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@this	FinishTimeWorkSpace	@StronglyConnected
<Vertex$EdgeIter2: void <init>(Vertex)>/l1#_0	Vertex
<RegionWorkSpace: void init_vertex(Vertex)>/@this	RegionWorkSpace	@Connected
<Graph: Graph kruskal()>/$i3	int
<Graph: Graph kruskal()>/v_$$A_5#_501	Vertex
<Graph: Graph computeTranspose(Graph)>/$r1	Graph	@Transpose
<Graph: Graph prim(Vertex)>/e#_664	EdgeIfc
<Graph: Graph prim(Vertex)>/$r11	Graph$Comparator2
<Graph: Graph prim(Vertex)>/$z13	boolean
<Graph: Graph prim(Vertex)>/$numconstant2	int
<Graph: void endProfile()>/$r1	java.io.PrintStream	@Benchmark
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	Graph
<Edge: void display()>/$r12	java.lang.StringBuilder	@EdgeObjects
<Neighbor: void display()>/$r1	Vertex	@GN_OnlyNeighbors
<CycleWorkSpace: void <init>()>/this#_0	CycleWorkSpace
<WorkSpace: void init_vertex(Vertex)>/@parameter0	Vertex	@SearchBase
<Vertex: void display()>/$stringconstant4	java.lang.String
<Graph: void sortEdges(java.util.Comparator)>/$r0	java.util.LinkedList	@EdgeObjects
<Main: void main(java.lang.String[])>/$r9	java.lang.String	@Prog
<Graph: void run(Vertex)>/$r1	java.io.PrintStream
<Vertex: Vertex getStart()>/@this	Vertex	@Undirected /\ G_NoEdges
<Vertex: java.lang.String getName()>/this#_0	Vertex
<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	Vertex	@G_NoEdges
<NumberWorkSpace: void <init>()>/@this	NumberWorkSpace
<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant2	int	@MSTPrim
<Graph: Graph kruskal()>/$r1	java.util.LinkedList
<Vertex$VertexIter1: Vertex next()>/@this	Vertex$VertexIter1	@G_NoEdges
<Graph: Graph kruskal()>/theNewEdge#_511	EdgeIfc
<Vertex: java.util.LinkedList getNeighborsObj()>/@this	Vertex	@GN_OnlyNeighbors
<Vertex: void setWeight(int)>/weight#_0	int	@Weighted /\ G_NoEdges
<Vertex$EdgeIter3: void <init>(Vertex)>/@this	Vertex$EdgeIter3
<Graph: int readNumber()>/$r3	java.lang.String	@Benchmark
<Graph: void run(Vertex)>/v#_0	Vertex
<Vertex$VertexIter3: void <init>(Vertex)>/$r0	java.util.LinkedList
<Edge: void display()>/$r2	java.lang.StringBuilder	@EdgeObjects
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/$r1	Vertex
<Vertex: void display()>/v#_266	Vertex
<Graph: void addEdge(Vertex,Neighbor)>/start#_0	Vertex	@GN_OnlyNeighbors
<WorkSpace: void nextRegionAction(Vertex)>/@parameter0	Vertex	@SearchBase
<VertexIter: boolean hasNext()>/this#_0	VertexIter
<Vertex$EdgeIter1: EdgeIfc next()>/$r1	java.lang.Object	@EdgeObjects /\ G_NoEdges
<Graph: Graph kruskal()>/this#_0	Graph
<Main: void main(java.lang.String[])>/$r0	Graph	@Prog
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l0#_0	Graph$Comparator3
<Vertex: VertexIter getNeighbors()>/@this	Vertex	@G_NoEdges
<Vertex$EdgeIter2: boolean hasNext()>/$r0	java.util.Iterator	@EdgeObjects /\ GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/$r5	java.lang.String
<Vertex: void display()>/$r32	java.lang.String
<Vertex: void display()>/$r7	java.lang.String
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	Graph
<Graph: Vertex findsVertex(java.lang.String)>/$null1	Vertex
<Graph: void display()>/$stringconstant1	java.lang.String
<Graph$EdgeIter1: void <init>(Graph)>/@this	Graph$EdgeIter1
<Graph: void runBenchmark(java.lang.String)>/$r0	java.io.FileReader	@Benchmark
<Graph: void resumeProfile()>/$l1	long	@Benchmark
<Vertex$VertexIter3: void <init>(Vertex)>/@this	Vertex$VertexIter3
<Graph: Graph kruskal()>/$i4	int
<Vertex: void display()>/$stringconstant7	java.lang.String
<Graph: void runBenchmark(java.lang.String)>/$r1	java.io.IOException	@Benchmark
<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	Graph
<Graph: Graph strongComponents()>/$null0	Graph$Comparator1
<Graph: Graph prim(Vertex)>/vtx#_638	Vertex
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	Vertex	@SearchBase
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@this	FinishTimeWorkSpace	@StronglyConnected
<EdgeIter: boolean hasNext()>/@this	EdgeIter
<Graph: Graph prim(Vertex)>/$r2	java.lang.String
<Graph: Graph strongComponents()>/$r0	FinishTimeWorkSpace
<Vertex: void setWeight(int)>/this#_0	Vertex	@Weighted /\ G_NoEdges
<Edge: Vertex getOtherVertex(Vertex)>/$r0	Vertex	@EdgeObjects
<Graph: void run(Vertex)>/$stringconstant0	java.lang.String
<Vertex: void nodeSearch(WorkSpace)>/v_$$A_2#_224	Vertex
<WorkSpace: void init_vertex(Vertex)>/this#_0	WorkSpace	@SearchBase
<Vertex: void adjustAdorns(Vertex,int)>/$r1	java.lang.Object	@G_NoEdges
<Graph: void graphSearch(WorkSpace)>/$z1	boolean
<Graph: Graph computeTranspose(Graph)>/newVertices#_347	java.util.HashMap	@Transpose
<Graph: Graph strongComponents()>/@this	Graph
<Graph: Graph prim(Vertex)>/this#_0	Graph
<Graph: Graph prim(Vertex)>/r#_0	Vertex
<Vertex$VertexIter2: void <init>(Vertex)>/$r0	java.util.LinkedList
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this	WorkSpaceTranspose	@StronglyConnected
<Main: void <init>()>/this#_0	Main
<Edge: void display()>/$r4	java.lang.StringBuilder	@EdgeObjects
<Main: void main(java.lang.String[])>/num_vertices_$$A_1_$$A_2#_68	int	@Prog
<Graph: Graph kruskal()>/i_$$A_2#_497	int
<Graph: Graph prim(Vertex)>/$i0	int
<Graph$Comparator1: int compare(Vertex,Vertex)>/this#_0	Graph$Comparator1	@StronglyConnected
<Graph: void runBenchmark(java.lang.String)>/@this	Graph	@Benchmark
<Edge: Vertex getOtherVertex(Vertex)>/$r2	Vertex	@EdgeObjects
<Graph: VertexIter getVertices()>/@this	Graph
<Graph: Graph prim(Vertex)>/vtx_$$A_3#_650	Vertex
<Graph$Comparator3: void <init>(Graph)>/this#_0	Graph$Comparator3
<Graph: Graph prim(Vertex)>/@this	Graph
<Vertex: void addAdjacent(Vertex)>/@this	Vertex	@G_NoEdges
<Vertex$EdgeIter1: void <init>(Vertex)>/@parameter0	Vertex
<Vertex: void nodeSearch(WorkSpace)>/$r1	java.util.LinkedList
<Main: void main(java.lang.String[])>/$i3	int	@Prog
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter2	int
<Graph: void display()>/edgeiter#_173	int
<Vertex: void display()>/vxiter_$$A_2#_259	int
<Graph: void run(Vertex)>/this#_0	Graph
<Main: EdgeIfc addEdge(Graph,int)>/$numconstant0	int	@Prog
<Main: void main(java.lang.String[])>/totalTime_$$A_2#_63	java.io.IOException	@Prog
<Main: EdgeIfc addEdge(Graph,int)>/@parameter0	Graph	@Prog
<Graph: int readNumber()>/$r2	java.io.Reader	@Benchmark
<RegionWorkSpace: void postVisitAction(Vertex)>/$i0	int	@Connected
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_2#_44	int	@Prog
<Vertex: void display()>/$r20	java.lang.StringBuilder
<Neighbor: int getWeight()>/@this	Neighbor	@Weighted /\ GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$r12	Vertex	@Prog
<Vertex$VertexIter1: void <init>(Vertex)>/$r0	java.util.LinkedList
<Graph: void connectedComponents()>/$r0	RegionWorkSpace	@Connected
<RegionWorkSpace: void nextRegionAction(Vertex)>/@parameter0	Vertex	@Connected
<Vertex$EdgeIter1: EdgeIfc next()>/this#_0	Vertex$EdgeIter1	@EdgeObjects /\ G_NoEdges
<Vertex: void display()>/$r36	java.lang.StringBuilder
<CycleWorkSpace: void preVisitAction(Vertex)>/$z0	boolean
<Neighbor: void display()>/@this	Neighbor	@GN_OnlyNeighbors
<Graph: void display()>/this#_0	Graph
<Vertex: void nodeSearch(WorkSpace)>/$r3	java.lang.Object
<Vertex: void addWeight(int)>/@parameter0	int	@Weighted
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@this	Graph$Comparator1
<Graph: Graph kruskal()>/j_$$A_1_$$A_1#_448	int
<Graph: int readNumber()>/$r5	java.lang.String	@Benchmark
<Graph: void display()>/$stringconstant4	java.lang.String
<Vertex: void <init>()>/@this	Vertex
<RegionWorkSpace: void init_vertex(Vertex)>/this#_0	RegionWorkSpace	@Connected
<Graph: int readNumber()>/@this	Graph	@Benchmark
<Main: void main(java.lang.String[])>/i_$$A_2#_44	int	@Prog
<Graph: Graph kruskal()>/$r17	java.util.LinkedList
<Vertex$VertexIter2: void <init>(Vertex)>/l1#_0	Vertex
<Graph: int readNumber()>/$i2	int	@Benchmark
<Graph: Graph kruskal()>/A#_401	java.util.LinkedList
<Neighbor: void setWeight(int)>/this#_0	Neighbor	@Weighted /\ GN_OnlyNeighbors
<Graph: Graph computeTranspose(Graph)>/$r6	java.lang.Object	@Transpose
<Vertex: void display()>/this#_0	Vertex
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i3	int	@MSTKruskal
<CycleWorkSpace: void init_vertex(Vertex)>/$numconstant1	int	@Cycle
<Graph: void display()>/edgeiter_$$A_1_$$A_1#_174	int
<Main: void main(java.lang.String[])>/$r3	int[]	@Prog
<Graph: Graph computeTranspose(Graph)>/@this	Graph	@Transpose
<Graph: Graph prim(Vertex)>/vtx_$$A_2#_666	Vertex
<Main: EdgeIfc addEdge(Graph,int)>/$i0	int	@Prog
<Graph: Graph prim(Vertex)>/$r16	java.lang.String
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z2	boolean	@EdgeObjects
<Vertex$VertexIter1: Vertex next()>/$r2	Vertex	@G_NoEdges
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant0	int	@MSTKruskal
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l2#_0	Graph$Comparator2
<Vertex$VertexIter2: boolean hasNext()>/$r0	java.util.Iterator	@GN_OnlyNeighbors
<VertexIter: boolean hasNext()>/$r0	java.util.Iterator
<CycleWorkSpace: void preVisitAction(Vertex)>/$numconstant0	int
<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0	Vertex	@MSTPrim
<Graph: void display()>/$stringconstant2	java.lang.String
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l0#_0	Graph$Comparator2
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0	Graph
<Graph: Graph kruskal()>/$r16	java.util.LinkedList
<Graph: Graph prim(Vertex)>/residue#_604	Vertex
<Graph: Graph computeTranspose(Graph)>/$r5	java.lang.String	@Transpose
<Neighbor: Vertex getStart()>/$null0	Vertex	@GN_OnlyNeighbors
<Neighbor: void display()>/$r4	java.lang.String	@GN_OnlyNeighbors
<Vertex: void nodeSearch(WorkSpace)>/v_$$A_1#_208	Vertex
<Graph: boolean cycleCheck()>/this#_0	Graph	@Cycle
<Vertex$EdgeIter3: void <init>(Vertex)>/this#_0	Vertex$EdgeIter3
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l1#_0	Vertex
<Vertex: VertexIter getNeighbors()>/this#_0	Vertex	@G_NoEdges
<WorkSpaceTranspose: void preVisitAction(Vertex)>/v#_0	Vertex	@StronglyConnected
<Graph: void stopProfile()>/$l5	long	@Benchmark
<Graph: void display()>/$r3	java.util.LinkedList
<Graph: void graphSearch(WorkSpace)>/@this	Graph
<VertexIter: void <init>(Graph)>/$r1	java.util.Iterator
<Graph: void endProfile()>/$l3	long	@Benchmark
<Graph: Graph prim(Vertex)>/$null2	Graph$Comparator2
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z3	boolean	@EdgeObjects
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i0	int
<NumberWorkSpace: void preVisitAction(Vertex)>/this#_0	NumberWorkSpace
<Vertex: java.util.LinkedList getNeighborsObj()>/$r0	java.util.LinkedList	@GN_OnlyNeighbors
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	Vertex
<Neighbor: void adjustAdorns(EdgeIfc)>/@parameter0	EdgeIfc	@GN_OnlyNeighbors
<Graph: Graph kruskal()>/$i5	int
<Vertex$EdgeIter1: void <init>(Vertex)>/this#_0	Vertex$EdgeIter1
<Vertex$VertexIter1: boolean hasNext()>/$z0	boolean	@G_NoEdges
<Vertex: void adjustAdorns(Vertex,int)>/$r4	java.util.LinkedList	@G_NoEdges
<Graph: void display()>/@this	Graph
<Main: EdgeIfc addEdge(Graph,int)>/$r1	Vertex[]	@Prog
<WorkSpace: void postVisitAction(Vertex)>/this#_0	WorkSpace	@SearchBase
<Vertex$VertexIter3: boolean hasNext()>/this#_0	Vertex$VertexIter3	@GEN_Edges
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/$r0	EdgeIfc
<Vertex$VertexIter3: boolean hasNext()>/$z0	boolean	@GEN_Edges
<EdgeIter: EdgeIfc next()>/$null0	EdgeIfc
<Graph: Vertex findsVertex(java.lang.String)>/name#_0	java.lang.String
<Graph: void graphSearch(WorkSpace)>/v_$$A_3#_306	Vertex
<Graph: Graph kruskal()>/v_$$A_4#_498	Vertex
<Vertex: void display()>/$stringconstant1	java.lang.String
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l2#_0	Vertex$VertexIter1
<Neighbor: int getWeight()>/$i0	int	@Weighted /\ GN_OnlyNeighbors
<Vertex: java.util.LinkedList getNeighborsObj()>/this#_0	Vertex	@GN_OnlyNeighbors
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z4	boolean	@EdgeObjects
<EdgeIfc: void display()>/@this	EdgeIfc
<RegionWorkSpace: void postVisitAction(Vertex)>/@this	RegionWorkSpace	@Connected
<Graph: Graph kruskal()>/$r15	java.util.LinkedList
<Vertex: void init_vertex(WorkSpace)>/$numconstant0	int	@SearchBase
<Graph$EdgeIter1: EdgeIfc next()>/@this	Graph$EdgeIter1	@EdgeObjects
<FinishTimeWorkSpace: void <init>()>/$numconstant0	int
<Vertex: void display()>/vxiter_$$A_1_$$A_1#_260	int
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@this	Graph$Comparator3
<Main: void main(java.lang.String[])>/$r5	Vertex	@Prog
<GlobalVarsWrapper: void <init>()>/this#_0	GlobalVarsWrapper
<WorkSpaceTranspose: void <init>()>/this#_0	WorkSpaceTranspose
<Neighbor: void display()>/$r2	java.lang.String	@GN_OnlyNeighbors
<VertexIter: void <init>()>/@this	VertexIter
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/$i0	int
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/$i0	int
<Graph: Graph kruskal()>/$z11	boolean
<Vertex: Vertex getEnd()>/$null0	Vertex	@G_NoEdges
<Vertex$EdgeIter1: void <init>(Vertex)>/@this	Vertex$EdgeIter1
<Vertex: void display()>/$i4	int
<Graph: Graph computeTranspose(Graph)>/$z2	boolean	@Transpose
<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant1	int	@MSTPrim
<Neighbor: void setWeight(int)>/@parameter0	int	@Weighted /\ GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_1#_579	int
<Vertex$EdgeIter2: void <init>(Vertex)>/@parameter0	Vertex
<Main: void main(java.lang.String[])>/$r16	java.lang.String	@Prog
<Vertex$EdgeIter2: void <init>(Vertex)>/@this	Vertex$EdgeIter2
<Vertex$EdgeIter3: EdgeIfc next()>/this#_0	Vertex$EdgeIter3	@EdgeObjects /\ GEN_Edges
<Neighbor: int getWeight()>/this#_0	Neighbor	@Weighted /\ GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/x_$$A_3#_546	Vertex
<WorkSpace: void preVisitAction(Vertex)>/v#_0	Vertex	@SearchBase
<Graph: void addVertex(Vertex)>/@this	Graph
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i1	int
<Vertex: void adjustAdorns(Neighbor)>/$r2	Neighbor	@GN_OnlyNeighbors
<Vertex: void display()>/vxiter#_259	int
<Edge: Vertex getOtherVertex(Vertex)>/this#_0	Edge	@EdgeObjects
<Neighbor: Vertex getOtherVertex(Vertex)>/this#_0	Neighbor	@GN_OnlyNeighbors
<Vertex: void display()>/$r29	java.io.PrintStream
<Vertex$VertexIter1: boolean hasNext()>/@this	Vertex$VertexIter1	@G_NoEdges
<Vertex$VertexIter1: void <init>(Vertex)>/@this	Vertex$VertexIter1
<Graph: int readNumber()>/$i0	int	@Benchmark
<EdgeIfc: Vertex getStart()>/@this	EdgeIfc
<Vertex: void display()>/$r2	java.lang.StringBuilder
<Graph: Graph strongComponents()>/FTWS#_324	FinishTimeWorkSpace
<Vertex: void display()>/$stringconstant9	java.lang.String
<NumberWorkSpace: void <init>()>/$numconstant0	int
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@parameter0	Vertex	@StronglyConnected
<Graph: Graph kruskal()>/e1_$$A_1#_481	Graph
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r0	java.lang.String	@EdgeObjects
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0	Graph
<Graph: Graph prim(Vertex)>/$z11	boolean
<Vertex: void display()>/$r11	java.io.PrintStream
<CycleWorkSpace: void preVisitAction(Vertex)>/v#_0	Vertex
<Graph: void run(Vertex)>/$r0	java.lang.StringBuilder
<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484	VertexIter
<CycleWorkSpace: void init_vertex(Vertex)>/@parameter0	Vertex	@Cycle
<Graph$EdgeIter1: boolean hasNext()>/$z0	boolean	@EdgeObjects
<Graph: Vertex findsVertex(java.lang.String)>/$null0	Vertex
<Vertex: void nodeSearch(WorkSpace)>/$z4	boolean
<Vertex$VertexIter3: Vertex next()>/$r3	Vertex	@GEN_Edges
<Graph: void addVertex(Vertex)>/v#_0	Vertex
<Vertex: void display()>/$z0	boolean
<Vertex: void display()>/$r35	java.lang.StringBuilder
<Vertex: void display()>/$stringconstant3	java.lang.String
<Neighbor: void adjustAdorns(EdgeIfc)>/the_edge#_0	EdgeIfc	@GN_OnlyNeighbors
<Vertex: void display()>/$r18	java.lang.String
<VertexIter: void <init>(Graph)>/g#_0	Graph
<Graph: void <clinit>()>/$numconstant1	long
<Vertex: void addNeighbor(Neighbor)>/n#_0	Neighbor	@GEN_Edges
<Graph: void run(Vertex)>/$z0	boolean
<Graph: Graph kruskal()>/$r10	java.util.LinkedList
<Graph: void display()>/$r5	Vertex
<Vertex: EdgeIter getEdges()>/$null0	Vertex$EdgeIter1	@EdgeObjects /\ G_NoEdges
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/$r0	Vertex
<Main: void main(java.lang.String[])>/$r10	Vertex	@Prog
<Vertex: void adjustAdorns(Vertex,int)>/$r3	java.lang.Integer	@G_NoEdges
<Neighbor: void display()>/$r6	java.lang.String	@GN_OnlyNeighbors
<Vertex: void addAdjacent(Vertex)>/this#_0	Vertex	@G_NoEdges
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i6	int
<Vertex: void display()>/$i3	int
<VertexIter: Vertex next()>/@this	VertexIter
<RegionWorkSpace: void <init>()>/@this	RegionWorkSpace
<Vertex$VertexIter1: Vertex next()>/$r1	java.lang.Object	@G_NoEdges
<VertexIter: boolean hasNext()>/$z0	boolean
<Graph: void connectedComponents()>/this#_0	Graph	@Connected
<Vertex$VertexIter3: Vertex next()>/$r0	java.util.Iterator	@GEN_Edges
<Edge: void <init>(Vertex,Vertex,int)>/@parameter0	Vertex
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0	Graph
<Graph$Comparator2: int compare(Vertex,Vertex)>/this#_0	Graph$Comparator2	@MSTPrim
<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0	RegionWorkSpace	@Connected
<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter1	Vertex	@StronglyConnected
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_3#_580	int
<Graph: EdgeIter getEdges()>/@this	Graph
<Graph$EdgeIter1: void <init>(Graph)>/this#_0	Graph$EdgeIter1
<Vertex: void display()>/$r16	java.lang.StringBuilder
<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	Vertex	@Transpose
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@this	Graph$Comparator1
<Graph: void endProfile()>/$r2	java.lang.StringBuilder	@Benchmark
<Vertex$EdgeIter3: EdgeIfc next()>/$r1	java.lang.Object	@EdgeObjects /\ GEN_Edges
<Graph: Graph kruskal()>/$null0	Graph$Comparator3
<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant1	int	@StronglyConnected
<Graph: Graph strongComponents()>/$r2	WorkSpaceTranspose
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i1	int	@StronglyConnected
<Vertex: void adjustAdorns(Vertex,int)>/$r0	java.util.LinkedList	@G_NoEdges
<Graph: void run(Vertex)>/@this	Graph
<Vertex$EdgeIter3: EdgeIfc next()>/$r3	Edge	@EdgeObjects /\ GEN_Edges
<WorkSpace: void preVisitAction(Vertex)>/this#_0	WorkSpace	@SearchBase
<Graph: Graph prim(Vertex)>/isNeighborInQueue#_565	boolean
<CycleWorkSpace: void postVisitAction(Vertex)>/@this	CycleWorkSpace	@Cycle
<Graph: Vertex findsVertex(java.lang.String)>/this#_0	Graph
<Graph: void startProfile()>/$numconstant0	long	@Benchmark
<Graph: int readNumber()>/$numconstant0	int	@Benchmark
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1	Vertex	@SearchBase
<Vertex$VertexIter1: Vertex next()>/$r0	java.util.Iterator	@G_NoEdges
<Vertex$EdgeIter3: EdgeIfc next()>/$r2	Neighbor	@EdgeObjects /\ GEN_Edges
<Graph: void graphSearch(WorkSpace)>/$z3	boolean
<Graph: Graph prim(Vertex)>/$z6	boolean
<Vertex: void display()>/$r52	java.lang.StringBuilder
<Graph: Graph strongComponents()>/$r1	Graph$Comparator1
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/this#_0	FinishTimeWorkSpace	@StronglyConnected
<Edge: void adjustAdorns(EdgeIfc)>/$i0	int	@EdgeObjects
<Main: EdgeIfc addEdge(Graph,int)>/$r4	EdgeIfc	@Prog
<RegionWorkSpace: void nextRegionAction(Vertex)>/$i0	int	@Connected
<Graph: Graph kruskal()>/theNewEnd#_505	Vertex
<Vertex: void addWeight(int)>/$r3	java.lang.Object	@Weighted
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_3#_51	int	@Prog
<Graph: Graph computeTranspose(Graph)>/vxiter#_353	VertexIter	@Transpose
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/v#_0	Vertex	@StronglyConnected
<Graph: void addVertex(Vertex)>/this#_0	Graph
<Graph: Graph kruskal()>/vaux#_471	Vertex
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0	EdgeIfc	@MSTKruskal
<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0	Vertex	@MSTPrim
<Neighbor: Vertex getStart()>/this#_0	Neighbor	@GN_OnlyNeighbors
<Vertex$VertexIter2: Vertex next()>/$r2	Neighbor	@GN_OnlyNeighbors
<Graph: Graph kruskal()>/$r29	java.lang.String
<Vertex: void display()>/$r34	java.io.PrintStream
<Graph: void stopProfile()>/$l0	long	@Benchmark
<RegionWorkSpace: void nextRegionAction(Vertex)>/$i1	int	@Connected
<Main: void main(java.lang.String[])>/$stringconstant0	java.lang.String	@Prog
<Graph: int readNumber()>/theString#_224	java.lang.String	@Benchmark
<Graph: Graph kruskal()>/$r24	Graph
<Vertex: void display()>/$i2	int
<Graph$EdgeIter1: void <init>(Graph)>/$r1	java.util.Iterator
<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	java.util.LinkedList
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i2	int	@MSTKruskal
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_6#_67	int	@Prog
<Vertex$VertexIter1: boolean hasNext()>/$r0	java.util.Iterator	@G_NoEdges
<Graph: void runBenchmark(java.lang.String)>/$r6	java.lang.String	@Benchmark
<Graph: Graph kruskal()>/$z0	boolean
<Vertex$VertexIter1: Vertex next()>/this#_0	Vertex$VertexIter1	@G_NoEdges
<Vertex$VertexIter1: void <init>(Vertex)>/this#_0	Vertex$VertexIter1
<Graph: void graphSearch(WorkSpace)>/this#_0	Graph
<Graph: Graph prim(Vertex)>/theNewEdge#_663	EdgeIfc
<Graph: Graph prim(Vertex)>/indx#_540	java.util.HashSet
<Vertex: void nodeSearch(WorkSpace)>/this#_0	Vertex
<Vertex: void display()>/$r5	java.lang.Object
<Main: void main(java.lang.String[])>/@parameter0	java.lang.String[]	@Prog
<Vertex: void display()>/$r27	java.lang.String
<Graph: Graph strongComponents()>/gaux#_334	Graph
<Vertex: void adjustAdorns(Vertex,int)>/the_weight#_97	int	@G_NoEdges
<Graph: void addVertex(Vertex)>/@parameter0	Vertex
<Vertex: EdgeIter getEdges()>/$r0	Vertex$EdgeIter1	@EdgeObjects /\ G_NoEdges
<Vertex: void display()>/$stringconstant8	java.lang.String
<Graph: boolean cycleCheck()>/c#_393	CycleWorkSpace	@Cycle
<Main: void main(java.lang.String[])>/$r17	Vertex	@Prog
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i5	int
<Vertex: void nodeSearch(WorkSpace)>/$numconstant1	int
<Graph: Graph kruskal()>/$r9	java.util.LinkedList
<Vertex: void display()>/$r8	java.lang.StringBuilder
<Graph: Graph kruskal()>/$z5	boolean
<Vertex: void display()>/$r53	java.io.PrintStream
<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	Vertex	@Prog
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l0#_0	Vertex$EdgeIter1
<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207	VertexIter
<Neighbor: Vertex getEnd()>/@this	Neighbor	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$r19	java.io.PrintStream	@Prog
<Graph: void display()>/$r9	java.io.PrintStream
<WorkSpace: void <init>()>/@this	WorkSpace
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@parameter0	Vertex	@StronglyConnected
<Graph: Graph computeTranspose(Graph)>/neighbors#_374	VertexIter	@Transpose
<Graph: int readNumber()>/ch_$$A_1_$$A_2#_213	int	@Benchmark
<Graph: Graph kruskal()>/$r26	Vertex
<CycleWorkSpace: void preVisitAction(Vertex)>/@parameter0	Vertex
<Graph: Graph prim(Vertex)>/x#_530	Vertex
<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0	EdgeIfc	@G_NoEdges
<Neighbor: void <init>(Vertex,Edge)>/@this	Neighbor
<Graph: void <init>()>/$r1	java.util.LinkedList
<Graph: Graph kruskal()>/$r23	java.util.LinkedList
<Graph: int readNumber()>/$r4	java.lang.String	@Benchmark
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_8#_67	int	@Prog
<Edge: Vertex getOtherVertex(Vertex)>/$null0	Vertex	@EdgeObjects
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter0	java.lang.Object
<WorkSpace: void preVisitAction(Vertex)>/@this	WorkSpace	@SearchBase
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter0	Vertex
<Graph$EdgeIter1: boolean hasNext()>/$r0	java.util.Iterator	@EdgeObjects
<Graph: Graph kruskal()>/urep#_440	Vertex
<Vertex: void display()>/$i0	int
<Edge: Vertex getOtherVertex(Vertex)>/$r1	Vertex	@EdgeObjects
<Graph: Graph kruskal()>/j_$$A_4#_460	int
<Graph: Graph kruskal()>/vaux_$$A_2#_449	Vertex
<Graph: void graphSearch(WorkSpace)>/v#_302	Vertex
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i4	int
<Vertex: void display()>/$i1	int
<VertexIter: Vertex next()>/$r1	java.lang.Object
<Edge: void display()>/$i0	int	@EdgeObjects
<Graph: Graph kruskal()>/v_$$A_2#_471	Vertex
<Graph: Graph computeTranspose(Graph)>/newvxiter#_366	VertexIter	@Transpose
<Graph: Graph kruskal()>/$r2	java.util.LinkedList
<Graph: Graph kruskal()>/$r5	java.lang.String
<Neighbor: void <init>(Vertex,Edge)>/v#_0	Vertex
<Graph: Graph prim(Vertex)>/$r7	java.lang.String
<Neighbor: Vertex getEnd()>/this#_0	Neighbor	@GN_OnlyNeighbors
<Vertex: void display()>/$r40	java.io.PrintStream
<VertexIter: boolean hasNext()>/@this	VertexIter
<Graph: void endProfile()>/$l2	long	@Benchmark
<Neighbor: void <init>()>/$null2	Edge
<Graph: int readNumber()>/$r1	java.io.Reader	@Benchmark
<Edge: int getWeight()>/$i0	int	@EdgeObjects /\ Weighted
<Vertex: void addEdge(Neighbor)>/@this	Vertex	@GN_OnlyNeighbors
<Edge: void display()>/$r9	java.lang.StringBuilder	@EdgeObjects
<Graph: Graph kruskal()>/$r6	Vertex
<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	Vertex	@Transpose
<Graph: Graph strongComponents()>/WST#_337	WorkSpaceTranspose
<EdgeIfc: void adjustAdorns(EdgeIfc)>/@parameter0	EdgeIfc
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i1	int	@MSTPrim
<Graph: Vertex findsVertex(java.lang.String)>/$r0	java.lang.String
<Graph: Graph prim(Vertex)>/edgeiter_$$A_1#_635	java.lang.String
<Vertex: void addEdge(Neighbor)>/@parameter0	Neighbor	@GN_OnlyNeighbors
<Edge: void <init>(Vertex,Vertex,int)>/@parameter2	int
<Graph$Comparator3: void <init>(Graph)>/l1#_0	Graph
<Graph: void run(Vertex)>/gaux#_259	Graph
<CycleWorkSpace: void preVisitAction(Vertex)>/@this	CycleWorkSpace
<Vertex: void adjustAdorns(Neighbor)>/this#_0	Vertex	@GN_OnlyNeighbors
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant1	int	@MSTKruskal
<Edge: Vertex getEnd()>/@this	Edge	@EdgeObjects
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0	Vertex	@EdgeObjects
<Graph: Graph kruskal()>/v#_410	Vertex
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_3#_587	boolean
<Vertex$EdgeIter3: boolean hasNext()>/$r0	java.util.Iterator	@EdgeObjects /\ GEN_Edges
<WorkSpaceTranspose: void preVisitAction(Vertex)>/@parameter0	Vertex	@StronglyConnected
<Graph: Vertex findsVertex(java.lang.String)>/theVertex#_162	Vertex
<Neighbor: Vertex getOtherVertex(Vertex)>/vertex#_0	Vertex	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/$r22	java.io.IOException	@Prog
<Graph: Graph prim(Vertex)>/$r3	java.lang.String
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/$i0	int	@StronglyConnected
<Vertex$EdgeIter3: EdgeIfc next()>/$r0	java.util.Iterator	@EdgeObjects /\ GEN_Edges
<Vertex: void <init>()>/$r2	java.util.LinkedList
<Main: void main(java.lang.String[])>/$r21	java.lang.String	@Prog
<CycleWorkSpace: void preVisitAction(Vertex)>/this#_0	CycleWorkSpace
<Edge: Vertex getOtherVertex(Vertex)>/vertex#_0	Vertex	@EdgeObjects
<Graph: Graph kruskal()>/$r4	Vertex
<Main: void main(java.lang.String[])>/totalTime_$$A_1#_75	long	@Prog
<Neighbor: Vertex getOtherVertex(Vertex)>/@this	Neighbor	@GN_OnlyNeighbors
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/v#_0	Vertex	@StronglyConnected
<Graph: void run(Vertex)>/$r2	java.lang.StringBuilder
<Graph: Graph computeTranspose(Graph)>/$z0	boolean	@Transpose
<Vertex: Vertex getOtherVertex(Vertex)>/@this	Vertex	@G_NoEdges
<Vertex: void display()>/$r9	java.lang.String
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r4	java.lang.String	@EdgeObjects
<Vertex: void <init>()>/this#_0	Vertex
<Vertex: int getWeight()>/$numconstant0	int	@G_NoEdges
<Vertex: VertexIter getNeighbors()>/$null0	Vertex$VertexIter1	@G_NoEdges
<Graph: void resumeProfile()>/$l0	long	@Benchmark
<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646	VertexIter
<Vertex: void adjustAdorns(Neighbor)>/@parameter0	Neighbor	@GN_OnlyNeighbors
<Graph: void sortVertices(java.util.Comparator)>/$r0	java.util.LinkedList
<Vertex: void adjustAdorns(Vertex,int)>/the_vertex#_0	Vertex	@G_NoEdges
<CycleWorkSpace: void init_vertex(Vertex)>/v#_0	Vertex	@Cycle
<Graph: void runBenchmark(java.lang.String)>/$r4	java.lang.StringBuilder	@Benchmark
<Graph: void graphSearch(WorkSpace)>/w#_0	WorkSpace
<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0	Vertex	@StronglyConnected
<EdgeIter: void <init>()>/@this	EdgeIter
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_1#_581	boolean
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i2	int	@StronglyConnected
<Graph$EdgeIter1: EdgeIfc next()>/$r2	EdgeIfc	@EdgeObjects
<Graph: void runBenchmark(java.lang.String)>/this#_0	Graph	@Benchmark
<Edge: void <init>(Vertex,Vertex,int)>/@parameter1	Vertex
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l0#_0	Vertex$VertexIter1
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_2#_581	boolean
<Vertex$EdgeIter3: boolean hasNext()>/$z0	boolean	@EdgeObjects /\ GEN_Edges
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1	Vertex
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0	WorkSpaceTranspose	@StronglyConnected
<Graph: Graph kruskal()>/vaux_$$A_3#_461	Vertex
<Graph: void sortEdges(java.util.Comparator)>/this#_0	Graph	@EdgeObjects
<Vertex: void display()>/$stringconstant2	java.lang.String
<Graph: void addEdge(Vertex,Neighbor)>/this#_0	Graph	@GN_OnlyNeighbors
<Graph: Graph kruskal()>/vaux_$$A_4#_461	Vertex
<Graph: void display()>/$r4	java.lang.Object
<VertexIter: Vertex next()>/this#_0	VertexIter
<NumberWorkSpace: void preVisitAction(Vertex)>/v#_0	Vertex
<Vertex: void display()>/$r62	java.io.PrintStream
<Graph: Graph prim(Vertex)>/x_$$A_2#_551	Vertex
<Graph: Graph computeTranspose(Graph)>/$r2	Vertex	@Transpose
<Vertex: void display()>/$r51	java.lang.String
<Vertex$EdgeIter3: void <init>(Vertex)>/$r0	java.util.LinkedList
<Vertex: void adjustAdorns(EdgeIfc)>/@this	Vertex	@G_NoEdges
<Edge: int getWeight()>/@this	Edge	@EdgeObjects /\ Weighted
<Vertex: void display()>/$r58	java.lang.StringBuilder
<Vertex: void display()>/$r17	java.io.PrintStream
<Vertex: void display()>/$stringconstant5	java.lang.String
<Graph: EdgeIter getEdges()>/$r0	Graph$EdgeIter1
<Vertex$EdgeIter1: boolean hasNext()>/$z0	boolean	@EdgeObjects /\ G_NoEdges
<Graph: Graph prim(Vertex)>/$r17	java.lang.String
<Graph: boolean cycleCheck()>/$z0	boolean	@Cycle
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_1#_45	int	@Prog
<Vertex$EdgeIter1: EdgeIfc next()>/$r0	java.util.Iterator	@EdgeObjects /\ G_NoEdges
<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161	VertexIter
<Vertex: void addNeighbor(Neighbor)>/this#_0	Vertex	@GEN_Edges
<Graph: void sortEdges(java.util.Comparator)>/@this	Graph	@EdgeObjects
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633	VertexIter
<VertexIter: void <init>(Graph)>/$r0	java.util.LinkedList
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_5#_51	int	@Prog
<Graph: void runBenchmark(java.lang.String)>/$r2	java.lang.StringBuilder	@Benchmark
<Vertex: void display()>/$r23	java.lang.StringBuilder
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	Vertex
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@parameter0	Vertex	@StronglyConnected
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/$i0	int
<Graph$Comparator1: void <init>(Graph)>/l1#_0	Graph
<Graph: Graph kruskal()>/$r21	java.util.LinkedList
<Graph: Graph kruskal()>/vxiter_$$A_1#_415	java.util.LinkedList
<VertexIter: void <init>()>/this#_0	VertexIter
<CycleWorkSpace: void postVisitAction(Vertex)>/$i1	int	@Cycle
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279	EdgeIter	@EdgeObjects
<Graph: void numberVertices()>/this#_0	Graph	@Number
<Vertex$VertexIter3: boolean hasNext()>/@this	Vertex$VertexIter3	@GEN_Edges
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/this#_0	Graph$Comparator3	@MSTKruskal
<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_2#_498	Vertex
<Graph: void graphSearch(WorkSpace)>/@parameter0	WorkSpace
<Vertex$VertexIter2: boolean hasNext()>/this#_0	Vertex$VertexIter2	@GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/$r4	java.lang.Object
<Graph: Graph kruskal()>/$z9	boolean
<Graph: Graph kruskal()>/$r25	Vertex
<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter0	Vertex	@StronglyConnected
<Edge: void adjustAdorns(EdgeIfc)>/the_edge#_0	EdgeIfc	@EdgeObjects
<CycleWorkSpace: void postVisitAction(Vertex)>/this#_0	CycleWorkSpace	@Cycle
<Graph: Graph kruskal()>/$r8	java.util.LinkedList
<Vertex: void display()>/$i7	int
<Graph: void display()>/$stringconstant3	java.lang.String
<Main: void readWeights(Graph,int)>/num_edges#_0	int	@Prog
<NumberWorkSpace: void <init>()>/this#_0	NumberWorkSpace
<Vertex: void nodeSearch(WorkSpace)>/$r2	java.util.LinkedList
<Edge: Vertex getEnd()>/$r0	Vertex	@EdgeObjects
<Edge: void display()>/$stringconstant0	java.lang.String	@EdgeObjects
<Vertex: void adjustAdorns(Neighbor)>/sourceNeighbor#_0	Neighbor	@GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/$r10	java.lang.String
<Graph: void <init>()>/@this	Graph
<Graph: Graph prim(Vertex)>/$r14	Vertex
<Vertex: void display()>/$r41	java.lang.StringBuilder
<Vertex: void nodeSearch(WorkSpace)>/$i0	int
<Main: EdgeIfc addEdge(Graph,int)>/$r2	int[]	@Prog
<Main: EdgeIfc addEdge(Graph,int)>/$r0	int[]	@Prog
<Vertex: void addNeighbor(Neighbor)>/@parameter0	Neighbor	@GEN_Edges
<Graph: void addEdge(Vertex,Neighbor)>/@this	Graph	@GN_OnlyNeighbors
<Vertex: void <init>()>/$numconstant0	int
<Graph: void addEdge(Vertex,Neighbor)>/@parameter0	Vertex	@GN_OnlyNeighbors
<Vertex$EdgeIter2: EdgeIfc next()>/$r1	java.lang.Object	@EdgeObjects /\ GN_OnlyNeighbors
<Vertex$VertexIter3: void <init>(Vertex)>/this#_0	Vertex$VertexIter3
<Edge: void display()>/$r11	java.lang.String	@EdgeObjects
<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	Graph
<Vertex: void <init>()>/$null0	java.lang.String
<Graph: void <clinit>()>/$numconstant2	long
<Graph: void display()>/$r1	java.io.PrintStream
<Graph: void graphSearch(WorkSpace)>/v_$$A_1#_300	Vertex
<Vertex$VertexIter3: Vertex next()>/this#_0	Vertex$VertexIter3	@GEN_Edges
<Vertex$EdgeIter1: boolean hasNext()>/this#_0	Vertex$EdgeIter1	@EdgeObjects /\ G_NoEdges
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/v#_0	Vertex	@StronglyConnected
<Graph: void graphSearch(WorkSpace)>/$z0	boolean
<Graph: Graph prim(Vertex)>/@parameter0	Vertex
<Main: void readWeights(Graph,int)>/@parameter1	int	@Prog
<EdgeIfc: Vertex getOtherVertex(Vertex)>/@parameter0	Vertex
<Neighbor: void <init>(Vertex,int)>/aweight#_0	int
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter1	Graph$Comparator2
<Neighbor: Vertex getStart()>/@this	Neighbor	@GN_OnlyNeighbors
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l2#_0	Graph$EdgeIter1
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i3	int	@MSTPrim
<Vertex: void adjustAdorns(Vertex,int)>/@parameter1	int	@G_NoEdges
<Main: void main(java.lang.String[])>/$r23	java.io.IOException	@Prog
<Vertex: void nodeSearch(WorkSpace)>/$r0	java.util.LinkedList
<Neighbor: void display()>/$r3	java.io.PrintStream	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/num_edges_$$A_1#_30	int	@Prog
<EdgeIter: boolean hasNext()>/this#_0	EdgeIter
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0	Graph
<Vertex: void addWeight(int)>/$r0	java.lang.Integer	@Weighted
<Graph: void sortVertices(java.util.Comparator)>/@parameter0	java.util.Comparator
<Graph: Graph computeTranspose(Graph)>/newAdjacent#_372	Vertex	@Transpose
<CycleWorkSpace: void <init>()>/@this	CycleWorkSpace
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l0#_0	Graph$Comparator1
<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1#_370	Vertex	@Transpose
<Vertex: void nodeSearch(WorkSpace)>/$z1	boolean
<Vertex: void adjustAdorns(Neighbor)>/$r0	java.util.LinkedList	@GN_OnlyNeighbors
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$z0	boolean	@StronglyConnected
<WorkSpace: void nextRegionAction(Vertex)>/@this	WorkSpace	@SearchBase
<Graph: Graph kruskal()>/j_$$A_5#_461	int
<Vertex$VertexIter2: void <init>(Vertex)>/@parameter0	Vertex
<Graph: int readNumber()>/theString_$$A_1#_226	java.lang.String	@Benchmark
<Vertex: void init_vertex(WorkSpace)>/this#_0	Vertex	@SearchBase
<Vertex: void display()>/$i6	int
<Graph: void display()>/$i0	int
<Neighbor: void setWeight(int)>/@this	Neighbor	@Weighted /\ GN_OnlyNeighbors
<Vertex: void display()>/$r24	java.io.PrintStream
<Vertex: void display()>/$r57	java.lang.StringBuilder
<Vertex$EdgeIter1: boolean hasNext()>/@this	Vertex$EdgeIter1	@EdgeObjects /\ G_NoEdges
<Vertex$EdgeIter3: void <init>(Vertex)>/l1#_0	Vertex
<Graph: Graph computeTranspose(Graph)>/newGraph#_350	Graph	@Transpose
<Neighbor: void <init>()>/$null1	Vertex
<Neighbor: void display()>/this#_0	Neighbor	@GN_OnlyNeighbors
<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	Vertex	@Prog
<EdgeIter: EdgeIfc next()>/this#_0	EdgeIter
<RegionWorkSpace: void <init>()>/this#_0	RegionWorkSpace
<CycleWorkSpace: void init_vertex(Vertex)>/@this	CycleWorkSpace	@Cycle
<Graph: void addVertex(Vertex)>/$r0	java.util.LinkedList
<Graph: void display()>/$z0	boolean
<Graph$Comparator2: void <init>(Graph)>/l1#_0	Graph
<Vertex: void addEdge(Neighbor)>/n#_0	Neighbor	@GN_OnlyNeighbors
<Graph: Graph prim(Vertex)>/vxiter_$$A_2#_581	int
<Edge: void display()>/$r6	Vertex	@EdgeObjects
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$numconstant2	int	@MSTKruskal
<Vertex: void display()>/$r49	java.lang.StringBuilder
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@this	Graph$Comparator3
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r2	java.lang.String	@EdgeObjects
<Graph: void sortEdges(java.util.Comparator)>/@parameter0	java.util.Comparator	@EdgeObjects
<Graph: Vertex findsVertex(java.lang.String)>/$z1	boolean
<Vertex: java.lang.String getName()>/$r0	java.lang.String
<Vertex: void display()>/$r44	Vertex
<Graph: Graph kruskal()>/$r12	java.lang.Object
<Graph: Graph kruskal()>/edgeiter_$$A_1#_485	java.lang.String
<Vertex: void adjustAdorns(Neighbor)>/@this	Vertex	@GN_OnlyNeighbors
<Vertex: void display()>/$r33	java.lang.StringBuilder
<WorkSpace: void postVisitAction(Vertex)>/v#_0	Vertex	@SearchBase
<Graph: Graph kruskal()>/j_$$A_1#_504	Vertex
<Vertex: void display()>/$r6	java.lang.Integer
<RegionWorkSpace: void postVisitAction(Vertex)>/this#_0	RegionWorkSpace	@Connected
<RegionWorkSpace: void init_vertex(Vertex)>/@parameter0	Vertex	@Connected
<Main: EdgeIfc addEdge(Graph,int)>/$r3	Vertex[]	@Prog
<Vertex: void nodeSearch(WorkSpace)>/$r4	java.util.LinkedList
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter0	java.lang.Object
<Graph: Graph kruskal()>/$r0	java.util.LinkedList
<Main: void main(java.lang.String[])>/num_edges_$$A_3#_35	int	@Prog
<Main: void main(java.lang.String[])>/$i4	int	@Prog
<Vertex: void adjustAdorns(Neighbor)>/$r1	java.lang.Object	@GN_OnlyNeighbors
<Edge: Vertex getStart()>/this#_0	Edge	@EdgeObjects
<Main: void main(java.lang.String[])>/totalTime#_55	java.io.IOException	@Prog
<Graph: int readNumber()>/ch_$$A_1#_211	int	@Benchmark
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/$i1	int	@StronglyConnected
<Main: void readWeights(Graph,int)>/g#_0	Graph	@Prog
<Graph: void addEdge(Vertex,Neighbor)>/$r0	Neighbor	@GN_OnlyNeighbors
<Vertex$EdgeIter1: void <init>(Vertex)>/$r0	java.util.LinkedList
<Vertex: void setWeight(int)>/@parameter0	int	@Weighted /\ G_NoEdges
<Vertex: void display()>/$i5	int
<Vertex: void init_vertex(WorkSpace)>/@this	Vertex	@SearchBase
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$i1	int	@StronglyConnected
<Main: void main(java.lang.String[])>/num_edges#_27	int	@Prog
<EdgeIfc: void setWeight(int)>/@this	EdgeIfc
<Vertex: void display()>/$r38	java.lang.String
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter1	Vertex$EdgeIter1
<Graph: void run(Vertex)>/$r3	java.lang.String
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/$r0	Vertex
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/weight#_0	int
<Vertex: void display()>/$r14	java.lang.StringBuilder
<Vertex$VertexIter1: void <init>(Vertex)>/@parameter0	Vertex
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r6	java.lang.String	@EdgeObjects
<Edge: void <init>(Vertex,Vertex,int)>/aweight#_0	int
<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_2#_581	int
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	Vertex
<Main: void main(java.lang.String[])>/$l5	long	@Prog
<CycleWorkSpace: void init_vertex(Vertex)>/this#_0	CycleWorkSpace	@Cycle
<Graph: int readNumber()>/word#_208	char[]	@Benchmark
<Vertex: void display()>/$r54	java.lang.String
<Vertex: void display()>/$r42	java.lang.StringBuilder
<Main: void main(java.lang.String[])>/$stringconstant1	java.lang.String	@Prog
<EdgeIter: EdgeIfc next()>/@this	EdgeIter
<RegionWorkSpace: void <init>()>/$numconstant0	int
<Graph: void display()>/edgeiter_$$A_2#_173	int
<Graph$Comparator2: void <init>(Graph)>/@this	Graph$Comparator2
<Vertex: Vertex assignName(java.lang.String)>/this#_0	Vertex
<Graph: int readNumber()>/$r0	java.io.Reader	@Benchmark
<Neighbor: void adjustAdorns(EdgeIfc)>/this#_0	Neighbor	@GN_OnlyNeighbors
<Graph: int readNumber()>/this#_0	Graph	@Benchmark
<Graph: void endProfile()>/$r0	java.lang.StringBuilder	@Benchmark
<Vertex: void <init>()>/$r0	java.util.LinkedList
<Vertex: void addWeight(int)>/@this	Vertex	@Weighted
<Graph: VertexIter getVertices()>/$r0	VertexIter
<Vertex: void nodeSearch(WorkSpace)>/$z0	boolean
<Main: void readWeights(Graph,int)>/@parameter0	Graph	@Prog
<Neighbor: Vertex getEnd()>/$r0	Vertex	@GN_OnlyNeighbors
<Vertex: Vertex assignName(java.lang.String)>/@parameter0	java.lang.String
<Vertex: int getWeight()>/this#_0	Vertex	@G_NoEdges
<Edge: void display()>/$r5	java.io.PrintStream	@EdgeObjects
<Graph: Graph prim(Vertex)>/isNeighborInQueue_$$A_5#_592	boolean
<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	Graph
<Vertex$EdgeIter2: EdgeIfc next()>/$r0	java.util.Iterator	@EdgeObjects /\ GN_OnlyNeighbors
<EdgeIfc: Vertex getOtherVertex(Vertex)>/@this	EdgeIfc
<Vertex: int getWeight()>/@this	Vertex	@G_NoEdges
<Graph: Graph prim(Vertex)>/$r13	Graph
<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0	EdgeIfc	@G_NoEdges
<Vertex: void nodeSearch(WorkSpace)>/@this	Vertex
<Vertex$EdgeIter2: void <init>(Vertex)>/$r0	java.util.LinkedList
<Graph: void startProfile()>/$l1	long	@Benchmark
<Graph: Graph kruskal()>/edgeiter#_428	EdgeIter
<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter0	Vertex	@MSTPrim
<Main: void main(java.lang.String[])>/$r18	java.lang.StringBuilder	@Prog
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	Vertex	@EdgeObjects
<Edge: void display()>/$r8	java.lang.StringBuilder	@EdgeObjects
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter1	Vertex	@EdgeObjects
<Neighbor: void <init>(Vertex,Edge)>/@parameter0	Vertex
<Graph: Graph kruskal()>/$r11	java.util.LinkedList
<WorkSpace: void nextRegionAction(Vertex)>/v#_0	Vertex	@SearchBase
<Graph: Graph kruskal()>/$r18	java.util.LinkedList
<VertexIter: Vertex next()>/$r0	java.util.Iterator
<Graph: int readNumber()>/ch_$$A_1_$$A_3#_221	int	@Benchmark
<CycleWorkSpace: void postVisitAction(Vertex)>/$numconstant0	int	@Cycle
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	Graph
<Vertex: void display()>/$r22	java.io.PrintStream
<Graph: Graph computeTranspose(Graph)>/v_$$A_4#_381	Vertex	@Transpose
<Graph: Graph prim(Vertex)>/$z12	boolean
<Vertex: Vertex getOtherVertex(Vertex)>/this#_0	Vertex	@G_NoEdges
<Main: void main(java.lang.String[])>/$r4	int[]	@Prog
<Vertex: void display()>/$r39	java.lang.StringBuilder
<Vertex: void setWeight(int)>/$r2	Vertex	@Weighted /\ G_NoEdges
<Vertex: void display()>/$r3	java.util.LinkedList
<Graph: Graph prim(Vertex)>/$numconstant0	int
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l0#_0	Graph$EdgeIter1
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z1	boolean	@EdgeObjects
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this	Graph	@EdgeObjects
<CycleWorkSpace: void <init>()>/$numconstant1	int
<Vertex$VertexIter3: boolean hasNext()>/$r0	java.util.Iterator	@GEN_Edges
<Edge: void <init>(Vertex,Vertex,int)>/the_end#_0	Vertex
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/$i0	int	@MSTKruskal
<Graph: void startProfile()>/$l0	long	@Benchmark
<WorkSpaceTranspose: void <init>()>/@this	WorkSpaceTranspose
<Graph$Comparator1: void <init>(Graph)>/@parameter0	Graph
<CycleWorkSpace: void postVisitAction(Vertex)>/v#_0	Vertex	@Cycle
<Vertex: void display()>/$stringconstant6	java.lang.String
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter1	Graph$Comparator3
<Graph: void numberVertices()>/$r0	NumberWorkSpace	@Number
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r1	java.lang.String	@EdgeObjects
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r7	java.lang.String	@EdgeObjects
<GlobalVarsWrapper: void <init>()>/@this	GlobalVarsWrapper
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/this#_0	FinishTimeWorkSpace	@StronglyConnected
<Main: void <init>()>/@this	Main
<Graph: void runBenchmark(java.lang.String)>/@parameter0	java.lang.String	@Benchmark
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0	Vertex	@EdgeObjects
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0	Vertex	@SearchBase
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$z0	boolean	@EdgeObjects
<Edge: void setWeight(int)>/@parameter0	int	@EdgeObjects /\ Weighted
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0	EdgeIfc	@MSTKruskal
<Graph: Graph kruskal()>/$r19	java.lang.Object
<Graph: Graph prim(Vertex)>/wuv#_592	int
<Graph: Graph prim(Vertex)>/vxiter#_526	VertexIter
<Graph: Graph prim(Vertex)>/root#_522	Vertex
<FinishTimeWorkSpace: void <init>()>/this#_0	FinishTimeWorkSpace
<Vertex$VertexIter1: void <init>(Vertex)>/l1#_0	Vertex
<Vertex: void addAdjacent(Vertex)>/n#_0	Vertex	@G_NoEdges
<Vertex: void adjustAdorns(Vertex,int)>/$r2	java.lang.Integer	@G_NoEdges
<WorkSpace: void init_vertex(Vertex)>/@this	WorkSpace	@SearchBase
<Graph: void stopBenchmark()>/$r0	java.io.Reader	@Benchmark
<Graph: void stopProfile()>/$l2	long	@Benchmark
<Graph: Graph computeTranspose(Graph)>/v#_358	Vertex	@Transpose
<Graph: Graph kruskal()>/e1#_430	EdgeIfc
<Graph$Comparator1: int compare(Vertex,Vertex)>/$numconstant2	int	@StronglyConnected
<Edge: void setWeight(int)>/weight#_0	int	@EdgeObjects /\ Weighted
<Graph: void endProfile()>/$l6	long	@Benchmark
<EdgeIfc: void adjustAdorns(EdgeIfc)>/@this	EdgeIfc
<Main: EdgeIfc addEdge(Graph,int)>/g#_0	Graph	@Prog
<Graph: Graph prim(Vertex)>/$i1	int
<Vertex: Vertex getOtherVertex(Vertex)>/vertex#_0	Vertex	@G_NoEdges
<Main: void main(java.lang.String[])>/$r1	java.lang.String	@Prog
<Graph: void endProfile()>/$l0	long	@Benchmark
<Vertex: void addWeight(int)>/$r1	java.util.LinkedList	@Weighted
<Vertex: void adjustAdorns(Vertex,int)>/index#_0	int	@G_NoEdges
<Edge: void setWeight(int)>/this#_0	Edge	@EdgeObjects /\ Weighted
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0	WorkSpace	@SearchBase
<Graph$Comparator2: int compare(Vertex,Vertex)>/$numconstant0	int	@MSTPrim
<Graph: int readNumber()>/$c1	char	@Benchmark
<NumberWorkSpace: void preVisitAction(Vertex)>/@this	NumberWorkSpace
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter1	java.lang.Object
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter1	Graph$Comparator1
<Vertex: void addWeight(int)>/$r2	java.util.LinkedList	@Weighted
<Vertex: void display()>/$r1	java.util.LinkedList
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@this	Graph$Comparator2
<Graph: Graph kruskal()>/vrep#_441	Vertex
<Vertex$VertexIter2: void <init>(Vertex)>/$r1	java.util.Iterator
<Graph: Graph kruskal()>/j_$$A_2#_449	int
<EdgeIfc: void setWeight(int)>/@parameter0	int
<CycleWorkSpace: void postVisitAction(Vertex)>/$i0	int	@Cycle
<Graph: Graph prim(Vertex)>/$null0	java.lang.String
<EdgeIter: void <init>()>/this#_0	EdgeIter
<Graph: void run(Vertex)>/gaux2#_271	Graph
<Vertex: Vertex assignName(java.lang.String)>/name#_0	java.lang.String
<Graph: void display()>/$r2	java.util.LinkedList
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0	Graph
<Vertex: void display()>/$r60	java.io.PrintStream
<Graph: void graphSearch(WorkSpace)>/$z2	boolean
<Vertex$VertexIter3: void <init>(Vertex)>/l1#_0	Vertex
<Vertex$VertexIter1: void <init>(Vertex)>/$r1	java.util.Iterator
<Graph: int readNumber()>/ch_$$A_1_$$A_1#_214	int	@Benchmark
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i0	int	@MSTPrim
<Vertex$VertexIter2: void <init>(Vertex)>/@this	Vertex$VertexIter2
<Graph$EdgeIter1: EdgeIfc next()>/$r1	java.lang.Object	@EdgeObjects
<Graph: Graph kruskal()>/$r14	java.util.LinkedList
<Edge: int getWeight()>/this#_0	Edge	@EdgeObjects /\ Weighted
<Graph: Graph computeTranspose(Graph)>/theName#_354	java.lang.String	@Transpose
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i0	int	@StronglyConnected
<Neighbor: void adjustAdorns(EdgeIfc)>/@this	Neighbor	@GN_OnlyNeighbors
<Edge: void display()>/$r0	java.lang.StringBuilder	@EdgeObjects
<Graph$EdgeIter1: boolean hasNext()>/@this	Graph$EdgeIter1	@EdgeObjects
<Main: void main(java.lang.String[])>/g#_16	Graph	@Prog
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@this	Vertex$VertexIter1
<Edge: Vertex getEnd()>/this#_0	Edge	@EdgeObjects
<Vertex$EdgeIter2: boolean hasNext()>/this#_0	Vertex$EdgeIter2	@EdgeObjects /\ GN_OnlyNeighbors
<Neighbor: void <init>(Vertex,int)>/this#_0	Neighbor
<Vertex: void addAdjacent(Vertex)>/$r0	java.util.LinkedList	@G_NoEdges
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0	CycleWorkSpace
<Main: EdgeIfc addEdge(Graph,int)>/n#_0	int	@Prog
<Vertex: void display()>/$r48	java.lang.String
<Graph: void addEdge(Vertex,Neighbor)>/$i0	int	@GN_OnlyNeighbors
<Vertex: void init_vertex(WorkSpace)>/@parameter0	WorkSpace	@SearchBase
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$numconstant0	int
<Main: void main(java.lang.String[])>/$r2	Vertex[]	@Prog
<CycleWorkSpace: void <init>()>/$numconstant0	int
<Graph: boolean cycleCheck()>/$r0	CycleWorkSpace	@Cycle
<RegionWorkSpace: void nextRegionAction(Vertex)>/v#_0	Vertex	@Connected
<Graph: Graph computeTranspose(Graph)>/this#_0	Graph	@Transpose
<Vertex$VertexIter2: Vertex next()>/@this	Vertex$VertexIter2	@GN_OnlyNeighbors
<Vertex$EdgeIter1: EdgeIfc next()>/@this	Vertex$EdgeIter1	@EdgeObjects /\ G_NoEdges
<Graph: Graph prim(Vertex)>/$i2	int
<Vertex: void display()>/$r15	java.lang.String
<Vertex$EdgeIter2: EdgeIfc next()>/this#_0	Vertex$EdgeIter2	@EdgeObjects /\ GN_OnlyNeighbors
<WorkSpace: void init_vertex(Vertex)>/v#_0	Vertex	@SearchBase
<Graph$EdgeIter1: EdgeIfc next()>/$r0	java.util.Iterator	@EdgeObjects
<Graph: Graph kruskal()>/$z1	boolean
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@this	Graph$Comparator3	@MSTKruskal
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this	CycleWorkSpace
<Graph: Graph prim(Vertex)>/$r0	java.util.LinkedList
<Graph: Graph prim(Vertex)>/$numconstant1	int
<Vertex: void display()>/@this	Vertex
<Main: void main(java.lang.String[])>/$r11	Vertex[]	@Prog
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l0#_0	Graph$Comparator3
<Vertex: void display()>/$r47	Vertex
<Graph: Graph kruskal()>/vaux_$$A_1#_449	Vertex
<Graph: Graph kruskal()>/$r7	java.lang.String
<Vertex: void display()>/$r26	java.lang.StringBuilder
<Vertex: void display()>/$r55	java.lang.StringBuilder
<VertexIter: void <init>(Graph)>/@this	VertexIter
<Graph$EdgeIter1: void <init>(Graph)>/$r0	java.util.LinkedList
<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367	VertexIter	@Transpose
<Vertex: void display()>/$r50	java.lang.StringBuilder
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	Vertex	@SearchBase
<Vertex: void init_vertex(WorkSpace)>/w#_0	WorkSpace	@SearchBase
<Graph: void sortVertices(java.util.Comparator)>/@this	Graph
<Vertex: void display()>/$stringconstant10	java.lang.String
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	Vertex	@EdgeObjects
<Graph$Comparator1: int compare(Vertex,Vertex)>/$i3	int	@StronglyConnected
<Edge: void display()>/$r10	Vertex	@EdgeObjects
<Main: void main(java.lang.String[])>/$r25	java.io.IOException	@Prog
<Main: void main(java.lang.String[])>/totalTime_$$A_3#_64	java.io.IOException	@Prog
<Vertex: void display()>/$r30	java.lang.StringBuilder
<Graph: EdgeIter getEdges()>/this#_0	Graph
<Vertex$EdgeIter2: void <init>(Vertex)>/this#_0	Vertex$EdgeIter2
<Vertex: void nodeSearch(WorkSpace)>/w#_0	WorkSpace
<Edge: void display()>/$r1	java.io.PrintStream	@EdgeObjects
<Graph: void display()>/$r8	EdgeIfc
<Graph: Graph kruskal()>/$r27	Vertex
<Graph: void <init>()>/$numconstant0	int
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/$i1	int	@StronglyConnected
<Graph: void runBenchmark(java.lang.String)>/FileName#_0	java.lang.String	@Benchmark
<Vertex: java.lang.String getName()>/@this	Vertex
<Main: void main(java.lang.String[])>/$r24	java.io.IOException	@Prog
<Graph: int readNumber()>/index_$$A_2#_219	int	@Benchmark
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@this	Vertex$EdgeIter1
<Main: void main(java.lang.String[])>/beginning#_13	long	@Prog
<Graph: void display()>/$r0	java.io.PrintStream
<Graph: Graph computeTranspose(Graph)>/theNeighbor#_377	Vertex	@Transpose
<Graph: Graph prim(Vertex)>/$z0	boolean
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$numconstant1	int
<Graph: Graph prim(Vertex)>/x_$$A_1#_527	Vertex
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0	Vertex
<Graph: Graph kruskal()>/j#_471	int
<Graph: void endProfile()>/$r4	java.lang.String	@Benchmark
<Graph: boolean cycleCheck()>/@this	Graph	@Cycle
<WorkSpace: void postVisitAction(Vertex)>/@this	WorkSpace	@SearchBase
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this	WorkSpace	@SearchBase
<WorkSpaceTranspose: void preVisitAction(Vertex)>/$i0	int	@StronglyConnected
<Graph: Graph kruskal()>/$r3	Graph$Comparator3
<Graph: void runBenchmark(java.lang.String)>/$r3	java.io.PrintStream	@Benchmark
<Vertex$EdgeIter2: EdgeIfc next()>/$r2	EdgeIfc	@EdgeObjects /\ GN_OnlyNeighbors
<Graph: void run(Vertex)>/@parameter0	Vertex
<Vertex$EdgeIter1: boolean hasNext()>/$r0	java.util.Iterator	@EdgeObjects /\ G_NoEdges
<Edge: void <init>(Vertex,Vertex,int)>/the_start#_0	Vertex
<GlobalVarsWrapper: void <clinit>()>/$r0	java.util.LinkedList	@BFS
<Graph: int readNumber()>/index#_207	int	@Benchmark
<Vertex: void addEdge(Neighbor)>/this#_0	Vertex	@GN_OnlyNeighbors
<Vertex: void display()>/$z1	boolean
<NumberWorkSpace: void preVisitAction(Vertex)>/@parameter0	Vertex
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	Vertex
<WorkSpace: void <init>()>/this#_0	WorkSpace
<Graph: void runBenchmark(java.lang.String)>/$stringconstant0	java.lang.String	@Benchmark
<NumberWorkSpace: void preVisitAction(Vertex)>/$i0	int
<Graph: Graph prim(Vertex)>/$i3	int
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_7#_68	int	@Prog
<Vertex$EdgeIter3: boolean hasNext()>/@this	Vertex$EdgeIter3	@EdgeObjects /\ GEN_Edges
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l1#_0	Vertex
<Graph: void graphSearch(WorkSpace)>/v_$$A_2#_310	Vertex
<Graph: Graph prim(Vertex)>/$r18	java.lang.String
<Vertex: void display()>/$r46	java.io.PrintStream
<Graph: Graph kruskal()>/vxiter_$$A_2#_471	Vertex
<Vertex: void addNeighbor(Neighbor)>/@this	Vertex	@GEN_Edges
<Graph: Graph kruskal()>/$z12	boolean
<Vertex: Vertex assignName(java.lang.String)>/@this	Vertex
<Graph: void display()>/$stringconstant0	java.lang.String
<Main: void main(java.lang.String[])>/totalTime_$$A_1_$$A_1#_56	java.io.IOException	@Prog
<Vertex$EdgeIter3: void <init>(Vertex)>/@parameter0	Vertex
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter1	Vertex$VertexIter1
<Neighbor: void <init>(Vertex,int)>/@parameter0	Vertex
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l2#_0	Graph$Comparator3
<Vertex: Vertex getStart()>/this#_0	Vertex	@Undirected /\ G_NoEdges
<Graph: int readNumber()>/ch_$$A_1_$$A_4#_220	int	@Benchmark
<NumberWorkSpace: void preVisitAction(Vertex)>/$z0	boolean
<Graph: void connectedComponents()>/@this	Graph	@Connected
<Vertex: void display()>/$r61	java.io.PrintStream
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v2#_281	Vertex	@EdgeObjects
<Vertex$VertexIter3: Vertex next()>/@this	Vertex$VertexIter3	@GEN_Edges
<Vertex$VertexIter2: Vertex next()>/this#_0	Vertex$VertexIter2	@GN_OnlyNeighbors
<Vertex$EdgeIter2: EdgeIfc next()>/@this	Vertex$EdgeIter2	@EdgeObjects /\ GN_OnlyNeighbors
<Vertex$EdgeIter2: boolean hasNext()>/$z0	boolean	@EdgeObjects /\ GN_OnlyNeighbors
<WorkSpaceTranspose: void <init>()>/$numconstant0	int
<Graph: void endProfile()>/$stringconstant0	java.lang.String	@Benchmark
<Graph: void stopProfile()>/$l3	long	@Benchmark
<Vertex: void adjustAdorns(Vertex,int)>/this#_0	Vertex	@G_NoEdges
<Vertex: void display()>/$r43	java.lang.String
<Graph: void endProfile()>/$r3	java.lang.StringBuilder	@Benchmark
<Vertex: void display()>/$r4	java.io.PrintStream
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter1	Graph$EdgeIter1
<Neighbor: Vertex getOtherVertex(Vertex)>/@parameter0	Vertex	@GN_OnlyNeighbors
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/$r1	Vertex
<Graph: Graph computeTranspose(Graph)>/$z1	boolean	@Transpose
<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305	VertexIter
<Vertex: void adjustAdorns(Vertex,int)>/@this	Vertex	@G_NoEdges
<Vertex$VertexIter1: boolean hasNext()>/this#_0	Vertex$VertexIter1	@G_NoEdges
<Graph: java.util.LinkedList access$0(Graph)>/$r0	java.util.LinkedList
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0	Graph	@EdgeObjects
<WorkSpaceTranspose: void preVisitAction(Vertex)>/@this	WorkSpaceTranspose	@StronglyConnected
<Graph: void <clinit>()>/$numconstant0	long
<Graph: Graph strongComponents()>/this#_0	Graph
<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	Graph
<EdgeIfc: Vertex getEnd()>/@this	EdgeIfc
<Graph$Comparator2: int compare(Vertex,Vertex)>/$i2	int	@MSTPrim
<Edge: void <init>(Vertex,Vertex,int)>/@this	Edge
<Main: void main(java.lang.String[])>/i_$$A_1#_43	boolean	@Prog
<Vertex: void display()>/$r13	java.lang.StringBuilder
<Vertex$EdgeIter1: void <init>(Vertex)>/l1#_0	Vertex
<Graph: Graph prim(Vertex)>/$z10	boolean
<Graph: Graph kruskal()>/$r30	java.lang.String
<Edge: void display()>/$r13	java.lang.String	@EdgeObjects
<Vertex: VertexIter getNeighbors()>/$r0	Vertex$VertexIter1	@G_NoEdges
<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0	Vertex	@StronglyConnected
<Main: void main(java.lang.String[])>/num_edges_$$A_2#_68	int	@Prog
<Graph: Graph kruskal()>/v_$$A_3#_432	Vertex
<Edge: Vertex getOtherVertex(Vertex)>/@parameter0	Vertex	@EdgeObjects
<Vertex: void setWeight(int)>/$r1	java.lang.Object	@Weighted /\ G_NoEdges
<Vertex: void addWeight(int)>/this#_0	Vertex	@Weighted
<Vertex: void display()>/$r31	java.lang.StringBuilder
<Vertex: void display()>/$r0	java.io.PrintStream
<Vertex$VertexIter2: Vertex next()>/$r0	java.util.Iterator	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/num_vertices_$$A_1#_26	int	@Prog
<Graph$Comparator3: void <init>(Graph)>/@parameter0	Graph
<Edge: void display()>/@this	Edge	@EdgeObjects
<Vertex: void display()>/$r25	java.lang.StringBuilder
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/$r1	EdgeIfc
<Vertex$VertexIter3: void <init>(Vertex)>/$r1	java.util.Iterator
<Graph: Graph prim(Vertex)>/$i4	int
<Graph: Graph prim(Vertex)>/vxiter_$$A_3#_611	int
<Edge: void <init>(Vertex,Vertex,int)>/this#_0	Edge
<Vertex: void nodeSearch(WorkSpace)>/v_$$A_3#_219	Vertex
<Graph: VertexIter getVertices()>/this#_0	Graph
<Neighbor: void <init>(Vertex,int)>/@this	Neighbor
<EdgeIter: boolean hasNext()>/$numconstant0	int
<Edge: void display()>/$r7	java.lang.String	@EdgeObjects
<Vertex: EdgeIter getEdges()>/this#_0	Vertex	@EdgeObjects /\ G_NoEdges
<Graph: Graph kruskal()>/$r20	java.util.LinkedList
<Vertex$EdgeIter2: void <init>(Vertex)>/$r1	java.util.Iterator
<NumberWorkSpace: void preVisitAction(Vertex)>/$i1	int
<Graph: Graph kruskal()>/$r13	java.util.LinkedList
<WorkSpaceTranspose: void preVisitAction(Vertex)>/this#_0	WorkSpaceTranspose	@StronglyConnected
<VertexIter: void <init>(Graph)>/@parameter0	Graph
<Vertex: void adjustAdorns(Neighbor)>/$i0	int	@GN_OnlyNeighbors
<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218	VertexIter
<Graph: void addEdge(Vertex,Neighbor)>/end#_148	Vertex	@GN_OnlyNeighbors
<Main: void main(java.lang.String[])>/num_vertices_$$A_1_$$A_3#_35	int	@Prog
<Vertex: Vertex getEnd()>/this#_0	Vertex	@G_NoEdges
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	Vertex
<Graph: void display()>/$r7	java.io.PrintStream
<Graph: Graph prim(Vertex)>/$null1	java.lang.String
<Graph: Graph kruskal()>/$i0	int
<Graph: int readNumber()>/ch#_209	boolean	@Benchmark
<Graph: Graph kruskal()>/vxiter#_406	VertexIter
<Graph: EdgeIter getEdges()>/$null0	Graph$EdgeIter1
<Graph: Graph kruskal()>/i_$$A_1#_498	int
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l2#_0	Vertex$EdgeIter1
<Graph$Comparator2: int compare(Vertex,Vertex)>/@this	Graph$Comparator2	@MSTPrim
<Vertex: EdgeIter getEdges()>/@this	Vertex	@EdgeObjects /\ G_NoEdges
<Neighbor: void <init>()>/this#_0	Neighbor
<WorkSpace: void nextRegionAction(Vertex)>/this#_0	WorkSpace	@SearchBase
<Vertex: void setWeight(int)>/@this	Vertex	@Weighted /\ G_NoEdges
<WorkSpaceTranspose: void preVisitAction(Vertex)>/$z0	boolean	@StronglyConnected
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@this	Graph$Comparator2
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter1	java.lang.Object
<Main: void main(java.lang.String[])>/$r7	java.lang.StringBuilder	@Prog
<Main: void main(java.lang.String[])>/i_$$A_2_$$A_4#_52	int	@Prog
<WorkSpace: void postVisitAction(Vertex)>/@parameter0	Vertex	@SearchBase
<Graph: Vertex findsVertex(java.lang.String)>/@parameter0	java.lang.String
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theEdge#_280	EdgeIfc	@EdgeObjects
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l2#_0	Graph$Comparator1
<Graph: void endProfile()>/$l5	long	@Benchmark
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l0#_0	Graph$Comparator1
<VertexIter: Vertex next()>/$r2	Vertex
<Graph: Graph prim(Vertex)>/theNewVertex#_658	Vertex
<Edge: void adjustAdorns(EdgeIfc)>/@parameter0	EdgeIfc	@EdgeObjects
<Graph: Vertex findsVertex(java.lang.String)>/@this	Graph
<Vertex: void display()>/vxiter_$$A_1#_265	VertexIter
<FinishTimeWorkSpace: void <init>()>/@this	FinishTimeWorkSpace
<Edge: void adjustAdorns(EdgeIfc)>/this#_0	Edge	@EdgeObjects
<Vertex$VertexIter2: boolean hasNext()>/$z0	boolean	@GN_OnlyNeighbors
<CycleWorkSpace: void postVisitAction(Vertex)>/@parameter0	Vertex	@Cycle
<RegionWorkSpace: void init_vertex(Vertex)>/$numconstant0	int	@Connected
<Edge: Vertex getOtherVertex(Vertex)>/$r3	Vertex	@EdgeObjects
<Graph: Graph prim(Vertex)>/u#_573	Vertex
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter0	Vertex
<Graph: void run(Vertex)>/gaux1#_264	Graph
<Vertex: void display()>/$r56	java.lang.StringBuilder
<Vertex: void addAdjacent(Vertex)>/@parameter0	Vertex	@G_NoEdges
<Edge: void display()>/this#_0	Edge	@EdgeObjects
<Graph: int readNumber()>/index_$$A_1#_221	int	@Benchmark
<Edge: void setWeight(int)>/@this	Edge	@EdgeObjects /\ Weighted
