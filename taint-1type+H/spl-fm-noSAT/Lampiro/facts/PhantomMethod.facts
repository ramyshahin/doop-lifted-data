<javax.microedition.io.StreamConnection: java.io.OutputStream openOutputStream()>
<java.lang.String: int indexOf(java.lang.String,int)>
<java.lang.Boolean: void <init>(boolean)>
<java.util.Date: void <init>()>
<javax.microedition.media.control.RecordControl: void setRecordStream(java.io.OutputStream)>
<javax.microedition.lcdui.Display: void setCurrent(javax.microedition.lcdui.Alert,javax.microedition.lcdui.Displayable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.Object: void notify()>
<javax.microedition.lcdui.game.GameCanvas: int getKeyCode(int)>
<java.lang.Math: int min(int,int)>
<java.util.Vector: boolean contains(java.lang.Object)>
<java.lang.System: long currentTimeMillis()>
<javax.microedition.lcdui.Graphics: javax.microedition.lcdui.Font getFont()>
<java.lang.String: int indexOf(int,int)>
<javax.microedition.lcdui.StringItem: void <init>(java.lang.String,java.lang.String)>
<java.io.IOException: void <init>(java.lang.String)>
<java.lang.Boolean: boolean booleanValue()>
<javax.microedition.midlet.MIDlet: void <init>()>
<java.lang.Short: short parseShort(java.lang.String)>
<java.util.Vector: java.util.Enumeration elements()>
<javax.microedition.lcdui.Font: int getFace()>
<java.io.IOException: java.lang.String toString()>
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>
<javax.microedition.rms.RecordStore: int addRecord(byte[],int,int)>
<java.lang.String: int indexOf(java.lang.String)>
<java.util.Enumeration: java.lang.Object nextElement()>
<java.util.Hashtable: void clear()>
<java.lang.String: char[] toCharArray()>
<javax.microedition.lcdui.TextField: void setLayout(int)>
<java.util.Hashtable: java.util.Enumeration elements()>
<java.lang.String: void <init>(char[])>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>
<java.lang.StringBuilder: java.lang.String toString()>
<javax.microedition.lcdui.Form: void setTitle(java.lang.String)>
<javax.microedition.midlet.MIDlet: void notifyDestroyed()>
<javax.microedition.lcdui.Alert: void setTimeout(int)>
<org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.lang.String: java.lang.String substring(int)>
<javax.microedition.lcdui.Form: void insert(int,javax.microedition.lcdui.Item)>
<javax.microedition.lcdui.Form: int append(java.lang.String)>
<javax.microedition.lcdui.StringItem: void <init>(java.lang.String,java.lang.String,int)>
<javax.microedition.lcdui.Canvas: int getWidth()>
<java.lang.Integer: void <init>(int)>
<java.io.DataOutputStream: void writeUTF(java.lang.String)>
<java.io.PrintStream: void <init>(java.io.OutputStream)>
<javax.microedition.lcdui.Alert: java.lang.String getString()>
<javax.microedition.lcdui.Font: int getSize()>
<javax.microedition.midlet.MIDletStateChangeException: void printStackTrace()>
<javax.microedition.media.control.VideoControl: void setVisible(boolean)>
<java.util.Date: java.lang.String toString()>
<java.io.PrintStream: void println(int)>
<javax.microedition.lcdui.game.GameCanvas: boolean hasRepeatEvents()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<javax.microedition.lcdui.Image: int getWidth()>
<java.util.Hashtable: java.util.Enumeration keys()>
<java.io.PrintStream: void println(java.lang.Object)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<java.io.Writer: void write(java.lang.String)>
<javax.microedition.rms.RecordStore: void deleteRecord(int)>
<java.io.InputStream: long skip(long)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String toUpperCase()>
<javax.microedition.lcdui.Font: javax.microedition.lcdui.Font getFont(int,int,int)>
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
<java.lang.Runtime: java.lang.Runtime getRuntime()>
<javax.microedition.io.StreamConnection: void close()>
<javax.microedition.lcdui.TextField: void setString(java.lang.String)>
<javax.microedition.lcdui.Alert: void <init>(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>
<javax.microedition.lcdui.Graphics: void drawLine(int,int,int,int)>
<javax.microedition.media.Manager: javax.microedition.media.Player createPlayer(java.io.InputStream,java.lang.String)>
<javax.microedition.lcdui.Graphics: int getTranslateY()>
<java.lang.String: java.lang.String valueOf(int)>
<java.util.Enumeration: boolean hasMoreElements()>
<javax.microedition.lcdui.ChoiceGroup: int append(java.lang.String,javax.microedition.lcdui.Image)>
<java.lang.Class: java.lang.String getName()>
<java.io.IOException: java.lang.String getMessage()>
<javax.microedition.io.HttpConnection: int getResponseCode()>
<javax.microedition.lcdui.StringItem: void setLayout(int)>
<javax.microedition.rms.RecordStore: javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean)>
<java.util.Vector: void insertElementAt(java.lang.Object,int)>
<javax.microedition.lcdui.Font: int stringWidth(java.lang.String)>
<java.io.DataInputStream: int read(byte[])>
<java.lang.Error: java.lang.String getMessage()>
<javax.microedition.lcdui.Command: java.lang.String getLabel()>
<javax.microedition.lcdui.ChoiceGroup: void setSelectedIndex(int,boolean)>
<java.lang.Object: void wait(long)>
<java.io.InputStream: int read(byte[],int,int)>
<java.util.Vector: java.lang.Object firstElement()>
<javax.microedition.lcdui.Command: void <init>(java.lang.String,java.lang.String,int,int)>
<javax.microedition.lcdui.Display: javax.microedition.lcdui.Displayable getCurrent()>
<javax.microedition.rms.RecordStore: int getRecordSize(int)>
<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>
<java.lang.StringBuilder: void <init>()>
<org.bouncycastle.crypto.digests.MD5Digest: void <init>()>
<java.lang.Object: void wait()>
<javax.microedition.lcdui.Graphics: int getClipHeight()>
<javax.microedition.lcdui.ChoiceGroup: int size()>
<javax.microedition.lcdui.ChoiceGroup: void <init>(java.lang.String,int)>
<javax.microedition.lcdui.Form: void delete(int)>
<java.lang.Math: int abs(int)>
<javax.microedition.io.ConnectionNotFoundException: java.lang.String getMessage()>
<java.lang.Object: void <init>()>
<javax.microedition.rms.RecordStore: int getSizeAvailable()>
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(int,int)>
<java.util.Vector: void <init>()>
<javax.microedition.lcdui.Command: void <init>(java.lang.String,int,int)>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.IllegalArgumentException: void <init>()>
<javax.microedition.lcdui.TextField: java.lang.String getString()>
<javax.microedition.lcdui.Form: void deleteAll()>
<java.lang.String: void <init>(java.lang.String)>
<javax.microedition.lcdui.List: void addCommand(javax.microedition.lcdui.Command)>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<javax.microedition.lcdui.Display: javax.microedition.lcdui.Display getDisplay(javax.microedition.midlet.MIDlet)>
<java.io.DataInputStream: byte readByte()>
<java.io.DataInputStream: java.lang.String readUTF()>
<javax.microedition.lcdui.TextBox: void addCommand(javax.microedition.lcdui.Command)>
<java.util.Vector: void copyInto(java.lang.Object[])>
<java.io.Reader: void <init>()>
<javax.microedition.lcdui.Graphics: void drawString(java.lang.String,int,int,int)>
<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>
<java.lang.Exception: void printStackTrace()>
<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>
<java.util.Vector: java.lang.Object elementAt(int)>
<java.lang.StringBuffer: void <init>(java.lang.String)>
<java.io.InputStream: boolean markSupported()>
<javax.microedition.lcdui.Alert: void addCommand(javax.microedition.lcdui.Command)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<javax.microedition.rms.RecordStore: byte[] getRecord(int)>
<javax.microedition.lcdui.game.GameCanvas: int getGameAction(int)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>
<javax.microedition.io.HttpConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
<javax.microedition.lcdui.Command: java.lang.String getLongLabel()>
<java.lang.String: int length()>
<java.io.InputStream: int available()>
<javax.microedition.rms.RecordStore: void closeRecordStore()>
<java.lang.StringBuffer: void setLength(int)>
<java.io.DataInputStream: int readInt()>
<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>
<javax.microedition.lcdui.Alert: void setType(javax.microedition.lcdui.AlertType)>
<java.lang.String: boolean startsWith(java.lang.String)>
<javax.microedition.lcdui.Canvas: void repaint()>
<javax.microedition.lcdui.Graphics: int getClipY()>
<java.lang.Runtime: long freeMemory()>
<java.util.Hashtable: int size()>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.io.DataOutputStream: void write(byte[],int,int)>
<javax.microedition.lcdui.Form: int size()>
<javax.microedition.lcdui.Image: int getHeight()>
<java.lang.Object: java.lang.Class getClass()>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
<javax.microedition.lcdui.Canvas: void setFullScreenMode(boolean)>
<javax.microedition.lcdui.TextBox: java.lang.String getString()>
<java.lang.InterruptedException: void printStackTrace()>
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(java.lang.String)>
<javax.microedition.lcdui.ChoiceGroup: java.lang.String getString(int)>
<java.lang.Integer: int intValue()>
<java.util.Hashtable: void <init>(int)>
<java.io.InputStream: void reset()>
<java.util.Calendar: java.util.Calendar getInstance()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<javax.microedition.lcdui.Alert: void <init>(java.lang.String,java.lang.String,javax.microedition.lcdui.Image,javax.microedition.lcdui.AlertType)>
<javax.microedition.lcdui.Form: javax.microedition.lcdui.Item get(int)>
<org.xmlpull.v1.XmlSerializer: void flush()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<java.lang.String: java.lang.String valueOf(char)>
<javax.microedition.lcdui.StringItem: void setText(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>
<javax.microedition.lcdui.TextBox: void setTitle(java.lang.String)>
<javax.microedition.io.StreamConnection: java.io.InputStream openInputStream()>
<java.lang.IndexOutOfBoundsException: void <init>()>
<java.io.DataInputStream: void readFully(byte[])>
<javax.microedition.lcdui.ChoiceGroup: void setSelectedFlags(boolean[])>
<javax.microedition.media.Player: void start()>
<javax.microedition.lcdui.Form: void setItemStateListener(javax.microedition.lcdui.ItemStateListener)>
<java.io.IOException: void printStackTrace()>
<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>
<java.lang.String: void <init>(byte[],java.lang.String)>
<java.lang.Thread: void sleep(long)>
<java.lang.String: char charAt(int)>
<javax.microedition.lcdui.StringItem: void addCommand(javax.microedition.lcdui.Command)>
<java.lang.String: byte[] getBytes()>
<javax.microedition.lcdui.Gauge: void <init>(java.lang.String,boolean,int,int)>
<javax.microedition.io.HttpConnection: java.io.InputStream openInputStream()>
<java.lang.String: java.lang.String toLowerCase()>
<org.bouncycastle.crypto.digests.GeneralDigest: void update(byte[],int,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<javax.microedition.lcdui.game.GameCanvas: void flushGraphics()>
<java.io.OutputStream: void write(byte[])>
<java.io.DataInputStream: int read()>
<javax.microedition.rms.RecordStore: java.lang.String[] listRecordStores()>
<java.io.InputStream: int read()>
<javax.microedition.lcdui.ChoiceGroup: void setLayout(int)>
<javax.microedition.lcdui.Canvas: void addCommand(javax.microedition.lcdui.Command)>
<java.lang.StringBuilder: void <init>(java.lang.String)>
<javax.microedition.lcdui.ChoiceGroup: void delete(int)>
<javax.microedition.lcdui.StringItem: void setDefaultCommand(javax.microedition.lcdui.Command)>
<java.lang.StringBuffer: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>
<javax.microedition.lcdui.game.GameCanvas: javax.microedition.lcdui.Graphics getGraphics()>
<javax.microedition.lcdui.ChoiceGroup: void <init>(java.lang.String,int,java.lang.String[],javax.microedition.lcdui.Image[])>
<java.util.Vector: void <init>(int)>
<java.lang.String: void <init>(char[],int,int)>
<javax.microedition.lcdui.ChoiceGroup: boolean isSelected(int)>
<java.util.Vector: void addElement(java.lang.Object)>
<javax.microedition.io.HttpConnection: void setRequestMethod(java.lang.String)>
<javax.microedition.lcdui.Canvas: void setTitle(java.lang.String)>
<javax.microedition.lcdui.ImageItem: void <init>(java.lang.String,javax.microedition.lcdui.Image,int,java.lang.String)>
<javax.microedition.lcdui.Form: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<javax.microedition.media.control.VideoControl: java.lang.Object initDisplayMode(int,java.lang.Object)>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createRGBImage(int[],int,int,boolean)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object)>
<javax.microedition.lcdui.Canvas: int getGameAction(int)>
<java.util.Hashtable: void <init>()>
<java.io.InputStream: void close()>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.lang.String: byte[] getBytes(java.lang.String)>
<javax.microedition.lcdui.Graphics: int getTranslateX()>
<javax.microedition.lcdui.ChoiceGroup: int getSelectedIndex()>
<org.bouncycastle.crypto.digests.GeneralDigest: int getByteLength()>
<javax.microedition.lcdui.Canvas: boolean isShown()>
<javax.microedition.media.control.VideoControl: void setDisplayLocation(int,int)>
<java.lang.StringBuffer: java.lang.String toString()>
<javax.microedition.media.control.VideoControl: void setDisplayFullScreen(boolean)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.io.IOException: void <init>()>
<javax.microedition.rms.RecordStore: int getSize()>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.Object: java.lang.String toString()>
<java.io.ByteArrayOutputStream: void write(int)>
<java.util.TimerTask: void <init>()>
<javax.microedition.media.Manager: javax.microedition.media.Player createPlayer(java.lang.String)>
<org.bouncycastle.util.encoders.UrlBase64: byte[] decode(byte[])>
<java.io.OutputStream: void close()>
<javax.microedition.lcdui.Graphics: int getClipWidth()>
<javax.microedition.lcdui.TextBox: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<javax.microedition.lcdui.List: void <init>(java.lang.String,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<javax.microedition.lcdui.Graphics: void setColor(int)>
<javax.microedition.lcdui.StringItem: java.lang.String getText()>
<javax.microedition.lcdui.TextBox: void <init>(java.lang.String,java.lang.String,int,int)>
<javax.microedition.lcdui.Graphics: void setFont(javax.microedition.lcdui.Font)>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.Thread: void start()>
<java.io.ByteArrayOutputStream: byte[] toByteArray()>
<java.lang.String: void <init>(byte[])>
<javax.microedition.lcdui.List: int append(java.lang.String,javax.microedition.lcdui.Image)>
<javax.microedition.lcdui.Spacer: void <init>(int,int)>
<javax.microedition.lcdui.Canvas: int getHeight()>
<java.io.DataInputStream: void <init>(java.io.InputStream)>
<javax.microedition.media.Player: javax.microedition.media.Control getControl(java.lang.String)>
<java.io.InputStream: int read(byte[])>
<java.util.Calendar: int get(int)>
<java.io.DataInputStream: short readShort()>
<org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)>
<javax.microedition.io.Connector: javax.microedition.io.Connection open(java.lang.String)>
<java.util.Vector: void <init>(int,int)>
<org.bouncycastle.crypto.digests.GeneralDigest: int doFinal(byte[],int)>
<javax.microedition.io.SocketConnection: void close()>
<javax.microedition.lcdui.StringItem: void setItemCommandListener(javax.microedition.lcdui.ItemCommandListener)>
<java.io.DataInputStream: void readFully(byte[],int,int)>
<javax.microedition.lcdui.game.GameCanvas: void setFullScreenMode(boolean)>
<javax.microedition.lcdui.Canvas: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.io.InputStream: void <init>()>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.util.Vector: void removeElementAt(int)>
<javax.microedition.lcdui.Graphics: void translate(int,int)>
<java.io.Writer: void flush()>
<javax.microedition.lcdui.game.GameCanvas: void <init>(boolean)>
<javax.microedition.media.Player: void close()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.microedition.lcdui.Font: int charWidth(char)>
<java.util.Vector: void setElementAt(java.lang.Object,int)>
<java.util.Vector: void removeAllElements()>
<java.io.PrintStream: void write(int)>
<java.io.OutputStream: void <init>()>
<javax.microedition.io.SocketConnection: java.io.InputStream openInputStream()>
<javax.microedition.lcdui.Gauge: int getValue()>
<javax.microedition.media.control.RecordControl: void startRecord()>
<javax.microedition.media.control.RecordControl: void commit()>
<java.lang.String: java.lang.String replace(char,char)>
<javax.microedition.lcdui.Display: boolean vibrate(int)>
<javax.microedition.media.control.VideoControl: void setDisplaySize(int,int)>
<javax.microedition.lcdui.Image: void getRGB(int[],int,int,int,int,int,int)>
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(byte[],int,int)>
<java.util.Vector: int size()>
<java.io.ByteArrayOutputStream: void write(byte[])>
<java.util.Vector: java.lang.Object lastElement()>
<javax.microedition.lcdui.Font: int substringWidth(java.lang.String,int,int)>
<javax.microedition.lcdui.Graphics: int getColor()>
<java.lang.String: java.lang.String trim()>
<java.util.Vector: void setSize(int)>
<java.lang.StringBuffer: int length()>
<javax.microedition.lcdui.Canvas: void removeCommand(javax.microedition.lcdui.Command)>
<java.util.Calendar: void setTime(java.util.Date)>
<java.io.DataOutputStream: void writeShort(int)>
<javax.microedition.media.Player: void realize()>
<java.util.Date: void <init>(long)>
<java.io.DataInputStream: int available()>
<java.lang.String: void <init>()>
<javax.microedition.lcdui.game.GameCanvas: boolean isShown()>
<javax.microedition.lcdui.Spacer: void setLayout(int)>
<javax.microedition.lcdui.Alert: void setString(java.lang.String)>
<javax.microedition.lcdui.List: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<java.io.DataInputStream: int read(byte[],int,int)>
<java.io.DataOutputStream: void writeInt(int)>
<java.lang.Runtime: long totalMemory()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>
<java.io.OutputStream: void flush()>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.io.PrintStream: void println(java.lang.String)>
<javax.microedition.lcdui.Form: void <init>(java.lang.String)>
<java.lang.String: boolean startsWith(java.lang.String,int)>
<java.lang.Thread: void <init>()>
<javax.microedition.io.HttpConnection: java.io.OutputStream openOutputStream()>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<java.util.Vector: boolean removeElement(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.io.DataInputStream: void close()>
<java.lang.String: boolean equals(java.lang.Object)>
<javax.microedition.lcdui.Graphics: void setClip(int,int,int,int)>
<java.io.OutputStream: void write(byte[],int,int)>
<javax.microedition.lcdui.Graphics: void drawImage(javax.microedition.lcdui.Image,int,int,int)>
<java.io.OutputStream: void write(int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>
<javax.microedition.media.Manager: void playTone(int,int,int)>
<javax.microedition.lcdui.game.GameCanvas: int getHeight()>
<java.util.NoSuchElementException: void <init>()>
<javax.microedition.lcdui.Form: int append(javax.microedition.lcdui.Item)>
<java.util.TimerTask: boolean cancel()>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<javax.microedition.lcdui.Canvas: void <init>()>
<javax.microedition.lcdui.Graphics: void fillTriangle(int,int,int,int,int,int)>
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>
<javax.microedition.lcdui.game.GameCanvas: int getWidth()>
<java.io.ByteArrayOutputStream: void <init>()>
<java.io.DataOutputStream: void flush()>
<org.xmlpull.v1.XmlPullParser: int nextToken()>
<javax.microedition.lcdui.Graphics: void clipRect(int,int,int,int)>
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>
<java.lang.Math: int max(int,int)>
<java.io.Reader: int read()>
<javax.microedition.media.control.VideoControl: byte[] getSnapshot(java.lang.String)>
<javax.microedition.rms.RecordStore: void setRecord(int,byte[],int,int)>
<javax.microedition.lcdui.List: int getSelectedIndex()>
<javax.microedition.lcdui.Font: int getHeight()>
<javax.microedition.lcdui.List: void setSelectCommand(javax.microedition.lcdui.Command)>
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<java.util.Timer: void <init>()>
<javax.microedition.lcdui.Alert: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<javax.microedition.media.Player: void prefetch()>
<javax.microedition.lcdui.Form: void removeCommand(javax.microedition.lcdui.Command)>
<javax.microedition.lcdui.ImageItem: void setLayout(int)>
<javax.microedition.lcdui.Graphics: void fillRect(int,int,int,int)>
<java.lang.Exception: java.lang.String getMessage()>
<javax.microedition.lcdui.Graphics: int getClipX()>
<javax.microedition.lcdui.List: int getSelectedFlags(boolean[])>
<java.lang.String: int compareTo(java.lang.String)>
<javax.microedition.io.SocketConnection: java.io.OutputStream openOutputStream()>
<java.lang.String: int indexOf(int)>
<java.util.Date: long getTime()>
<javax.microedition.midlet.MIDlet: boolean platformRequest(java.lang.String)>
<javax.microedition.lcdui.Graphics: void drawRect(int,int,int,int)>
<javax.microedition.lcdui.Display: void setCurrent(javax.microedition.lcdui.Displayable)>
<java.lang.String: java.lang.String valueOf(long)>
<java.io.DataOutputStream: void write(byte[])>
<java.io.DataOutputStream: void write(int)>
<javax.microedition.lcdui.Form: void addCommand(javax.microedition.lcdui.Command)>
<javax.microedition.lcdui.TextBox: void removeCommand(javax.microedition.lcdui.Command)>
<javax.microedition.rms.RecordStore: void deleteRecordStore(java.lang.String)>
<java.io.Writer: void write(int)>
<java.io.InputStream: void mark(int)>
<javax.microedition.lcdui.TextField: void <init>(java.lang.String,java.lang.String,int,int)>
<javax.microedition.lcdui.Graphics: void setStrokeStyle(int)>
<javax.microedition.rms.RecordStore: int getNumRecords()>
<javax.microedition.lcdui.Graphics: int getStrokeStyle()>
