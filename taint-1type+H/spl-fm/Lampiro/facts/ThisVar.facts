<it.yup.xml.Element: it.yup.xml.Element getChildByName(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element getChildByName(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UICombobox: void <init>(java.lang.String,boolean)>	<it.yup.ui.UICombobox: void <init>(java.lang.String,boolean)>/@this
<lampiro.screens.MMScreen: void showAudio()>	<lampiro.screens.MMScreen: void showAudio()>/@this
<lampiro.screens.ChatScreen: boolean needDisplay()>	<lampiro.screens.ChatScreen: boolean needDisplay()>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener3)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener3)>/@this
<it.yup.xmpp.Config: void setDefaults()>	<it.yup.xmpp.Config: void setDefaults()>/@this
<lampiro.screens.RosterScreen: void createMUC(it.yup.xmpp.IQResultListener)>	<lampiro.screens.RosterScreen: void createMUC(it.yup.xmpp.IQResultListener)>/@this
<lampiro.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>/@this
<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener2)>	<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener2)>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator)>/@this
<it.yup.xml.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xml.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>/@this
<it.yup.tests.UITestMidlet$TestScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<it.yup.tests.UITestMidlet$TestScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.util.StderrConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.StderrConsumer: void gotMessage(java.lang.String,int)>/@this
<it.yup.xmpp.FTSender$IQResultListener3: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener3: void handleResult(it.yup.xml.Element)>/@this
<lampiro.screens.DataFormScreen: void createControls()>	<lampiro.screens.DataFormScreen: void createControls()>/@this
<lampiro.screens.RosterScreen$IQResultListener1: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener1: void handleError(it.yup.xml.Element)>/@this
<it.yup.ui.UICanvas: void keyRepeated(int)>	<it.yup.ui.UICanvas: void keyRepeated(int)>/@this
<lampiro.screens.ChatScreen$ForwardScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen$ForwardScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.xml.Element: java.lang.Object clone()>	<it.yup.xml.Element: java.lang.Object clone()>/@this
<it.yup.xmlstream.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UICombobox: int getSelectedIndex()>	<it.yup.ui.UICombobox: int getSelectedIndex()>/@this
<it.yup.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xmlstream.KXmlSerializer: java.lang.String getName()>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getName()>/@this
<it.yup.tests.RMSTestMidlet: void testDb(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testDb(it.yup.util.RMSIndex)>/@this
<it.yup.xmpp.FTSender$FTSEventHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>/@this
<it.yup.ui.UISeparator: void <init>(int)>	<it.yup.ui.UISeparator: void <init>(int)>/@this
<it.yup.xmpp.packets.Iq: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmpp.packets.Iq: void <init>(java.lang.String,java.lang.String)>/@this
<it.yup.util.XMPPConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.XMPPConsumer: void gotMessage(java.lang.String,int)>/@this
<it.yup.xmlstream.SocketStream: void run()>	<it.yup.xmlstream.SocketStream: void run()>/@this
<it.yup.ui.UICombobox: void append(it.yup.ui.UILabel)>	<it.yup.ui.UICombobox: void append(it.yup.ui.UILabel)>/@this
<it.yup.ui.UIRadioButtons: int getSelectedIndex()>	<it.yup.ui.UIRadioButtons: int getSelectedIndex()>/@this
<it.yup.ui.UIScreen: boolean intersect(int[],int[])>	<it.yup.ui.UIScreen: boolean intersect(int[],int[])>/@this
<it.yup.ui.UIButton: void setHPadding(int)>	<it.yup.ui.UIButton: void setHPadding(int)>/@this
<it.yup.util.MetaVector: java.lang.Object firstElement()>	<it.yup.util.MetaVector: java.lang.Object firstElement()>/@this
<it.yup.screens.DataFormScreen: void createControls()>	<it.yup.screens.DataFormScreen: void createControls()>/@this
<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen)>/@this
<lampiro.screens.InnerMMScreen: void handleMMFile(byte[],java.lang.String,int)>	<lampiro.screens.InnerMMScreen: void handleMMFile(byte[],java.lang.String,int)>/@this
<it.yup.ui.UICanvas: java.util.TimerTask initLongPress(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: java.util.TimerTask initLongPress(it.yup.ui.UIScreen)>/@this
<it.yup.xmpp.XMPPClient: void openStream()>	<it.yup.xmpp.XMPPClient: void openStream()>/@this
<lampiro.screens.ChatScreen$ForwardScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen$ForwardScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UIPanel: void <init>()>	<it.yup.ui.UIPanel: void <init>()>/@this
<it.yup.screens.RosterScreen: void <init>()>	<it.yup.screens.RosterScreen: void <init>()>/@this
<it.yup.tests.UITestMidlet: void pauseApp()>	<it.yup.tests.UITestMidlet: void pauseApp()>/@this
<it.yup.xmpp.XMPPClient: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>/@this
<it.yup.ui.UIMenu: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIMenu: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<lampiro.screens.AlbumScreen: void <init>()>	<lampiro.screens.AlbumScreen: void <init>()>/@this
<it.yup.xmlstream.AccountRegistration: void <init>()>	<it.yup.xmlstream.AccountRegistration: void <init>()>/@this
<lampiro.screens.SubscribeScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.SubscribeScreen: void <init>(it.yup.xmpp.Contact)>/@this
<it.yup.ui.UIMenu: void setSelectedIndex(int)>	<it.yup.ui.UIMenu: void setSelectedIndex(int)>/@this
<it.yup.xmlstream.SocketStream: void connectionEstablished(it.yup.transport.BaseChannel)>	<it.yup.xmlstream.SocketStream: void connectionEstablished(it.yup.transport.BaseChannel)>/@this
<it.yup.ui.UIScreen: int append(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: int append(it.yup.ui.UIItem)>/@this
<lampiro.screens.AddContactScreen: void <init>()>	<lampiro.screens.AddContactScreen: void <init>()>/@this
<it.yup.screens.DebugScreen: void <init>()>	<it.yup.screens.DebugScreen: void <init>()>/@this
<it.yup.xml.KXmlParser: void read(char)>	<it.yup.xml.KXmlParser: void read(char)>/@this
<it.yup.xmlstream.KXmlParser: int nextToken()>	<it.yup.xmlstream.KXmlParser: int nextToken()>/@this
<it.yup.xmpp.packets.Message: void setBody(java.lang.String)>	<it.yup.xmpp.packets.Message: void setBody(java.lang.String)>/@this
<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean)>	<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean)>/@this
<it.yup.util.RMSIndex$KeyEnumeration: void next_item()>	<it.yup.util.RMSIndex$KeyEnumeration: void next_item()>/@this
<it.yup.xmlstream.SocketStream: void connectionLost(it.yup.transport.BaseChannel)>	<it.yup.xmlstream.SocketStream: void connectionLost(it.yup.transport.BaseChannel)>/@this
<it.yup.screens.RegisterScreen$1: void run()>	<it.yup.screens.RegisterScreen$1: void run()>/@this
<it.yup.tests.RMSTestMidlet: void testMultiple(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testMultiple(it.yup.util.RMSIndex)>/@this
<lampiro.screens.InnerMMScreen: void setTypeIndex(int)>	<lampiro.screens.InnerMMScreen: void setTypeIndex(int)>/@this
<it.yup.util.RMSIndex: it.yup.util.RMSIndex$Item get_item(java.util.Vector,byte[],boolean)>	<it.yup.util.RMSIndex: it.yup.util.RMSIndex$Item get_item(java.util.Vector,byte[],boolean)>/@this
<it.yup.ui.UICombobox: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UICombobox: it.yup.ui.UIItem getSelectedItem()>/@this
<it.yup.ui.UIPanel: void setItems(java.util.Vector)>	<it.yup.ui.UIPanel: void setItems(java.util.Vector)>/@this
<it.yup.xmpp.Contact: int getAvailability()>	<it.yup.xmpp.Contact: int getAvailability()>/@this
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener1)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener1)>/@this
<lampiro.screens.RosterScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>/@this
<it.yup.ui.UIScreen: void removePopup(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: void removePopup(it.yup.ui.UIMenu)>/@this
<it.yup.xmlstream.KXmlParser: char[] getTextCharacters(int[])>	<it.yup.xmlstream.KXmlParser: char[] getTextCharacters(int[])>/@this
<com.jcraft.jzlib.InfBlocks: int inflate_flush(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.InfBlocks: int inflate_flush(com.jcraft.jzlib.ZStream,int)>/@this
<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.xml.KXmlSerializer: void docdecl(java.lang.String)>	<it.yup.xml.KXmlSerializer: void docdecl(java.lang.String)>/@this
<it.yup.screens.ChatScreen: void paintHeader(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ChatScreen: void paintHeader(javax.microedition.lcdui.Graphics)>/@this
<com.jcraft.jzlib.InfCodes: void free(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfCodes: void free(com.jcraft.jzlib.ZStream)>/@this
<it.yup.ui.UIItem: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIItem: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.ui.UIMenu: int getAbsoluteY()>	<it.yup.ui.UIMenu: int getAbsoluteY()>/@this
<it.yup.ui.UILabel: void paintLine(javax.microedition.lcdui.Graphics,int,int,javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UILabel: void paintLine(javax.microedition.lcdui.Graphics,int,int,javax.microedition.lcdui.Image,java.lang.String)>/@this
<com.jcraft.jzlib.Deflate: void _tr_flush_block(int,int,boolean)>	<com.jcraft.jzlib.Deflate: void _tr_flush_block(int,int,boolean)>/@this
<it.yup.screens.RegisterScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>/@this
<it.yup.xmlstream.KXmlParser: void setInput(java.io.Reader)>	<it.yup.xmlstream.KXmlParser: void setInput(java.io.Reader)>/@this
<it.yup.ui.UICanvas: void keyReleased(int)>	<it.yup.ui.UICanvas: void keyReleased(int)>/@this
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen)>/@this
<com.jcraft.jzlib.Deflate: void compress_block(short[],short[])>	<com.jcraft.jzlib.Deflate: void compress_block(short[],short[])>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void rosterRetrieved()>	<it.yup.xmpp.XMPPClient$XmppListener: void rosterRetrieved()>/@this
<it.yup.xmpp.XMPPClient$PresenceHandler: void handleSubscribe(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void handleSubscribe(it.yup.xmpp.packets.Presence)>/@this
<lampiro.screens.RegisterScreen: void placeItems()>	<lampiro.screens.RegisterScreen: void placeItems()>/@this
<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$MessageHandler)>	<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$MessageHandler)>/@this
<it.yup.ui.UITextPanel: void setEnableEmoticons(boolean)>	<it.yup.ui.UITextPanel: void setEnableEmoticons(boolean)>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void playSmartTone()>	<it.yup.xmpp.XMPPClient$XmppListener: void playSmartTone()>/@this
<it.yup.ui.UITextField: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UITextField: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.util.MetaVector: void removeAllElements()>	<it.yup.util.MetaVector: void removeAllElements()>/@this
<lampiro.screens.InnerMMScreen: void paint(javax.microedition.lcdui.Graphics)>	<lampiro.screens.InnerMMScreen: void paint(javax.microedition.lcdui.Graphics)>/@this
<com.jcraft.jzlib.ZStream: int inflateInit(int,boolean)>	<com.jcraft.jzlib.ZStream: int inflateInit(int,boolean)>/@this
<lampiro.screens.ChatScreen: boolean isMyPacket(it.yup.xml.Element)>	<lampiro.screens.ChatScreen: boolean isMyPacket(it.yup.xml.Element)>/@this
<it.yup.ui.UIAccordion: it.yup.ui.UIVLayout wrapItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: it.yup.ui.UIVLayout wrapItem(it.yup.ui.UIItem)>/@this
<com.jcraft.jzlib.FilterInputStream: boolean markSupported()>	<com.jcraft.jzlib.FilterInputStream: boolean markSupported()>/@this
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.tests.UITestMidlet: void destroyApp(boolean)>	<it.yup.tests.UITestMidlet: void destroyApp(boolean)>/@this
<it.yup.tests.XMLTestMidlet: void pauseApp()>	<it.yup.tests.XMLTestMidlet: void pauseApp()>/@this
<it.yup.xmlstream.KXmlParser: int getDepth()>	<it.yup.xmlstream.KXmlParser: int getDepth()>/@this
<it.yup.xmpp.packets.Presence: void setStatus(java.lang.String)>	<it.yup.xmpp.packets.Presence: void setStatus(java.lang.String)>/@this
<it.yup.ui.UIMenu: void setAbsoluteX(int)>	<it.yup.ui.UIMenu: void setAbsoluteX(int)>/@this
<it.yup.xmpp.SimpleDataFormExecutor: boolean execute(int)>	<it.yup.xmpp.SimpleDataFormExecutor: boolean execute(int)>/@this
<it.yup.ui.UIGauge: int getOffset()>	<it.yup.ui.UIGauge: int getOffset()>/@this
<it.yup.xml.KXmlSerializer: java.lang.String getNamespace()>	<it.yup.xml.KXmlSerializer: java.lang.String getNamespace()>/@this
<com.jcraft.jzlib.Deflate: void fill_window()>	<com.jcraft.jzlib.Deflate: void fill_window()>/@this
<it.yup.ui.UICanvas$1: void run()>	<it.yup.ui.UICanvas$1: void run()>/@this
<it.yup.ui.UIItem: void setType(int)>	<it.yup.ui.UIItem: void setType(int)>/@this
<lampiro.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>	<lampiro.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>/@this
<it.yup.xmpp.FTSender$IQResultListener2: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener2: void handleError(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen: boolean isMicOn()>	<lampiro.screens.RosterScreen: boolean isMicOn()>/@this
<lampiro.screens.ChatScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>	<lampiro.screens.ChatScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>/@this
<it.yup.ui.UIAccordion: void <init>()>	<it.yup.ui.UIAccordion: void <init>()>/@this
<com.jcraft.jzlib.ZInputStream: int read(byte[],int,int)>	<com.jcraft.jzlib.ZInputStream: int read(byte[],int,int)>/@this
<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleResult(it.yup.xml.Element)>/@this
<lampiro.screens.InnerMMScreen$1: void <init>(lampiro.screens.InnerMMScreen)>	<lampiro.screens.InnerMMScreen$1: void <init>(lampiro.screens.InnerMMScreen)>/@this
<it.yup.transport.SocketChannel: void open()>	<it.yup.transport.SocketChannel: void open()>/@this
<it.yup.ui.UICombobox: boolean keyPressed(int)>	<it.yup.ui.UICombobox: boolean keyPressed(int)>/@this
<lampiro.screens.RosterScreen: void authenticated()>	<lampiro.screens.RosterScreen: void authenticated()>/@this
<lampiro.screens.RosterScreen$IQResultListener2: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener2: void handleError(it.yup.xml.Element)>/@this
<it.yup.xml.BProcessor: void <init>()>	<it.yup.xml.BProcessor: void <init>()>/@this
<it.yup.xml.KXmlParser: java.lang.String readName()>	<it.yup.xml.KXmlParser: java.lang.String readName()>/@this
<it.yup.ui.UIScreen: void hideNotify()>	<it.yup.ui.UIScreen: void hideNotify()>/@this
<it.yup.screens.SimpleComposerScreen: void <init>(javax.microedition.lcdui.Displayable,it.yup.xmpp.Contact)>	<it.yup.screens.SimpleComposerScreen: void <init>(javax.microedition.lcdui.Displayable,it.yup.xmpp.Contact)>/@this
<it.yup.xmpp.XMPPClient: void handleClientCommands(it.yup.xml.Element,boolean)>	<it.yup.xmpp.XMPPClient: void handleClientCommands(it.yup.xml.Element,boolean)>/@this
<lampiro.screens.ChatScreen: void checkSize(it.yup.ui.UIEmoLabel)>	<lampiro.screens.ChatScreen: void checkSize(it.yup.ui.UIEmoLabel)>/@this
<it.yup.ui.UIButton: void setPressed(boolean)>	<it.yup.ui.UIButton: void setPressed(boolean)>/@this
<lampiro.screens.AlbumScreen: boolean keyPressed(int)>	<lampiro.screens.AlbumScreen: boolean keyPressed(int)>/@this
<it.yup.xmpp.packets.Presence: void setShow(java.lang.String)>	<it.yup.xmpp.packets.Presence: void setShow(java.lang.String)>/@this
<com.jcraft.jzlib.FilterInputStream: void <init>(java.io.InputStream)>	<com.jcraft.jzlib.FilterInputStream: void <init>(java.io.InputStream)>/@this
<lampiro.screens.ChatScreen: void askTopic()>	<lampiro.screens.ChatScreen: void askTopic()>/@this
<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$TimerTask1)>	<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$TimerTask1)>/@this
<lampiro.screens.DataFormScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.DataFormScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen$UIGroup: void initGroupData()>	<lampiro.screens.RosterScreen$UIGroup: void initGroupData()>/@this
<lampiro.screens.AlbumScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.AlbumScreen: void itemAction(it.yup.ui.UIItem)>/@this
<lampiro.screens.OptionsScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.OptionsScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.xmpp.Roster: void loadGateways()>	<it.yup.xmpp.Roster: void loadGateways()>/@this
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>/@this
<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PacketListener1)>	<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PacketListener1)>/@this
<it.yup.ui.UIPanel: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: void setSelectedItem(it.yup.ui.UIItem)>/@this
<it.yup.screens.CommandListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.CommandListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<lampiro.screens.ShowMMScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ShowMMScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UICombobox$UIComboScreen: boolean keyPressed(int)>	<it.yup.ui.UICombobox$UIComboScreen: boolean keyPressed(int)>/@this
<it.yup.xmlstream.EventQuery: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>	<it.yup.xmlstream.EventQuery: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>/@this
<com.jcraft.jzlib.Deflate: void send_tree(short[],int)>	<com.jcraft.jzlib.Deflate: void send_tree(short[],int)>/@this
<it.yup.xml.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>	<it.yup.xml.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>/@this
<it.yup.ui.UIPanel: void setDirty(boolean)>	<it.yup.ui.UIPanel: void setDirty(boolean)>/@this
<com.jcraft.jzlib.Deflate: void <init>()>	<com.jcraft.jzlib.Deflate: void <init>()>/@this
<lampiro.screens.RosterScreen: void chunkSent(int,int,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void chunkSent(int,int,it.yup.xmpp.FTSender)>/@this
<it.yup.ui.UIVLayout: void setHeight(int)>	<it.yup.ui.UIVLayout: void setHeight(int)>/@this
<it.yup.xmlstream.AccountRegistration: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.AccountRegistration: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.ui.UICheckbox: void <init>(java.lang.String)>	<it.yup.ui.UICheckbox: void <init>(java.lang.String)>/@this
<com.jcraft.jzlib.ZOutputStream: void write(byte[],int,int)>	<com.jcraft.jzlib.ZOutputStream: void write(byte[],int,int)>/@this
<it.yup.xmlstream.Element: void <init>(it.yup.xmlstream.Element)>	<it.yup.xmlstream.Element: void <init>(it.yup.xmlstream.Element)>/@this
<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener2)>	<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener2)>/@this
<lampiro.screens.RosterScreen: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>/@this
<it.yup.xml.KXmlParser: int nextToken()>	<it.yup.xml.KXmlParser: int nextToken()>/@this
<com.jcraft.jzlib.FilterInputStream: int available()>	<com.jcraft.jzlib.FilterInputStream: int available()>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator)>/@this
<lampiro.screens.SplashScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.SplashScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UIAccordion: void clickLabel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void clickLabel(it.yup.ui.UIItem)>/@this
<lampiro.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>	<lampiro.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIContact getSelectedUIContact()>	<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIContact getSelectedUIContact()>/@this
<it.yup.ui.UIItem: void setGradientColor(int)>	<it.yup.ui.UIItem: void setGradientColor(int)>/@this
<it.yup.ui.UIIContainer: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIIContainer: void setSelectedItem(it.yup.ui.UIItem)>/@this
<it.yup.ui.UITextPanel: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UITextPanel: void setScreen(it.yup.ui.UIScreen)>/@this
<it.yup.ui.UIScreen: void invalidateArea(int,int,int,int)>	<it.yup.ui.UIScreen: void invalidateArea(int,int,int,int)>/@this
<it.yup.ui.UIItem: int getBg_color()>	<it.yup.ui.UIItem: int getBg_color()>/@this
<it.yup.xmlstream.KXmlParser: int peekType()>	<it.yup.xmlstream.KXmlParser: int peekType()>/@this
<lampiro.screens.MUCComposer: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.MUCComposer: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout,java.util.Vector)>	<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout,java.util.Vector)>/@this
<lampiro.screens.InnerMMScreen: void captureAudio()>	<lampiro.screens.InnerMMScreen: void captureAudio()>/@this
<it.yup.xmpp.Contact: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>	<it.yup.xmpp.Contact: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>/@this
<it.yup.ui.UITextField: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.ui.UITextField: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.xmlstream.PacketListener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.PacketListener: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.ui.UIGauge: int getMaxValue()>	<it.yup.ui.UIGauge: int getMaxValue()>/@this
<lampiro.screens.ChatScreen: void updateLabel(lampiro.screens.ChatScreen$ConversationEntry)>	<lampiro.screens.ChatScreen: void updateLabel(lampiro.screens.ChatScreen$ConversationEntry)>/@this
<it.yup.xmpp.XMPPClient$1: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$1: void <init>(it.yup.xmpp.XMPPClient)>/@this
<it.yup.xmpp.XMPPClient: void sendPacket(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient: void sendPacket(it.yup.xml.Element)>/@this
<it.yup.util.MemoryLogConsumer: void setExiting()>	<it.yup.util.MemoryLogConsumer: void setExiting()>/@this
<it.yup.ui.UIPanel: void setMaxHeight(int)>	<it.yup.ui.UIPanel: void setMaxHeight(int)>/@this
<it.yup.xml.Element: void <init>(it.yup.xml.Element)>	<it.yup.xml.Element: void <init>(it.yup.xml.Element)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace()>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace()>/@this
<lampiro.screens.InnerMMScreen: int getTypeIndex()>	<lampiro.screens.InnerMMScreen: int getTypeIndex()>/@this
<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout)>	<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout)>/@this
<it.yup.transport.SocketChannel$UTFReader: int read(char[])>	<it.yup.transport.SocketChannel$UTFReader: int read(char[])>/@this
<lampiro.screens.GatewayRegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.GatewayRegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<com.jcraft.jzlib.Inflate: int inflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>	<com.jcraft.jzlib.Inflate: int inflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>/@this
<lampiro.screens.MUCScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.MUCScreen: void <init>(it.yup.xmpp.Contact)>/@this
<com.jcraft.jzlib.Adler32: void <init>()>	<com.jcraft.jzlib.Adler32: void <init>()>/@this
<it.yup.ui.UIAccordion: int getPanelIndex(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: int getPanelIndex(it.yup.ui.UIItem,it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen$FileReceiveScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.xmpp.FTReceiver$FTREventHandler: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$FTREventHandler: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>/@this
<it.yup.ui.UILayout: void <init>(int)>	<it.yup.ui.UILayout: void <init>(int)>/@this
<it.yup.util.StderrConsumer: void <init>()>	<it.yup.util.StderrConsumer: void <init>()>/@this
<it.yup.xmpp.FTSender: void <init>(java.lang.String,byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTSender$FTSEventHandler)>	<it.yup.xmpp.FTSender: void <init>(java.lang.String,byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTSender$FTSEventHandler)>/@this
<it.yup.util.NetworkConsumer: void <init>()>	<it.yup.util.NetworkConsumer: void <init>()>/@this
<com.jcraft.jzlib.InfBlocks: void free(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfBlocks: void free(com.jcraft.jzlib.ZStream)>/@this
<lampiro.screens.MUCScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.MUCScreen: void itemAction(it.yup.ui.UIItem)>/@this
<com.jcraft.jzlib.FilterInputStream: void close()>	<com.jcraft.jzlib.FilterInputStream: void close()>/@this
<it.yup.xmpp.Roster: void saveGateways()>	<it.yup.xmpp.Roster: void saveGateways()>/@this
<it.yup.ui.UIScreen: void setDirty(boolean)>	<it.yup.ui.UIScreen: void setDirty(boolean)>/@this
<lampiro.screens.GatewayRegisterScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.GatewayRegisterScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.ui.UIRadioButtons: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIRadioButtons: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<com.jcraft.jzlib.Deflate$Config: void <init>(int,int,int,int,int)>	<com.jcraft.jzlib.Deflate$Config: void <init>(int,int,int,int,int)>/@this
<it.yup.ui.UIPanel: boolean isListMode()>	<it.yup.ui.UIPanel: boolean isListMode()>/@this
<it.yup.xmlstream.BasicXmlStream$SessionOpener: void <init>(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$SessionOpener: void <init>(it.yup.xmlstream.BasicXmlStream)>/@this
<it.yup.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable,int)>	<it.yup.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable,int)>/@this
<lampiro.screens.RosterScreen: it.yup.ui.UIAccordion getAccordion()>	<lampiro.screens.RosterScreen: it.yup.ui.UIAccordion getAccordion()>/@this
<it.yup.util.RMSIndex: void sorted_insert(java.util.Vector,it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: void sorted_insert(java.util.Vector,it.yup.util.RMSIndex$Item)>/@this
<it.yup.ui.UIItem: int getLayoutHeight()>	<it.yup.ui.UIItem: int getLayoutHeight()>/@this
<it.yup.xmlstream.KXmlParser: void exception(java.lang.String)>	<it.yup.xmlstream.KXmlParser: void exception(java.lang.String)>/@this
<it.yup.util.RMSIndex: boolean close()>	<it.yup.util.RMSIndex: boolean close()>/@this
<it.yup.screens.ChatScreen: void <init>(it.yup.xmpp.Contact)>	<it.yup.screens.ChatScreen: void <init>(it.yup.xmpp.Contact)>/@this
<it.yup.transport.SocketChannel: void sendContent(byte[])>	<it.yup.transport.SocketChannel: void sendContent(byte[])>/@this
<com.jcraft.jzlib.Deflate: void send_all_trees(int,int,int)>	<com.jcraft.jzlib.Deflate: void send_all_trees(int,int,int)>/@this
<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener3)>	<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener3)>/@this
<it.yup.ui.UIScreen: void endDrag()>	<it.yup.ui.UIScreen: void endDrag()>/@this
<lampiro.screens.DataFormScreen: boolean keyPressed(int)>	<lampiro.screens.DataFormScreen: boolean keyPressed(int)>/@this
<com.jcraft.jzlib.Inflate: int inflateSyncPoint(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateSyncPoint(com.jcraft.jzlib.ZStream)>/@this
<it.yup.ui.UIMenu: it.yup.ui.UIItem keyPressed(int,int)>	<it.yup.ui.UIMenu: it.yup.ui.UIItem keyPressed(int,int)>/@this
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>/@this
<it.yup.screens.SplashScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.SplashScreen: void paint(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xml.KXmlParser: int getNamespaceCount(int)>	<it.yup.xml.KXmlParser: int getNamespaceCount(int)>/@this
<lampiro.screens.RosterScreen: void queryCmd(java.lang.String)>	<lampiro.screens.RosterScreen: void queryCmd(java.lang.String)>/@this
<it.yup.util.MetaVector$MultiVectorEnumeration: boolean hasMoreElements()>	<it.yup.util.MetaVector$MultiVectorEnumeration: boolean hasMoreElements()>/@this
<it.yup.xml.KXmlParser: java.lang.String getPositionDescription()>	<it.yup.xml.KXmlParser: java.lang.String getPositionDescription()>/@this
<it.yup.tests.XMPPTestClient$Listener: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.tests.XMPPTestClient$Listener: void gotStreamEvent(java.lang.String,java.lang.Object)>/@this
<it.yup.tests.RMSTestMidlet: void testLong(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testLong(it.yup.util.RMSIndex)>/@this
<it.yup.screens.RosterScreen: void filter_contacts(boolean)>	<it.yup.screens.RosterScreen: void filter_contacts(boolean)>/@this
<it.yup.screens.AddContactScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.AddContactScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>/@this
<it.yup.tests.UITestMidlet$TestScreen: void buildScreen2()>	<it.yup.tests.UITestMidlet$TestScreen: void buildScreen2()>/@this
<it.yup.util.RMSIndex: void <init>(java.lang.String,int)>	<it.yup.util.RMSIndex: void <init>(java.lang.String,int)>/@this
<it.yup.xmpp.Group: void addElement(java.lang.String)>	<it.yup.xmpp.Group: void addElement(java.lang.String)>/@this
<it.yup.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>	<it.yup.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>/@this
<it.yup.screens.RosterScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paint(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UIAccordion: void insertPanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: void insertPanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem,int)>/@this
<lampiro.screens.InnerMMScreen: void startCapture()>	<lampiro.screens.InnerMMScreen: void startCapture()>/@this
<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener4)>	<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener4)>/@this
<it.yup.util.MetaVector: void <init>(int)>	<it.yup.util.MetaVector: void <init>(int)>/@this
<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel)>	<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel)>/@this
<it.yup.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<it.yup.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>/@this
<it.yup.xmpp.XMPPClient: void updateTask(it.yup.xmpp.Task)>	<it.yup.xmpp.XMPPClient: void updateTask(it.yup.xmpp.Task)>/@this
<com.jcraft.jzlib.Deflate: void set_data_type()>	<com.jcraft.jzlib.Deflate: void set_data_type()>/@this
<it.yup.ui.UIAccordion: it.yup.ui.UIItem getOpenedLabel()>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem getOpenedLabel()>/@this
<it.yup.util.MetaVector$MultiVectorEnumeration: void checkNext()>	<it.yup.util.MetaVector$MultiVectorEnumeration: void checkNext()>/@this
<it.yup.ui.UIHLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIHLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.xml.Element: void removeAllElements()>	<it.yup.xml.Element: void removeAllElements()>/@this
<lampiro.screens.DebugScreen: void setupLogging()>	<lampiro.screens.DebugScreen: void setupLogging()>/@this
<it.yup.xmlstream.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>	<it.yup.xmlstream.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>/@this
<it.yup.xml.KXmlParser: int read()>	<it.yup.xml.KXmlParser: int read()>/@this
<it.yup.ui.UILayout: void drawSegmentedBorder(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UILayout: void drawSegmentedBorder(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.transport.BaseChannel: boolean pollAlive()>	<it.yup.transport.BaseChannel: boolean pollAlive()>/@this
<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener1)>	<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener1)>/@this
<it.yup.tests.XMLTestMidlet: void testPerformances()>	<it.yup.tests.XMLTestMidlet: void testPerformances()>/@this
<it.yup.xml.KXmlProcessor: void <init>()>	<it.yup.xml.KXmlProcessor: void <init>()>/@this
<it.yup.screens.ScreenSaver: void <init>(javax.microedition.lcdui.Displayable)>	<it.yup.screens.ScreenSaver: void <init>(javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UICombobox: void removeAll()>	<it.yup.ui.UICombobox: void removeAll()>/@this
<it.yup.util.RMSIndex$KeyEnumeration: boolean hasMoreElements()>	<it.yup.util.RMSIndex$KeyEnumeration: boolean hasMoreElements()>/@this
<it.yup.util.MemoryLogConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.MemoryLogConsumer: void gotMessage(java.lang.String,int)>/@this
<lampiro.LampiroMidlet: void <init>()>	<lampiro.LampiroMidlet: void <init>()>/@this
<it.yup.xmlstream.KXmlSerializer: void entityRef(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void entityRef(java.lang.String)>/@this
<it.yup.screens.RosterScreen: void commandExecuted(java.lang.Object)>	<it.yup.screens.RosterScreen: void commandExecuted(java.lang.Object)>/@this
<it.yup.ui.UICombobox: void append(java.lang.String)>	<it.yup.ui.UICombobox: void append(java.lang.String)>/@this
<lampiro.screens.FTScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.FTScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.ChatScreen: java.lang.String getPrintableStatus()>	<lampiro.screens.ChatScreen: java.lang.String getPrintableStatus()>/@this
<it.yup.ui.UIScreen: it.yup.ui.UIMenu getMenu()>	<it.yup.ui.UIScreen: it.yup.ui.UIMenu getMenu()>/@this
<lampiro.screens.InnerMMScreen: void captureVideo()>	<lampiro.screens.InnerMMScreen: void captureVideo()>/@this
<com.jcraft.jzlib.Inflate: int inflateInit(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Inflate: int inflateInit(com.jcraft.jzlib.ZStream,int)>/@this
<it.yup.transport.SocketChannel: void close()>	<it.yup.transport.SocketChannel: void close()>/@this
<it.yup.ui.UIScreen: void replace(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void replace(it.yup.ui.UIItem,it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>/@this
<it.yup.xml.KXmlParser: void require(int,java.lang.String,java.lang.String)>	<it.yup.xml.KXmlParser: void require(int,java.lang.String,java.lang.String)>/@this
<lampiro.screens.CommandListScreen: void stopWaiting()>	<lampiro.screens.CommandListScreen: void stopWaiting()>/@this
<it.yup.xml.Element: void delAttribute(java.lang.String)>	<it.yup.xml.Element: void delAttribute(java.lang.String)>/@this
<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.Writer)>	<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.Writer)>/@this
<it.yup.screens.ContactInfoScreen$1: void <init>(it.yup.screens.ContactInfoScreen)>	<it.yup.screens.ContactInfoScreen$1: void <init>(it.yup.screens.ContactInfoScreen)>/@this
<com.jcraft.jzlib.InfBlocks: void <init>(com.jcraft.jzlib.ZStream,java.lang.Object,int)>	<com.jcraft.jzlib.InfBlocks: void <init>(com.jcraft.jzlib.ZStream,java.lang.Object,int)>/@this
<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIContact getUIContact(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIContact getUIContact(it.yup.xmpp.Contact)>/@this
<it.yup.xmpp.XMPPClient$DiscoHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$DiscoHandler: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen: void endDrag()>	<lampiro.screens.RosterScreen: void endDrag()>/@this
<it.yup.screens.RegisterScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>/@this
<it.yup.ui.UIAccordion: java.util.Vector getSubpanel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: java.util.Vector getSubpanel(it.yup.ui.UIItem)>/@this
<it.yup.xmpp.Roster$RosterX: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.Roster$RosterX: void packetReceived(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.InfBlocks: int proc(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.InfBlocks: int proc(com.jcraft.jzlib.ZStream,int)>/@this
<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>/@this
<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender)>/@this
<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener2)>	<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener2)>/@this
<it.yup.xml.KXmlSerializer: void ignorableWhitespace(java.lang.String)>	<it.yup.xml.KXmlSerializer: void ignorableWhitespace(java.lang.String)>/@this
<it.yup.util.MetaVector: void copyInto(java.lang.Object[])>	<it.yup.util.MetaVector: void copyInto(java.lang.Object[])>/@this
<lampiro.screens.AddContactScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.Roster: void saveToStorage()>	<it.yup.xmpp.Roster: void saveToStorage()>/@this
<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void start(it.yup.xmlstream.BasicXmlStream)>/@this
<it.yup.xmpp.Contact: int compareTo(it.yup.xmpp.Contact)>	<it.yup.xmpp.Contact: int compareTo(it.yup.xmpp.Contact)>/@this
<it.yup.ui.UIHLayout: void <init>(int)>	<it.yup.ui.UIHLayout: void <init>(int)>/@this
<it.yup.ui.UIAccordion: java.util.Enumeration getSubPanelElements(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: java.util.Enumeration getSubPanelElements(it.yup.ui.UIItem)>/@this
<it.yup.util.XMPPConsumer: void setExiting()>	<it.yup.util.XMPPConsumer: void setExiting()>/@this
<it.yup.xmlstream.KXmlParser: void read(char)>	<it.yup.xmlstream.KXmlParser: void read(char)>/@this
<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(int)>/@this
<it.yup.xmpp.IqManager: void streamInitialized()>	<it.yup.xmpp.IqManager: void streamInitialized()>/@this
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>/@this
<it.yup.xmpp.SimpleDataFormExecutor: void display_internal()>	<it.yup.xmpp.SimpleDataFormExecutor: void display_internal()>/@this
<it.yup.ui.UILabel: javax.microedition.lcdui.Image getImg()>	<it.yup.ui.UILabel: javax.microedition.lcdui.Image getImg()>/@this
<lampiro.screens.MUCComposer: void <init>(it.yup.xmpp.MUC)>	<lampiro.screens.MUCComposer: void <init>(it.yup.xmpp.MUC)>/@this
<com.jcraft.jzlib.Deflate: void flush_block_only(boolean)>	<com.jcraft.jzlib.Deflate: void flush_block_only(boolean)>/@this
<it.yup.xml.KXmlSerializer: void setFeature(java.lang.String,boolean)>	<it.yup.xml.KXmlSerializer: void setFeature(java.lang.String,boolean)>/@this
<it.yup.ui.UITextPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UITextPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.ui.UICanvas: void show(int)>	<it.yup.ui.UICanvas: void show(int)>/@this
<it.yup.ui.UICanvas: it.yup.ui.UIScreen getCurrentScreen()>	<it.yup.ui.UICanvas: it.yup.ui.UIScreen getCurrentScreen()>/@this
<lampiro.screens.ShowMMScreen$1: void run()>	<lampiro.screens.ShowMMScreen$1: void run()>/@this
<it.yup.xml.KXmlParser: java.lang.String get(int)>	<it.yup.xml.KXmlParser: java.lang.String get(int)>/@this
<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String)>	<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String)>/@this
<it.yup.xmlstream.KXmlParser: void require(int,java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlParser: void require(int,java.lang.String,java.lang.String)>/@this
<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen)>/@this
<it.yup.ui.UIMenu: boolean isOpenedState()>	<it.yup.ui.UIMenu: boolean isOpenedState()>/@this
<it.yup.xmpp.CommandExecutor: void sendReply(java.lang.String,it.yup.xml.Element)>	<it.yup.xmpp.CommandExecutor: void sendReply(java.lang.String,it.yup.xml.Element)>/@this
<it.yup.ui.UILayout: int traverseFocusable(int,boolean)>	<it.yup.ui.UILayout: int traverseFocusable(int,boolean)>/@this
<com.jcraft.jzlib.Deflate: void _tr_stored_block(int,int,boolean)>	<com.jcraft.jzlib.Deflate: void _tr_stored_block(int,int,boolean)>/@this
<it.yup.ui.UIItem: void drawPixel(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIItem: void drawPixel(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.ui.UIPanel: void addItem(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: void addItem(it.yup.ui.UIItem)>/@this
<it.yup.ui.UIRadioButtons: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIRadioButtons: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UIScreen: void addPaintedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void addPaintedItem(it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen$UIGroup: boolean keyPressed(int)>	<lampiro.screens.RosterScreen$UIGroup: boolean keyPressed(int)>/@this
<it.yup.ui.UILabel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UILabel: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.xmpp.Contact: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Contact: void handleResult(it.yup.xml.Element)>/@this
<it.yup.util.RMSIndex: void store(byte[],byte[])>	<it.yup.util.RMSIndex: void store(byte[],byte[])>/@this
<it.yup.tests.TestMidlet: void exit()>	<it.yup.tests.TestMidlet: void exit()>/@this
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.XMPPClient: void buildSocketConnection()>	<it.yup.xmpp.XMPPClient: void buildSocketConnection()>/@this
<it.yup.ui.UITextPanel: boolean isEnableEmoticons()>	<it.yup.ui.UITextPanel: boolean isEnableEmoticons()>/@this
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.DataFormScreen: void stopWaiting()>	<lampiro.screens.DataFormScreen: void stopWaiting()>/@this
<it.yup.ui.UIPanel: void setFirstVisible(int)>	<it.yup.ui.UIPanel: void setFirstVisible(int)>/@this
<it.yup.ui.UICanvas: void askRepaint(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void askRepaint(it.yup.ui.UIScreen)>/@this
<it.yup.util.MetaVector: int indexOf(java.lang.Object)>	<it.yup.util.MetaVector: int indexOf(java.lang.Object)>/@this
<it.yup.ui.UIButton: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIButton: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<com.jcraft.jzlib.InfBlocks: void set_dictionary(byte[],int,int)>	<com.jcraft.jzlib.InfBlocks: void set_dictionary(byte[],int,int)>/@this
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener2)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener2)>/@this
<com.jcraft.jzlib.ZInputStream: int getFlushMode()>	<com.jcraft.jzlib.ZInputStream: int getFlushMode()>/@this
<it.yup.ui.UIAccordion: void setSubPanel(it.yup.ui.UIItem,java.util.Vector)>	<it.yup.ui.UIAccordion: void setSubPanel(it.yup.ui.UIItem,java.util.Vector)>/@this
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen,it.yup.screens.RosterScreen$AdHocCommandsHandler)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen,it.yup.screens.RosterScreen$AdHocCommandsHandler)>/@this
<it.yup.xml.KXmlParser: void setInput(java.io.Reader)>	<it.yup.xml.KXmlParser: void setInput(java.io.Reader)>/@this
<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender)>/@this
<it.yup.ui.UITextField: java.lang.String getText()>	<it.yup.ui.UITextField: java.lang.String getText()>/@this
<it.yup.ui.UITextField: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UITextField: void setScreen(it.yup.ui.UIScreen)>/@this
<lampiro.screens.InnerMMScreen: void <init>(javax.microedition.media.Player,javax.microedition.media.Control,int,java.lang.String)>	<lampiro.screens.InnerMMScreen: void <init>(javax.microedition.media.Player,javax.microedition.media.Control,int,java.lang.String)>/@this
<it.yup.ui.UIAccordion: void setLabelGradientColor(int)>	<it.yup.ui.UIAccordion: void setLabelGradientColor(int)>/@this
<it.yup.util.NetworkConsumer: void run()>	<it.yup.util.NetworkConsumer: void run()>/@this
<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int,int)>	<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int,int)>/@this
<it.yup.xml.KXmlParser: void <init>()>	<it.yup.xml.KXmlParser: void <init>()>/@this
<it.yup.ui.UIVLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIVLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.ui.UIAccordion: void removeAllItems()>	<it.yup.ui.UIAccordion: void removeAllItems()>/@this
<it.yup.xmpp.Contact: java.util.Vector getAllConvs()>	<it.yup.xmpp.Contact: java.util.Vector getAllConvs()>/@this
<it.yup.xmlstream.KXmlParser: void parseStartTag(boolean)>	<it.yup.xmlstream.KXmlParser: void parseStartTag(boolean)>/@this
<it.yup.ui.UIItem: void setLayoutWidth(int)>	<it.yup.ui.UIItem: void setLayoutWidth(int)>/@this
<com.jcraft.jzlib.InfTree: void initWorkArea(int)>	<com.jcraft.jzlib.InfTree: void initWorkArea(int)>/@this
<it.yup.xmpp.Roster: void unsubscribeContact(it.yup.xmpp.Contact)>	<it.yup.xmpp.Roster: void unsubscribeContact(it.yup.xmpp.Contact)>/@this
<it.yup.ui.UIPanel: void setSelected(boolean)>	<it.yup.ui.UIPanel: void setSelected(boolean)>/@this
<lampiro.screens.DataFormScreen: void fillForm()>	<lampiro.screens.DataFormScreen: void fillForm()>/@this
<lampiro.screens.MUCScreen: boolean isMyPacket(it.yup.xml.Element)>	<lampiro.screens.MUCScreen: boolean isMyPacket(it.yup.xml.Element)>/@this
<it.yup.transport.SocketChannel$UTFReader: int read(char[],int,int)>	<it.yup.transport.SocketChannel$UTFReader: int read(char[],int,int)>/@this
<it.yup.ui.UIIContainer: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UIIContainer: boolean contains(it.yup.ui.UIItem)>/@this
<it.yup.ui.Semaphore: void release(long)>	<it.yup.ui.Semaphore: void release(long)>/@this
<com.jcraft.jzlib.ZOutputStream: void close()>	<com.jcraft.jzlib.ZOutputStream: void close()>/@this
<lampiro.screens.AddContactScreen: void getGateways()>	<lampiro.screens.AddContactScreen: void getGateways()>/@this
<lampiro.screens.ShowMMScreen$1: void <init>(lampiro.screens.ShowMMScreen)>	<lampiro.screens.ShowMMScreen$1: void <init>(lampiro.screens.ShowMMScreen)>/@this
<it.yup.ui.UICanvas: void setupdefaultKeyCode()>	<it.yup.ui.UICanvas: void setupdefaultKeyCode()>/@this
<it.yup.xmlstream.KXmlSerializer: int getDepth()>	<it.yup.xmlstream.KXmlSerializer: int getDepth()>/@this
<lampiro.screens.GroupsScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.GroupsScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.util.ResourceManager: java.lang.String getString(int)>	<it.yup.util.ResourceManager: java.lang.String getString(int)>/@this
<it.yup.xmpp.FTSender$IQResultListener3: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener3: void handleError(it.yup.xml.Element)>/@this
<it.yup.screens.ChatScreen$ConversationEntry: void <init>(java.util.Vector,byte)>	<it.yup.screens.ChatScreen$ConversationEntry: void <init>(java.util.Vector,byte)>/@this
<lampiro.screens.RosterScreen: void setWaitingDF(lampiro.screens.RosterScreen$WaitScreen)>	<lampiro.screens.RosterScreen: void setWaitingDF(lampiro.screens.RosterScreen$WaitScreen)>/@this
<it.yup.ui.UILabel: void setImgAnchorPoint(int)>	<it.yup.ui.UILabel: void setImgAnchorPoint(int)>/@this
<it.yup.xmpp.Config: void setData(byte[],byte[])>	<it.yup.xmpp.Config: void setData(byte[],byte[])>/@this
<it.yup.ui.UICanvas: void setQwerty(boolean)>	<it.yup.ui.UICanvas: void setQwerty(boolean)>/@this
<it.yup.transport.BaseChannel: boolean isOpen()>	<it.yup.transport.BaseChannel: boolean isOpen()>/@this
<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence()>	<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence()>/@this
<it.yup.ui.UIPanel: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIPanel: it.yup.ui.UIItem getSelectedItem()>/@this
<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean,it.yup.xmpp.Roster$IQResultListener1)>	<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean,it.yup.xmpp.Roster$IQResultListener1)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespacePrefix(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespacePrefix(int)>/@this
<lampiro.screens.RosterScreen$UIGroup: void <init>(java.lang.String,it.yup.ui.UIAccordion)>	<lampiro.screens.RosterScreen$UIGroup: void <init>(java.lang.String,it.yup.ui.UIAccordion)>/@this
<it.yup.xmlstream.KXmlParser: int getColumnNumber()>	<it.yup.xmlstream.KXmlParser: int getColumnNumber()>/@this
<it.yup.xml.KXmlParser: java.lang.String getNamespacePrefix(int)>	<it.yup.xml.KXmlParser: java.lang.String getNamespacePrefix(int)>/@this
<it.yup.ui.UITextField: void setMaxHeight(int)>	<it.yup.ui.UITextField: void setMaxHeight(int)>/@this
<it.yup.ui.UILayout: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UILayout: void setScreen(it.yup.ui.UIScreen)>/@this
<com.jcraft.jzlib.InfCodes: void init(int,int,int[],int,int[],int,com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfCodes: void init(int,int,int[],int,int[],int,com.jcraft.jzlib.ZStream)>/@this
<it.yup.xmpp.Roster: void purge()>	<it.yup.xmpp.Roster: void purge()>/@this
<com.jcraft.jzlib.Tree: void gen_bitlen(com.jcraft.jzlib.Deflate)>	<com.jcraft.jzlib.Tree: void gen_bitlen(com.jcraft.jzlib.Deflate)>/@this
<it.yup.ui.UICombobox: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UICombobox: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<lampiro.screens.RosterScreen: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>/@this
<it.yup.tests.UITestMidlet: void startApp()>	<it.yup.tests.UITestMidlet: void startApp()>/@this
<it.yup.xml.KXmlParser: java.lang.String nextText()>	<it.yup.xml.KXmlParser: java.lang.String nextText()>/@this
<it.yup.xmlstream.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>/@this
<it.yup.xmpp.FTReceiver: void <init>(it.yup.xmpp.FTReceiver$FTREventHandler)>	<it.yup.xmpp.FTReceiver: void <init>(it.yup.xmpp.FTReceiver$FTREventHandler)>/@this
<lampiro.screens.AddContactScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.AddContactScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.Deflate: void copy_block(int,int,boolean)>	<com.jcraft.jzlib.Deflate: void copy_block(int,int,boolean)>/@this
<it.yup.ui.UIGauge: void setLabel(java.lang.String)>	<it.yup.ui.UIGauge: void setLabel(java.lang.String)>/@this
<it.yup.xmlstream.BasicXmlStream$SessionOpener: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$SessionOpener: void start(it.yup.xmlstream.BasicXmlStream)>/@this
<lampiro.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>	<lampiro.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>/@this
<it.yup.xmpp.FTSender$IQResultListener1: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener1: void handleResult(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>	<lampiro.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>/@this
<it.yup.ui.UIPanel: int getFirstVisible()>	<it.yup.ui.UIPanel: int getFirstVisible()>/@this
<lampiro.screens.RosterScreen$UIContact: int getHeight(javax.microedition.lcdui.Graphics)>	<lampiro.screens.RosterScreen$UIContact: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UIPanel: void removeAllItems()>	<it.yup.ui.UIPanel: void removeAllItems()>/@this
<it.yup.ui.UIPanel: void <init>(boolean,boolean)>	<it.yup.ui.UIPanel: void <init>(boolean,boolean)>/@this
<it.yup.xmpp.Config: void setProperty(short,java.lang.String)>	<it.yup.xmpp.Config: void setProperty(short,java.lang.String)>/@this
<lampiro.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>/@this
<it.yup.ui.UIItem: void setBg_color(int)>	<it.yup.ui.UIItem: void setBg_color(int)>/@this
<it.yup.ui.UIAccordion: void insertSpareItem(it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: void insertSpareItem(it.yup.ui.UIItem,int)>/@this
<lampiro.screens.RosterScreen: void <init>()>	<lampiro.screens.RosterScreen: void <init>()>/@this
<it.yup.xml.KXmlParser: java.lang.String getNamespace(java.lang.String)>	<it.yup.xml.KXmlParser: java.lang.String getNamespace(java.lang.String)>/@this
<it.yup.ui.UIScreen: void <init>()>	<it.yup.ui.UIScreen: void <init>()>/@this
<it.yup.transport.SocketChannel: java.io.InputStream getInputStream()>	<it.yup.transport.SocketChannel: java.io.InputStream getInputStream()>/@this
<it.yup.xmlstream.SASLAuthenticator: void <init>()>	<it.yup.xmlstream.SASLAuthenticator: void <init>()>/@this
<it.yup.ui.UILayout: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UILayout: it.yup.ui.UIItem getSelectedItem()>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient$XmppListener: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>/@this
<it.yup.util.GoogleToken: void run()>	<it.yup.util.GoogleToken: void run()>/@this
<it.yup.xmlstream.KXmlParser: void pushEntity()>	<it.yup.xmlstream.KXmlParser: void pushEntity()>/@this
<it.yup.ui.UICanvas: it.yup.ui.UIItem findItem(int,int,it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: it.yup.ui.UIItem findItem(int,int,it.yup.ui.UIScreen)>/@this
<it.yup.xmpp.Config: void resetStorage(boolean)>	<it.yup.xmpp.Config: void resetStorage(boolean)>/@this
<it.yup.ui.UILabel: void <init>(java.lang.String)>	<it.yup.ui.UILabel: void <init>(java.lang.String)>/@this
<com.jcraft.jzlib.Inflate: int inflateSync(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateSync(com.jcraft.jzlib.ZStream)>/@this
<it.yup.screens.OptionsScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.OptionsScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<com.jcraft.jzlib.Deflate: int deflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>	<com.jcraft.jzlib.Deflate: int deflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>/@this
<it.yup.ui.UICanvas: void <init>()>	<it.yup.ui.UICanvas: void <init>()>/@this
<it.yup.ui.UIScreen: void handleMenuKey(it.yup.ui.UIMenu,int)>	<it.yup.ui.UIScreen: void handleMenuKey(it.yup.ui.UIMenu,int)>/@this
<it.yup.xml.KXmlParser: void skip()>	<it.yup.xml.KXmlParser: void skip()>/@this
<lampiro.screens.RegisterScreen: java.lang.String getServer(java.lang.String)>	<lampiro.screens.RegisterScreen: java.lang.String getServer(java.lang.String)>/@this
<it.yup.xmpp.Contact: int getHistoryLength(java.lang.String)>	<it.yup.xmpp.Contact: int getHistoryLength(java.lang.String)>/@this
<it.yup.xmlstream.BasicXmlStream: void dispatchEvent(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.BasicXmlStream: void dispatchEvent(java.lang.String,java.lang.Object)>/@this
<it.yup.xmlstream.KXmlSerializer: void processingInstruction(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void processingInstruction(java.lang.String)>/@this
<it.yup.ui.UICanvas: boolean hasQwerty()>	<it.yup.ui.UICanvas: boolean hasQwerty()>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeNamespace(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeNamespace(int)>/@this
<com.jcraft.jzlib.ZInputStream: long getTotalIn()>	<com.jcraft.jzlib.ZInputStream: long getTotalIn()>/@this
<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getLabel()>	<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getLabel()>/@this
<it.yup.screens.DataFormScreen: void setActions(int)>	<it.yup.screens.DataFormScreen: void setActions(int)>/@this
<it.yup.screens.AboutScreen: void <init>()>	<it.yup.screens.AboutScreen: void <init>()>/@this
<lampiro.screens.RosterScreen: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>	<lampiro.screens.RosterScreen: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>/@this
<it.yup.ui.UIMenu: it.yup.ui.UIMenu getParentMenu()>	<it.yup.ui.UIMenu: it.yup.ui.UIMenu getParentMenu()>/@this
<it.yup.ui.UILabel: void setTextLines(java.util.Vector)>	<it.yup.ui.UILabel: void setTextLines(java.util.Vector)>/@this
<lampiro.screens.ChatScreen: void showNotify()>	<lampiro.screens.ChatScreen: void showNotify()>/@this
<lampiro.screens.CommandListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.CommandListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UIPanel: void setModal(boolean)>	<it.yup.ui.UIPanel: void setModal(boolean)>/@this
<com.jcraft.jzlib.Tree: void <init>()>	<com.jcraft.jzlib.Tree: void <init>()>/@this
<it.yup.ui.UIConfig: void <init>()>	<it.yup.ui.UIConfig: void <init>()>/@this
<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>/@this
<lampiro.screens.KeyScreen: boolean isValid(int)>	<lampiro.screens.KeyScreen: boolean isValid(int)>/@this
<lampiro.screens.RosterScreen$UIGroup: boolean reorganizeContact(it.yup.xmpp.Contact,int)>	<lampiro.screens.RosterScreen$UIGroup: boolean reorganizeContact(it.yup.xmpp.Contact,int)>/@this
<it.yup.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>	<it.yup.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.screens.RosterScreen: void chatWithSelected(boolean)>	<it.yup.screens.RosterScreen: void chatWithSelected(boolean)>/@this
<it.yup.xmpp.MUC: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>	<it.yup.xmpp.MUC: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>/@this
<it.yup.screens.ChatScreen: void paintEntries(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ChatScreen: void paintEntries(javax.microedition.lcdui.Graphics)>/@this
<it.yup.tests.RMSTestMidlet: void testDeletion(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testDeletion(it.yup.util.RMSIndex)>/@this
<lampiro.screens.KeyScreen: void checkKeys()>	<lampiro.screens.KeyScreen: void checkKeys()>/@this
<it.yup.tests.UITestMidlet$KeysScreen: void <init>(it.yup.tests.UITestMidlet)>	<it.yup.tests.UITestMidlet$KeysScreen: void <init>(it.yup.tests.UITestMidlet)>/@this
<it.yup.xmpp.Contact: int getAvailability(java.lang.String)>	<it.yup.xmpp.Contact: int getAvailability(java.lang.String)>/@this
<lampiro.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<lampiro.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>/@this
<it.yup.xmpp.Contact: it.yup.xmpp.Task[] getTasks()>	<it.yup.xmpp.Contact: it.yup.xmpp.Task[] getTasks()>/@this
<it.yup.ui.UILayout: void setGroup(boolean)>	<it.yup.ui.UILayout: void setGroup(boolean)>/@this
<it.yup.screens.ContactInfoScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.ContactInfoScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UIAccordion: int removeItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: int removeItem(it.yup.ui.UIItem)>/@this
<it.yup.transport.SocketChannel: boolean isOpen()>	<it.yup.transport.SocketChannel: boolean isOpen()>/@this
<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>/@this
<it.yup.ui.UIGauge: void start()>	<it.yup.ui.UIGauge: void start()>/@this
<it.yup.ui.UIItem: int getSelectedColor()>	<it.yup.ui.UIItem: int getSelectedColor()>/@this
<lampiro.screens.RegisterScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.RegisterScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.util.LogConsumer: void setExiting()>	<it.yup.util.LogConsumer: void setExiting()>/@this
<it.yup.xml.Element: void setAttributes(java.lang.String[],java.lang.String[])>	<it.yup.xml.Element: void setAttributes(java.lang.String[],java.lang.String[])>/@this
<lampiro.screens.InnerMMScreen: void closeScreen()>	<lampiro.screens.InnerMMScreen: void closeScreen()>/@this
<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image)>	<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image)>/@this
<it.yup.ui.UIAccordion: int getLabelGradientColor()>	<it.yup.ui.UIAccordion: int getLabelGradientColor()>/@this
<it.yup.xmlstream.SocketStream: void <init>()>	<it.yup.xmlstream.SocketStream: void <init>()>/@this
<it.yup.xmpp.packets.Presence: void setPriority(int)>	<it.yup.xmpp.packets.Presence: void setPriority(int)>/@this
<lampiro.screens.DebugScreen: void <init>()>	<lampiro.screens.DebugScreen: void <init>()>/@this
<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,boolean)>	<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,boolean)>/@this
<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender)>/@this
<it.yup.xmpp.Roster: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.Roster: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.ui.UILayout: boolean isFocusable()>	<it.yup.ui.UILayout: boolean isFocusable()>/@this
<it.yup.ui.UILabel: void setAnchorPoint(int)>	<it.yup.ui.UILabel: void setAnchorPoint(int)>/@this
<it.yup.xmpp.IQResultListener: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.IQResultListener: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.FTSender$FTSEventHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>/@this
<com.jcraft.jzlib.Deflate: int deflateParams(com.jcraft.jzlib.ZStream,int,int)>	<com.jcraft.jzlib.Deflate: int deflateParams(com.jcraft.jzlib.ZStream,int,int)>/@this
<it.yup.xmpp.packets.IQResultListener: void <init>()>	<it.yup.xmpp.packets.IQResultListener: void <init>()>/@this
<it.yup.ui.UITextField: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UITextField: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.screens.RegisterScreen$1: void <init>(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen$1: void <init>(it.yup.screens.RegisterScreen)>/@this
<it.yup.ui.UIPanel: boolean isFocusable()>	<it.yup.ui.UIPanel: boolean isFocusable()>/@this
<lampiro.screens.RosterScreen$UIGroup: void removeContact(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen$UIGroup: void removeContact(it.yup.xmpp.Contact)>/@this
<it.yup.ui.UIAccordion: void swap(int,int)>	<it.yup.ui.UIAccordion: void swap(int,int)>/@this
<it.yup.ui.UIItem: int getGradientColor()>	<it.yup.ui.UIItem: int getGradientColor()>/@this
<it.yup.xml.KXmlParser: int peek(int)>	<it.yup.xml.KXmlParser: int peek(int)>/@this
<it.yup.xmlstream.BasicXmlStream: boolean areMatching(it.yup.xml.Element,it.yup.xmlstream.EventQuery)>	<it.yup.xmlstream.BasicXmlStream: boolean areMatching(it.yup.xml.Element,it.yup.xmlstream.EventQuery)>/@this
<it.yup.ui.UITextPanel: void <init>()>	<it.yup.ui.UITextPanel: void <init>()>/@this
<it.yup.screens.DebugScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DebugScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,java.lang.String)>	<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,java.lang.String)>/@this
<lampiro.screens.ContactInfoScreen: void updateContactLayout(it.yup.ui.UIVLayout,it.yup.xml.Element)>	<lampiro.screens.ContactInfoScreen: void updateContactLayout(it.yup.ui.UIVLayout,it.yup.xml.Element)>/@this
<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xmlstream.KXmlParser: boolean getFeature(java.lang.String)>	<it.yup.xmlstream.KXmlParser: boolean getFeature(java.lang.String)>/@this
<lampiro.screens.RosterScreen: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>/@this
<it.yup.ui.UIScreen: void setPopupList(java.util.Vector)>	<it.yup.ui.UIScreen: void setPopupList(java.util.Vector)>/@this
<it.yup.xmlstream.BasicXmlStream: void removeInitializer(it.yup.xmlstream.Initializer)>	<it.yup.xmlstream.BasicXmlStream: void removeInitializer(it.yup.xmlstream.Initializer)>/@this
<it.yup.ui.UITextField: boolean isEditable()>	<it.yup.ui.UITextField: boolean isEditable()>/@this
<lampiro.screens.SendMMScreen$UploadHandler: void <init>(lampiro.screens.SendMMScreen,java.lang.String,java.lang.String)>	<lampiro.screens.SendMMScreen$UploadHandler: void <init>(lampiro.screens.SendMMScreen,java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIAccordion: void setLabelColor(int)>	<it.yup.ui.UIAccordion: void setLabelColor(int)>/@this
<it.yup.util.NetworkConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.NetworkConsumer: void gotMessage(java.lang.String,int)>/@this
<it.yup.xmlstream.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>/@this
<lampiro.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>	<lampiro.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>/@this
<it.yup.xmpp.BluendoXMLRPC: void open()>	<it.yup.xmpp.BluendoXMLRPC: void open()>/@this
<it.yup.ui.UIScreen: void setSelectedIndex(int)>	<it.yup.ui.UIScreen: void setSelectedIndex(int)>/@this
<lampiro.screens.RegisterScreen: void xmppLogin(boolean)>	<lampiro.screens.RegisterScreen: void xmppLogin(boolean)>/@this
<it.yup.transport.BaseChannel$Sender: void <init>(it.yup.transport.BaseChannel,it.yup.transport.BaseChannel)>	<it.yup.transport.BaseChannel$Sender: void <init>(it.yup.transport.BaseChannel,it.yup.transport.BaseChannel)>/@this
<it.yup.screens.ChatScreen: it.yup.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[],int)>	<it.yup.screens.ChatScreen: it.yup.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[],int)>/@this
<it.yup.xmpp.FTReceiver$FTREventHandler: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$FTREventHandler: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>/@this
<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[][])>	<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[][])>/@this
<it.yup.util.RMSIndex$KeyEnumeration: java.lang.Object nextElement()>	<it.yup.util.RMSIndex$KeyEnumeration: java.lang.Object nextElement()>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void removeAllContacts()>	<it.yup.xmpp.XMPPClient$XmppListener: void removeAllContacts()>/@this
<it.yup.screens.RosterScreen: void keyPressed(int)>	<it.yup.screens.RosterScreen: void keyPressed(int)>/@this
<it.yup.screens.AboutScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.AboutScreen: void paint(javax.microedition.lcdui.Graphics)>/@this
<lampiro.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UIItem: boolean isSelected()>	<it.yup.ui.UIItem: boolean isSelected()>/@this
<lampiro.screens.OptionsScreen: void <init>()>	<lampiro.screens.OptionsScreen: void <init>()>/@this
<it.yup.ui.UITextField: void setWrappable(boolean)>	<it.yup.ui.UITextField: void setWrappable(boolean)>/@this
<it.yup.ui.UIScreen: void keyRepeated(int)>	<it.yup.ui.UIScreen: void keyRepeated(int)>/@this
<lampiro.screens.ChatScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.ChatScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>/@this
<lampiro.screens.RosterScreen$UIContact: boolean updateContactData()>	<lampiro.screens.RosterScreen$UIContact: boolean updateContactData()>/@this
<it.yup.ui.UIItem: void drawBorder(javax.microedition.lcdui.Graphics,int[],int[],int[][])>	<it.yup.ui.UIItem: void drawBorder(javax.microedition.lcdui.Graphics,int[],int[],int[][])>/@this
<it.yup.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UIPanel: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIPanel: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UIAccordion: void removePanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void removePanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem)>/@this
<lampiro.screens.GrpMessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.GrpMessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen: boolean isCameraOn()>	<lampiro.screens.RosterScreen: boolean isCameraOn()>/@this
<it.yup.util.Logger: void <init>()>	<it.yup.util.Logger: void <init>()>/@this
<it.yup.ui.UICombobox: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UICombobox: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xml.KXmlParser: void error(java.lang.String)>	<it.yup.xml.KXmlParser: void error(java.lang.String)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getName()>	<it.yup.xmlstream.KXmlParser: java.lang.String getName()>/@this
<it.yup.ui.UIScreen: boolean isFreezed()>	<it.yup.ui.UIScreen: boolean isFreezed()>/@this
<it.yup.util.MetaVector: void <init>(int,int)>	<it.yup.util.MetaVector: void <init>(int,int)>/@this
<it.yup.util.MetaVector: void removeElementAt(int)>	<it.yup.util.MetaVector: void removeElementAt(int)>/@this
<it.yup.xmpp.Group: void <init>(java.lang.String)>	<it.yup.xmpp.Group: void <init>(java.lang.String)>/@this
<it.yup.xmlstream.BasicXmlStream: void initialize(java.lang.String,java.lang.String)>	<it.yup.xmlstream.BasicXmlStream: void initialize(java.lang.String,java.lang.String)>/@this
<it.yup.xml.KXmlParser: int next()>	<it.yup.xml.KXmlParser: int next()>/@this
<it.yup.xml.KXmlParser: void exception(java.lang.String)>	<it.yup.xml.KXmlParser: void exception(java.lang.String)>/@this
<com.jcraft.jzlib.InfTree: void <init>()>	<com.jcraft.jzlib.InfTree: void <init>()>/@this
<it.yup.xmpp.Contact: void addTask(it.yup.xmpp.Task)>	<it.yup.xmpp.Contact: void addTask(it.yup.xmpp.Task)>/@this
<it.yup.ui.UIItem: void paint0(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIItem: void paint0(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.ui.UITextPanel: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UITextPanel: it.yup.ui.UIItem getSelectedItem()>/@this
<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$TimerTask1)>	<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$TimerTask1)>/@this
<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient)>/@this
<it.yup.xmpp.packets.DataForm: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm: void <init>(it.yup.xml.Element)>/@this
<it.yup.ui.UILayout: void setDirty(boolean)>	<it.yup.ui.UILayout: void setDirty(boolean)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getText()>	<it.yup.xmlstream.KXmlParser: java.lang.String getText()>/@this
<it.yup.xmpp.Contact: void updateExistingPresence(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: void updateExistingPresence(it.yup.xmpp.packets.Presence)>/@this
<lampiro.screens.RosterScreen: void toggleMenus()>	<lampiro.screens.RosterScreen: void toggleMenus()>/@this
<it.yup.ui.UICombobox: boolean[] getSelectedFlags()>	<it.yup.ui.UICombobox: boolean[] getSelectedFlags()>/@this
<lampiro.screens.SplashScreen$UISplashTextField: boolean keyPressed(int)>	<lampiro.screens.SplashScreen$UISplashTextField: boolean keyPressed(int)>/@this
<it.yup.xml.Element: it.yup.xml.Element[] getChildren()>	<it.yup.xml.Element: it.yup.xml.Element[] getChildren()>/@this
<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIGroup getSelectedUIGroup()>	<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIGroup getSelectedUIGroup()>/@this
<it.yup.screens.SplashScreen$1: void run()>	<it.yup.screens.SplashScreen$1: void run()>/@this
<it.yup.ui.UITextPanel: java.util.Vector getTextLines()>	<it.yup.ui.UITextPanel: java.util.Vector getTextLines()>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void handleTask(it.yup.xmpp.Task,boolean)>	<it.yup.xmpp.XMPPClient$XmppListener: void handleTask(it.yup.xmpp.Task,boolean)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributePrefix(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributePrefix(int)>/@this
<com.jcraft.jzlib.ZOutputStream: void end()>	<com.jcraft.jzlib.ZOutputStream: void end()>/@this
<it.yup.xmpp.IQResultListener: void <init>()>	<it.yup.xmpp.IQResultListener: void <init>()>/@this
<it.yup.ui.UICombobox$UIComboScreen: void <init>(it.yup.ui.UICombobox,java.lang.String)>	<it.yup.ui.UICombobox$UIComboScreen: void <init>(it.yup.ui.UICombobox,java.lang.String)>/@this
<it.yup.xmpp.Group: void removeElement(java.lang.String)>	<it.yup.xmpp.Group: void removeElement(java.lang.String)>/@this
<it.yup.ui.UICanvas: int getGameAction(int)>	<it.yup.ui.UICanvas: int getGameAction(int)>/@this
<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$Runnable1)>	<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$Runnable1)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>	<it.yup.xmlstream.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>/@this
<it.yup.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>	<it.yup.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>/@this
<it.yup.ui.UIGauge: void setValue(int)>	<it.yup.ui.UIGauge: void setValue(int)>/@this
<it.yup.transport.SocketChannel: boolean pollAlive()>	<it.yup.transport.SocketChannel: boolean pollAlive()>/@this
<it.yup.ui.UIEmoLabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>	<it.yup.ui.UIEmoLabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>/@this
<com.jcraft.jzlib.ZInputStream: long skip(long)>	<com.jcraft.jzlib.ZInputStream: long skip(long)>/@this
<it.yup.util.XMPPConsumer: void <init>()>	<it.yup.util.XMPPConsumer: void <init>()>/@this
<it.yup.screens.StatusScreen: void <init>()>	<it.yup.screens.StatusScreen: void <init>()>/@this
<it.yup.ui.UIMenu: int getSelectedIndex()>	<it.yup.ui.UIMenu: int getSelectedIndex()>/@this
<it.yup.xmlstream.Element: it.yup.xmlstream.Element[] getChildrenByName(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element[] getChildrenByName(java.lang.String,java.lang.String)>/@this
<it.yup.tests.XMPPTestClient$Listener: void <init>(it.yup.tests.XMPPTestClient)>	<it.yup.tests.XMPPTestClient$Listener: void <init>(it.yup.tests.XMPPTestClient)>/@this
<it.yup.util.MetaVector: boolean isEmpty()>	<it.yup.util.MetaVector: boolean isEmpty()>/@this
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIMenu: void setOpenedState(boolean)>	<it.yup.ui.UIMenu: void setOpenedState(boolean)>/@this
<it.yup.xmlstream.KXmlSerializer: void comment(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void comment(java.lang.String)>/@this
<it.yup.xml.KXmlParser: boolean isEmptyElementTag()>	<it.yup.xml.KXmlParser: boolean isEmptyElementTag()>/@this
<it.yup.ui.UITextPanel: void setSelected(boolean)>	<it.yup.ui.UITextPanel: void setSelected(boolean)>/@this
<lampiro.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.xmpp.Contact: boolean setGroups(java.lang.String[])>	<it.yup.xmpp.Contact: boolean setGroups(java.lang.String[])>/@this
<it.yup.ui.UICanvas: void setTabs()>	<it.yup.ui.UICanvas: void setTabs()>/@this
<it.yup.xmpp.Contact: boolean unread_msg()>	<it.yup.xmpp.Contact: boolean unread_msg()>/@this
<it.yup.xmlstream.KXmlParser: boolean isWhitespace()>	<it.yup.xmlstream.KXmlParser: boolean isWhitespace()>/@this
<com.jcraft.jzlib.Adler32: long adler32(long,byte[],int,int)>	<com.jcraft.jzlib.Adler32: long adler32(long,byte[],int,int)>/@this
<it.yup.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<com.jcraft.jzlib.Deflate: boolean _tr_tally(int,int)>	<com.jcraft.jzlib.Deflate: boolean _tr_tally(int,int)>/@this
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>	<it.yup.xmpp.XMPPClient$XmppListener: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>/@this
<it.yup.ui.UIPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xmpp.FTSender$FTSEventHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>/@this
<it.yup.xmpp.Contact: boolean isVisible()>	<it.yup.xmpp.Contact: boolean isVisible()>/@this
<it.yup.util.GoogleToken: void <init>(java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.util.GoogleToken: void <init>(java.lang.String,java.lang.String,java.lang.Object)>/@this
<it.yup.tests.XMLTestMidlet: void startApp()>	<it.yup.tests.XMLTestMidlet: void startApp()>/@this
<it.yup.xmpp.FTReceiver: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver: void packetReceived(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.Inflate: int inflateReset(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateReset(com.jcraft.jzlib.ZStream)>/@this
<lampiro.screens.RosterScreen: java.lang.String getActionJid()>	<lampiro.screens.RosterScreen: java.lang.String getActionJid()>/@this
<it.yup.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>/@this
<com.jcraft.jzlib.ZStream: int deflateParams(int,int)>	<com.jcraft.jzlib.ZStream: int deflateParams(int,int)>/@this
<it.yup.xml.KXmlSerializer: java.lang.String getName()>	<it.yup.xml.KXmlSerializer: java.lang.String getName()>/@this
<it.yup.screens.RosterScreen: void rosterRetrieved()>	<it.yup.screens.RosterScreen: void rosterRetrieved()>/@this
<lampiro.screens.RosterScreen$RegisterWaitScreen: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$RegisterWaitScreen: void <init>(lampiro.screens.RosterScreen)>/@this
<lampiro.screens.RosterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.xmpp.XMPPClient$XmppListener: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>	<it.yup.xmpp.XMPPClient$XmppListener: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>/@this
<it.yup.ui.UITextPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UITextPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>/@this
<lampiro.screens.GroupsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.GroupsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.transport.SocketChannel: void <init>(java.lang.String,it.yup.transport.TransportListener)>	<it.yup.transport.SocketChannel: void <init>(java.lang.String,it.yup.transport.TransportListener)>/@this
<it.yup.xmpp.IQResultListener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.IQResultListener: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient)>/@this
<it.yup.ui.UIGauge: void cancel()>	<it.yup.ui.UIGauge: void cancel()>/@this
<it.yup.ui.UITextPanel: void setText(java.lang.String)>	<it.yup.ui.UITextPanel: void setText(java.lang.String)>/@this
<it.yup.xmpp.XMPPClient$MessageHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$MessageHandler: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xml.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>	<it.yup.xml.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>/@this
<it.yup.xmpp.FTSender$IQResultListener4: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener4: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DiscoHandler)>	<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DiscoHandler)>/@this
<it.yup.ui.UIMenu: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIMenu: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>	<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>/@this
<it.yup.ui.UILabel: java.lang.String getText()>	<it.yup.ui.UILabel: java.lang.String getText()>/@this
<it.yup.ui.UILayout: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UILayout: boolean contains(it.yup.ui.UIItem)>/@this
<lampiro.screens.RegisterScreen: void setStatusLabel()>	<lampiro.screens.RegisterScreen: void setStatusLabel()>/@this
<it.yup.ui.UIPanel: void updateChildren()>	<it.yup.ui.UIPanel: void updateChildren()>/@this
<lampiro.screens.RosterScreen$IQResultListener1: void getBasePath(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener1: void getBasePath(it.yup.xml.Element)>/@this
<it.yup.ui.UIMenu: void setParentMenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIMenu: void setParentMenu(it.yup.ui.UIMenu)>/@this
<it.yup.tests.TestMidlet: void <init>()>	<it.yup.tests.TestMidlet: void <init>()>/@this
<it.yup.ui.UIScreen: void startDrag(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void startDrag(it.yup.ui.UIItem)>/@this
<it.yup.util.RMSIndex$KeyEnumeration: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$KeyEnumeration: void <init>(it.yup.util.RMSIndex)>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener1)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener1)>/@this
<it.yup.xmpp.FTReceiver$OpenListener: void acceptSession()>	<it.yup.xmpp.FTReceiver$OpenListener: void acceptSession()>/@this
<it.yup.xmlstream.BasicXmlStream: void tryToSend()>	<it.yup.xmlstream.BasicXmlStream: void tryToSend()>/@this
<it.yup.screens.ChatScreen: boolean updateConversation(int)>	<it.yup.screens.ChatScreen: boolean updateConversation(int)>/@this
<lampiro.screens.AboutScreen: void <init>()>	<lampiro.screens.AboutScreen: void <init>()>/@this
<it.yup.xmlstream.BasicXmlStream: void send(it.yup.xml.Element,int)>	<it.yup.xmlstream.BasicXmlStream: void send(it.yup.xml.Element,int)>/@this
<it.yup.ui.UITextField: boolean isDirty()>	<it.yup.ui.UITextField: boolean isDirty()>/@this
<lampiro.screens.SplashScreen: void checkKeys()>	<lampiro.screens.SplashScreen: void checkKeys()>/@this
<it.yup.ui.UICombobox: void removeAt(int)>	<it.yup.ui.UICombobox: void removeAt(int)>/@this
<it.yup.screens.RosterScreen: void paintHeader(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paintHeader(javax.microedition.lcdui.Graphics)>/@this
<lampiro.screens.SendMMScreen$UploadHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>/@this
<it.yup.xml.Element: it.yup.xml.Element clone()>	<it.yup.xml.Element: it.yup.xml.Element clone()>/@this
<it.yup.tests.XMPPTestClient: void <init>()>	<it.yup.tests.XMPPTestClient: void <init>()>/@this
<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PresenceHandler)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PresenceHandler)>/@this
<it.yup.xmlstream.KXmlParser: void setFeature(java.lang.String,boolean)>	<it.yup.xmlstream.KXmlParser: void setFeature(java.lang.String,boolean)>/@this
<com.jcraft.jzlib.InfCodes: void <init>()>	<com.jcraft.jzlib.InfCodes: void <init>()>/@this
<it.yup.screens.SplashScreen$1: void <init>(it.yup.screens.SplashScreen)>	<it.yup.screens.SplashScreen$1: void <init>(it.yup.screens.SplashScreen)>/@this
<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void <init>(lampiro.screens.GatewayRegisterScreen)>	<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void <init>(lampiro.screens.GatewayRegisterScreen)>/@this
<it.yup.tests.RMSTestMidlet: void checkCoherency(it.yup.util.RMSIndex,java.util.Hashtable,java.util.Vector)>	<it.yup.tests.RMSTestMidlet: void checkCoherency(it.yup.util.RMSIndex,java.util.Hashtable,java.util.Vector)>/@this
<lampiro.screens.ChatScreen$MUCUpdateListener: void <init>(lampiro.screens.ChatScreen)>	<lampiro.screens.ChatScreen$MUCUpdateListener: void <init>(lampiro.screens.ChatScreen)>/@this
<it.yup.ui.UIItem: void setGradientSelectedColor(int)>	<it.yup.ui.UIItem: void setGradientSelectedColor(int)>/@this
<it.yup.xmlstream.Element: byte[] toXml()>	<it.yup.xmlstream.Element: byte[] toXml()>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getPositionDescription()>	<it.yup.xmlstream.KXmlParser: java.lang.String getPositionDescription()>/@this
<lampiro.screens.AlbumScreen: void loadFiles()>	<lampiro.screens.AlbumScreen: void loadFiles()>/@this
<com.jcraft.jzlib.ZStream: void <init>()>	<com.jcraft.jzlib.ZStream: void <init>()>/@this
<it.yup.xmlstream.KXmlSerializer: void cdsect(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void cdsect(java.lang.String)>/@this
<lampiro.screens.RosterScreen$FileReceiveScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getFrom()>	<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getFrom()>/@this
<it.yup.xml.KXmlSerializer: boolean getFeature(java.lang.String)>	<it.yup.xml.KXmlSerializer: boolean getFeature(java.lang.String)>/@this
<it.yup.util.MetaVector: java.lang.Object elementAt(int)>	<it.yup.util.MetaVector: java.lang.Object elementAt(int)>/@this
<com.jcraft.jzlib.Deflate: int longest_match(int)>	<com.jcraft.jzlib.Deflate: int longest_match(int)>/@this
<it.yup.tests.XMPPTestClient$Echoer: void <init>(it.yup.tests.XMPPTestClient)>	<it.yup.tests.XMPPTestClient$Echoer: void <init>(it.yup.tests.XMPPTestClient)>/@this
<lampiro.screens.ContactInfoScreen$1: void handleResult(it.yup.xml.Element)>	<lampiro.screens.ContactInfoScreen$1: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.Roster$RosterX: void <init>(it.yup.xmpp.Roster)>	<it.yup.xmpp.Roster$RosterX: void <init>(it.yup.xmpp.Roster)>/@this
<it.yup.xml.KXmlParser: void parseStartTag(boolean)>	<it.yup.xml.KXmlParser: void parseStartTag(boolean)>/@this
<it.yup.ui.UILayout: void updateChildren()>	<it.yup.ui.UILayout: void updateChildren()>/@this
<it.yup.ui.UIItem: void setStatus(java.lang.Object)>	<it.yup.ui.UIItem: void setStatus(java.lang.Object)>/@this
<it.yup.xmpp.packets.Presence: java.lang.String getStatus()>	<it.yup.xmpp.packets.Presence: java.lang.String getStatus()>/@this
<it.yup.xmpp.FTSender: void sendFile()>	<it.yup.xmpp.FTSender: void sendFile()>/@this
<it.yup.xmpp.XMPPClient: void setXmppListener(it.yup.xmpp.XMPPClient$XmppListener)>	<it.yup.xmpp.XMPPClient: void setXmppListener(it.yup.xmpp.XMPPClient$XmppListener)>/@this
<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient)>/@this
<lampiro.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<lampiro.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>/@this
<it.yup.xmpp.Task: byte getStatus()>	<it.yup.xmpp.Task: byte getStatus()>/@this
<it.yup.xml.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>	<it.yup.xml.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>/@this
<lampiro.screens.ChatScreen: boolean updateResConversation(java.lang.String)>	<lampiro.screens.ChatScreen: boolean updateResConversation(java.lang.String)>/@this
<it.yup.xmpp.XMPPClient: it.yup.xmpp.Roster getRoster()>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.Roster getRoster()>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.transport.SocketChannel$UTFReader: void <init>(it.yup.transport.SocketChannel,java.io.InputStream)>	<it.yup.transport.SocketChannel$UTFReader: void <init>(it.yup.transport.SocketChannel,java.io.InputStream)>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.ui.UICanvas: boolean handlePointEvent(int,int,it.yup.ui.UIScreen,boolean)>	<it.yup.ui.UICanvas: boolean handlePointEvent(int,int,it.yup.ui.UIScreen,boolean)>/@this
<it.yup.ui.UICombobox: void openMenu()>	<it.yup.ui.UICombobox: void openMenu()>/@this
<it.yup.ui.UIEmoLabel: java.lang.Object[] findEmoTuple(java.lang.String)>	<it.yup.ui.UIEmoLabel: java.lang.Object[] findEmoTuple(java.lang.String)>/@this
<it.yup.xmlstream.SocketStream: void tryToSend()>	<it.yup.xmlstream.SocketStream: void tryToSend()>/@this
<it.yup.ui.UISeparator: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UISeparator: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.xml.KXmlSerializer: int getDepth()>	<it.yup.xml.KXmlSerializer: int getDepth()>/@this
<com.jcraft.jzlib.ZInputStream: long getTotalOut()>	<com.jcraft.jzlib.ZInputStream: long getTotalOut()>/@this
<it.yup.xml.KXmlParser: void parseDoctype(boolean)>	<it.yup.xml.KXmlParser: void parseDoctype(boolean)>/@this
<lampiro.screens.RosterScreen: void addGateway(java.util.Hashtable,java.lang.String,java.lang.String,javax.microedition.lcdui.Image,java.lang.String)>	<lampiro.screens.RosterScreen: void addGateway(java.util.Hashtable,java.lang.String,java.lang.String,javax.microedition.lcdui.Image,java.lang.String)>/@this
<lampiro.screens.ChatScreen$1: void <init>(lampiro.screens.ChatScreen)>	<lampiro.screens.ChatScreen$1: void <init>(lampiro.screens.ChatScreen)>/@this
<lampiro.screens.RosterScreen$UIGroup: void orderGroups()>	<lampiro.screens.RosterScreen$UIGroup: void orderGroups()>/@this
<it.yup.xml.Element: void addText(java.lang.String)>	<it.yup.xml.Element: void addText(java.lang.String)>/@this
<it.yup.ui.UIAccordion: boolean keyPressed(int)>	<it.yup.ui.UIAccordion: boolean keyPressed(int)>/@this
<lampiro.screens.CommandListScreen: boolean keyPressed(int)>	<lampiro.screens.CommandListScreen: boolean keyPressed(int)>/@this
<it.yup.xmlstream.KXmlParser: int next()>	<it.yup.xmlstream.KXmlParser: int next()>/@this
<it.yup.tests.XMPPTestClient$Echoer: void packetReceived(it.yup.xml.Element)>	<it.yup.tests.XMPPTestClient$Echoer: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.SendMMScreen$UploadHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>	<lampiro.screens.SendMMScreen$UploadHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>/@this
<it.yup.xmlstream.KXmlParser: void parseEndTag()>	<it.yup.xmlstream.KXmlParser: void parseEndTag()>/@this
<it.yup.ui.UILabel: javax.microedition.lcdui.Font getFont()>	<it.yup.ui.UILabel: javax.microedition.lcdui.Font getFont()>/@this
<it.yup.tests.XMLTestMidlet: void exit()>	<it.yup.tests.XMLTestMidlet: void exit()>/@this
<lampiro.screens.ChatScreen$ForwardScreen: void closeMe()>	<lampiro.screens.ChatScreen$ForwardScreen: void closeMe()>/@this
<it.yup.xmlstream.KXmlParser: int getEventType()>	<it.yup.xmlstream.KXmlParser: int getEventType()>/@this
<it.yup.xmpp.packets.Presence: int getPriority()>	<it.yup.xmpp.packets.Presence: int getPriority()>/@this
<it.yup.ui.UITextField: int getMinLines()>	<it.yup.ui.UITextField: int getMinLines()>/@this
<it.yup.ui.UITextField: void expand()>	<it.yup.ui.UITextField: void expand()>/@this
<it.yup.xml.KXmlParser: boolean adjustNsp()>	<it.yup.xml.KXmlParser: boolean adjustNsp()>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void removeContact(it.yup.xmpp.Contact)>	<it.yup.xmpp.XMPPClient$XmppListener: void removeContact(it.yup.xmpp.Contact)>/@this
<lampiro.screens.ChatScreen$MUCUpdateListener: void handleResult(it.yup.xml.Element)>	<lampiro.screens.ChatScreen$MUCUpdateListener: void handleResult(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen: it.yup.ui.UIItem getSeparator()>	<lampiro.screens.RosterScreen: it.yup.ui.UIItem getSeparator()>/@this
<it.yup.xmlstream.SocketStream: void initialize(java.lang.String,java.lang.String)>	<it.yup.xmlstream.SocketStream: void initialize(java.lang.String,java.lang.String)>/@this
<it.yup.xmpp.packets.Message: java.lang.String getBody()>	<it.yup.xmpp.packets.Message: java.lang.String getBody()>/@this
<it.yup.xml.KXmlSerializer: void entityRef(java.lang.String)>	<it.yup.xml.KXmlSerializer: void entityRef(java.lang.String)>/@this
<it.yup.ui.UITextField: void setDirty(boolean)>	<it.yup.ui.UITextField: void setDirty(boolean)>/@this
<lampiro.screens.SplashScreen$1: void run()>	<lampiro.screens.SplashScreen$1: void run()>/@this
<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String,int)>	<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String,int)>/@this
<it.yup.xml.Element: it.yup.xml.Element[] getChildrenByName(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element[] getChildrenByName(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIGauge: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIGauge: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem)>/@this
<com.jcraft.jzlib.FilterInputStream: int read(byte[])>	<com.jcraft.jzlib.FilterInputStream: int read(byte[])>/@this
<com.jcraft.jzlib.Deflate: void pqdownheap(short[],int)>	<com.jcraft.jzlib.Deflate: void pqdownheap(short[],int)>/@this
<it.yup.xmpp.FTSender: void initiateInteraction()>	<it.yup.xmpp.FTSender: void initiateInteraction()>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeName(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeName(int)>/@this
<lampiro.screens.MUCScreen: void sendInvite(java.lang.String)>	<lampiro.screens.MUCScreen: void sendInvite(java.lang.String)>/@this
<it.yup.xmpp.Roster$IQResultListener1: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener1: void handleError(it.yup.xml.Element)>/@this
<it.yup.xmlstream.SASLAuthenticator: void gotChallenge(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator: void gotChallenge(it.yup.xml.Element)>/@this
<it.yup.xmpp.packets.Message: java.lang.String getErrorText()>	<it.yup.xmpp.packets.Message: java.lang.String getErrorText()>/@this
<it.yup.util.RMSIndex: int[] getSizes()>	<it.yup.util.RMSIndex: int[] getSizes()>/@this
<lampiro.screens.DebugScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.DebugScreen: void itemAction(it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen: void updateHeader()>	<lampiro.screens.RosterScreen: void updateHeader()>/@this
<it.yup.xml.KXmlParser: java.lang.Object getProperty(java.lang.String)>	<it.yup.xml.KXmlParser: java.lang.Object getProperty(java.lang.String)>/@this
<it.yup.xmlstream.Element: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: void <init>(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIGauge: void setOffset(int)>	<it.yup.ui.UIGauge: void setOffset(int)>/@this
<it.yup.ui.UIPanel: void insertItemAt(it.yup.ui.UIItem,int)>	<it.yup.ui.UIPanel: void insertItemAt(it.yup.ui.UIItem,int)>/@this
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>/@this
<it.yup.xmlstream.BasicXmlStream: java.util.Vector getPacketsToSend(boolean)>	<it.yup.xmlstream.BasicXmlStream: java.util.Vector getPacketsToSend(boolean)>/@this
<com.jcraft.jzlib.FilterInputStream: long skip(long)>	<com.jcraft.jzlib.FilterInputStream: long skip(long)>/@this
<it.yup.xmpp.Task: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>	<it.yup.xmpp.Task: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>/@this
<it.yup.xmpp.packets.IQResultListener: void handleResult(it.yup.xmlstream.Element)>	<it.yup.xmpp.packets.IQResultListener: void handleResult(it.yup.xmlstream.Element)>/@this
<it.yup.xmpp.packets.Message: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.Message: void <init>(it.yup.xml.Element)>/@this
<it.yup.xmpp.SimpleDataFormExecutor: byte getStatus()>	<it.yup.xmpp.SimpleDataFormExecutor: byte getStatus()>/@this
<lampiro.screens.ShowMMScreen: void setMmType(int)>	<lampiro.screens.ShowMMScreen: void setMmType(int)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.Object getProperty(java.lang.String)>	<it.yup.xmlstream.KXmlParser: java.lang.Object getProperty(java.lang.String)>/@this
<com.jcraft.jzlib.Deflate: void bi_windup()>	<com.jcraft.jzlib.Deflate: void bi_windup()>/@this
<lampiro.screens.ChatScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>	<lampiro.screens.ChatScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>/@this
<it.yup.xmlstream.KXmlParser: boolean adjustNsp()>	<it.yup.xmlstream.KXmlParser: boolean adjustNsp()>/@this
<it.yup.xml.Element: void removeChild(it.yup.xml.Element)>	<it.yup.xml.Element: void removeChild(it.yup.xml.Element)>/@this
<it.yup.xmpp.packets.Presence: java.lang.String getResource()>	<it.yup.xmpp.packets.Presence: java.lang.String getResource()>/@this
<it.yup.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>	<it.yup.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>/@this
<it.yup.xmpp.Contact: it.yup.xml.Element store()>	<it.yup.xmpp.Contact: it.yup.xml.Element store()>/@this
<it.yup.xmpp.SimpleDataFormExecutor: it.yup.xmpp.packets.Stanza buildReply(it.yup.xml.Element)>	<it.yup.xmpp.SimpleDataFormExecutor: it.yup.xmpp.packets.Stanza buildReply(it.yup.xml.Element)>/@this
<it.yup.xml.Element: it.yup.xml.Element addElement(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element addElement(java.lang.String,java.lang.String)>/@this
<it.yup.screens.RosterScreen: void authenticated()>	<it.yup.screens.RosterScreen: void authenticated()>/@this
<it.yup.ui.UILayout: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UILayout: void setSelectedItem(it.yup.ui.UIItem)>/@this
<it.yup.ui.UIItem: boolean askRepaint()>	<it.yup.ui.UIItem: boolean askRepaint()>/@this
<com.jcraft.jzlib.FilterInputStream: void mark(int)>	<com.jcraft.jzlib.FilterInputStream: void mark(int)>/@this
<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemCommandListener1)>	<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemCommandListener1)>/@this
<it.yup.ui.UITextField: void setText(java.lang.String)>	<it.yup.ui.UITextField: void setText(java.lang.String)>/@this
<it.yup.ui.UIPanel: boolean isDirty()>	<it.yup.ui.UIPanel: boolean isDirty()>/@this
<it.yup.util.RMSIndex: boolean open()>	<it.yup.util.RMSIndex: boolean open()>/@this
<it.yup.xml.KXmlParser: int peekType()>	<it.yup.xml.KXmlParser: int peekType()>/@this
<lampiro.screens.RosterScreen: void cutPattern()>	<lampiro.screens.RosterScreen: void cutPattern()>/@this
<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void <init>(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void <init>(it.yup.xmlstream.BasicXmlStream)>/@this
<it.yup.ui.UIItem: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIItem: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xmpp.Roster: void addGatewayGroup(it.yup.xmpp.Contact,it.yup.xml.Element)>	<it.yup.xmpp.Roster: void addGatewayGroup(it.yup.xmpp.Contact,it.yup.xml.Element)>/@this
<it.yup.xmlstream.Element: void setAttribute(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: void setAttribute(java.lang.String,java.lang.String)>/@this
<lampiro.screens.MessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.MessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<com.jcraft.jzlib.StaticTree: void <init>(short[],int[],int,int,int)>	<com.jcraft.jzlib.StaticTree: void <init>(short[],int[],int,int,int)>/@this
<it.yup.ui.UIRadioButtons$UIRadioButton: boolean keyPressed(int)>	<it.yup.ui.UIRadioButtons$UIRadioButton: boolean keyPressed(int)>/@this
<it.yup.xmpp.DataFormListener: boolean execute(int)>	<it.yup.xmpp.DataFormListener: boolean execute(int)>/@this
<it.yup.xml.KXmlParser: void parseEndTag()>	<it.yup.xml.KXmlParser: void parseEndTag()>/@this
<it.yup.xmlstream.KXmlParser: int read()>	<it.yup.xmlstream.KXmlParser: int read()>/@this
<it.yup.screens.ChatScreen: void checkUrls(java.lang.String)>	<it.yup.screens.ChatScreen: void checkUrls(java.lang.String)>/@this
<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<lampiro.screens.ShowMMScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.ShowMMScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.ui.UITextPanel: void setTextLines(java.util.Vector)>	<it.yup.ui.UITextPanel: void setTextLines(java.util.Vector)>/@this
<it.yup.screens.DeleteContactAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DeleteContactAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.xmlstream.KXmlParser: void pushText(int,boolean)>	<it.yup.xmlstream.KXmlParser: void pushText(int,boolean)>/@this
<lampiro.screens.ContactInfoScreen$1: void handleError(it.yup.xml.Element)>	<lampiro.screens.ContactInfoScreen$1: void handleError(it.yup.xml.Element)>/@this
<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,int)>	<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,int)>/@this
<it.yup.ui.UIScreen: void setTitle(java.lang.String)>	<it.yup.ui.UIScreen: void setTitle(java.lang.String)>/@this
<it.yup.ui.UITextField: boolean keyPressed(int)>	<it.yup.ui.UITextField: boolean keyPressed(int)>/@this
<it.yup.ui.Semaphore: void release()>	<it.yup.ui.Semaphore: void release()>/@this
<it.yup.ui.UIItem: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIItem: it.yup.ui.UIItem getSelectedItem()>/@this
<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String)>	<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String)>/@this
<it.yup.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>	<it.yup.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>/@this
<it.yup.ui.UICanvas: boolean isMotorola()>	<it.yup.ui.UICanvas: boolean isMotorola()>/@this
<lampiro.screens.RosterScreen$RegisterHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterHandler: void handleResult(it.yup.xml.Element)>/@this
<lampiro.screens.MUCScreen: void populateRosterCombo()>	<lampiro.screens.MUCScreen: void populateRosterCombo()>/@this
<it.yup.xmpp.IqManager: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.IqManager: void handleError(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen: void openContactMenu()>	<lampiro.screens.RosterScreen: void openContactMenu()>/@this
<lampiro.screens.MUCScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>	<lampiro.screens.MUCScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>/@this
<it.yup.xmlstream.BasicXmlStream: void <init>()>	<it.yup.xmlstream.BasicXmlStream: void <init>()>/@this
<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>	<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>/@this
<lampiro.screens.ChatScreen: void checkUrls(java.lang.String)>	<lampiro.screens.ChatScreen: void checkUrls(java.lang.String)>/@this
<com.jcraft.jzlib.ZInputStream: void close()>	<com.jcraft.jzlib.ZInputStream: void close()>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.util.RMSIndex$Comparator: int compare(byte[],byte[])>	<it.yup.util.RMSIndex$Comparator: int compare(byte[],byte[])>/@this
<it.yup.xmlstream.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xmpp.Roster: void retrieveRoster(boolean,boolean)>	<it.yup.xmpp.Roster: void retrieveRoster(boolean,boolean)>/@this
<it.yup.ui.UIPanel: void removeItemAt(int)>	<it.yup.ui.UIPanel: void removeItemAt(int)>/@this
<it.yup.util.NetworkConsumer: void setExiting()>	<it.yup.util.NetworkConsumer: void setExiting()>/@this
<it.yup.util.RMSIndex: void join(it.yup.util.RMSIndex$Item,it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: void join(it.yup.util.RMSIndex$Item,it.yup.util.RMSIndex$Item)>/@this
<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>/@this
<it.yup.xmpp.CommandExecutor: java.lang.String getFrom()>	<it.yup.xmpp.CommandExecutor: java.lang.String getFrom()>/@this
<it.yup.ui.UICanvas: void longPress(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void longPress(it.yup.ui.UIScreen)>/@this
<it.yup.ui.UICanvas$1: void <init>(it.yup.ui.UICanvas,it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas$1: void <init>(it.yup.ui.UICanvas,it.yup.ui.UIScreen)>/@this
<it.yup.xmpp.Contact: void compileMessage(java.lang.String,it.yup.xmpp.packets.Message,java.lang.String)>	<it.yup.xmpp.Contact: void compileMessage(java.lang.String,it.yup.xmpp.packets.Message,java.lang.String)>/@this
<it.yup.ui.UIScreen: void invalidate(int,int)>	<it.yup.ui.UIScreen: void invalidate(int,int)>/@this
<lampiro.screens.OptionsScreen: void saveOptions()>	<lampiro.screens.OptionsScreen: void saveOptions()>/@this
<lampiro.screens.StatusScreen: void <init>()>	<lampiro.screens.StatusScreen: void <init>()>/@this
<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleError(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.ZStream: int read_buf(byte[],int,int)>	<com.jcraft.jzlib.ZStream: int read_buf(byte[],int,int)>/@this
<it.yup.ui.UITextField: boolean isAutoUnexpand()>	<it.yup.ui.UITextField: boolean isAutoUnexpand()>/@this
<lampiro.screens.FTScreen: void <init>()>	<lampiro.screens.FTScreen: void <init>()>/@this
<it.yup.ui.UIItem: void setSubmenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIItem: void setSubmenu(it.yup.ui.UIMenu)>/@this
<it.yup.transport.SocketChannel: it.yup.transport.SocketChannel$UTFReader getReader()>	<it.yup.transport.SocketChannel: it.yup.transport.SocketChannel$UTFReader getReader()>/@this
<it.yup.xmpp.MUC: void updatePresence(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.MUC: void updatePresence(it.yup.xmpp.packets.Presence)>/@this
<lampiro.screens.RosterScreen: boolean filterContacts(boolean)>	<lampiro.screens.RosterScreen: boolean filterContacts(boolean)>/@this
<it.yup.xmpp.IqManager: void handleAnswer(it.yup.xml.Element,boolean)>	<it.yup.xmpp.IqManager: void handleAnswer(it.yup.xml.Element,boolean)>/@this
<it.yup.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>	<it.yup.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>/@this
<it.yup.xmpp.CommandExecutor: boolean execute(int)>	<it.yup.xmpp.CommandExecutor: boolean execute(int)>/@this
<it.yup.tests.UITestMidlet$TestScreen: void itemAction(it.yup.ui.UIItem)>	<it.yup.tests.UITestMidlet$TestScreen: void itemAction(it.yup.ui.UIItem)>/@this
<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout contactLayout(it.yup.ui.UILabel,it.yup.ui.UILabel)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout contactLayout(it.yup.ui.UILabel,it.yup.ui.UILabel)>/@this
<lampiro.screens.RosterScreen$UIContact: void <init>(lampiro.screens.RosterScreen,it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen$UIContact: void <init>(lampiro.screens.RosterScreen,it.yup.xmpp.Contact)>/@this
<it.yup.xmpp.Contact: it.yup.xml.Element getCapabilities(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: it.yup.xml.Element getCapabilities(it.yup.xmpp.packets.Presence)>/@this
<lampiro.screens.RosterScreen$UIGroup: void stopMoving()>	<lampiro.screens.RosterScreen$UIGroup: void stopMoving()>/@this
<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient)>/@this
<it.yup.xmpp.Contact: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Contact: void handleError(it.yup.xml.Element)>/@this
<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemStateListener1)>	<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemStateListener1)>/@this
<it.yup.util.MetaVector: int size()>	<it.yup.util.MetaVector: int size()>/@this
<lampiro.screens.RosterScreen: void sizeChanged(int,int)>	<lampiro.screens.RosterScreen: void sizeChanged(int,int)>/@this
<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient$XmppListener getXmppListener()>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient$XmppListener getXmppListener()>/@this
<it.yup.ui.UIAccordion: void setLabelSelectedColor(int)>	<it.yup.ui.UIAccordion: void setLabelSelectedColor(int)>/@this
<com.jcraft.jzlib.ZOutputStream: void setFlushMode(int)>	<com.jcraft.jzlib.ZOutputStream: void setFlushMode(int)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace(java.lang.String)>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace(java.lang.String)>/@this
<it.yup.ui.UIPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.util.RMSIndex$Item: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$Item: void <init>(it.yup.util.RMSIndex)>/@this
<it.yup.util.MetaVector: void addElement(java.lang.Object)>	<it.yup.util.MetaVector: void addElement(java.lang.Object)>/@this
<com.jcraft.jzlib.ZStream: int deflate(int)>	<com.jcraft.jzlib.ZStream: int deflate(int)>/@this
<it.yup.xml.KXmlParser: void pushEntity()>	<it.yup.xml.KXmlParser: void pushEntity()>/@this
<it.yup.xmlstream.KXmlSerializer: void check(boolean)>	<it.yup.xmlstream.KXmlSerializer: void check(boolean)>/@this
<it.yup.xml.KXmlParser: int nextTag()>	<it.yup.xml.KXmlParser: int nextTag()>/@this
<it.yup.xmpp.XMPPClient: javax.microedition.lcdui.Image getPresenceIcon(it.yup.xmpp.Contact,java.lang.String,int)>	<it.yup.xmpp.XMPPClient: javax.microedition.lcdui.Image getPresenceIcon(it.yup.xmpp.Contact,java.lang.String,int)>/@this
<it.yup.ui.UIAccordion: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIAccordion: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xmpp.Config: void saveCapabilities(java.lang.String,java.lang.String,it.yup.xml.Element)>	<it.yup.xmpp.Config: void saveCapabilities(java.lang.String,java.lang.String,it.yup.xml.Element)>/@this
<it.yup.ui.UICanvas: void sizeChanged(int,int)>	<it.yup.ui.UICanvas: void sizeChanged(int,int)>/@this
<it.yup.xml.KXmlParser: void nextImpl()>	<it.yup.xml.KXmlParser: void nextImpl()>/@this
<it.yup.ui.UILabel: void setFlip(boolean)>	<it.yup.ui.UILabel: void setFlip(boolean)>/@this
<lampiro.screens.RosterScreen: void connectionLost()>	<lampiro.screens.RosterScreen: void connectionLost()>/@this
<com.jcraft.jzlib.Inflate: void <init>()>	<com.jcraft.jzlib.Inflate: void <init>()>/@this
<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient)>/@this
<it.yup.tests.RMSTestMidlet: void testNull(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testNull(it.yup.util.RMSIndex)>/@this
<com.jcraft.jzlib.ZStream: int inflate(int)>	<com.jcraft.jzlib.ZStream: int inflate(int)>/@this
<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream)>	<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream)>/@this
<it.yup.tests.UITestMidlet$TestScreen$Changer: void <init>(it.yup.tests.UITestMidlet$TestScreen)>	<it.yup.tests.UITestMidlet$TestScreen$Changer: void <init>(it.yup.tests.UITestMidlet$TestScreen)>/@this
<com.jcraft.jzlib.ZStream: int inflateInit()>	<com.jcraft.jzlib.ZStream: int inflateInit()>/@this
<it.yup.xmlstream.Element: it.yup.xmlstream.Element clone()>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element clone()>/@this
<it.yup.ui.UIAccordion: it.yup.ui.UIItem[] getItemLabels()>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem[] getItemLabels()>/@this
<it.yup.util.MetaVector: java.lang.String toString()>	<it.yup.util.MetaVector: java.lang.String toString()>/@this
<it.yup.screens.StatusScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.StatusScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<com.jcraft.jzlib.Tree: void build_tree(com.jcraft.jzlib.Deflate)>	<com.jcraft.jzlib.Tree: void build_tree(com.jcraft.jzlib.Deflate)>/@this
<it.yup.ui.UIItem: int getGradientSelectedColor()>	<it.yup.ui.UIItem: int getGradientSelectedColor()>/@this
<lampiro.screens.RosterScreen$UIGroup: void startMoving()>	<lampiro.screens.RosterScreen$UIGroup: void startMoving()>/@this
<it.yup.ui.UIScreen: void removeAllPopups()>	<it.yup.ui.UIScreen: void removeAllPopups()>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator)>/@this
<it.yup.screens.OptionsScreen$1: void <init>(it.yup.screens.OptionsScreen)>	<it.yup.screens.OptionsScreen$1: void <init>(it.yup.screens.OptionsScreen)>/@this
<it.yup.util.ResourceManager: void <init>(java.lang.String,java.lang.String)>	<it.yup.util.ResourceManager: void <init>(java.lang.String,java.lang.String)>/@this
<lampiro.screens.RosterScreen: void startDrag(it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen: void startDrag(it.yup.ui.UIItem)>/@this
<lampiro.screens.SplashScreen$1: void <init>(lampiro.screens.SplashScreen)>	<lampiro.screens.SplashScreen$1: void <init>(lampiro.screens.SplashScreen)>/@this
<lampiro.screens.SubscribeScreen: void <init>()>	<lampiro.screens.SubscribeScreen: void <init>()>/@this
<it.yup.xml.KXmlParser: boolean isWhitespace()>	<it.yup.xml.KXmlParser: boolean isWhitespace()>/@this
<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener1)>	<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener1)>/@this
<it.yup.screens.RosterScreen: void sizeChanged(int,int)>	<it.yup.screens.RosterScreen: void sizeChanged(int,int)>/@this
<it.yup.ui.UIGauge: void <init>(java.lang.String,boolean,int,int)>	<it.yup.ui.UIGauge: void <init>(java.lang.String,boolean,int,int)>/@this
<it.yup.ui.UIItem: boolean isFocusable()>	<it.yup.ui.UIItem: boolean isFocusable()>/@this
<com.jcraft.jzlib.Deflate: int deflate(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Deflate: int deflate(com.jcraft.jzlib.ZStream,int)>/@this
<it.yup.tests.UITestMidlet$TestScreen: void buildScreen()>	<it.yup.tests.UITestMidlet$TestScreen: void buildScreen()>/@this
<it.yup.ui.UIItem: it.yup.ui.UIMenu getSubmenu()>	<it.yup.ui.UIItem: it.yup.ui.UIMenu getSubmenu()>/@this
<it.yup.ui.UIAccordion: void close(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void close(it.yup.ui.UIItem)>/@this
<it.yup.xmpp.Roster: void recreateRoster(it.yup.xml.Element,boolean)>	<it.yup.xmpp.Roster: void recreateRoster(it.yup.xml.Element,boolean)>/@this
<lampiro.screens.MMScreen: void <init>(java.lang.String)>	<lampiro.screens.MMScreen: void <init>(java.lang.String)>/@this
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>/@this
<it.yup.screens.SplashScreen: void keyPressed(int)>	<it.yup.screens.SplashScreen: void keyPressed(int)>/@this
<it.yup.ui.UIItem: void setWidth(int)>	<it.yup.ui.UIItem: void setWidth(int)>/@this
<lampiro.screens.AddContactScreen: void registerContact(java.lang.String,java.lang.String,java.lang.String)>	<lampiro.screens.AddContactScreen: void registerContact(java.lang.String,java.lang.String,java.lang.String)>/@this
<it.yup.ui.Semaphore: long permits()>	<it.yup.ui.Semaphore: long permits()>/@this
<it.yup.xmpp.FTSender: void sessionInitiate()>	<it.yup.xmpp.FTSender: void sessionInitiate()>/@this
<lampiro.screens.RosterScreen: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>/@this
<it.yup.util.MetaVector: int indexOf(java.lang.Object,int)>	<it.yup.util.MetaVector: int indexOf(java.lang.Object,int)>/@this
<it.yup.ui.UICanvas: int getViewedIndex()>	<it.yup.ui.UICanvas: int getViewedIndex()>/@this
<it.yup.util.RMSIndex: void deleteSplittedRecords(int)>	<it.yup.util.RMSIndex: void deleteSplittedRecords(int)>/@this
<lampiro.screens.OptionsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.OptionsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UITextField: void computeRealHeight()>	<it.yup.ui.UITextField: void computeRealHeight()>/@this
<it.yup.transport.SocketChannel$Runnable1: void run()>	<it.yup.transport.SocketChannel$Runnable1: void run()>/@this
<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener1)>	<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener1)>/@this
<it.yup.ui.UILabel: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UILabel: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int)>	<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int)>/@this
<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence[] getAllPresences()>	<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence[] getAllPresences()>/@this
<it.yup.screens.AddContactScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.AddContactScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<lampiro.screens.RosterScreen$UIContact: it.yup.ui.UIItem getSelectedItem()>	<lampiro.screens.RosterScreen$UIContact: it.yup.ui.UIItem getSelectedItem()>/@this
<it.yup.xmpp.XMPPClient: void stopClient()>	<it.yup.xmpp.XMPPClient: void stopClient()>/@this
<it.yup.xmpp.MUC: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmpp.MUC: void <init>(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIScreen: boolean askRepaint()>	<it.yup.ui.UIScreen: boolean askRepaint()>/@this
<it.yup.ui.UITextField: void setAutoUnexpand(boolean)>	<it.yup.ui.UITextField: void setAutoUnexpand(boolean)>/@this
<it.yup.util.MetaVector: java.lang.Object lastElement()>	<it.yup.util.MetaVector: java.lang.Object lastElement()>/@this
<lampiro.screens.InnerMMScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.InnerMMScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<lampiro.screens.ContactInfoScreen: void setColor(it.yup.ui.UIItem)>	<lampiro.screens.ContactInfoScreen: void setColor(it.yup.ui.UIItem)>/@this
<it.yup.xml.KXmlSerializer: void flush()>	<it.yup.xml.KXmlSerializer: void flush()>/@this
<it.yup.screens.RegisterScreen: void checkLogin()>	<it.yup.screens.RegisterScreen: void checkLogin()>/@this
<com.jcraft.jzlib.ZOutputStream: long getTotalIn()>	<com.jcraft.jzlib.ZOutputStream: long getTotalIn()>/@this
<com.jcraft.jzlib.InfBlocks: void reset(com.jcraft.jzlib.ZStream,long[])>	<com.jcraft.jzlib.InfBlocks: void reset(com.jcraft.jzlib.ZStream,long[])>/@this
<it.yup.ui.UIAccordion: void setSepSize(int)>	<it.yup.ui.UIAccordion: void setSepSize(int)>/@this
<it.yup.util.MetaVector$MultiVectorEnumeration: java.lang.Object nextElement()>	<it.yup.util.MetaVector$MultiVectorEnumeration: java.lang.Object nextElement()>/@this
<lampiro.screens.ChatScreen$1: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen$1: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener1)>	<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener1)>/@this
<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener,lampiro.screens.RosterScreen$FileReceiveScreen)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener,lampiro.screens.RosterScreen$FileReceiveScreen)>/@this
<it.yup.ui.UILayout: boolean isGroup()>	<it.yup.ui.UILayout: boolean isGroup()>/@this
<it.yup.xmlstream.Element: java.lang.String getUri(java.lang.String)>	<it.yup.xmlstream.Element: java.lang.String getUri(java.lang.String)>/@this
<it.yup.screens.RegisterScreen: int indexOf(javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen: int indexOf(javax.microedition.lcdui.Item)>/@this
<it.yup.ui.Semaphore: void acquire()>	<it.yup.ui.Semaphore: void acquire()>/@this
<lampiro.screens.RosterScreen: void chatWithSelected(java.lang.String)>	<lampiro.screens.RosterScreen: void chatWithSelected(java.lang.String)>/@this
<it.yup.ui.UIGauge$Ticker: void run()>	<it.yup.ui.UIGauge$Ticker: void run()>/@this
<it.yup.util.StderrConsumer: void setExiting()>	<it.yup.util.StderrConsumer: void setExiting()>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator)>/@this
<lampiro.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<lampiro.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>/@this
<it.yup.ui.UIMenu: void insert(int,it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: void insert(int,it.yup.ui.UIItem)>/@this
<lampiro.screens.MUCScreen: void updateResource()>	<lampiro.screens.MUCScreen: void updateResource()>/@this
<com.jcraft.jzlib.ZStream: int deflateInit(int)>	<com.jcraft.jzlib.ZStream: int deflateInit(int)>/@this
<com.jcraft.jzlib.Deflate: void scan_tree(short[],int)>	<com.jcraft.jzlib.Deflate: void scan_tree(short[],int)>/@this
<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen)>	<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen)>/@this
<it.yup.tests.UITestMidlet$KeysScreen: void keyPressed(int)>	<it.yup.tests.UITestMidlet$KeysScreen: void keyPressed(int)>/@this
<it.yup.ui.UIMenu: void setItemList(java.util.Vector)>	<it.yup.ui.UIMenu: void setItemList(java.util.Vector)>/@this
<it.yup.ui.UICanvas: void open(it.yup.ui.UIScreen,boolean)>	<it.yup.ui.UICanvas: void open(it.yup.ui.UIScreen,boolean)>/@this
<it.yup.xml.KXmlSerializer: void comment(java.lang.String)>	<it.yup.xml.KXmlSerializer: void comment(java.lang.String)>/@this
<com.jcraft.jzlib.Deflate: void put_short(int)>	<com.jcraft.jzlib.Deflate: void put_short(int)>/@this
<it.yup.ui.UILabel: java.util.Vector splitLongStrings(java.lang.String,int,javax.microedition.lcdui.Font)>	<it.yup.ui.UILabel: java.util.Vector splitLongStrings(java.lang.String,int,javax.microedition.lcdui.Font)>/@this
<lampiro.screens.SubscribeScreen: boolean addSubscription(it.yup.xmpp.Contact,int)>	<lampiro.screens.SubscribeScreen: boolean addSubscription(it.yup.xmpp.Contact,int)>/@this
<com.jcraft.jzlib.Deflate: int deflate_fast(int)>	<com.jcraft.jzlib.Deflate: int deflate_fast(int)>/@this
<it.yup.ui.UILabel: void setImg(javax.microedition.lcdui.Image)>	<it.yup.ui.UILabel: void setImg(javax.microedition.lcdui.Image)>/@this
<it.yup.xmpp.Contact: java.util.Vector getMessageHistory(java.lang.String)>	<it.yup.xmpp.Contact: java.util.Vector getMessageHistory(java.lang.String)>/@this
<lampiro.screens.StatusScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.StatusScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UIScreen: java.lang.String getTitle()>	<it.yup.ui.UIScreen: java.lang.String getTitle()>/@this
<it.yup.screens.DataFormScreen$ListChoiceHandler: void <init>(it.yup.screens.DataFormScreen,javax.microedition.lcdui.StringItem,it.yup.xmpp.packets.DataForm$Field)>	<it.yup.screens.DataFormScreen$ListChoiceHandler: void <init>(it.yup.screens.DataFormScreen,javax.microedition.lcdui.StringItem,it.yup.xmpp.packets.DataForm$Field)>/@this
<it.yup.xmlstream.KXmlSerializer: boolean getFeature(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: boolean getFeature(java.lang.String)>/@this
<lampiro.screens.RosterScreen: void closeWaitingScreen()>	<lampiro.screens.RosterScreen: void closeWaitingScreen()>/@this
<it.yup.xmpp.Contact: void resetMessageHistory(java.lang.String)>	<it.yup.xmpp.Contact: void resetMessageHistory(java.lang.String)>/@this
<lampiro.screens.SendMMScreen$UploadHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>/@this
<it.yup.ui.UIItem: void setDirty(boolean)>	<it.yup.ui.UIItem: void setDirty(boolean)>/@this
<lampiro.screens.ShowMMScreen: int getMmType()>	<lampiro.screens.ShowMMScreen: int getMmType()>/@this
<it.yup.xmpp.Group: it.yup.xml.Element store()>	<it.yup.xmpp.Group: it.yup.xml.Element store()>/@this
<it.yup.tests.RMSTestMidlet: void pauseApp()>	<it.yup.tests.RMSTestMidlet: void pauseApp()>/@this
<it.yup.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>	<it.yup.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>/@this
<lampiro.screens.DataFormScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.DataFormScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.ui.UIRadioButtons: void <init>(java.lang.String[])>	<it.yup.ui.UIRadioButtons: void <init>(java.lang.String[])>/@this
<lampiro.screens.KeyScreen: boolean keyPressed(int)>	<lampiro.screens.KeyScreen: boolean keyPressed(int)>/@this
<it.yup.screens.ScreenSaver: void keyPressed(int)>	<it.yup.screens.ScreenSaver: void keyPressed(int)>/@this
<it.yup.xml.KXmlSerializer: void check(boolean)>	<it.yup.xml.KXmlSerializer: void check(boolean)>/@this
<it.yup.ui.UIMenu: int getAbsoluteX()>	<it.yup.ui.UIMenu: int getAbsoluteX()>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(int)>/@this
<it.yup.xmlstream.BasicXmlStream: void addInitializer(it.yup.xmlstream.Initializer,int)>	<it.yup.xmlstream.BasicXmlStream: void addInitializer(it.yup.xmlstream.Initializer,int)>/@this
<it.yup.xmpp.Config: byte[] getData(byte[])>	<it.yup.xmpp.Config: byte[] getData(byte[])>/@this
<it.yup.xmpp.Contact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>	<it.yup.xmpp.Contact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>/@this
<com.jcraft.jzlib.ZInputStream: int read()>	<com.jcraft.jzlib.ZInputStream: int read()>/@this
<it.yup.xmpp.Contact: int availabilityDiff(it.yup.xmpp.Contact,it.yup.xmpp.Contact)>	<it.yup.xmpp.Contact: int availabilityDiff(it.yup.xmpp.Contact,it.yup.xmpp.Contact)>/@this
<it.yup.xmlstream.BasicXmlStream$SessionOpener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.BasicXmlStream$SessionOpener: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xmpp.Task: java.lang.String getLabel()>	<it.yup.xmpp.Task: java.lang.String getLabel()>/@this
<it.yup.xmpp.FTSender: void sendChunk()>	<it.yup.xmpp.FTSender: void sendChunk()>/@this
<com.jcraft.jzlib.ZStream: int deflateEnd()>	<com.jcraft.jzlib.ZStream: int deflateEnd()>/@this
<lampiro.screens.DataResultScreen: boolean keyPressed(int)>	<lampiro.screens.DataResultScreen: boolean keyPressed(int)>/@this
<it.yup.screens.OptionsScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.OptionsScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<com.jcraft.jzlib.Deflate: void putShortMSB(int)>	<com.jcraft.jzlib.Deflate: void putShortMSB(int)>/@this
<lampiro.screens.RegisterScreen: void login()>	<lampiro.screens.RegisterScreen: void login()>/@this
<it.yup.util.RMSIndex: java.util.Vector loadChunk(int)>	<it.yup.util.RMSIndex: java.util.Vector loadChunk(int)>/@this
<it.yup.ui.UITextPanel: void setMaxHeight(int)>	<it.yup.ui.UITextPanel: void setMaxHeight(int)>/@this
<it.yup.xmlstream.EventQueryRegistration: void remove()>	<it.yup.xmlstream.EventQueryRegistration: void remove()>/@this
<it.yup.screens.MessageComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.MessageComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.util.RMSIndex: void <init>(java.lang.String)>	<it.yup.util.RMSIndex: void <init>(java.lang.String)>/@this
<it.yup.tests.XMPPTestClient: void startClient()>	<it.yup.tests.XMPPTestClient: void startClient()>/@this
<it.yup.xmpp.XMPPClient$PresenceHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.SplashScreen: void <init>()>	<lampiro.screens.SplashScreen: void <init>()>/@this
<it.yup.xml.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>	<it.yup.xml.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>/@this
<it.yup.xml.KXmlParser: int parseLegacy(boolean)>	<it.yup.xml.KXmlParser: int parseLegacy(boolean)>/@this
<com.jcraft.jzlib.ZStream: int inflateSync()>	<com.jcraft.jzlib.ZStream: int inflateSync()>/@this
<it.yup.xml.KXmlSerializer: void <init>()>	<it.yup.xml.KXmlSerializer: void <init>()>/@this
<lampiro.screens.ChatScreen: boolean keyPressed(int)>	<lampiro.screens.ChatScreen: boolean keyPressed(int)>/@this
<it.yup.xmpp.Config: void <init>()>	<it.yup.xmpp.Config: void <init>()>/@this
<lampiro.screens.RosterScreen: boolean keyPressed(int)>	<lampiro.screens.RosterScreen: boolean keyPressed(int)>/@this
<it.yup.ui.UIAccordion: void invalidateItems(int)>	<it.yup.ui.UIAccordion: void invalidateItems(int)>/@this
<it.yup.ui.UIMenu: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIMenu: it.yup.ui.UIItem getSelectedItem()>/@this
<lampiro.screens.RosterScreen: void updateScreen()>	<lampiro.screens.RosterScreen: void updateScreen()>/@this
<it.yup.ui.Semaphore: boolean attempt(long)>	<it.yup.ui.Semaphore: boolean attempt(long)>/@this
<it.yup.ui.UICanvas: void hide(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void hide(it.yup.ui.UIScreen)>/@this
<it.yup.xml.KXmlParser: int getAttributeCount()>	<it.yup.xml.KXmlParser: int getAttributeCount()>/@this
<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen)>/@this
<it.yup.tests.UITestMidlet: void <init>()>	<it.yup.tests.UITestMidlet: void <init>()>/@this
<it.yup.tests.TestMidlet: void destroyApp(boolean)>	<it.yup.tests.TestMidlet: void destroyApp(boolean)>/@this
<it.yup.xmlstream.KXmlParser: boolean isAttributeDefault(int)>	<it.yup.xmlstream.KXmlParser: boolean isAttributeDefault(int)>/@this
<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener2)>	<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener2)>/@this
<it.yup.ui.UIItem: void setFocusable(boolean)>	<it.yup.ui.UIItem: void setFocusable(boolean)>/@this
<it.yup.ui.UIRadioButtons: boolean keyPressed(int)>	<it.yup.ui.UIRadioButtons: boolean keyPressed(int)>/@this
<lampiro.screens.SimpleComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.SimpleComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>/@this
<lampiro.screens.RosterScreen$UIContact: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.RosterScreen$UIContact: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.screens.RegisterScreen: void <init>()>	<it.yup.screens.RegisterScreen: void <init>()>/@this
<it.yup.ui.UIScreen: void addPopup(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: void addPopup(it.yup.ui.UIMenu)>/@this
<it.yup.util.MetaVector: boolean contains(java.lang.Object)>	<it.yup.util.MetaVector: boolean contains(java.lang.Object)>/@this
<it.yup.ui.UIButton: boolean isPressed()>	<it.yup.ui.UIButton: boolean isPressed()>/@this
<it.yup.xmlstream.KXmlParser: void push(int)>	<it.yup.xmlstream.KXmlParser: void push(int)>/@this
<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender)>/@this
<com.jcraft.jzlib.Deflate: void put_byte(byte[],int,int)>	<com.jcraft.jzlib.Deflate: void put_byte(byte[],int,int)>/@this
<it.yup.ui.UIAccordion: void setItemsColor(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void setItemsColor(it.yup.ui.UIItem,it.yup.ui.UIItem)>/@this
<it.yup.ui.UIScreen: javax.microedition.lcdui.Graphics getGraphics()>	<it.yup.ui.UIScreen: javax.microedition.lcdui.Graphics getGraphics()>/@this
<lampiro.screens.RosterScreen: it.yup.xmpp.Contact getSelectedContact()>	<lampiro.screens.RosterScreen: it.yup.xmpp.Contact getSelectedContact()>/@this
<it.yup.ui.UIEmoLabel: void <init>(java.lang.String)>	<it.yup.ui.UIEmoLabel: void <init>(java.lang.String)>/@this
<it.yup.util.MetaVector: java.util.Enumeration elements()>	<it.yup.util.MetaVector: java.util.Enumeration elements()>/@this
<it.yup.ui.UIPanel: java.util.Vector getItems()>	<it.yup.ui.UIPanel: java.util.Vector getItems()>/@this
<it.yup.xml.KXmlParser: void setFeature(java.lang.String,boolean)>	<it.yup.xml.KXmlParser: void setFeature(java.lang.String,boolean)>/@this
<it.yup.xmpp.Roster: void subscribeContact(it.yup.xmpp.Contact,boolean)>	<it.yup.xmpp.Roster: void subscribeContact(it.yup.xmpp.Contact,boolean)>/@this
<it.yup.xmlstream.Element: void delAttribute(java.lang.String)>	<it.yup.xmlstream.Element: void delAttribute(java.lang.String)>/@this
<it.yup.util.Utils: void <init>()>	<it.yup.util.Utils: void <init>()>/@this
<it.yup.ui.UIGauge: java.lang.String getLabel()>	<it.yup.ui.UIGauge: java.lang.String getLabel()>/@this
<lampiro.screens.RosterScreen$FileReceiveScreen: void updateFT()>	<lampiro.screens.RosterScreen$FileReceiveScreen: void updateFT()>/@this
<it.yup.screens.ChatScreen: void keyPressed(int)>	<it.yup.screens.ChatScreen: void keyPressed(int)>/@this
<it.yup.ui.UITextPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>	<it.yup.ui.UITextPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>/@this
<lampiro.screens.MUCScreen: boolean needDisplay()>	<lampiro.screens.MUCScreen: boolean needDisplay()>/@this
<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen)>	<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen)>/@this
<lampiro.screens.RegisterScreen: void <init>()>	<lampiro.screens.RegisterScreen: void <init>()>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getInputEncoding()>	<it.yup.xmlstream.KXmlParser: java.lang.String getInputEncoding()>/@this
<it.yup.xmpp.Roster$IQResultListener3: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener3: void handleError(it.yup.xml.Element)>/@this
<it.yup.screens.ChatScreen: void hideNotify()>	<it.yup.screens.ChatScreen: void hideNotify()>/@this
<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener3)>	<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener3)>/@this
<it.yup.ui.UIScreen: boolean popupIsPresent(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: boolean popupIsPresent(it.yup.ui.UIMenu)>/@this
<com.jcraft.jzlib.ZStream: int inflateInit(boolean)>	<com.jcraft.jzlib.ZStream: int inflateInit(boolean)>/@this
<com.jcraft.jzlib.Deflate: int deflateReset(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Deflate: int deflateReset(com.jcraft.jzlib.ZStream)>/@this
<com.jcraft.jzlib.InfTree: int inflate_trees_dynamic(int,int,int[],int[],int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfTree: int inflate_trees_dynamic(int,int,int[],int[],int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>/@this
<it.yup.tests.UITestMidlet$KeysScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.tests.UITestMidlet$KeysScreen: void paint(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UIPanel: int removeItem(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: int removeItem(it.yup.ui.UIItem)>/@this
<lampiro.screens.TaskListScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.TaskListScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.xmpp.packets.DataForm: void parseForm(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm: void parseForm(it.yup.xml.Element)>/@this
<it.yup.ui.UICanvas: void pointerDragged(int,int)>	<it.yup.ui.UICanvas: void pointerDragged(int,int)>/@this
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>/@this
<it.yup.tests.UITestMidlet$TestScreen$Changer: void run()>	<it.yup.tests.UITestMidlet$TestScreen$Changer: void run()>/@this
<it.yup.xmlstream.Element: java.lang.String getAttribute(java.lang.String)>	<it.yup.xmlstream.Element: java.lang.String getAttribute(java.lang.String)>/@this
<it.yup.xmpp.FTSender: void sendFooter()>	<it.yup.xmpp.FTSender: void sendFooter()>/@this
<it.yup.util.RMSIndex: byte[] physicalRead(it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: byte[] physicalRead(it.yup.util.RMSIndex$Item)>/@this
<it.yup.xmpp.packets.IQResultListener: void handleError(it.yup.xmlstream.Element)>	<it.yup.xmpp.packets.IQResultListener: void handleError(it.yup.xmlstream.Element)>/@this
<lampiro.screens.MMScreen: void paint(javax.microedition.lcdui.Graphics)>	<lampiro.screens.MMScreen: void paint(javax.microedition.lcdui.Graphics)>/@this
<it.yup.screens.DebugScreen: void setReturnScreen(javax.microedition.lcdui.Displayable)>	<it.yup.screens.DebugScreen: void setReturnScreen(javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UILabel: java.util.Vector getTextLines()>	<it.yup.ui.UILabel: java.util.Vector getTextLines()>/@this
<it.yup.xml.KXmlParser: int getLineNumber()>	<it.yup.xml.KXmlParser: int getLineNumber()>/@this
<it.yup.util.RMSIndex: void delete(byte[])>	<it.yup.util.RMSIndex: void delete(byte[])>/@this
<it.yup.ui.UIAccordion: void setOneOpen(boolean)>	<it.yup.ui.UIAccordion: void setOneOpen(boolean)>/@this
<it.yup.xmlstream.Element: void <init>()>	<it.yup.xmlstream.Element: void <init>()>/@this
<it.yup.ui.UIAccordion: it.yup.ui.UIItem getPanelItem(it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem getPanelItem(it.yup.ui.UIItem,int)>/@this
<lampiro.screens.MMScreen: void showCamera()>	<lampiro.screens.MMScreen: void showCamera()>/@this
<it.yup.ui.UILayout: void setSelected(boolean)>	<it.yup.ui.UILayout: void setSelected(boolean)>/@this
<it.yup.ui.UIGauge: boolean keyPressed(int)>	<it.yup.ui.UIGauge: boolean keyPressed(int)>/@this
<it.yup.xmpp.FTSender$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$PacketListener1: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.ui.UIPanel: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UIPanel: void setScreen(it.yup.ui.UIScreen)>/@this
<it.yup.util.MemoryLogConsumer: void <init>()>	<it.yup.util.MemoryLogConsumer: void <init>()>/@this
<it.yup.xmpp.CommandExecutor: java.lang.String getLabel()>	<it.yup.xmpp.CommandExecutor: java.lang.String getLabel()>/@this
<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream)>	<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream)>/@this
<it.yup.xmlstream.KXmlParser: void skipSubTree()>	<it.yup.xmlstream.KXmlParser: void skipSubTree()>/@this
<it.yup.util.RMSIndex$DefaultUTF8Comparator: int compare(byte[],byte[])>	<it.yup.util.RMSIndex$DefaultUTF8Comparator: int compare(byte[],byte[])>/@this
<it.yup.ui.UICanvas: java.util.Vector getScreenList()>	<it.yup.ui.UICanvas: java.util.Vector getScreenList()>/@this
<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen)>/@this
<it.yup.xmpp.FTReceiver$FTREventHandler: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$FTREventHandler: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>/@this
<com.jcraft.jzlib.ZOutputStream: void flush()>	<com.jcraft.jzlib.ZOutputStream: void flush()>/@this
<it.yup.xml.Element: it.yup.xml.Element addElementAndContent(java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element addElementAndContent(java.lang.String,java.lang.String,java.lang.String)>/@this
<it.yup.screens.RegisterScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>/@this
<it.yup.xmpp.BluendoXMLRPC: void <init>(java.lang.String)>	<it.yup.xmpp.BluendoXMLRPC: void <init>(java.lang.String)>/@this
<com.jcraft.jzlib.Deflate: int deflateEnd()>	<com.jcraft.jzlib.Deflate: int deflateEnd()>/@this
<it.yup.xml.KXmlSerializer: void endDocument()>	<it.yup.xml.KXmlSerializer: void endDocument()>/@this
<it.yup.screens.RegisterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.RegisterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.screens.RegisterScreen: void placeItems()>	<it.yup.screens.RegisterScreen: void placeItems()>/@this
<lampiro.screens.MUCScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.MUCScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.ChatScreen$MUCUpdateListener: void handleError(it.yup.xml.Element)>	<lampiro.screens.ChatScreen$MUCUpdateListener: void handleError(it.yup.xml.Element)>/@this
<lampiro.screens.RegisterScreen: java.lang.String srvQuery()>	<lampiro.screens.RegisterScreen: java.lang.String srvQuery()>/@this
<lampiro.screens.AddContactScreen$IQResultListener2: void handleError(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener2: void handleError(it.yup.xml.Element)>/@this
<it.yup.xmpp.XMPPClient: void stream_authenticated()>	<it.yup.xmpp.XMPPClient: void stream_authenticated()>/@this
<it.yup.xmlstream.Element: void write(org.xmlpull.v1.XmlSerializer)>	<it.yup.xmlstream.Element: void write(org.xmlpull.v1.XmlSerializer)>/@this
<com.jcraft.jzlib.Inflate: int inflateEnd(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateEnd(com.jcraft.jzlib.ZStream)>/@this
<it.yup.xmpp.CommandExecutor: byte getStatus()>	<it.yup.xmpp.CommandExecutor: byte getStatus()>/@this
<it.yup.ui.UITextField: void <init>(java.lang.String,java.lang.String,int,int)>	<it.yup.ui.UITextField: void <init>(java.lang.String,java.lang.String,int,int)>/@this
<com.jcraft.jzlib.FilterInputStream: int read()>	<com.jcraft.jzlib.FilterInputStream: int read()>/@this
<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen)>	<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen)>/@this
<it.yup.xmpp.Contact: java.lang.String[] getGroups()>	<it.yup.xmpp.Contact: java.lang.String[] getGroups()>/@this
<lampiro.screens.RegisterScreen: void showNotify()>	<lampiro.screens.RegisterScreen: void showNotify()>/@this
<it.yup.ui.UIItem: int getFg_color()>	<it.yup.ui.UIItem: int getFg_color()>/@this
<it.yup.tests.XMLTestMidlet: void destroyApp(boolean)>	<it.yup.tests.XMLTestMidlet: void destroyApp(boolean)>/@this
<lampiro.screens.DataResultScreen: void showCurrent()>	<lampiro.screens.DataResultScreen: void showCurrent()>/@this
<it.yup.util.RMSIndex: java.util.Enumeration keys()>	<it.yup.util.RMSIndex: java.util.Enumeration keys()>/@this
<lampiro.screens.GrpMessageComposerScreen: void <init>(lampiro.screens.RosterScreen$UIGroup,int)>	<lampiro.screens.GrpMessageComposerScreen: void <init>(lampiro.screens.RosterScreen$UIGroup,int)>/@this
<it.yup.ui.UIScreen: java.util.Vector getPaintedItems()>	<it.yup.ui.UIScreen: java.util.Vector getPaintedItems()>/@this
<it.yup.xml.Element: void ensureCapacity(int,byte)>	<it.yup.xml.Element: void ensureCapacity(int,byte)>/@this
<it.yup.screens.DataResultScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DataResultScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.screens.RosterScreen: void showCommand(java.lang.Object)>	<it.yup.screens.RosterScreen: void showCommand(java.lang.Object)>/@this
<it.yup.ui.UIEmoLabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>	<it.yup.ui.UIEmoLabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>/@this
<it.yup.ui.UITextPanel: boolean keyPressed(int)>	<it.yup.ui.UITextPanel: boolean keyPressed(int)>/@this
<it.yup.xml.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>	<it.yup.xml.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>/@this
<it.yup.xmlstream.BasicXmlStream: void restart()>	<it.yup.xmlstream.BasicXmlStream: void restart()>/@this
<it.yup.ui.UIMenu: void setAutoClose(boolean)>	<it.yup.ui.UIMenu: void setAutoClose(boolean)>/@this
<it.yup.xml.KXmlParser: boolean getFeature(java.lang.String)>	<it.yup.xml.KXmlParser: boolean getFeature(java.lang.String)>/@this
<lampiro.screens.DataFormScreen: void addDesc()>	<lampiro.screens.DataFormScreen: void addDesc()>/@this
<it.yup.xmlstream.KXmlSerializer: void docdecl(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void docdecl(java.lang.String)>/@this
<it.yup.screens.RegisterScreen: void login()>	<it.yup.screens.RegisterScreen: void login()>/@this
<com.jcraft.jzlib.InfBlocks: int sync_point()>	<com.jcraft.jzlib.InfBlocks: int sync_point()>/@this
<lampiro.screens.GroupsScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.GroupsScreen: void <init>(it.yup.xmpp.Contact)>/@this
<it.yup.xmpp.packets.Presence: java.lang.String getShow()>	<it.yup.xmpp.packets.Presence: java.lang.String getShow()>/@this
<lampiro.screens.ShowMMScreen: void showNotify()>	<lampiro.screens.ShowMMScreen: void showNotify()>/@this
<lampiro.screens.MUCScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>	<lampiro.screens.MUCScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String readName()>	<it.yup.xmlstream.KXmlParser: java.lang.String readName()>/@this
<it.yup.screens.ScreenSaver: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ScreenSaver: void paint(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender)>/@this
<it.yup.ui.UIAccordion: void move(int,int)>	<it.yup.ui.UIAccordion: void move(int,int)>/@this
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>/@this
<com.jcraft.jzlib.ZOutputStream: void write(int)>	<com.jcraft.jzlib.ZOutputStream: void write(int)>/@this
<com.jcraft.jzlib.ZStream: int deflateInit(int,int)>	<com.jcraft.jzlib.ZStream: int deflateInit(int,int)>/@this
<it.yup.xmlstream.SASLAuthenticator: java.util.Hashtable parse(java.lang.String)>	<it.yup.xmlstream.SASLAuthenticator: java.util.Hashtable parse(java.lang.String)>/@this
<it.yup.xml.KXmlParser: java.lang.String getAttributePrefix(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributePrefix(int)>/@this
<it.yup.xmlstream.KXmlSerializer: void setFeature(java.lang.String,boolean)>	<it.yup.xmlstream.KXmlSerializer: void setFeature(java.lang.String,boolean)>/@this
<it.yup.ui.UILayout: boolean keyPressed(int)>	<it.yup.ui.UILayout: boolean keyPressed(int)>/@this
<it.yup.ui.UIMenu: boolean getNeedScrollbar()>	<it.yup.ui.UIMenu: boolean getNeedScrollbar()>/@this
<it.yup.ui.UICombobox: void setDirty(boolean)>	<it.yup.ui.UICombobox: void setDirty(boolean)>/@this
<it.yup.xmpp.IqManager: void purge()>	<it.yup.xmpp.IqManager: void purge()>/@this
<it.yup.ui.UIAccordion: void open(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void open(it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen$WaitScreen: void stopWaiting()>	<lampiro.screens.RosterScreen$WaitScreen: void stopWaiting()>/@this
<lampiro.screens.ChatScreen: void closeMe()>	<lampiro.screens.ChatScreen: void closeMe()>/@this
<it.yup.xmpp.XMPPClient: void playSmartTone()>	<it.yup.xmpp.XMPPClient: void playSmartTone()>/@this
<it.yup.xmpp.CommandExecutor: void <init>(java.lang.String[],java.lang.String)>	<it.yup.xmpp.CommandExecutor: void <init>(java.lang.String[],java.lang.String)>/@this
<it.yup.ui.UIMenu: boolean isAutoClose()>	<it.yup.ui.UIMenu: boolean isAutoClose()>/@this
<it.yup.xmpp.SimpleDataFormExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>	<it.yup.xmpp.SimpleDataFormExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>/@this
<it.yup.xmpp.packets.DataForm$Field: java.lang.String[] getOption(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm$Field: java.lang.String[] getOption(it.yup.xml.Element)>/@this
<lampiro.screens.GatewayRegisterScreen: void <init>(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen: void <init>(it.yup.xml.Element)>/@this
<it.yup.xml.KXmlSerializer: void writeEscaped(java.lang.String,int)>	<it.yup.xml.KXmlSerializer: void writeEscaped(java.lang.String,int)>/@this
<it.yup.util.MetaVector: void insertElementAt(java.lang.Object,int)>	<it.yup.util.MetaVector: void insertElementAt(java.lang.Object,int)>/@this
<lampiro.screens.AlbumScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.AlbumScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.LampiroMidlet: void destroyApp(boolean)>	<lampiro.LampiroMidlet: void destroyApp(boolean)>/@this
<it.yup.ui.UICombobox$UIComboScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<it.yup.ui.UICombobox$UIComboScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UITextField: boolean isWrappable()>	<it.yup.ui.UITextField: boolean isWrappable()>/@this
<it.yup.xmlstream.KXmlSerializer: void flush()>	<it.yup.xmlstream.KXmlSerializer: void flush()>/@this
<lampiro.screens.KeyScreen: void <init>()>	<lampiro.screens.KeyScreen: void <init>()>/@this
<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen)>/@this
<it.yup.ui.UIItem: it.yup.ui.UIScreen getScreen()>	<it.yup.ui.UIItem: it.yup.ui.UIScreen getScreen()>/@this
<it.yup.ui.UIPanel: boolean keyPressed(int)>	<it.yup.ui.UIPanel: boolean keyPressed(int)>/@this
<it.yup.xml.KXmlParser: java.lang.String getAttributeNamespace(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeNamespace(int)>/@this
<lampiro.screens.RosterScreen$MUCStateHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$MUCStateHandler: void handleError(it.yup.xml.Element)>/@this
<it.yup.xmlstream.KXmlSerializer: void endDocument()>	<it.yup.xmlstream.KXmlSerializer: void endDocument()>/@this
<lampiro.LampiroMidlet: void pauseApp()>	<lampiro.LampiroMidlet: void pauseApp()>/@this
<lampiro.screens.RosterScreen: void captureMedia(java.lang.String,int)>	<lampiro.screens.RosterScreen: void captureMedia(java.lang.String,int)>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener2)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener2)>/@this
<lampiro.screens.RosterScreen$RegisterHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterHandler: void handleError(it.yup.xml.Element)>/@this
<it.yup.xmlstream.KXmlParser: void nextImpl()>	<it.yup.xmlstream.KXmlParser: void nextImpl()>/@this
<it.yup.xmlstream.BasicXmlStream: void nextInitializer()>	<it.yup.xmlstream.BasicXmlStream: void nextInitializer()>/@this
<it.yup.ui.UIMenu: void setSubmenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIMenu: void setSubmenu(it.yup.ui.UIMenu)>/@this
<lampiro.screens.AlbumScreen: void setupScreen()>	<lampiro.screens.AlbumScreen: void setupScreen()>/@this
<it.yup.ui.UICanvas: int getClipHeight()>	<it.yup.ui.UICanvas: int getClipHeight()>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void askSubscription(it.yup.xmpp.Contact)>	<it.yup.xmpp.XMPPClient$XmppListener: void askSubscription(it.yup.xmpp.Contact)>/@this
<it.yup.xmpp.packets.Presence: void <init>()>	<it.yup.xmpp.packets.Presence: void <init>()>/@this
<com.jcraft.jzlib.Deflate: int deflate_slow(int)>	<com.jcraft.jzlib.Deflate: int deflate_slow(int)>/@this
<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object)>	<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object)>/@this
<it.yup.ui.UIHLayout: void insert(it.yup.ui.UIItem,int,int,int)>	<it.yup.ui.UIHLayout: void insert(it.yup.ui.UIItem,int,int,int)>/@this
<it.yup.ui.UIPanel: void setSelectedIndex(int)>	<it.yup.ui.UIPanel: void setSelectedIndex(int)>/@this
<it.yup.ui.UILayout: boolean isDirty()>	<it.yup.ui.UILayout: boolean isDirty()>/@this
<it.yup.ui.UIAccordion: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem getSelectedItem()>/@this
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void updateContact(it.yup.xmpp.Contact,int)>	<it.yup.xmpp.XMPPClient$XmppListener: void updateContact(it.yup.xmpp.Contact,int)>/@this
<it.yup.ui.UIMenu: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>/@this
<it.yup.screens.DataResultScreen: void showCurrent()>	<it.yup.screens.DataResultScreen: void showCurrent()>/@this
<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int,java.util.Vector)>	<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int,java.util.Vector)>/@this
<lampiro.screens.ChatScreen$ConversationEntry: void <init>(java.lang.String,byte)>	<lampiro.screens.ChatScreen$ConversationEntry: void <init>(java.lang.String,byte)>/@this
<it.yup.ui.UIGauge: int getValue()>	<it.yup.ui.UIGauge: int getValue()>/@this
<it.yup.xmpp.Contact: java.lang.String getPrintableName()>	<it.yup.xmpp.Contact: java.lang.String getPrintableName()>/@this
<it.yup.xml.KXmlParser: void pushText(int,boolean)>	<it.yup.xml.KXmlParser: void pushText(int,boolean)>/@this
<it.yup.xmpp.Config: void setDefault(short,java.lang.String)>	<it.yup.xmpp.Config: void setDefault(short,java.lang.String)>/@this
<it.yup.ui.UIAccordion: void addSpareItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void addSpareItem(it.yup.ui.UIItem)>/@this
<lampiro.screens.MessageComposerScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.MessageComposerScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.xmlstream.SocketStream: void connectionFailed(it.yup.transport.BaseChannel)>	<it.yup.xmlstream.SocketStream: void connectionFailed(it.yup.transport.BaseChannel)>/@this
<it.yup.xmlstream.KXmlParser: void <init>()>	<it.yup.xmlstream.KXmlParser: void <init>()>/@this
<com.jcraft.jzlib.FilterInputStream: void reset()>	<com.jcraft.jzlib.FilterInputStream: void reset()>/@this
<it.yup.xmpp.Roster: void updateRosterItem(it.yup.xml.Element)>	<it.yup.xmpp.Roster: void updateRosterItem(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int)>/@this
<it.yup.xmlstream.KXmlSerializer: void writeEscaped(java.lang.String,int)>	<it.yup.xmlstream.KXmlSerializer: void writeEscaped(java.lang.String,int)>/@this
<it.yup.screens.RosterScreen: void paintSelection(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paintSelection(javax.microedition.lcdui.Graphics)>/@this
<com.jcraft.jzlib.ZStream: int deflateInit(int,int,boolean)>	<com.jcraft.jzlib.ZStream: int deflateInit(int,int,boolean)>/@this
<it.yup.xmpp.Roster$IQResultListener2: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener2: void handleError(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: boolean execute(int)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: boolean execute(int)>/@this
<it.yup.xml.KXmlParser: boolean isAttributeDefault(int)>	<it.yup.xml.KXmlParser: boolean isAttributeDefault(int)>/@this
<it.yup.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<it.yup.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>/@this
<it.yup.xmpp.BluendoXMLRPC: void close()>	<it.yup.xmpp.BluendoXMLRPC: void close()>/@this
<com.jcraft.jzlib.JZlib: void <init>()>	<com.jcraft.jzlib.JZlib: void <init>()>/@this
<it.yup.xml.KXmlParser: java.lang.String getAttributeType(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeType(int)>/@this
<it.yup.ui.UIVLayout: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIVLayout: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UICanvas: void pointerReleased(int,int)>	<it.yup.ui.UICanvas: void pointerReleased(int,int)>/@this
<it.yup.xmpp.Roster: it.yup.xmpp.Contact getContactByJid(java.lang.String)>	<it.yup.xmpp.Roster: it.yup.xmpp.Contact getContactByJid(java.lang.String)>/@this
<lampiro.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String,int)>	<lampiro.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String,int)>/@this
<it.yup.screens.RosterScreen: void paintRoster(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paintRoster(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UILabel: int getAnchorPoint()>	<it.yup.ui.UILabel: int getAnchorPoint()>/@this
<lampiro.screens.DataFormScreen: void setActions(int)>	<lampiro.screens.DataFormScreen: void setActions(int)>/@this
<it.yup.ui.UIItem: boolean isDirty()>	<it.yup.ui.UIItem: boolean isDirty()>/@this
<it.yup.ui.UIMenu: int append(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: int append(it.yup.ui.UIItem)>/@this
<it.yup.ui.UIScreen: void setMenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: void setMenu(it.yup.ui.UIMenu)>/@this
<it.yup.ui.UIScreen: void setGraphics(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIScreen: void setGraphics(javax.microedition.lcdui.Graphics)>/@this
<it.yup.ui.UITextPanel: boolean isNeedScrollbar()>	<it.yup.ui.UITextPanel: boolean isNeedScrollbar()>/@this
<lampiro.screens.SplashScreen: boolean keyPressed(int)>	<lampiro.screens.SplashScreen: boolean keyPressed(int)>/@this
<it.yup.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>	<it.yup.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>/@this
<it.yup.ui.UIMenu: java.util.Vector getItemList()>	<it.yup.ui.UIMenu: java.util.Vector getItemList()>/@this
<lampiro.screens.RegisterScreen: void placeWizard()>	<lampiro.screens.RegisterScreen: void placeWizard()>/@this
<lampiro.screens.RosterScreen: void ftNotification(boolean,java.lang.String,java.lang.String)>	<lampiro.screens.RosterScreen: void ftNotification(boolean,java.lang.String,java.lang.String)>/@this
<lampiro.screens.AddContactScreen$IQResultListener1: void handleError(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener1: void handleError(it.yup.xml.Element)>/@this
<it.yup.xml.KXmlSerializer: void cdsect(java.lang.String)>	<it.yup.xml.KXmlSerializer: void cdsect(java.lang.String)>/@this
<it.yup.xmlstream.BasicXmlStream: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.BasicXmlStream: void gotStreamEvent(java.lang.String,java.lang.Object)>/@this
<it.yup.ui.UICanvas: boolean close(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: boolean close(it.yup.ui.UIScreen)>/@this
<it.yup.ui.UIItem: void setFg_color(int)>	<it.yup.ui.UIItem: void setFg_color(int)>/@this
<it.yup.ui.UIPanel: void paintIthItem(javax.microedition.lcdui.Graphics,int,it.yup.ui.UIItem,int,int)>	<it.yup.ui.UIPanel: void paintIthItem(javax.microedition.lcdui.Graphics,int,it.yup.ui.UIItem,int,int)>/@this
<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>	<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>/@this
<it.yup.xmpp.Contact: void updatePresence(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: void updatePresence(it.yup.xmpp.packets.Presence)>/@this
<lampiro.screens.FTScreen$FTItem: void <init>(java.lang.Object,int,boolean,int,java.lang.String)>	<lampiro.screens.FTScreen$FTItem: void <init>(java.lang.Object,int,boolean,int,java.lang.String)>/@this
<it.yup.ui.UIMenu: it.yup.ui.UIMenu getSubmenu()>	<it.yup.ui.UIMenu: it.yup.ui.UIMenu getSubmenu()>/@this
<lampiro.screens.MUCScreen: boolean keyPressed(int)>	<lampiro.screens.MUCScreen: boolean keyPressed(int)>/@this
<lampiro.screens.RosterScreen: boolean reorganizeContact(it.yup.xmpp.Contact,int)>	<lampiro.screens.RosterScreen: boolean reorganizeContact(it.yup.xmpp.Contact,int)>/@this
<it.yup.screens.DataFormScreen: void itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.DataFormScreen: void itemStateChanged(javax.microedition.lcdui.Item)>/@this
<it.yup.xmlstream.StreamEventListener: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.StreamEventListener: void gotStreamEvent(java.lang.String,java.lang.Object)>/@this
<it.yup.ui.UITextField: java.lang.String getLabel()>	<it.yup.ui.UITextField: java.lang.String getLabel()>/@this
<com.jcraft.jzlib.ZStream: void flush_pending()>	<com.jcraft.jzlib.ZStream: void flush_pending()>/@this
<com.jcraft.jzlib.ZStream: int inflateSetDictionary(byte[],int)>	<com.jcraft.jzlib.ZStream: int inflateSetDictionary(byte[],int)>/@this
<com.jcraft.jzlib.Deflate: int deflate_stored(int)>	<com.jcraft.jzlib.Deflate: int deflate_stored(int)>/@this
<it.yup.ui.UILabel: int[] divideAP()>	<it.yup.ui.UILabel: int[] divideAP()>/@this
<it.yup.xml.Element: java.lang.String getAttribute(java.lang.String)>	<it.yup.xml.Element: java.lang.String getAttribute(java.lang.String)>/@this
<it.yup.ui.UIVLayout: void insert(it.yup.ui.UIItem,int,int,int)>	<it.yup.ui.UIVLayout: void insert(it.yup.ui.UIItem,int,int,int)>/@this
<it.yup.xmpp.FTSender$FTSEventHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>	<it.yup.xmpp.FTSender$FTSEventHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>/@this
<it.yup.xmpp.BluendoXMLRPC: void write(it.yup.xml.Element)>	<it.yup.xmpp.BluendoXMLRPC: void write(it.yup.xml.Element)>/@this
<it.yup.transport.BaseChannel: void <init>()>	<it.yup.transport.BaseChannel: void <init>()>/@this
<lampiro.screens.RosterScreen: void removeAllContacts()>	<lampiro.screens.RosterScreen: void removeAllContacts()>/@this
<lampiro.screens.RegisterScreen$1: void <init>(lampiro.screens.RegisterScreen)>	<lampiro.screens.RegisterScreen$1: void <init>(lampiro.screens.RegisterScreen)>/@this
<it.yup.transport.SocketChannel$UTFReader: void close()>	<it.yup.transport.SocketChannel$UTFReader: void close()>/@this
<it.yup.xmpp.IQResultListener: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.IQResultListener: void handleError(it.yup.xml.Element)>/@this
<it.yup.ui.UIAccordion: int getLabelColor()>	<it.yup.ui.UIAccordion: int getLabelColor()>/@this
<it.yup.util.RMSIndex: int physicalWrite(int,byte[],byte[],int,int,byte,it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: int physicalWrite(int,byte[],byte[],int,int,byte,it.yup.util.RMSIndex$Item)>/@this
<com.jcraft.jzlib.ZStream: int inflateInit(int)>	<com.jcraft.jzlib.ZStream: int inflateInit(int)>/@this
<it.yup.xml.BSerializer: void <init>()>	<it.yup.xml.BSerializer: void <init>()>/@this
<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int,boolean)>	<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int,boolean)>/@this
<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem,java.util.Vector)>	<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem,java.util.Vector)>/@this
<it.yup.xmpp.CommandExecutor: void display_internal()>	<it.yup.xmpp.CommandExecutor: void display_internal()>/@this
<com.jcraft.jzlib.ZStreamException: void <init>()>	<com.jcraft.jzlib.ZStreamException: void <init>()>/@this
<it.yup.xmpp.SimpleDataFormExecutor: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.SimpleDataFormExecutor: void <init>(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.Deflate: void send_code(int,short[])>	<com.jcraft.jzlib.Deflate: void send_code(int,short[])>/@this
<com.jcraft.jzlib.Deflate: void bi_flush()>	<com.jcraft.jzlib.Deflate: void bi_flush()>/@this
<lampiro.screens.ShowMMScreen: void init()>	<lampiro.screens.ShowMMScreen: void init()>/@this
<it.yup.xml.KXmlSerializer: void processingInstruction(java.lang.String)>	<it.yup.xml.KXmlSerializer: void processingInstruction(java.lang.String)>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void connectionLost()>	<it.yup.xmpp.XMPPClient$XmppListener: void connectionLost()>/@this
<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster)>	<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster)>/@this
<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,int)>	<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,int)>/@this
<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence(java.lang.String)>	<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence(java.lang.String)>/@this
<it.yup.ui.UICombobox: java.lang.String[] getSelectedStrings()>	<it.yup.ui.UICombobox: java.lang.String[] getSelectedStrings()>/@this
<lampiro.screens.RosterScreen$MUCStateHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$MUCStateHandler: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.Contact: int mapAvailability(java.lang.String)>	<it.yup.xmpp.Contact: int mapAvailability(java.lang.String)>/@this
<it.yup.xml.Element: void setAttribute(java.lang.String,java.lang.String)>	<it.yup.xml.Element: void setAttribute(java.lang.String,java.lang.String)>/@this
<com.jcraft.jzlib.ZOutputStream: long getTotalOut()>	<com.jcraft.jzlib.ZOutputStream: long getTotalOut()>/@this
<it.yup.ui.UIScreen: void invalidatePopups(it.yup.ui.UIMenu,int,int,int,int)>	<it.yup.ui.UIScreen: void invalidatePopups(it.yup.ui.UIMenu,int,int,int,int)>/@this
<com.jcraft.jzlib.Deflate: int build_bl_tree()>	<com.jcraft.jzlib.Deflate: int build_bl_tree()>/@this
<it.yup.ui.UIItem: void <init>()>	<it.yup.ui.UIItem: void <init>()>/@this
<lampiro.screens.FTScreen: boolean keyPressed(int)>	<lampiro.screens.FTScreen: boolean keyPressed(int)>/@this
<it.yup.xmpp.CommandExecutor: void init(java.lang.String[],java.lang.String)>	<it.yup.xmpp.CommandExecutor: void init(java.lang.String[],java.lang.String)>/@this
<it.yup.xmlstream.Initializer: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.Initializer: void start(it.yup.xmlstream.BasicXmlStream)>/@this
<it.yup.xml.KXmlParser: char[] getTextCharacters(int[])>	<it.yup.xml.KXmlParser: char[] getTextCharacters(int[])>/@this
<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIAccordion: int getPanelSize(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: int getPanelSize(it.yup.ui.UIItem)>/@this
<it.yup.xmlstream.SocketStream: void restart()>	<it.yup.xmlstream.SocketStream: void restart()>/@this
<it.yup.ui.UITextPanel: void setContainer(it.yup.ui.UIItem)>	<it.yup.ui.UITextPanel: void setContainer(it.yup.ui.UIItem)>/@this
<it.yup.xmlstream.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void rosterXsubscription(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$XmppListener: void rosterXsubscription(it.yup.xml.Element)>/@this
<it.yup.xmlstream.BasicXmlStream: void promotePacket(it.yup.xml.Element)>	<it.yup.xmlstream.BasicXmlStream: void promotePacket(it.yup.xml.Element)>/@this
<it.yup.ui.UIRadioButtons$UIRadioButton: void <init>(it.yup.ui.UIRadioButtons,javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UIRadioButtons$UIRadioButton: void <init>(it.yup.ui.UIRadioButtons,javax.microedition.lcdui.Image,java.lang.String)>/@this
<it.yup.xmpp.Roster$IQResultListener2: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener2: void handleResult(it.yup.xml.Element)>/@this
<lampiro.screens.InnerMMScreen: java.lang.String getVideoRes(boolean)>	<lampiro.screens.InnerMMScreen: java.lang.String getVideoRes(boolean)>/@this
<it.yup.xmpp.XMPPClient: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient: void gotStreamEvent(java.lang.String,java.lang.Object)>/@this
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleError(it.yup.xml.Element)>/@this
<lampiro.screens.ChatScreen$ForwardScreen: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>	<lampiro.screens.ChatScreen$ForwardScreen: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>/@this
<it.yup.ui.UILabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>	<it.yup.ui.UILabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>/@this
<lampiro.screens.DataFormScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.DataFormScreen: void itemAction(it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen: boolean askRepaint()>	<lampiro.screens.RosterScreen: boolean askRepaint()>/@this
<lampiro.screens.AddContactScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.Contact: java.lang.String getFullJid()>	<it.yup.xmpp.Contact: java.lang.String getFullJid()>/@this
<it.yup.ui.UIScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.tests.RMSTestMidlet: void testFuncs(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testFuncs(it.yup.util.RMSIndex)>/@this
<it.yup.ui.UIItem: java.lang.Object getStatus()>	<it.yup.ui.UIItem: java.lang.Object getStatus()>/@this
<it.yup.ui.UISeparator: void <init>(int,int)>	<it.yup.ui.UISeparator: void <init>(int,int)>/@this
<it.yup.xmlstream.KXmlParser: void error(java.lang.String)>	<it.yup.xmlstream.KXmlParser: void error(java.lang.String)>/@this
<it.yup.ui.UICheckbox: boolean isChecked()>	<it.yup.ui.UICheckbox: boolean isChecked()>/@this
<it.yup.ui.UIMenu: void setWidth(int)>	<it.yup.ui.UIMenu: void setWidth(int)>/@this
<it.yup.xml.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>	<it.yup.xml.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>/@this
<it.yup.ui.UIItem: int getWidth()>	<it.yup.ui.UIItem: int getWidth()>/@this
<it.yup.screens.RosterScreen: void removeAllContacts()>	<it.yup.screens.RosterScreen: void removeAllContacts()>/@this
<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex)>/@this
<lampiro.screens.AboutScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.AboutScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.screens.OptionsScreen: void <init>()>	<it.yup.screens.OptionsScreen: void <init>()>/@this
<it.yup.ui.UIScreen: void itemAction(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.ui.UILabel: boolean isFlip()>	<it.yup.ui.UILabel: boolean isFlip()>/@this
<it.yup.transport.TransportListener: void connectionLost(it.yup.transport.BaseChannel)>	<it.yup.transport.TransportListener: void connectionLost(it.yup.transport.BaseChannel)>/@this
<it.yup.ui.Semaphore: void <init>(long)>	<it.yup.ui.Semaphore: void <init>(long)>/@this
<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>	<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>/@this
<it.yup.tests.RMSTestMidlet$TestForm: void <init>(it.yup.tests.RMSTestMidlet,java.lang.String)>	<it.yup.tests.RMSTestMidlet$TestForm: void <init>(it.yup.tests.RMSTestMidlet,java.lang.String)>/@this
<it.yup.xmpp.Roster: void readFromStorage()>	<it.yup.xmpp.Roster: void readFromStorage()>/@this
<it.yup.xmlstream.KXmlParser: int nextTag()>	<it.yup.xmlstream.KXmlParser: int nextTag()>/@this
<it.yup.ui.UIAccordion: void clearPanel(it.yup.ui.UILabel)>	<it.yup.ui.UIAccordion: void clearPanel(it.yup.ui.UILabel)>/@this
<it.yup.ui.UITextField: boolean isExpandable()>	<it.yup.ui.UITextField: boolean isExpandable()>/@this
<it.yup.ui.UIMenu: boolean remove(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: boolean remove(it.yup.ui.UIItem)>/@this
<it.yup.ui.UILabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>	<it.yup.ui.UILabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String nextText()>	<it.yup.xmlstream.KXmlParser: java.lang.String nextText()>/@this
<it.yup.ui.UIMenu: int traverseFocusable(int,boolean)>	<it.yup.ui.UIMenu: int traverseFocusable(int,boolean)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespaceUri(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespaceUri(int)>/@this
<lampiro.screens.SendMMScreen$UploadHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>/@this
<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender)>/@this
<it.yup.xmlstream.BasicXmlStream: void processFeatures(it.yup.xml.Element[])>	<it.yup.xmlstream.BasicXmlStream: void processFeatures(it.yup.xml.Element[])>/@this
<it.yup.screens.ContactInfoScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.ContactInfoScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>/@this
<it.yup.util.MetaVector: void <init>()>	<it.yup.util.MetaVector: void <init>()>/@this
<it.yup.xmlstream.KXmlParser: int getLineNumber()>	<it.yup.xmlstream.KXmlParser: int getLineNumber()>/@this
<lampiro.screens.RosterScreen: void commandExecuted(java.lang.Object)>	<lampiro.screens.RosterScreen: void commandExecuted(java.lang.Object)>/@this
<it.yup.tests.RMSTestMidlet: void startApp()>	<it.yup.tests.RMSTestMidlet: void startApp()>/@this
<it.yup.ui.UIPanel: int getSelectedIndex()>	<it.yup.ui.UIPanel: int getSelectedIndex()>/@this
<it.yup.xml.KXmlParser: int getColumnNumber()>	<it.yup.xml.KXmlParser: int getColumnNumber()>/@this
<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>	<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>/@this
<it.yup.xmlstream.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>	<it.yup.xmlstream.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>/@this
<lampiro.screens.SendMMScreen$UploadHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>/@this
<it.yup.ui.UIItem: void setContainer(it.yup.ui.UIIContainer)>	<it.yup.ui.UIItem: void setContainer(it.yup.ui.UIIContainer)>/@this
<it.yup.util.MetaVector: boolean removeElement(java.lang.Object)>	<it.yup.util.MetaVector: boolean removeElement(java.lang.Object)>/@this
<lampiro.screens.GatewayRegisterScreen: void packetReceived(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.AddContactScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.AddContactScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>/@this
<it.yup.xmpp.packets.Stanza: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.Stanza: void <init>(it.yup.xml.Element)>/@this
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>/@this
<it.yup.xmpp.packets.DataForm: void parseItem(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm: void parseItem(it.yup.xml.Element)>/@this
<lampiro.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>/@this
<it.yup.xmpp.FTSender$PacketListener2: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$PacketListener2: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.ChatScreen: void updateResource()>	<lampiro.screens.ChatScreen: void updateResource()>/@this
<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image,java.lang.String)>/@this
<com.jcraft.jzlib.Deflate: void put_byte(byte)>	<com.jcraft.jzlib.Deflate: void put_byte(byte)>/@this
<lampiro.screens.RosterScreen$RegisterWaitScreen: void stopWaiting()>	<lampiro.screens.RosterScreen$RegisterWaitScreen: void stopWaiting()>/@this
<it.yup.ui.UIScreen: void swap(int,int)>	<it.yup.ui.UIScreen: void swap(int,int)>/@this
<it.yup.ui.UIAccordion: void closeLabel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void closeLabel(it.yup.ui.UIItem)>/@this
<it.yup.transport.BaseChannel: void sendContent(byte[])>	<it.yup.transport.BaseChannel: void sendContent(byte[])>/@this
<it.yup.ui.UIScreen: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>/@this
<it.yup.xmlstream.Element: it.yup.xmlstream.Element addElement(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element addElement(java.lang.String,java.lang.String)>/@this
<it.yup.screens.AddContactScreen: void <init>()>	<it.yup.screens.AddContactScreen: void <init>()>/@this
<it.yup.xmpp.Roster: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.Roster: void <init>(it.yup.xmpp.XMPPClient)>/@this
<it.yup.xmlstream.Element: java.lang.Object clone()>	<it.yup.xmlstream.Element: java.lang.Object clone()>/@this
<it.yup.ui.UICheckbox: void setChecked(boolean)>	<it.yup.ui.UICheckbox: void setChecked(boolean)>/@this
<com.jcraft.jzlib.FilterInputStream: int read(byte[],int,int)>	<com.jcraft.jzlib.FilterInputStream: int read(byte[],int,int)>/@this
<lampiro.screens.RosterScreen: void firstLoginIntro()>	<lampiro.screens.RosterScreen: void firstLoginIntro()>/@this
<it.yup.ui.UITextField: void setExpandable(boolean)>	<it.yup.ui.UITextField: void setExpandable(boolean)>/@this
<it.yup.ui.UIMenu: boolean isDirty()>	<it.yup.ui.UIMenu: boolean isDirty()>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void showCommand(java.lang.Object)>	<it.yup.xmpp.XMPPClient$XmppListener: void showCommand(java.lang.Object)>/@this
<it.yup.ui.UIScreen: void removeAll()>	<it.yup.ui.UIScreen: void removeAll()>/@this
<it.yup.transport.BaseChannel: void close()>	<it.yup.transport.BaseChannel: void close()>/@this
<it.yup.screens.DeleteContactAlert: void <init>(it.yup.xmpp.Contact)>	<it.yup.screens.DeleteContactAlert: void <init>(it.yup.xmpp.Contact)>/@this
<it.yup.screens.ScreenSaver: void showNotify()>	<it.yup.screens.ScreenSaver: void showNotify()>/@this
<it.yup.ui.UIMenu: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: boolean contains(it.yup.ui.UIItem)>/@this
<it.yup.ui.UIItem: void setSelected(boolean)>	<it.yup.ui.UIItem: void setSelected(boolean)>/@this
<com.jcraft.jzlib.ZOutputStream: int getFlushMode()>	<com.jcraft.jzlib.ZOutputStream: int getFlushMode()>/@this
<it.yup.ui.UICanvas: void show(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void show(it.yup.ui.UIScreen)>/@this
<it.yup.xmlstream.KXmlParser: int getAttributeCount()>	<it.yup.xmlstream.KXmlParser: int getAttributeCount()>/@this
<lampiro.screens.ChatScreen$UICutLabel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.ChatScreen$UICutLabel: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.ui.UIScreen: java.util.Vector getPopupList()>	<it.yup.ui.UIScreen: java.util.Vector getPopupList()>/@this
<it.yup.ui.UIScreen: it.yup.ui.UIItem remove(int)>	<it.yup.ui.UIScreen: it.yup.ui.UIItem remove(int)>/@this
<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>/@this
<com.jcraft.jzlib.Deflate: void lm_init()>	<com.jcraft.jzlib.Deflate: void lm_init()>/@this
<com.jcraft.jzlib.Deflate: void send_bits(int,int)>	<com.jcraft.jzlib.Deflate: void send_bits(int,int)>/@this
<it.yup.xmlstream.KXmlParser: int parseLegacy(boolean)>	<it.yup.xmlstream.KXmlParser: int parseLegacy(boolean)>/@this
<it.yup.xmpp.FTSender$FTSEventHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>/@this
<lampiro.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>	<lampiro.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>/@this
<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen)>	<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen)>/@this
<it.yup.ui.UIUtils: void <init>()>	<it.yup.ui.UIUtils: void <init>()>/@this
<it.yup.ui.UIItem: void setLayoutHeight(int)>	<it.yup.ui.UIItem: void setLayoutHeight(int)>/@this
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIVLayout: void <init>(int,int)>	<it.yup.ui.UIVLayout: void <init>(int,int)>/@this
<it.yup.ui.UIPanel: boolean isModal()>	<it.yup.ui.UIPanel: boolean isModal()>/@this
<it.yup.util.RMSIndex: byte[] load(byte[])>	<it.yup.util.RMSIndex: byte[] load(byte[])>/@this
<com.jcraft.jzlib.ZStream: int deflateInit(int,boolean)>	<com.jcraft.jzlib.ZStream: int deflateInit(int,boolean)>/@this
<it.yup.ui.UIMenu: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UIMenu: void setScreen(it.yup.ui.UIScreen)>/@this
<it.yup.ui.UIPanel: int getMaxHeight()>	<it.yup.ui.UIPanel: int getMaxHeight()>/@this
<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge,it.yup.ui.UIGauge$Ticker)>	<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge,it.yup.ui.UIGauge$Ticker)>/@this
<lampiro.screens.RosterScreen$RegisterWaitScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen$RegisterWaitScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UIItem: int getType()>	<it.yup.ui.UIItem: int getType()>/@this
<it.yup.ui.UIItem: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UIItem: void setScreen(it.yup.ui.UIScreen)>/@this
<it.yup.ui.UICombobox: boolean isMultiChoice()>	<it.yup.ui.UICombobox: boolean isMultiChoice()>/@this
<lampiro.screens.MUCScreen: boolean updateConversation()>	<lampiro.screens.MUCScreen: boolean updateConversation()>/@this
<com.jcraft.jzlib.InfCodes: int proc(com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.InfCodes: int proc(com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream,int)>/@this
<lampiro.LampiroMidlet: void startApp()>	<lampiro.LampiroMidlet: void startApp()>/@this
<lampiro.screens.RosterScreen$UIGroup: boolean checkRemoval(lampiro.screens.RosterScreen$UIContact)>	<lampiro.screens.RosterScreen$UIGroup: boolean checkRemoval(lampiro.screens.RosterScreen$UIContact)>/@this
<it.yup.xmpp.XMPPClient: void closeStream()>	<it.yup.xmpp.XMPPClient: void closeStream()>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void commandExecuted(java.lang.Object)>	<it.yup.xmpp.XMPPClient$XmppListener: void commandExecuted(java.lang.Object)>/@this
<com.jcraft.jzlib.Deflate: void tr_init()>	<com.jcraft.jzlib.Deflate: void tr_init()>/@this
<it.yup.ui.UIMenu: void removeAll()>	<it.yup.ui.UIMenu: void removeAll()>/@this
<it.yup.xmlstream.KXmlParser: int peek(int)>	<it.yup.xmlstream.KXmlParser: int peek(int)>/@this
<it.yup.xmpp.FTReceiver$OpenListener: void <init>(it.yup.xmpp.FTReceiver)>	<it.yup.xmpp.FTReceiver$OpenListener: void <init>(it.yup.xmpp.FTReceiver)>/@this
<it.yup.ui.UILayout: it.yup.ui.UIItem getItem(int)>	<it.yup.ui.UILayout: it.yup.ui.UIItem getItem(int)>/@this
<com.jcraft.jzlib.ZInputStream: void setFlushMode(int)>	<com.jcraft.jzlib.ZInputStream: void setFlushMode(int)>/@this
<it.yup.xmpp.FTSender$PacketListener3: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$PacketListener3: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xml.KXmlParser: void skipSubTree()>	<it.yup.xml.KXmlParser: void skipSubTree()>/@this
<it.yup.ui.UIGauge: boolean isInteractive()>	<it.yup.ui.UIGauge: boolean isInteractive()>/@this
<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener)>/@this
<it.yup.xmlstream.AccountRegistration: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.AccountRegistration: void start(it.yup.xmlstream.BasicXmlStream)>/@this
<it.yup.ui.UICombobox: void setSelectedFlags(boolean[])>	<it.yup.ui.UICombobox: void setSelectedFlags(boolean[])>/@this
<it.yup.xml.KXmlParser: java.lang.String getName()>	<it.yup.xml.KXmlParser: java.lang.String getName()>/@this
<it.yup.ui.UIButton: void <init>(java.lang.String)>	<it.yup.ui.UIButton: void <init>(java.lang.String)>/@this
<lampiro.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>	<lampiro.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>/@this
<it.yup.xmpp.Config: void saveToStorage()>	<it.yup.xmpp.Config: void saveToStorage()>/@this
<it.yup.xmpp.FTSender$IQResultListener4: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener4: void handleError(it.yup.xml.Element)>/@this
<it.yup.xmpp.CommandExecutor: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.CommandExecutor: void packetReceived(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.ZStreamException: void <init>(java.lang.String)>	<com.jcraft.jzlib.ZStreamException: void <init>(java.lang.String)>/@this
<it.yup.transport.BaseChannel$Sender: void run()>	<it.yup.transport.BaseChannel$Sender: void run()>/@this
<it.yup.xml.KXmlParser: int getEventType()>	<it.yup.xml.KXmlParser: int getEventType()>/@this
<it.yup.ui.UIMenu: void setAbsoluteY(int)>	<it.yup.ui.UIMenu: void setAbsoluteY(int)>/@this
<lampiro.screens.ChatScreen: boolean isPrintable(int)>	<lampiro.screens.ChatScreen: boolean isPrintable(int)>/@this
<it.yup.screens.TaskListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.TaskListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.screens.SubscriptionConfirmAlert: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable)>	<it.yup.screens.SubscriptionConfirmAlert: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable)>/@this
<it.yup.xmpp.packets.DataForm$Field: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm$Field: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xml.Element)>/@this
<it.yup.util.MetaVector: void setElementAt(java.lang.Object,int)>	<it.yup.util.MetaVector: void setElementAt(java.lang.Object,int)>/@this
<it.yup.transport.SocketChannel$UTFReader: int read()>	<it.yup.transport.SocketChannel$UTFReader: int read()>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getPrefix()>	<it.yup.xmlstream.KXmlParser: java.lang.String getPrefix()>/@this
<lampiro.screens.RegisterScreen$1: void run()>	<lampiro.screens.RegisterScreen$1: void run()>/@this
<it.yup.screens.RosterScreen: void playSmartTone()>	<it.yup.screens.RosterScreen: void playSmartTone()>/@this
<it.yup.xmpp.XMPPClient: void startClient()>	<it.yup.xmpp.XMPPClient: void startClient()>/@this
<it.yup.screens.MessageComposerScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.MessageComposerScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>/@this
<lampiro.screens.RosterScreen: void playSmartTone()>	<lampiro.screens.RosterScreen: void playSmartTone()>/@this
<it.yup.xmlstream.KXmlParser: void skip()>	<it.yup.xmlstream.KXmlParser: void skip()>/@this
<it.yup.xmpp.XMPPClient: it.yup.xmlstream.BasicXmlStream createStream(boolean,boolean)>	<it.yup.xmpp.XMPPClient: it.yup.xmlstream.BasicXmlStream createStream(boolean,boolean)>/@this
<it.yup.ui.UIAccordion: int getSepColor()>	<it.yup.ui.UIAccordion: int getSepColor()>/@this
<it.yup.ui.UIPanel: void setListMode(boolean)>	<it.yup.ui.UIPanel: void setListMode(boolean)>/@this
<lampiro.screens.RosterScreen: void showCommand(java.lang.Object)>	<lampiro.screens.RosterScreen: void showCommand(java.lang.Object)>/@this
<it.yup.ui.UIMenu: void setDirty(boolean)>	<it.yup.ui.UIMenu: void setDirty(boolean)>/@this
<it.yup.xmpp.Config: java.lang.String getProperty(short)>	<it.yup.xmpp.Config: java.lang.String getProperty(short)>/@this
<it.yup.xml.KXmlParser: java.lang.String getInputEncoding()>	<it.yup.xml.KXmlParser: java.lang.String getInputEncoding()>/@this
<it.yup.screens.DataFormScreen: void fillForm()>	<it.yup.screens.DataFormScreen: void fillForm()>/@this
<it.yup.screens.RegisterScreen: java.lang.String get_server(java.lang.String)>	<it.yup.screens.RegisterScreen: java.lang.String get_server(java.lang.String)>/@this
<lampiro.screens.ShowMMScreen: void playAudio()>	<lampiro.screens.ShowMMScreen: void playAudio()>/@this
<it.yup.ui.UIAccordion$AccordionItem: it.yup.ui.UILabel getImgLabel()>	<it.yup.ui.UIAccordion$AccordionItem: it.yup.ui.UILabel getImgLabel()>/@this
<it.yup.xmpp.IqManager: void addRegistration(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>	<it.yup.xmpp.IqManager: void addRegistration(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>/@this
<it.yup.ui.UIMenu: it.yup.ui.UIItem remove(int)>	<it.yup.ui.UIMenu: it.yup.ui.UIItem remove(int)>/@this
<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String)>	<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String)>/@this
<it.yup.util.LogConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.LogConsumer: void gotMessage(java.lang.String,int)>/@this
<it.yup.ui.UILabel: boolean isWrappable()>	<it.yup.ui.UILabel: boolean isWrappable()>/@this
<it.yup.util.RMSIndex$RecordType: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$RecordType: void <init>(it.yup.util.RMSIndex)>/@this
<lampiro.screens.SendMMScreen: void <init>(byte[],java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>	<lampiro.screens.SendMMScreen: void <init>(byte[],java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>/@this
<it.yup.util.XMPPConsumer: void run()>	<it.yup.util.XMPPConsumer: void run()>/@this
<it.yup.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>	<it.yup.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen$MUCStateHandler: void <init>(it.yup.xmpp.IQResultListener)>	<lampiro.screens.RosterScreen$MUCStateHandler: void <init>(it.yup.xmpp.IQResultListener)>/@this
<it.yup.xmpp.XMPPClient: java.lang.String getCapVer()>	<it.yup.xmpp.XMPPClient: java.lang.String getCapVer()>/@this
<lampiro.screens.ContactInfoScreen$1: void <init>(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen$1: void <init>(lampiro.screens.ContactInfoScreen)>/@this
<it.yup.ui.UIScreen: it.yup.ui.UICanvas getCanvas()>	<it.yup.ui.UIScreen: it.yup.ui.UICanvas getCanvas()>/@this
<it.yup.xmpp.XMPPClient: it.yup.xmpp.Contact getMyContact()>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.Contact getMyContact()>/@this
<it.yup.screens.DataFormScreen: void setShowAction(javax.microedition.lcdui.Command)>	<it.yup.screens.DataFormScreen: void setShowAction(javax.microedition.lcdui.Command)>/@this
<it.yup.xml.Element: void addElement(it.yup.xml.Element)>	<it.yup.xml.Element: void addElement(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.ZStream: void free()>	<com.jcraft.jzlib.ZStream: void free()>/@this
<it.yup.xml.KXmlParser: java.lang.String getAttributeName(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeName(int)>/@this
<lampiro.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$AdHocCommandsHandler)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$AdHocCommandsHandler)>/@this
<com.jcraft.jzlib.InfTree: int huft_build(int[],int,int,int,int[],int[],int[],int[],int[],int[],int[])>	<com.jcraft.jzlib.InfTree: int huft_build(int[],int,int,int,int[],int[],int[],int[],int[],int[],int[])>/@this
<lampiro.screens.RosterScreen: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>/@this
<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemCommandListener1)>	<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemCommandListener1)>/@this
<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel)>	<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel)>/@this
<it.yup.ui.UIButton: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIButton: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<com.jcraft.jzlib.Deflate: void init_block()>	<com.jcraft.jzlib.Deflate: void init_block()>/@this
<it.yup.xml.KXmlSerializer: void setOutput(java.io.Writer)>	<it.yup.xml.KXmlSerializer: void setOutput(java.io.Writer)>/@this
<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>/@this
<it.yup.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>/@this
<lampiro.screens.TaskListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.TaskListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.RosterScreen: void packetReceived(it.yup.xml.Element)>	<lampiro.screens.RosterScreen: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen: void chatWithContact(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.RosterScreen: void chatWithContact(it.yup.xmpp.Contact,java.lang.String)>/@this
<it.yup.xmpp.XMPPClient$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$PacketListener1: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xml.KXmlParser: void push(int)>	<it.yup.xml.KXmlParser: void push(int)>/@this
<it.yup.ui.UIRadioButtons: void setSelectedIndex(int)>	<it.yup.ui.UIRadioButtons: void setSelectedIndex(int)>/@this
<it.yup.ui.UIAccordion: void updateItemsColor()>	<it.yup.ui.UIAccordion: void updateItemsColor()>/@this
<lampiro.screens.ChatScreen: boolean updateConversation()>	<lampiro.screens.ChatScreen: boolean updateConversation()>/@this
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen)>/@this
<it.yup.ui.UILabel: void computeTextLines(javax.microedition.lcdui.Font,int)>	<it.yup.ui.UILabel: void computeTextLines(javax.microedition.lcdui.Font,int)>/@this
<it.yup.xmpp.Roster$IQResultListener1: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener1: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.FTSender$IQResultListener2: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener2: void handleResult(it.yup.xml.Element)>/@this
<com.jcraft.jzlib.ZStream: int deflateSetDictionary(byte[],int)>	<com.jcraft.jzlib.ZStream: int deflateSetDictionary(byte[],int)>/@this
<it.yup.ui.UIItem: it.yup.ui.UIIContainer getContainer()>	<it.yup.ui.UIItem: it.yup.ui.UIIContainer getContainer()>/@this
<it.yup.ui.UICombobox: boolean isSelected(int)>	<it.yup.ui.UICombobox: boolean isSelected(int)>/@this
<it.yup.xmpp.Task: java.lang.String getFrom()>	<it.yup.xmpp.Task: java.lang.String getFrom()>/@this
<it.yup.xmlstream.KXmlSerializer: java.lang.String getNamespace()>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getNamespace()>/@this
<it.yup.tests.RMSTestMidlet: void destroyApp(boolean)>	<it.yup.tests.RMSTestMidlet: void destroyApp(boolean)>/@this
<it.yup.ui.UILayout: void setSelectedIndex(int)>	<it.yup.ui.UILayout: void setSelectedIndex(int)>/@this
<it.yup.ui.UITextPanel: java.lang.String getText()>	<it.yup.ui.UITextPanel: java.lang.String getText()>/@this
<it.yup.ui.UIScreen: boolean remove(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: boolean remove(it.yup.ui.UIItem)>/@this
<lampiro.screens.ChatScreen$UICutLabel: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>	<lampiro.screens.ChatScreen$UICutLabel: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>/@this
<it.yup.xmlstream.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>	<it.yup.xmlstream.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>/@this
<it.yup.xmlstream.Element: void _parse(org.xmlpull.v1.XmlPullParser)>	<it.yup.xmlstream.Element: void _parse(org.xmlpull.v1.XmlPullParser)>/@this
<it.yup.ui.UIScreen: boolean paint(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIScreen: boolean paint(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xmpp.XMPPClient: void <init>()>	<it.yup.xmpp.XMPPClient: void <init>()>/@this
<it.yup.ui.UIMenu: void <init>(java.lang.String)>	<it.yup.ui.UIMenu: void <init>(java.lang.String)>/@this
<it.yup.ui.UIAccordion: void openLabel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void openLabel(it.yup.ui.UIItem)>/@this
<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int)>	<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int)>/@this
<it.yup.xmlstream.BasicXmlStream$ListenerRegistration: void <init>(it.yup.xmlstream.EventQuery,java.lang.Object,boolean)>	<it.yup.xmlstream.BasicXmlStream$ListenerRegistration: void <init>(it.yup.xmlstream.EventQuery,java.lang.Object,boolean)>/@this
<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String,it.yup.xmpp.Roster$IQResultListener3)>	<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String,it.yup.xmpp.Roster$IQResultListener3)>/@this
<it.yup.util.MetaVector: java.util.Enumeration superEnumeration()>	<it.yup.util.MetaVector: java.util.Enumeration superEnumeration()>/@this
<it.yup.xml.Element: it.yup.xml.Element removeChild(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element removeChild(java.lang.String,java.lang.String)>/@this
<lampiro.screens.DataResultScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.DataResultScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.RegisterScreen: java.lang.String getUser(java.lang.String)>	<lampiro.screens.RegisterScreen: java.lang.String getUser(java.lang.String)>/@this
<lampiro.screens.RosterScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DataFormHandler)>	<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DataFormHandler)>/@this
<it.yup.ui.UITextPanel: void setFont(javax.microedition.lcdui.Font)>	<it.yup.ui.UITextPanel: void setFont(javax.microedition.lcdui.Font)>/@this
<com.jcraft.jzlib.InfCodes: int inflate_fast(int,int,int[],int,int[],int,com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfCodes: int inflate_fast(int,int,int[],int,int[],int,com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream)>/@this
<it.yup.ui.UIMenu: int indexOf(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: int indexOf(it.yup.ui.UIItem)>/@this
<it.yup.xmpp.XMPPClient$TimerTask1: void run()>	<it.yup.xmpp.XMPPClient$TimerTask1: void run()>/@this
<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex,it.yup.util.RMSIndex$DefaultUTF8Comparator)>	<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex,it.yup.util.RMSIndex$DefaultUTF8Comparator)>/@this
<it.yup.ui.UITextField: void setSelected(boolean)>	<it.yup.ui.UITextField: void setSelected(boolean)>/@this
<it.yup.xmpp.IqManager: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.IqManager: void handleResult(it.yup.xml.Element)>/@this
<it.yup.ui.UIScreen: void setFreezed(boolean)>	<it.yup.ui.UIScreen: void setFreezed(boolean)>/@this
<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemStateListener1)>	<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemStateListener1)>/@this
<it.yup.ui.UIMenu: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: void setSelectedItem(it.yup.ui.UIItem)>/@this
<it.yup.screens.RosterScreen: void connectionLost()>	<it.yup.screens.RosterScreen: void connectionLost()>/@this
<it.yup.tests.RMSTestMidlet: void <init>()>	<it.yup.tests.RMSTestMidlet: void <init>()>/@this
<it.yup.transport.SocketChannel: java.io.OutputStream getOutputStream()>	<it.yup.transport.SocketChannel: java.io.OutputStream getOutputStream()>/@this
<it.yup.xml.KXmlParser: int getDepth()>	<it.yup.xml.KXmlParser: int getDepth()>/@this
<lampiro.screens.RosterScreen$Thread1: void run()>	<lampiro.screens.RosterScreen$Thread1: void run()>/@this
<it.yup.xmpp.Config: it.yup.xml.Element getCapabilities(java.lang.String,java.lang.String)>	<it.yup.xmpp.Config: it.yup.xml.Element getCapabilities(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIScreen: boolean keyPressed(int)>	<it.yup.ui.UIScreen: boolean keyPressed(int)>/@this
<it.yup.xml.KXmlParser: java.lang.String getText()>	<it.yup.xml.KXmlParser: java.lang.String getText()>/@this
<lampiro.screens.CommandListScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.CommandListScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.ui.UIHLayout: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIHLayout: int getHeight(javax.microedition.lcdui.Graphics)>/@this
<it.yup.xmlstream.Element: it.yup.xmlstream.Element getChildByName(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element getChildByName(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UICombobox$UIComboScreen: void updateFilter()>	<it.yup.ui.UICombobox$UIComboScreen: void updateFilter()>/@this
<it.yup.ui.UIMenu: void clear()>	<it.yup.ui.UIMenu: void clear()>/@this
<it.yup.ui.UIScreen: void showNotify()>	<it.yup.ui.UIScreen: void showNotify()>/@this
<com.jcraft.jzlib.Inflate: int inflate(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Inflate: int inflate(com.jcraft.jzlib.ZStream,int)>/@this
<it.yup.xmpp.XMPPClient$DataFormHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$DataFormHandler: void packetReceived(it.yup.xml.Element)>/@this
<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int,lampiro.screens.RosterScreen$Thread1)>	<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int,lampiro.screens.RosterScreen$Thread1)>/@this
<it.yup.xmpp.Roster$IQResultListener3: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener3: void handleResult(it.yup.xml.Element)>/@this
<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender)>/@this
<lampiro.screens.SplashScreen$UISplashTextField: void <init>(lampiro.screens.SplashScreen,java.lang.String,java.lang.String,int,int)>	<lampiro.screens.SplashScreen$UISplashTextField: void <init>(lampiro.screens.SplashScreen,java.lang.String,java.lang.String,int,int)>/@this
<it.yup.xmpp.BluendoXMLRPC: void flush()>	<it.yup.xmpp.BluendoXMLRPC: void flush()>/@this
<it.yup.ui.UICheckbox: boolean keyPressed(int)>	<it.yup.ui.UICheckbox: boolean keyPressed(int)>/@this
<it.yup.screens.RosterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.RosterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.xml.Element: java.lang.String getText()>	<it.yup.xml.Element: java.lang.String getText()>/@this
<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object,int)>	<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object,int)>/@this
<it.yup.ui.UICanvas: void pointerPressed(int,int)>	<it.yup.ui.UICanvas: void pointerPressed(int,int)>/@this
<it.yup.screens.ChatScreen: void showNotify()>	<it.yup.screens.ChatScreen: void showNotify()>/@this
<it.yup.xmpp.packets.Message: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmpp.packets.Message: void <init>(java.lang.String,java.lang.String)>/@this
<it.yup.xmpp.XMPPClient: void sendIQ(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>	<it.yup.xmpp.XMPPClient: void sendIQ(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>/@this
<it.yup.ui.UIGauge: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIGauge: void paint(javax.microedition.lcdui.Graphics,int,int)>/@this
<it.yup.tests.RMSTestMidlet: void testLength(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testLength(it.yup.util.RMSIndex)>/@this
<it.yup.screens.AboutScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.AboutScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UIAccordion: boolean isOneOpen()>	<it.yup.ui.UIAccordion: boolean isOneOpen()>/@this
<it.yup.ui.UITextField: void setLabel(java.lang.String)>	<it.yup.ui.UITextField: void setLabel(java.lang.String)>/@this
<it.yup.xmpp.Contact: boolean supportsMUC(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: boolean supportsMUC(it.yup.xmpp.packets.Presence)>/@this
<it.yup.transport.TransportListener: void connectionEstablished(it.yup.transport.BaseChannel)>	<it.yup.transport.TransportListener: void connectionEstablished(it.yup.transport.BaseChannel)>/@this
<com.jcraft.jzlib.Deflate: void _tr_align()>	<com.jcraft.jzlib.Deflate: void _tr_align()>/@this
<it.yup.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>	<it.yup.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>/@this
<it.yup.transport.TransportListener: void connectionFailed(it.yup.transport.BaseChannel)>	<it.yup.transport.TransportListener: void connectionFailed(it.yup.transport.BaseChannel)>/@this
<it.yup.ui.UICanvas: void keyPressed(int)>	<it.yup.ui.UICanvas: void keyPressed(int)>/@this
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>/@this
<it.yup.xmlstream.Initializer: boolean matchFeatures(java.util.Hashtable)>	<it.yup.xmlstream.Initializer: boolean matchFeatures(java.util.Hashtable)>/@this
<it.yup.xmlstream.KXmlParser: void parseDoctype(boolean)>	<it.yup.xmlstream.KXmlParser: void parseDoctype(boolean)>/@this
<it.yup.ui.UIScreen: void removePaintedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void removePaintedItem(it.yup.ui.UIItem)>/@this
<it.yup.transport.BaseChannel: void open()>	<it.yup.transport.BaseChannel: void open()>/@this
<it.yup.xmpp.FTSender$IQResultListener1: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener1: void handleError(it.yup.xml.Element)>/@this
<it.yup.xmpp.packets.DataForm: it.yup.xml.Element getResultElement()>	<it.yup.xmpp.packets.DataForm: it.yup.xml.Element getResultElement()>/@this
<it.yup.transport.SocketChannel$UTFReader: int getByte()>	<it.yup.transport.SocketChannel$UTFReader: int getByte()>/@this
<it.yup.xmpp.Roster: void streamInitialized()>	<it.yup.xmpp.Roster: void streamInitialized()>/@this
<it.yup.xml.Element: byte[] toXml()>	<it.yup.xml.Element: byte[] toXml()>/@this
<it.yup.ui.UIButton: int getHPadding()>	<it.yup.ui.UIButton: int getHPadding()>/@this
<lampiro.screens.RosterScreen: void getIMGateways(java.lang.String)>	<lampiro.screens.RosterScreen: void getIMGateways(java.lang.String)>/@this
<lampiro.screens.ChatScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>	<lampiro.screens.ChatScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>/@this
<it.yup.ui.UIItem: int getLayoutWidth()>	<it.yup.ui.UIItem: int getLayoutWidth()>/@this
<it.yup.xmlstream.Element: void serialize(java.io.DataOutputStream)>	<it.yup.xmlstream.Element: void serialize(java.io.DataOutputStream)>/@this
<it.yup.tests.TestMidlet: void startApp()>	<it.yup.tests.TestMidlet: void startApp()>/@this
<it.yup.tests.UITestMidlet$TestScreen: void <init>(it.yup.tests.UITestMidlet)>	<it.yup.tests.UITestMidlet$TestScreen: void <init>(it.yup.tests.UITestMidlet)>/@this
<com.jcraft.jzlib.Deflate: int deflateInit2(com.jcraft.jzlib.ZStream,int,int,int,int,int)>	<com.jcraft.jzlib.Deflate: int deflateInit2(com.jcraft.jzlib.ZStream,int,int,int,int,int)>/@this
<it.yup.xmpp.Config: java.lang.String getProperty(short,java.lang.String)>	<it.yup.xmpp.Config: java.lang.String getProperty(short,java.lang.String)>/@this
<it.yup.ui.UITextField: void handleScreen()>	<it.yup.ui.UITextField: void handleScreen()>/@this
<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener4)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener4)>/@this
<it.yup.xmpp.XMPPClient$XmppListener: void authenticated()>	<it.yup.xmpp.XMPPClient$XmppListener: void authenticated()>/@this
<it.yup.xmpp.IqManager: void <init>()>	<it.yup.xmpp.IqManager: void <init>()>/@this
<it.yup.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<it.yup.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>/@this
<it.yup.ui.UITextField: void setMaxLines(int)>	<it.yup.ui.UITextField: void setMaxLines(int)>/@this
<it.yup.xmpp.CommandExecutor: void sendPacket(it.yup.xmpp.packets.Iq)>	<it.yup.xmpp.CommandExecutor: void sendPacket(it.yup.xmpp.packets.Iq)>/@this
<it.yup.ui.UICanvas: void change(int)>	<it.yup.ui.UICanvas: void change(int)>/@this
<it.yup.ui.UIAccordion: void setSepColor(int)>	<it.yup.ui.UIAccordion: void setSepColor(int)>/@this
<it.yup.ui.UIItem: void setSelectedColor(int)>	<it.yup.ui.UIItem: void setSelectedColor(int)>/@this
<it.yup.ui.UILabel: void setFont(javax.microedition.lcdui.Font)>	<it.yup.ui.UILabel: void setFont(javax.microedition.lcdui.Font)>/@this
<lampiro.screens.MUCScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>	<lampiro.screens.MUCScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>/@this
<com.jcraft.jzlib.ZStream: int inflateEnd()>	<com.jcraft.jzlib.ZStream: int inflateEnd()>/@this
<it.yup.xml.Element: void resetText()>	<it.yup.xml.Element: void resetText()>/@this
<it.yup.ui.UILabel: void setWrappable(boolean,int)>	<it.yup.ui.UILabel: void setWrappable(boolean,int)>/@this
<it.yup.tests.TestMidlet: void pauseApp()>	<it.yup.tests.TestMidlet: void pauseApp()>/@this
<it.yup.xml.KXmlParser: java.lang.String getNamespace()>	<it.yup.xml.KXmlParser: java.lang.String getNamespace()>/@this
<it.yup.util.ResourceIDs: void <init>()>	<it.yup.util.ResourceIDs: void <init>()>/@this
<it.yup.xmlstream.SASLAuthenticator: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.SASLAuthenticator: void start(it.yup.xmlstream.BasicXmlStream)>/@this
<it.yup.ui.UIAccordion: int getSepSize()>	<it.yup.ui.UIAccordion: int getSepSize()>/@this
<it.yup.xmpp.CommandExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>	<it.yup.xmpp.CommandExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>/@this
<lampiro.screens.RosterScreen: void hideNotify()>	<lampiro.screens.RosterScreen: void hideNotify()>/@this
<it.yup.ui.UITextField: void setMinLines(int)>	<it.yup.ui.UITextField: void setMinLines(int)>/@this
<it.yup.xmlstream.EventQueryRegistration: void <init>(java.lang.Object,java.util.Vector)>	<it.yup.xmlstream.EventQueryRegistration: void <init>(java.lang.Object,java.util.Vector)>/@this
<it.yup.xmpp.packets.Stanza: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xmpp.packets.Stanza: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@this
<lampiro.screens.RosterScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.transport.SocketChannel$TimerTask1: void run()>	<it.yup.transport.SocketChannel$TimerTask1: void run()>/@this
<lampiro.screens.ChatScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<lampiro.screens.InnerMMScreen$1: void run()>	<lampiro.screens.InnerMMScreen$1: void run()>/@this
<lampiro.screens.ContactInfoScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ContactInfoScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge)>	<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge)>/@this
<it.yup.screens.RosterScreen: void toggleMenus()>	<it.yup.screens.RosterScreen: void toggleMenus()>/@this
<it.yup.util.RMSIndex: int get_offset(java.util.Vector,byte[],boolean)>	<it.yup.util.RMSIndex: int get_offset(java.util.Vector,byte[],boolean)>/@this
<it.yup.ui.UIButton: void <init>(javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UIButton: void <init>(javax.microedition.lcdui.Image,java.lang.String)>/@this
<it.yup.xmpp.BluendoXMLRPC: it.yup.xml.Element read()>	<it.yup.xmpp.BluendoXMLRPC: it.yup.xml.Element read()>/@this
<it.yup.ui.UIPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>	<it.yup.ui.UIPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>/@this
<it.yup.util.MetaVector$MultiVectorEnumeration: void <init>(it.yup.util.MetaVector)>	<it.yup.util.MetaVector$MultiVectorEnumeration: void <init>(it.yup.util.MetaVector)>/@this
<it.yup.xmpp.Contact: void removeTask(it.yup.xmpp.Task)>	<it.yup.xmpp.Contact: void removeTask(it.yup.xmpp.Task)>/@this
<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient)>/@this
<lampiro.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>/@this
<it.yup.xmlstream.Initializer: void <init>(java.lang.String,boolean)>	<it.yup.xmlstream.Initializer: void <init>(java.lang.String,boolean)>/@this
<it.yup.xmlstream.KXmlSerializer: void <init>()>	<it.yup.xmlstream.KXmlSerializer: void <init>()>/@this
<it.yup.xml.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>/@this
<it.yup.tests.XMLTestMidlet: void <init>()>	<it.yup.tests.XMLTestMidlet: void <init>()>/@this
<it.yup.xml.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xml.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>/@this
<lampiro.screens.RegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>/@this
<com.jcraft.jzlib.ZOutputStream: void finish()>	<com.jcraft.jzlib.ZOutputStream: void finish()>/@this
<it.yup.xmlstream.KXmlParser: boolean isEmptyElementTag()>	<it.yup.xmlstream.KXmlParser: boolean isEmptyElementTag()>/@this
<it.yup.xmpp.packets.Presence: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.Presence: void <init>(it.yup.xml.Element)>/@this
<it.yup.ui.UIItem: boolean keyPressed(int)>	<it.yup.ui.UIItem: boolean keyPressed(int)>/@this
<it.yup.ui.UIPanel: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: boolean contains(it.yup.ui.UIItem)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String get(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String get(int)>/@this
<it.yup.screens.SplashScreen: void <init>()>	<it.yup.screens.SplashScreen: void <init>()>/@this
<lampiro.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>/@this
<lampiro.screens.FTScreen: void fillScreen()>	<lampiro.screens.FTScreen: void fillScreen()>/@this
<it.yup.util.RMSIndex: int saveChunk(int,java.util.Vector)>	<it.yup.util.RMSIndex: int saveChunk(int,java.util.Vector)>/@this
<it.yup.ui.UIItem: void drawInput(javax.microedition.lcdui.Graphics,int,int,int,int)>	<it.yup.ui.UIItem: void drawInput(javax.microedition.lcdui.Graphics,int,int,int,int)>/@this
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>/@this
<it.yup.xmlstream.KXmlParser: int getNamespaceCount(int)>	<it.yup.xmlstream.KXmlParser: int getNamespaceCount(int)>/@this
<it.yup.xmpp.Roster: void updateGateways(it.yup.xmpp.Contact)>	<it.yup.xmpp.Roster: void updateGateways(it.yup.xmpp.Contact)>/@this
<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int)>/@this
<it.yup.xmpp.Config: void loadFromStorage()>	<it.yup.xmpp.Config: void loadFromStorage()>/@this
<com.jcraft.jzlib.InfTree: int inflate_trees_bits(int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfTree: int inflate_trees_bits(int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>/@this
<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster,it.yup.xmpp.Roster$IQResultListener2)>	<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster,it.yup.xmpp.Roster$IQResultListener2)>/@this
<it.yup.xmpp.XMPPClient$1: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient$1: void gotStreamEvent(java.lang.String,java.lang.Object)>/@this
<lampiro.screens.ContactInfoScreen: void addToPanel(it.yup.ui.UIItem)>	<lampiro.screens.ContactInfoScreen: void addToPanel(it.yup.ui.UIItem)>/@this
<lampiro.screens.RegisterScreen: boolean keyPressed(int)>	<lampiro.screens.RegisterScreen: boolean keyPressed(int)>/@this
<it.yup.xmpp.FTReceiver$OpenListener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver$OpenListener: void packetReceived(it.yup.xml.Element)>/@this
<it.yup.xmpp.packets.IQResultListener: void packetReceived(it.yup.xmlstream.Element)>	<it.yup.xmpp.packets.IQResultListener: void packetReceived(it.yup.xmlstream.Element)>/@this
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeType(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeType(int)>/@this
<it.yup.xmpp.FTReceiver$OpenListener: void answerFT(boolean)>	<it.yup.xmpp.FTReceiver$OpenListener: void answerFT(boolean)>/@this
<it.yup.tests.RMSTestMidlet: void testJoin(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testJoin(it.yup.util.RMSIndex)>/@this
<it.yup.ui.UITextField: void unExpand()>	<it.yup.ui.UITextField: void unExpand()>/@this
<it.yup.xmlstream.KXmlSerializer: void ignorableWhitespace(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void ignorableWhitespace(java.lang.String)>/@this
<lampiro.screens.RegisterScreen: void checkLogin()>	<lampiro.screens.RegisterScreen: void checkLogin()>/@this
<it.yup.ui.UIAccordion: void setBg_color(int)>	<it.yup.ui.UIAccordion: void setBg_color(int)>/@this
<it.yup.xml.KXmlParser: java.lang.String getNamespaceUri(int)>	<it.yup.xml.KXmlParser: java.lang.String getNamespaceUri(int)>/@this
<it.yup.ui.UICombobox: void setSelected(boolean)>	<it.yup.ui.UICombobox: void setSelected(boolean)>/@this
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>/@this
<it.yup.screens.RegisterScreen: java.lang.String srvQuery()>	<it.yup.screens.RegisterScreen: java.lang.String srvQuery()>/@this
<it.yup.xml.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>/@this
<it.yup.ui.UIAccordion: void setLabelGradientSelectedColor(int)>	<it.yup.ui.UIAccordion: void setLabelGradientSelectedColor(int)>/@this
<it.yup.xmpp.Contact: void askCapabilities(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: void askCapabilities(it.yup.xmpp.packets.Presence)>/@this
<it.yup.ui.UICombobox: int[] getSelectedIndeces()>	<it.yup.ui.UICombobox: int[] getSelectedIndeces()>/@this
<it.yup.ui.UIScreen: void insert(int,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void insert(int,it.yup.ui.UIItem)>/@this
<it.yup.ui.UICombobox: void setSelectedIndex(int)>	<it.yup.ui.UICombobox: void setSelectedIndex(int)>/@this
<it.yup.tests.XMLTestMidlet: void testEnDecode()>	<it.yup.tests.XMLTestMidlet: void testEnDecode()>/@this
<lampiro.screens.RosterScreen: void rosterRetrieved()>	<lampiro.screens.RosterScreen: void rosterRetrieved()>/@this
<it.yup.screens.SubscriptionConfirmAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.SubscriptionConfirmAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>/@this
<it.yup.ui.UILabel: int getImgAnchorPoint()>	<it.yup.ui.UILabel: int getImgAnchorPoint()>/@this
<it.yup.xmlstream.SASLAuthenticator: java.lang.String unparse(java.util.Hashtable)>	<it.yup.xmlstream.SASLAuthenticator: java.lang.String unparse(java.util.Hashtable)>/@this
<it.yup.ui.UILabel: void setText(java.lang.String)>	<it.yup.ui.UILabel: void setText(java.lang.String)>/@this
<lampiro.screens.SendMMScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.SendMMScreen: void itemAction(it.yup.ui.UIItem)>/@this
<it.yup.ui.UILayout: void setBg_color(int)>	<it.yup.ui.UILayout: void setBg_color(int)>/@this
<it.yup.xml.KXmlParser: java.lang.String getPrefix()>	<it.yup.xml.KXmlParser: java.lang.String getPrefix()>/@this
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleResult(it.yup.xml.Element)>/@this
<lampiro.screens.SubscribeScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.SubscribeScreen: void itemAction(it.yup.ui.UIItem)>/@this
<lampiro.screens.InnerMMScreen: void keyPressed(int)>	<lampiro.screens.InnerMMScreen: void keyPressed(int)>/@this
