<NumberWorkSpace: void <init>()>	<NumberWorkSpace: void <init>()>
<Graph$EdgeIter1: void <init>(Graph)>	<Graph$EdgeIter1: void <init>(Graph)>
<Graph: Graph strongComponents()>	<Graph: Graph strongComponents()>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<EdgeIfc: Vertex getEnd()>	<EdgeIfc: Vertex getEnd()>
<Graph: Graph kruskal()>	<Graph: Graph kruskal()>
<Graph: VertexIter getVertices()>	<Graph: VertexIter getVertices()>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>	<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.LinkedList: java.lang.Object remove(int)>	<java.util.LinkedList: java.lang.Object remove(int)>
<Graph: void graphSearch(WorkSpace)>	<Graph: void graphSearch(WorkSpace)>
<<\\"Vertices \\">>	<<\\"Vertices \\">>
<EdgeIfc: void display()>	<EdgeIfc: void display()>
<EdgeIter: void <init>()>	<EdgeIter: void <init>()>
<Vertex: void nodeSearch(WorkSpace)>	<Vertex: void nodeSearch(WorkSpace)>
<java.util.Map: java.lang.Object get(java.lang.Object)>	<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.util.Iterator: boolean hasNext()>	<java.util.Iterator: boolean hasNext()>
<java.lang.String: java.lang.String substring(int,int)>	<java.lang.String: java.lang.String substring(int,int)>
<java.util.LinkedList: void add(int,java.lang.Object)>	<java.util.LinkedList: void add(int,java.lang.Object)>
<java.lang.Integer: int parseInt(java.lang.String,int)>	<java.lang.Integer: int parseInt(java.lang.String,int)>
<EdgeIfc: void setWeight(int)>	<EdgeIfc: void setWeight(int)>
<Vertex: void <init>()>	<Vertex: void <init>()>
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<EdgeIter: boolean hasNext()>	<EdgeIter: boolean hasNext()>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>	<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph: void sortVertices(java.util.Comparator)>	<Graph: void sortVertices(java.util.Comparator)>
<java.util.LinkedList: boolean remove(java.lang.Object)>	<java.util.LinkedList: boolean remove(java.lang.Object)>
<java.util.LinkedList: java.lang.Object removeFirst()>	<java.util.LinkedList: java.lang.Object removeFirst()>
<java.util.Iterator: java.lang.Object next()>	<java.util.Iterator: java.lang.Object next()>
<Graph: void <init>()>	<Graph: void <init>()>
<java.lang.String: void <init>(java.lang.String)>	<java.lang.String: void <init>(java.lang.String)>
<Neighbor: void <init>()>	<Neighbor: void <init>()>
<java.io.FileReader: void <init>(java.lang.String)>	<java.io.FileReader: void <init>(java.lang.String)>
<java.lang.StringBuilder: java.lang.String toString()>	<java.lang.StringBuilder: java.lang.String toString()>
<java.io.Reader: int read()>	<java.io.Reader: int read()>
<NumberWorkSpace: void preVisitAction(Vertex)>	<NumberWorkSpace: void preVisitAction(Vertex)>
<java.lang.Integer: void <init>(int)>	<java.lang.Integer: void <init>(int)>
<Graph: Graph prim(Vertex)>	<Graph: Graph prim(Vertex)>
<FinishTimeWorkSpace: void <init>()>	<FinishTimeWorkSpace: void <init>()>
<Graph: EdgeIter getEdges()>	<Graph: EdgeIter getEdges()>
<VertexIter: boolean hasNext()>	<VertexIter: boolean hasNext()>
<java.lang.String: java.lang.String trim()>	<java.lang.String: java.lang.String trim()>
<Vertex$EdgeIter2: void <init>(Vertex)>	<Vertex$EdgeIter2: void <init>(Vertex)>
<java.lang.System: long currentTimeMillis()>	<java.lang.System: long currentTimeMillis()>
<java.io.PrintStream: void println(java.lang.String)>	<java.io.PrintStream: void println(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>	<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.util.HashSet: void <init>()>	<java.util.HashSet: void <init>()>
<Vertex: void display()>	<Vertex: void display()>
<EdgeIfc: Vertex getStart()>	<EdgeIfc: Vertex getStart()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.LinkedList: java.util.Iterator iterator()>	<java.util.LinkedList: java.util.Iterator iterator()>
<Graph: void addVertex(Vertex)>	<Graph: void addVertex(Vertex)>
<VertexIter: Vertex next()>	<VertexIter: Vertex next()>
<java.util.Set: boolean remove(java.lang.Object)>	<java.util.Set: boolean remove(java.lang.Object)>
<java.util.LinkedList: void clear()>	<java.util.LinkedList: void clear()>
<java.util.LinkedList: java.lang.Object get(int)>	<java.util.LinkedList: java.lang.Object get(int)>
<EdgeIter: EdgeIfc next()>	<EdgeIter: EdgeIfc next()>
<Graph: void run(Vertex)>	<Graph: void run(Vertex)>
<java.lang.Object: void <init>()>	<java.lang.Object: void <init>()>
<Graph$Comparator2: void <init>(Graph)>	<Graph$Comparator2: void <init>(Graph)>
<java.io.PrintStream: void println()>	<java.io.PrintStream: void println()>
<java.util.Set: boolean contains(java.lang.Object)>	<java.util.Set: boolean contains(java.lang.Object)>
<java.util.LinkedList: void <init>()>	<java.util.LinkedList: void <init>()>
<GlobalVarsWrapper: void <init>()>	<GlobalVarsWrapper: void <init>()>
<Graph: java.util.LinkedList access$0(Graph)>	<Graph: java.util.LinkedList access$0(Graph)>
<java.io.PrintStream: void print(java.lang.String)>	<java.io.PrintStream: void print(java.lang.String)>
<Vertex$VertexIter3: void <init>(Vertex)>	<Vertex$VertexIter3: void <init>(Vertex)>
<<\\"Vertex \\">>	<<\\"Vertex \\">>
<Main: void <init>()>	<Main: void <init>()>
<java.lang.Integer: int intValue()>	<java.lang.Integer: int intValue()>
<Graph$Comparator3: void <init>(Graph)>	<Graph$Comparator3: void <init>(Graph)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>	<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.lang.String: java.lang.String valueOf(int)>	<java.lang.String: java.lang.String valueOf(int)>
<EdgeIfc: void adjustAdorns(EdgeIfc)>	<EdgeIfc: void adjustAdorns(EdgeIfc)>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<WorkSpace: void <init>()>	<WorkSpace: void <init>()>
<Graph: void display()>	<Graph: void display()>
<Vertex$VertexIter2: void <init>(Vertex)>	<Vertex$VertexIter2: void <init>(Vertex)>
<VertexIter: void <init>()>	<VertexIter: void <init>()>
<java.io.Reader: void close()>	<java.io.Reader: void close()>
<RegionWorkSpace: void <init>()>	<RegionWorkSpace: void <init>()>
<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>	<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
<java.lang.StringBuilder: void <init>(java.lang.String)>	<java.lang.StringBuilder: void <init>(java.lang.String)>
<Neighbor: void <init>(Vertex,int)>	<Neighbor: void <init>(Vertex,int)>
<Vertex: Vertex assignName(java.lang.String)>	<Vertex: Vertex assignName(java.lang.String)>
<java.util.HashMap: void <init>()>	<java.util.HashMap: void <init>()>
<java.lang.Object: boolean equals(java.lang.Object)>	<java.lang.Object: boolean equals(java.lang.Object)>
<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>	<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>
<java.util.LinkedList: java.lang.Object getLast()>	<java.util.LinkedList: java.lang.Object getLast()>
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Vertex: java.lang.String getName()>	<Vertex: java.lang.String getName()>
<EdgeIfc: Vertex getOtherVertex(Vertex)>	<EdgeIfc: Vertex getOtherVertex(Vertex)>
<Vertex$EdgeIter3: void <init>(Vertex)>	<Vertex$EdgeIter3: void <init>(Vertex)>
<Vertex$VertexIter1: void <init>(Vertex)>	<Vertex$VertexIter1: void <init>(Vertex)>
<VertexIter: void <init>(Graph)>	<VertexIter: void <init>(Graph)>
<EdgeIfc: int getWeight()>	<EdgeIfc: int getWeight()>
<Neighbor: void <init>(Vertex,Edge)>	<Neighbor: void <init>(Vertex,Edge)>
<CycleWorkSpace: void <init>()>	<CycleWorkSpace: void <init>()>
******************************************	******************************************
<Graph$Comparator1: void <init>(Graph)>	<Graph$Comparator1: void <init>(Graph)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<java.util.LinkedList: boolean add(java.lang.Object)>	<java.util.LinkedList: boolean add(java.lang.Object)>
<Graph: void <clinit>()>	<Graph: void <clinit>()>
<java.lang.String: boolean equals(java.lang.Object)>	<java.lang.String: boolean equals(java.lang.Object)>
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>	<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Vertex findsVertex(java.lang.String)>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<java.util.Set: boolean add(java.lang.Object)>	<java.util.Set: boolean add(java.lang.Object)>
<java.lang.String: void <init>(char[])>	<java.lang.String: void <init>(char[])>
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<Vertex$EdgeIter1: void <init>(Vertex)>	<Vertex$EdgeIter1: void <init>(Vertex)>
<CycleWorkSpace: void preVisitAction(Vertex)>	<CycleWorkSpace: void preVisitAction(Vertex)>
<WorkSpaceTranspose: void <init>()>	<WorkSpaceTranspose: void <init>()>
<java.util.LinkedList: int size()>	<java.util.LinkedList: int size()>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Edge: void <init>(Vertex,Vertex,int)>	<Edge: void <init>(Vertex,Vertex,int)>
