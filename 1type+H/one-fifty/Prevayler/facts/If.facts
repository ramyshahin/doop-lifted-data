<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/if/instruction4	4	7	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/if/instruction10	10	13	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/if/instruction41	41	44	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/if/instruction15	15	6	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/if/instruction24	24	29	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/if/instruction29	29	34	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/if/instruction17	17	3	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/if/instruction4	4	6	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/if/instruction27	27	18	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/if/instruction6	6	11	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/if/instruction11	11	14	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/if/instruction6	6	15	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/if/instruction3	3	6	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/if/instruction4	4	12	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/if/instruction4	4	7	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/if/instruction4	4	11	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/if/instruction21	21	24	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction55	55	60	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/if/instruction3	3	8	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/if/instruction6	6	14	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/if/instruction3	3	13	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction9	9	14	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/if/instruction7	7	10	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/if/instruction5	5	12	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/if/instruction3	3	13	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/if/instruction22	22	12	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/if/instruction9	9	12	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/if/instruction28	28	30	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction5	5	10	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction6	6	10	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/if/instruction9	9	12	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/if/instruction20	20	23	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction28	28	24	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/if/instruction7	7	12	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/if/instruction7	7	45	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/if/instruction3	3	6	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>/if/instruction4	4	7	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/if/instruction22	22	55	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/if/instruction7	7	10	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/if/instruction16	16	10	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/if/instruction20	20	30	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/if/instruction16	16	21	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/if/instruction17	17	35	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/if/instruction3	3	8	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/if/instruction11	11	17	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/if/instruction9	9	5	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/if/instruction21	21	26	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/if/instruction7	7	4	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: void close()>/if/instruction3	3	6	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/if/instruction4	4	9	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/if/instruction12	12	23	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/if/instruction20	20	23	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/if/instruction46	46	61	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/if/instruction4	4	9	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/if/instruction4	4	8	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/if/instruction8	8	22	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/if/instruction31	31	33	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>/if/instruction4	4	7	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>/if/instruction5	5	8	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/if/instruction11	11	17	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>/if/instruction3	3	6	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/if/instruction9	9	25	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/if/instruction17	17	29	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/if/instruction10	10	13	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/if/instruction44	44	47	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/if/instruction37	37	39	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/if/instruction3	3	8	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/if/instruction5	5	8	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/if/instruction9	9	6	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/if/instruction5	5	10	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/if/instruction5	5	8	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/if/instruction17	17	27	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/if/instruction3	3	6	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/if/instruction38	38	16	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/if/instruction5	5	8	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/if/instruction5	5	8	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/if/instruction10	10	13	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/if/instruction4	4	13	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/if/instruction6	6	10	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction47	47	50	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/if/instruction6	6	9	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/if/instruction6	6	8	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/if/instruction3	3	6	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/if/instruction14	14	21	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/if/instruction16	16	5	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/if/instruction77	77	79	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/if/instruction4	4	7	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/if/instruction7	7	10	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/if/instruction5	5	7	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/if/instruction26	26	39	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/if/instruction5	5	8	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.foundation.Turn: void start()>/if/instruction3	3	5	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/if/instruction9	9	11	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/if/instruction32	32	26	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction49	49	54	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/if/instruction8	8	13	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/if/instruction10	10	15	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>/if/instruction7	7	5	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/if/instruction50	50	13	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/if/instruction4	4	9	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/if/instruction6	6	12	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/if/instruction9	9	12	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/if/instruction6	6	9	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/if/instruction3	3	6	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/if/instruction73	73	75	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/if/instruction7	7	10	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/if/instruction3	3	8	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/if/instruction5	5	13	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/if/instruction3	3	14	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/if/instruction5	5	7	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/if/instruction3	3	6	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/if/instruction4	4	9	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/if/instruction14	14	17	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/if/instruction12	12	20	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/if/instruction6	6	8	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/if/instruction3	3	6	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/if/instruction4	4	14	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/if/instruction30	30	35	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction74	74	48	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/if/instruction4	4	10	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.foundation.DurableOutputStream: void close()>/if/instruction9	9	13	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction3	3	6	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/if/instruction7	7	25	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>/if/instruction3	3	8	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/if/instruction34	34	36	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/if/instruction15	15	6	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/if/instruction10	10	13	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/if/instruction15	15	11	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/if/instruction7	7	3	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/if/instruction3	3	5	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/if/instruction48	48	26	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/if/instruction9	9	14	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/if/instruction18	18	23	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/if/instruction3	3	6	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/if/instruction4	4	8	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction34	34	39	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/if/instruction10	10	6	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/if/instruction8	8	11	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/if/instruction10	10	6	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/if/instruction36	36	18	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>/if/instruction3	3	7	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/if/instruction4	4	14	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/if/instruction22	22	14	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/if/instruction17	17	19	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/if/instruction5	5	7	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>/if/instruction3	3	6	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/if/instruction15	15	18	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/if/instruction5	5	10	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/if/instruction17	17	3	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>
<org.prevayler.implementation.clock.MachineClock: void update()>/if/instruction5	5	9	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction48	48	54	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/if/instruction6	6	11	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/if/instruction5	5	8	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/if/instruction4	4	9	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/if/instruction26	26	29	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/if/instruction6	6	19	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/if/instruction14	14	19	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/if/instruction12	12	20	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/if/instruction34	34	37	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/if/instruction3	3	7	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/if/instruction3	3	6	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/if/instruction12	12	7	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/if/instruction5	5	10	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/if/instruction7	7	11	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/if/instruction42	42	54	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/if/instruction5	5	9	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/if/instruction3	3	10	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/if/instruction9	9	6	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/if/instruction16	16	21	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/if/instruction7	7	21	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/if/instruction5	5	41	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/if/instruction10	10	25	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/if/instruction4	4	9	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/if/instruction15	15	24	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/if/instruction47	47	52	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/if/instruction16	16	3	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/if/instruction21	21	10	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/if/instruction30	30	35	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction56	56	68	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/if/instruction9	9	12	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>/if/instruction3	3	5	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction44	44	32	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/if/instruction17	17	28	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/if/instruction9	9	5	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/if/instruction5	5	15	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction12	12	25	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>/if/instruction4	4	7	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/if/instruction6	6	8	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/if/instruction4	4	6	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/if/instruction4	4	7	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/if/instruction5	5	9	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/if/instruction3	3	8	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction5	5	10	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/if/instruction31	31	41	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/if/instruction10	10	15	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/if/instruction9	9	12	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/if/instruction14	14	7	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/if/instruction35	35	38	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/if/instruction7	7	12	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/if/instruction5	5	10	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/if/instruction5	5	14	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/if/instruction12	12	3	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/if/instruction4	4	7	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/if/instruction4	4	8	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/if/instruction10	10	13	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/if/instruction3	3	13	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/if/instruction37	37	39	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction30	30	70	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/if/instruction22	22	25	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/if/instruction13	13	6	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/if/instruction15	15	18	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/if/instruction10	10	12	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/if/instruction36	36	40	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/if/instruction7	7	12	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>/if/instruction3	3	6	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/if/instruction5	5	12	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/if/instruction41	41	49	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/if/instruction3	3	7	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/if/instruction54	54	56	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/if/instruction4	4	6	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/if/instruction3	3	10	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/if/instruction18	18	21	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>/if/instruction3	3	7	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/if/instruction8	8	10	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/if/instruction3	3	6	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>/if/instruction3	3	6	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/if/instruction12	12	17	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/if/instruction5	5	17	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/if/instruction7	7	10	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/if/instruction36	36	46	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/if/instruction19	19	22	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/if/instruction24	24	34	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/if/instruction6	6	11	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/if/instruction15	15	23	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/if/instruction8	8	13	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/if/instruction30	30	23	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/if/instruction6	6	11	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/if/instruction13	13	15	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/if/instruction21	21	33	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/if/instruction11	11	8	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
