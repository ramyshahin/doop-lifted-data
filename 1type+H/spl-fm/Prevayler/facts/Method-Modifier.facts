public	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>	@Replication
	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
public	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
public	<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>	@Snapshot
public	<org.prevayler.implementation.publishing.CentralPublisher: void close()>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
public	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
private	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
public	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>	@Replication
public	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
private	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
public	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>	@Replication
public	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
public	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>
private	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
public	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
static	<org.prevayler.demos.scalability.Record: void <clinit>()>
private	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
public	<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>
	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
static	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
abstract	<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
public	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
public	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
public	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
public	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
public	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>	@Snapshot
public	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>	@GZip
static	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
protected	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
protected	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
public	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>	@Replication
public	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
public	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
protected	<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>
public	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
public	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
public	<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>
synchronized	<org.prevayler.implementation.clock.MachineClock: void update()>
static	<org.prevayler.demos.demo1.Main: void printMessage()>
abstract	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action(org.prevayler.demos.demo2.business.Account)>
private	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>()>
public	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
public	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
private	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
private	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>	@Replication
public	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
static	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
public	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
protected	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
static	<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>
	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
static	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
static	<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>	@Snapshot
public	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
public	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
private	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
private	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>()>
static	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
private	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
public	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
private	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
static	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
private	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
public	<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>
public	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
public	<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>
public	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
public	<org.prevayler.demos.demo2.MainXStream: void <init>()>
public	<org.prevayler.demos.demo2.MainReplica: void <init>()>
private	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
static	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
public	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
public	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
public	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
public	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>	@Replication
public	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
public	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
private	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
public	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
protected	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
private	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
abstract	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
static	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
static	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
private	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
public	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
protected	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
static	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>
static	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
protected	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
public	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
public	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
protected	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
private	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
	<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>	@GZip
protected	<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>
public	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule cleanCopy()>
public	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>
private	<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>	@Snapshot
public	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
static	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>
private	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
public	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>	@GZip
	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
protected	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
public	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>	@Replication
private	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
static	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>
protected	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
abstract	<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
public	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
protected	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
abstract	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
public	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
static	<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>
public	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
public	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
public	<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>
protected	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
public	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
public	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
public	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void close()>	@GZip
private	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
public	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
public	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
static	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
public	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
public	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
public	<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
public	<org.prevayler.Prevayler: java.lang.Object prevalentSystem()>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
public	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
public	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
private	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
private	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
public	<org.prevayler.foundation.FileLocker: void release()>
abstract	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>
public	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
public	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
private	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
public	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
public	<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
public	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
public	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
static	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
private	<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>
public	<org.prevayler.foundation.Chunk: java.util.Map getParameters()>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
public	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
abstract	<org.prevayler.foundation.network.ObjectReceiver: void close()>
public	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
static	<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>
abstract	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>
private	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
public	<org.prevayler.foundation.Turn: void start()>
public	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
private	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>
	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
public	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
abstract	<org.prevayler.Clock: java.util.Date time()>
public	<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>	@Replication
abstract	<org.prevayler.implementation.publishing.TransactionPublisher: org.prevayler.Clock clock()>
static	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
synchronized	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
protected	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
private	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>	@GZip
	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>	@GZip
synchronized	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>	@Replication
protected	<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>
public	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
public	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
private	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>	@GZip
public	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
abstract	<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>
	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
public	<org.prevayler.implementation.publishing.TransactionPublisher: org.prevayler.Clock clock()>
public	<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>
public	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
public	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
protected	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
public	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
public	<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>
public	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>	@Monitor
private	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
private	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
static	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>
synchronized	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>	@Replication
public	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
public	<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>
synchronized	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
private	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
public	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>	@Monitor
static	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>
public	<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
abstract	<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>
public	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
public	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
private	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
public	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
public	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
private	<org.prevayler.demos.demo1.Main: void printMessage()>
public	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
private	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
private	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
static	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>
static	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
abstract	<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>
public	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.Object createTestConnection()>
protected	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>	@Replication
private	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>
public	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>
protected	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
public	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
protected	<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
public	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
abstract	<org.prevayler.implementation.publishing.TransactionPublisher: void close()>
protected	<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
public	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>	@Replication
private	<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>	@Replication
public	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>
abstract	<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>
public	<org.prevayler.foundation.network.Network: void stopService(int)>
static	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
abstract	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule cleanCopy()>
private	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
private	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
private	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>	@Replication
public	<org.prevayler.foundation.DurableOutputStream: void close()>
public	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
abstract	<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
public	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
private	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
public	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
abstract	<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
private	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
public	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
abstract	<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
public	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
private	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
public	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>	@Replication
synchronized	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>	@Replication
public	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>	@Snapshot
private	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
private	<org.prevayler.demos.demo2.business.Account: void verify(long)>
synchronized	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>	@Replication
public	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
private	<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>	@Replication
synchronized	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
public	<org.prevayler.foundation.Chunking: void <init>()>
abstract	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>
private	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
public	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
abstract	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
public	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
static	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
private	<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
public	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
public	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>
public	<org.prevayler.Prevayler: org.prevayler.Clock clock()>
public	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
public	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
abstract	<org.prevayler.foundation.network.ObjectSocket: java.lang.Object readObject()>
public	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
public	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
private	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>
private	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>	@Replication
private	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
static	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>
private	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
abstract	<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>
public	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
public	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
static	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
public	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
synchronized	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
static	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
public	<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>
static	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
static	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>()>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
static	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>
public	<org.prevayler.implementation.replication.ClientPublisher$1: void run()>	@Replication
	<org.prevayler.demos.demo1.NumberKeeper: void <init>()>
private	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
public	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
public	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
private	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>
abstract	<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
public	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
static	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
public	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>
	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
public	<org.prevayler.Clock: java.util.Date time()>
private	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
private	<org.prevayler.demos.demo2.business.Account: void <init>()>
private	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
protected	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
public	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
public	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
private	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
private	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>()>
public	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
abstract	<org.prevayler.foundation.network.ObjectServerSocket: org.prevayler.foundation.network.ObjectSocket accept()>
protected	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
private	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>
synchronized	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
public	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
public	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
public	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
public	<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>
abstract	<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>
public	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>
public	<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>
static	<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>
public	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	@Replication
private	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
abstract	<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
private	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>	@Replication
	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>
public	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
protected	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
public	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>
private	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
protected	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
public	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>	@GZip
public	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
protected	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
private	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
public	<org.prevayler.foundation.FileManager: void <init>()>
public	<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>
static	<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>
public	<org.prevayler.foundation.Chunk: byte[] getBytes()>
private	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
public	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
abstract	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
public	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
protected	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>	@Replication
static	<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>
protected	<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>
public	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
static	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
private	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
protected	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.lang.String table()>
public	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
private	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>	@Replication
private	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>
static	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
public	<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>
public	<org.prevayler.implementation.Capsule: byte[] serialized()>
public	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
private	<org.prevayler.foundation.StopWatch: void <init>()>
private	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
public	<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
public	<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>
public	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
public	<org.prevayler.implementation.journal.TransientJournal: void close()>
private	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
public	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
private	<org.prevayler.implementation.clock.MachineClock: void update()>
abstract	<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
static	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
public	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
public	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
static	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>
public	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
public	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
public	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
protected	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
synchronized	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
public	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
abstract	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
private	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
protected	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
public	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
private	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>()>
public	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
public	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
static	<org.prevayler.foundation.Chunking: void <clinit>()>
private	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>	@Replication
public	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
protected	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
public	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
public	<org.prevayler.foundation.Chunk: void <init>(byte[])>
public	<org.prevayler.demos.scalability.Record: void <init>(long)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
static	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
private	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
protected	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>
public	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
public	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
private	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
public	<org.prevayler.foundation.network.ObjectSocket: void close()>
static	<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>
public	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
public	<org.prevayler.foundation.Turn: void end()>
private	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
public	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
public	<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>
public	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>	@Snapshot
public	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>	@Replication
	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
static	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
synchronized	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
public	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
protected	<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
public	<org.prevayler.implementation.PrevaylerImpl: void close()>
static	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
public	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>
	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
public	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
static	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
private	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>	@Censor
private	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
public	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
public	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
public	<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>	@Replication
private	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>
private	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
public	<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>	@GZip
public	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
static	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
public	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
abstract	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>
synchronized	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
private	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
public	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
public	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
public	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
public	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
static	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
private	<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>
abstract	<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>
public	<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>
public	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
public	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
protected	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
static	<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>
private	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
private	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
public	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
public	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
public	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
public	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
static	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>
public	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
static	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
public	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>	@Replication
private	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
public	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
public	<org.prevayler.implementation.journal.PersistentJournal: void close()>
public	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
private	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
public	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
private	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
private	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>()>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>
private	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
static	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
public	<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>
public	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
public	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
static	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
static	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
private	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>	@Replication
public	<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>
abstract	<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>
public	<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>	@Replication
protected	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
synchronized	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
public	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
static	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>
synchronized	<org.prevayler.implementation.clock.PausableClock: void pause()>
synchronized	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
protected	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
public	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
public	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
public	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
static	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
private	<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>	@Replication
public	<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
protected	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
abstract	<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>
public	<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
protected	<org.prevayler.demos.demo2.gui.RobustAction: void action()>
public	<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>	@Replication
public	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
public	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.String name()>
abstract	<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
abstract	<org.prevayler.implementation.journal.Journal: long nextTransaction()>
public	<org.prevayler.foundation.network.NetworkServerObjectReceiver: void shutdown()>
public	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
public	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
private	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
abstract	<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
public	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
public	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
static	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>	@Replication
public	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
public	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
public	<org.prevayler.demos.demo2.business.Account: long balance()>
public	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
abstract	<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>
public	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
public	<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
abstract	<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>
	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
abstract	<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>
private	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
public	<org.prevayler.foundation.Cool: void <init>()>
public	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
abstract	<org.prevayler.demos.demo2.gui.RobustAction: void action()>
public	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
public	<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>	@Replication
public	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
abstract	<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>
private	<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>	@Replication
private	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
private	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>	@Censor
synchronized	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
static	<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>	@Replication
synchronized	<org.prevayler.implementation.replication.ServerConnection: void close()>	@Replication
public	<org.prevayler.demos.scalability.Main: void <init>()>
	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
public	<org.prevayler.foundation.Cool: void sleep(long)>
private	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
public	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
abstract	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String name()>
	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
static	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
public	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
protected	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
private	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
abstract	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.String name()>
static	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
public	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
private	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
public	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
public	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
private	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
protected	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
public	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
synchronized	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
abstract	<org.prevayler.foundation.network.NetworkServerObjectReceiver: void shutdown()>
	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
public	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>
public	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
	<org.prevayler.demos.demo2.MainXStream$1: void <init>()>
protected	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
public	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>	@Snapshot
static	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
public	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
public	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
public	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
static	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
public	<org.prevayler.foundation.network.StubbornNetworkClientConnector: void disconnect()>
	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
synchronized	<org.prevayler.implementation.clock.PausableClock: void resume()>
private	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>
public	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
protected	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
public	<org.prevayler.demos.demo2.business.AccountListener: void accountChanged()>
	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
abstract	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.Object createTestConnection()>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
public	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
synchronized	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
private	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>()>
	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
abstract	<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>
public	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
public	<org.prevayler.demos.demo2.MainTransient: void <init>()>
private	<org.prevayler.demos.demo2.business.AccountEntry: void <init>()>
abstract	<org.prevayler.foundation.network.ObjectSocket: void close()>
public	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
private	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
private	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>	@GZip
private	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
protected	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
protected	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
protected	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
private	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>
	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
public	<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>
public	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
public	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
private	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>
protected	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
private	<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>	@Snapshot
public	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
private	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
private	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
private	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
private	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
public	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>	@Replication
private	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>	@Replication
synchronized	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
static	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
public	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
public	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
public	<org.prevayler.foundation.network.ObjectServerSocket: org.prevayler.foundation.network.ObjectSocket accept()>
abstract	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
public	<org.prevayler.implementation.replication.ClientPublisher: void close()>	@Replication
private	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
abstract	<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
synchronized	<org.prevayler.foundation.Turn: void alwaysSkip()>
static	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
public	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
private	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
public	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
public	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
public	<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>
public	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
abstract	<org.prevayler.implementation.journal.Journal: void close()>
	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
private	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
public	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
abstract	<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>
private	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
public	<org.prevayler.foundation.monitor.NullMonitor: void <init>()>
private	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
protected	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
private	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
public	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
private	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
static	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
static	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
public	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
public	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>	@Replication
private	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
private	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
public	<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
public	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
protected	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
public	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>	@Replication
public	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
static	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>
static	<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>
abstract	<org.prevayler.Prevayler: void takeSnapshot()>
static	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
protected	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
public	<org.prevayler.demos.demo2.MainSkaringa: void <init>()>
private	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
protected	<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>
public	<org.prevayler.implementation.journal.Journal: void close()>
static	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
public	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
public	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
public	<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>	@Replication
synchronized	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
public	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
public	<org.prevayler.PrevaylerFactory: void <init>()>
public	<org.prevayler.foundation.DeepCopier: void <init>()>
static	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
static	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>
static	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>
private	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>	@GZip
public	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
private	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
abstract	<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
public	<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>
	<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>
static	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
public	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
public	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>	@Snapshot
public	<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>
public	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
static	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
public	<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
public	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
public	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
public	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
public	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
public	<org.prevayler.foundation.Guided: void endTurn()>
public	<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
static	<org.prevayler.demos.scalability.Main: void <clinit>()>
static	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>
public	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
protected	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>	@Replication
public	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
public	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
private	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
static	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
public	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
abstract	<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
private	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
public	<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>	@Replication
public	<org.prevayler.implementation.clock.MachineClock: void <init>()>
protected	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
public	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>	@Snapshot
static	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
protected	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
abstract	<org.prevayler.demos.demo2.business.AccountListener: void accountChanged()>
public	<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>
private	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>	@GZip
public	<org.prevayler.implementation.publishing.POBox: void run()>
public	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
public	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
protected	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
public	<org.prevayler.implementation.journal.Journal: long nextTransaction()>
synchronized	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>	@Replication
abstract	<org.prevayler.Prevayler: org.prevayler.Clock clock()>
static	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
static	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
public	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>	@GZip
public	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
synchronized	<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>	@Replication
public	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>
static	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
abstract	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.lang.String table()>
public	<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>
public	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
public	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
public	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
private	<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>	@Snapshot
static	<org.prevayler.foundation.Cool: void sleep(long)>
protected	<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>	@Replication
protected	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
public	<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>
public	<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>
public	<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>
public	<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>	@Replication
public	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
private	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
public	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
private	<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>
	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>
public	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>	@Snapshot
static	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
abstract	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
public	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
private	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
private	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
public	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
public	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
public	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
static	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
private	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
public	<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>
abstract	<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>
private	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
synchronized	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
public	<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
static	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
public	<org.prevayler.demos.demo1.Main: void <init>()>
abstract	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>
public	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
synchronized	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
protected	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String name()>
abstract	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>
public	<org.prevayler.foundation.network.ObjectSocket: java.lang.Object readObject()>
static	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
static	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
public	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>	@Replication
protected	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
abstract	<org.prevayler.foundation.network.StubbornNetworkClientConnector: void disconnect()>
private	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
synchronized	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
private	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
protected	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
abstract	<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
public	<org.prevayler.foundation.network.ObjectReceiver: void close()>
public	<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>
private	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
static	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
private	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
static	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
private	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
private	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
public	<org.prevayler.foundation.network.NetworkImpl: void <init>()>
public	<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>
abstract	<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>
public	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
public	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
static	<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>
synchronized	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
public	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
public	<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>	@Monitor
	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
public	<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>
public	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
private	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>()>
protected	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
public	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
public	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>	@Replication
protected	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
public	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
public	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
static	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
public	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
static	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
public	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
public	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
public	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
public	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
public	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
private	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
abstract	<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>
abstract	<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>
public	<org.prevayler.demos.demo2.business.Account: long number()>
static	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
public	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
public	<org.prevayler.foundation.network.ObjectServerSocket: void close()>
private	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
public	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
public	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
abstract	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
private	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
public	<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
abstract	<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>
static	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
public	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
public	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
public	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>
public	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
static	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
private	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>	@Monitor
public	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>	@Replication
public	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
protected	<org.prevayler.implementation.Capsule: void <init>(byte[])>
private	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
public	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
protected	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
private	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
public	<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>	@Replication
protected	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>	@Replication
public	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
static	<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>	@Snapshot
public	<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>
public	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
public	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>	@Replication
	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
static	<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>
public	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
private	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
private	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
public	<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>
public	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
public	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>	@Replication
public	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
protected	<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>
private	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
public	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>	@Snapshot
synchronized	<org.prevayler.foundation.Turn: void start()>
public	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
public	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
public	<org.prevayler.implementation.clock.PausableClock: void pause()>
protected	<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>
public	<org.prevayler.demos.demo2.business.Bank: void <init>()>
public	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
private	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
abstract	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
synchronized	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
public	<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>
public	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
public	<org.prevayler.demos.demo2.Main: void <init>()>
public	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
abstract	<org.prevayler.foundation.network.ObjectServerSocket: void close()>
public	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
synchronized	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
public	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
static	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
public	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>	@GZip
public	<org.prevayler.Prevayler: void takeSnapshot()>
private	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
private	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
private	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
private	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
public	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
static	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
public	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
private	<org.prevayler.implementation.replication.ServerConnection: void close()>	@Replication
public	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
public	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
static	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>
static	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
public	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
private	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
public	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
public	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
public	<org.prevayler.foundation.DurableInputStream: void close()>
public	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
public	<org.prevayler.demos.scalability.Record: int hashCode()>
abstract	<org.prevayler.Prevayler: void close()>
public	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
public	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>	@Replication
public	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
private	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
public	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
private	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
public	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
private	<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>
public	<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>
public	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>
public	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>	@GZip
private	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
public	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
abstract	<org.prevayler.foundation.network.Network: void stopService(int)>
public	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
public	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
private	<org.prevayler.foundation.Turn: void <init>(int)>
public	<org.prevayler.foundation.Guided: void startTurn()>
public	<org.prevayler.implementation.clock.PausableClock: void resume()>
protected	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
abstract	<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>
public	<org.prevayler.foundation.Turn: void alwaysSkip()>
public	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
private	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
static	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
public	<org.prevayler.Prevayler: void close()>
public	<org.prevayler.demos.scalability.Record: long getId()>
private	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
public	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>
public	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
synchronized	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>	@Replication
static	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
public	<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>
public	<org.prevayler.implementation.publishing.TransactionPublisher: void close()>
private	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
abstract	<org.prevayler.Prevayler: java.lang.Object prevalentSystem()>
public	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
public	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
public	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
public	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
public	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
