0000000000000000
0x
je.disable.java5.latches	@Latches
java.util.concurrent.locks.ReentrantLock	@Latches
java.util.concurrent.locks.ReentrantReadWriteLock	@Latches
LatchImpl	@Latches
Non-blocking lock was denied.
<dbId id=\\\"
\\\"/>
,
,	@Transactions
<<\\"Pass 1: \\">>
<<\\"Pass 2: \\">>
<<\\"End: \\">>
<<\\"processing file \\">>
<<\\".jdb  \\">>
lsn=
<<\\"\\">>
<<\\"Not Exception or Error: \\">>
\\"DupRootRecover:\\"
\\"LNRedo:\\"
\\"LNUndo\\"
TxnCommit
\\"INRecover:\\"
\\"RootRecover:\\"
\\"INDelReplay:\\"
\\"INDupDelReplay:\\"
\\"RootDelete:\\"
Cleaner.addToQueue should never be called.	@Cleaner
<<\\"Already name mapped for dbId: \\">>
Recovery underway, found end of log	@Logging_Config
<<\\"Recovery checkpoint search, \\">>	@Logging_Config
Recovery w/no files.	@Logging_Config
<<\\"There are \\">>	@Transactions /\ Logging_Info
recovery
<<\\"Already saw dupSort entry for dbId: \\">>
RecoveryManager	@Logging_Severe
recover	@Logging_Severe
Couldn\'t recover	@Logging_Severe
<<\\"Couldn\'t recover: \\">>
<<\\"Recovery finished: \\">>
<<\\"Recovery finished: \\">>
lastUsed=
db
<<\\"CleanerRun \\">>	@Cleaner
Log statistics:
DATA=END
Cleaner	@Cleaner /\ Logging_Severe
doClean	@Cleaner /\ Logging_Severe
<<\\"\\">>	@Cleaner /\ Logging_Severe
<<HASH:-870535562>>
type
<<\\"CleanerRun \\">>	@Cleaner
total
provisional
total
min
max
avg
entries
<<\\"\\">>
count
count
bytes
bytes
bytes
bytes
as % of log
\\"<nameLN>\\"
\\"</nameLN>\\"
<<\\"CleanerRun \\">>	@Cleaner
<nameLN>
</nameLN>
\\\">
\\\">
key/data
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
(
<<\\"\nTotal bytes in portion of log read: \\">>
<<\\"Total number of entries: \\">>
<<\\" \\">>
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
\nPer checkpoint interval info:
lnTxn
ln
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
mapLNTxn
mapLN
end-end
end-start
start-end
maxLNReplay
ckptEnd
<<\\"prepare() has already been called for Transaction \\">>	@Transactions
<<\\"Transaction \\">>	@Transactions
<<\\"Transaction \\">>	@(Transactions) /\ (Transactions)
SET
BOTH
SET_RANGE
BOTH_RANGE
readMapIns
<<\\"Commit of transaction \\">>	@(Transactions) /\ (Transactions /\ Logging_Severe)
Txn	@(Transactions) /\ (Transactions /\ Logging_Severe)
commit	@(Transactions) /\ (Transactions /\ Logging_Severe)
<<\\"Failed while attempting to commit transaction \\">>	@(Transactions) /\ (Transactions)
SearchMode.
<<\\"Failed while attempting to commit transaction \\">>	@(Transactions) /\ (Transactions)
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
readNonMapIns
<<\\"Abort:id = \\">>	@Transactions /\ Logging_Fine
<<\\"Transaction \\">>	@Transactions
CleanIN:	@Cleaner /\ Logging_Cleaner
CleanIN:	@Cleaner /\ Logging_Cleaner
CleanIN:	@Cleaner /\ Logging_Cleaner
Txn undo for node=	@Transactions
<<\\"Found unfinished prepare record: id: \\">>	@Transactions /\ Logging_Info
undoLNs
\\\"/>	@(Cleaner) /\ (Cleaner)
\\"_jeIdMap\\"
\\"_jeNameMap\\"
\\"_jeUtilization\\"
_jeIdMap
_jeNameMap
_jeUtilization
_jeIdMap
_jeNameMap
_jeIdMap
_jeNameMap
redoLns
<<\\"Couldn\'t find lock for Node \\">>	@Transactions
<<\\" lsnFromLog:\\">>	@Logging_Severe
RecoveryManager	@Logging_Severe
replaceOrInsert	@Logging_Severe
lsnFromLog=
<<\\"can\'t find database \\">>
<<\\"Can\'t find \\">>	@Transactions
<<\\"Can\'t find \\">>	@Transactions
Trace list:
<<\\"Attempted to \\">>
<<\\"Can\'t \\">>
<<\\"Logged item entrySize= \\">>
lsnFromLog=
RootRecover:	@Logging_Recovery
<<\\"Transaction \\">>	@Transactions
RootRecover:	@Logging_Recovery
<<\\"Transaction \\">>	@Transactions
rename	@RenameOp
<txn id=\\\"	@(Transactions) /\ (Transactions)
\\\">	@(Transactions) /\ (Transactions)
</txn>	@(Transactions) /\ (Transactions)
remove	@DeleteOp
DupRootRecover:	@Logging_Recovery
DupRootRecover:	@Logging_Recovery
<<\\"\\">>
truncate	@TruncateOp
INRecover:	@Logging_Recovery
INRecover:	@Logging_Recovery
INRecover:	@Logging_Recovery
LNRedo:	@Logging_Recovery
\\\">
<ckptStart>
</ckptStart>
<root>
</root>
<firstActive>
LNRedo:	@Logging_Recovery
LNRedo:	@Logging_Recovery
<<\\"Read non-valid log entry type: \\">>
Channel closed, may be due to thread interrupt
</firstActive>
</CkptEnd>
LNUndo	@Logging_Recovery /\ Logging_Base
LNUndo	@Logging_Recovery /\ Logging_Base
<TreeLocation bin=\\\"
null
\\\" index=\\\"
\\\" lnKey=\\\"
\\\" childLsn=\\\"
\\\">
<<\\"Database \\">>	@TruncateOp
<<\\"Can\'t truncate database \\">>	@TruncateOp
<<\\"Recovery Pass \\">>
\\"<bin>\\"
\\"</bin>\\"
<<\\"Recovery Pass \\">>
<<\\" node=\\">>	@Logging_Base
<<\\" lsn=\\">>	@Logging_Base
<<\\" found=\\">>	@Logging_Base
<<\\" replaced=\\">>	@Logging_Base
<<\\" inserted=\\">>	@Logging_Base
<<\\" replacedLsn=\\">>	@Logging_Base
<<\\" abortLsn=\\">>	@Logging_Base
INDupDelReplay:	@(Logging_Recovery) /\ (Logging_Recovery /\ Logging_Base)
INDelReplay:	@(Logging_Recovery) /\ (Logging_Recovery /\ Logging_Base)
<<\\"last LSN = \\">>	@Logging_Severe
<<\\"\\">>
RecoveryManager	@Logging_Severe
last LSN=
RootDelete:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
\\\"/>
nodeId=
\\"<dupCountLN>\\"
\\"</dupCountLN>\\"
<dupCountLN>
</dupCountLN>
\\\"/>
<DbLsn val=\\\"0x
0x
_jeIdMap
_jeNameMap
UTF-8
\\"je.properties\\"
envHome
BIN must be latched before evicting LNs	@Evictor /\ Latches
UTF-8
TxnPrepare
je.properties
<<\\"An error occurred when reading \\">>
\\\">
>
<<\\"There \\">>
is 1 open Database in the Environment.\n
<<\\"are \\">>
\\\" isProvisional=\\\"true
<<\\" open Database in the Environment.\n\\">>
\\\" prev=\\\"0x
Closing the following databases:\n
\\\">
<<\\" \\">>
<bin>
</bin>
<<\\"There \\">>	@Transactions
is 1 existing transaction opened against	@Transactions
BIN
<<\\" the Environment.\n\\">>	@Transactions
<<\\"are \\">>	@Transactions
<dbtree lastId = \\\"
<<\\" existing transactions opened against\\">>	@Transactions
<<\\" the Environment.\n\\">>	@Transactions
\\\">
Aborting open transactions ...\n	@Transactions
<idDb>
</idDb><nameDb>
</nameDb>
</dbtree>
<dbTree lastDbId =\\\"
\\\">
</dbtree>
\\"Delete\\"
\\"Mod:\\"
</entry>
\\";\\"
<<\\" A configuration parameter name can\'t be null or 0 length\\">>
<DbPrintLog>
databaseName
</DbPrintLog>
Environment.open:  name=	@Logging_Finest
<<\\"Database \\">>
<<\\"Database \\">>
<<\\"Attempted to open Database \\">>	@Transactions
.
<<\\"Attempted to open Database \\">>
databaseName	@DeleteOp
databaseName	@RenameOp
newName	@RenameOp
databaseName	@TruncateOp
Transactions can not be used in a non-transactional environment	@Transactions
Only one may be specified: SerializableIsolation, ReadCommitted or ReadUncommitted	@Transactions
<<\\"Usage: \\">>
<<\\" -h  <envHomeDir>\\">>
<<\\" -e  <end file number, in hex>\\">>
<<\\" -k  <binary|text> (format for dumping the key)\\">>
<<\\" -s  <start file number, in hex>\\">>
<<\\" -tx <targetted txn ids, comma separated>\\">>
<<\\" -ty <targetted entry types, comma separated>\\">>
<<\\" -S  show Summary of log entries\\">>
<<\\" -q  if specified, concise version is printed\\">>
<<\\"     Default is verbose version.)\\">>
All arguments are optional
r
rw
api
sync
mutableConfig
<<\\"Cannot read backward over cleaned file from \\">>
<<\\"FileReader read invalid log entry type: \\">>
Attempt to use non-open Environment object().
Delete	@Logging_Finer /\ Latches
Already closed
putNoDupData() called, but database is not configured for duplicate data.
key
<<\\"JoinCursor.getNext(key): \\">>	@Logging_Finest
key
data
<<\\"Problem in fillReadBuffer, readBufferFileNum = \\">>	@Latches
<<\\"JoinCursor.getNext(key,data): \\">>	@Logging_Finest
<
<<\\" exists = \\\"\\">>
\\\">
\\\"/>
ABORT
CASCADE
NULLIFY
ForeignKeyDeleteAction.
\\"RootSplit:\\"
\\"DupRootSplit:\\"
\\"Mut:\\"
\\"Ins:\\"
\\"InsD:\\"
Secondary corrupt
RootLatch	@(Latches) /\ (Latches)
<DatabaseEntry
>
Can\'t replace a duplicate with different data.	@Latches
Mod:	@Logging_Finer /\ Latches
.	@(Memory_Budget) /\ (Memory_Budget)
exactParentFound=
null
\\"je.info\\"
Unexpected interrupt while waiting for fsync	@FSync
<<\\"usage: \\">>	@Cleaner
<<\\"Problem parsing parameter \\">>
<Dbg time=\\\"	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
\\\">	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
<msg val=\\\"	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
\\\"/>	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
</Dbg>	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
-h requires an argument	@Cleaner
-h is a required argument	@Cleaner
File 0x	@Cleaner
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"  File    Size (KB)  % Used\n--------  ---------  ------\\">>	@Cleaner
getFirstNode passed null root
getLastNode passed null root
getParentNode passed null
<<\\"Attempt to \\">>	@DeleteOp
This statement would have triggered an Exception: virtualinvoke searchResult#1.<com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>()
<<\\"Error Key \\">>
UNKNOWN
<<\\"Error Data \\">>
UNKNOWN
<<\\"Error in \\">>	@Cleaner
,-	@Cleaner
<<\\"maxBytes parameter to Database.preload() was specified as \\">>	@Memory_Budget
,	@Cleaner
-	@Cleaner
<database id=\\\"
\\\"
<<\\" btc=\\\"\\">>
\\\"
<<\\" dupc=\\\"\\">>
\\\"
/>
Btree
Duplicate
couldn\'t instantiate class comparator
Cannot write file summary in a read-only environment	@Cleaner
.jdb	@Cleaner
<database>
\\\"/>
<btcf name=\\\"
\\\"/>
<dupcf name=\\\"
\\\"/>
</database>
<<\\"\\">>
<<\\"Exception while trying to load \\">>
<<\\"Exception while trying to load \\">>
subtree did not have a BIN for leaf	@Latches
RootSplit:	@Logging_Fine
searchSubTree passed key and left/right search
.
<<\\"Invalid value of searchType: \\">>
true	@Logging_ConsoleHandler
false	@Logging_DbLogHandler
false	@Evictor
1000	@Evictor
<<\\"Files cleaned: \\">>	@Cleaner
<<\\"\nrecovery time = \\">>
<<\\"action time = \\">>
_jeUtilization	@Transactions /\ Cleaner
_jeUtilization	@Transactions /\ Cleaner
<<\\"\nrecovery time = \\">>
<<\\"action time = \\">>
BIN cursorSet is inconsistent.	@Verifier
<<\\"\nrecovery time = \\">>
Cursor Not Initialized.
Cursor has been closed.
<<\\"Unknown cursor status: \\">>
Cleaner duplicate key sequence file=0x	@Cleaner /\ Logging_Base /\ Logging_Severe
<<\\"action time = \\">>
CURSOR_NOT_INITIALIZED
CURSOR_INITIALIZED
CURSOR_CLOSED
UNKNOWN (
\\\"
cleanedCount=	@Cleaner /\ DeleteOp
\\\"
<<\\"Remove of \\">>	@DeleteOp
\\\"
>\n
<<\\"\\">>
<<\\"\\">>
\n</Cursor>
<<\\"lsn \\">>	@Cleaner /\ Latches
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
Preload starting
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" lnIdx=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" oldLnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" newLnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\"null buffer given to checksum validation, probably  result of 0\'s in log file. \\">>	@Checksum
<<\\"Preloaded \\">>
<<\\"Location \\">>	@Checksum
evict time=	@Evictor
<<\\"Location \\">>	@Checksum
<<\\"A per-thread transaction was created in \\">>
<<\\"Usage: \n \\">>
<<\\"  -h <environment home> \\">>
<<\\"  -a <clean|compress|evict|checkpoint|removedb>\\">>
<<\\"  -ro (read-only - defaults to read-write)\\">>
<<\\"  -s <dbName> (for preloading of evict or db remove)\\">>
\\"<in>\\"
\\"</in>\\"
\\"Split:\\"
\\"Delete:\\"
\\\"/>	@(Checkpointer_Daemon) /\ (Checkpointer_Daemon)
A Transaction cannot be used because the environment was opened non-transactionally	@Transactions
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
daemon	@Checkpointer_Daemon
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
NULL_LSN without KnownDeleted
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
\\\">
</ref>
<lsn/>
<key/>
<target/>
<knownDeleted val=\\\"
\\\"/>
<pendingDeleted val=\\\"
\\\"/>
\\\"/>
This statement would have triggered an Exception: virtualinvoke dupRoot#4.<com.sleepycat.je.tree.DIN: void releaseLatch()>()
neither LN or DIN found in BIN
NULL_LSN without KnownDeleted
\n
<<\\"fetchTarget of \\">>
null lsn
<<\\"-Warning: Out of sync. Should be \\">>	@Memory_Budget
<<\\"usage: \\">>	@Statistics /\ Verifier
<<\\"usage: \\">>	@(Statistics /\ Verifier) /\ (Statistics /\ Verifier)
-h requires an argument	@Statistics /\ Verifier
-s requires an argument	@Statistics /\ Verifier
-v requires a positive argument	@Statistics /\ Verifier
-v requires an argument	@Statistics /\ Verifier
-h is a required argument	@Statistics /\ Verifier
-s is a required argument	@Statistics /\ Verifier
<<\\"DbStat.stats of \\">>	@(Statistics /\ Verifier) /\ (Logging_Info /\ Verifier /\ Statistics)
<<\\"DbStat.stats of \\">>	@(Statistics /\ Verifier) /\ (Logging_Info /\ Verifier /\ Statistics)
DupRootSplit:	@Logging_Fine
\\\"/>
<<\\"Node \\">>
<<\\"Shutting down \\">>
Exiting
Continuing
idkey is null
<key v=\\\"
<null>
allowDuplicates passed to insert but database doesn\'t have allow duplicates set.
<null>
<<\\"\\">>
\\\"/>
key=
.
.
.
.
<<\\" (\\">>
)
\\"<node>\\"
\\"</node>\\"
NEW
WAIT_NEW
PROMOTION
WAIT_PROMOTION
EXISTING
DENIED
WAIT_RESTART
NONE_NEEDED
matchLNByNodeId called on non DIN/DBIN
<node>
<<\\"usage: \\">>
<<\\"IN \\">>
</node>
<<\\"IN \\">>
<<\\"SubtreeRemoval: subtreeRoot = \\">>	@Logging_Fine
<
<<\\"Found non-deletable IN \\">>
<node>
</node>
<root>
</root>
<tree>
<in/>
</tree>
-f requires an argument
-h requires an argument
-s requires an argument
<<\\"-c: \\">>
-c requires an argument
<<\\"IN \\">>
-h is a required argument
-v requires -f
<<\\"IN \\">>
<<\\"IN \\">>
<<\\"failed adding in \\">>	@Memory_Budget
<<\\"Invalid value of searchType: \\">>
size=
Mut:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" existingLn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
db=
<<\\" newLn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newLnLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\"DbLoad.load of \\">>	@Logging_Info
<<\\" dupCountLN=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dupRootLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\"Load start: \\">>
Must supply a database name if -l not supplied.
<<\\" rootdin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" ddinLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\"DbLoad.load of \\">>	@Logging_Info
<<\\"Load end: \\">>
<<\\" dbin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
SUCCESS
FILLED_CACHE
EXCEEDED_TIME
<<\\" dbinLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" bin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
PreloadStatus.
<<\\"Invalid header parameter: \\">>
<<\\"Version \\">>
Bad value for timeout:
Ins:	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
\'
<<\\" lnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" index=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
Bad value for timeout:
InsD:	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" dbin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\"No data to match key \\">>
<<\\" lnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\"Key exists: \\">>
allowCreate=
<<\\"loaded \\">>
No \\\"DATA=END\\\"
Corrupted file
Corrupted file
\\"daemon\\"
\\"manual\\"
\\"critical\\"
<isRoot val=\\\"
\\\"/>
<level val=\\\"
\\\"/>
<entries numEntries=\\\"
\\\" length=\\\"
\\\" baseFileNumber=\\\"
\\\"/>	@(Evictor) /\ (Evictor)
\\\">
\\\">
Evictor.addToQueue should never be called.	@Evictor /\ EvictorDaemon
</ref>
</entries>
<in>
</in>
daemon	@Evictor /\ EvictorDaemon
<<\\"Cursor.count: \\">>	@Logging_Finest
delete
<<\\"Cursor.delete: \\">>	@Logging_Finest
key
data
put
<<\\"Cursor.put: \\">>	@Logging_Finest
critical	@Evictor /\ Memory_Budget /\ Critical_Eviction
key
data
putNoOverwrite
<<\\"Cursor.putNoOverwrite: \\">>	@Logging_Finest
<idkey>
<<\\"\\">>
key
</idkey>
data
putNoDupData
\\\"/>
<<\\"Cursor.putNoDupData: \\">>	@Logging_Finest
\\\"/>
<level val=\\\"
data
putCurrent
\\\"/>
<<\\"Cursor.putCurrent: \\">>	@Logging_Finest
\\\"/>
<entries nEntries=\\\"
\\\">
<<\\"Cursor.getCurrent: \\">>	@Logging_Finest
<entry id=\\\"
<lsn/>
<<\\"Cursor.getFirst: \\">>	@Logging_Finest
<key/>
<target/>
<<\\"Cursor.getLast: \\">>	@Logging_Finest
\\\"/>
</entry>
</entries>
<<\\"Cursor.getNext: \\">>	@Logging_Finest
<knownDeleted val=\\\"
\\\"/>
<pendingDeleted val=\\\"
\\\"/>
<<\\"Cursor.getNextDup: \\">>	@Logging_Finest
IN
<<\\"Cursor.getNextNoDup: \\">>	@Logging_Finest
Split:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" parent=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" child=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\"Cursor.getPrev: \\">>	@Logging_Finest
<<\\" newSibling=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" parentLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" childLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newSiblingLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" splitIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" idKeyIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" childIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\"Cursor.getPrevDup: \\">>	@Logging_Finest
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
Delete:	@(Logging_Finest) /\ (Logging_Finest /\ Logging_Base)
<<\\"Cursor.getPrevNoDup: \\">>	@Logging_Finest
<<\\" index=\\">>	@(Logging_Finest) /\ (Logging_Finest /\ Logging_Base)
DEFAULT
READ_UNCOMMITTED
READ_COMMITTED
RMW
key
data
<<\\"Cursor.getSearchKey: \\">>	@Logging_Finest
LockMode.
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
key
data
<<\\"Cursor.getSearchKeyRange: \\">>	@Logging_Finest
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
DbState.
<<\\"Cursor.getSearchBoth: \\">>	@Logging_Finest
<<\\"latches held = \\">>	@Evictor
TxnAbort
<<\\"Cursor.getSearchBothRange: \\">>	@Logging_Finest
)	@Latches
<<\\"<LATCH \\">>	@Latches
<<\\"] \\">>	@Latches
]	@Latches
<<\\" [waiters: \\">>	@Latches
<<\\" \\">>	@Latches
]	@Latches
>	@Latches
<<\\" IN type=\\">>	@Evictor
\\"!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\"
All nodes should have been loaded	@Cleaner
<<\\"Database \\">>	@Evictor
!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
false	@Logging_DbLogHandler
true	@Logging_ConsoleHandler
SEVERE	@Logging_Base
false
<<\\"java { \\">>
\\"usage: java <utility> [options...]\\"
\\"com.sleepycat.je.util.\\"
Missing utility name
com.sleepycat.je.util.
put passed a null DatabaseEntry arg
put passed a null DatabaseEntry arg
unknown PutMode
usage: java <utility> [options...]
<Transaction id=\\\"	@(Transactions) /\ (Transactions)
\\\"	@(Transactions) /\ (Transactions)
<<\\" name=\\\"\\">>	@(Transactions) /\ (Transactions)
\\\"	@(Transactions) /\ (Transactions)
>	@(Transactions) /\ (Transactions)
non LogEntryType passed to LogEntryType.compare
<<\\"Transaction \\">>	@Transactions
<<\\"usage: \\">>	@(Statistics /\ Verifier) /\ (Statistics /\ Verifier)
\\"<din>\\"
\\"</din>\\"
<<\\"Exit status = \\">>	@Statistics /\ Verifier
<<\\"Exit status = \\">>	@Statistics /\ Verifier
<<\\"Exit status = \\">>	@Statistics /\ Verifier
-h requires an argument	@Statistics /\ Verifier
-s requires an argument	@Statistics /\ Verifier
-v requires a positive argument	@Statistics /\ Verifier
-v requires an argument	@Statistics /\ Verifier
-h is a required argument	@Statistics /\ Verifier
-s is a required argument	@Statistics /\ Verifier
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
This statement would have triggered an Exception: $stack45 = result#4.<com.sleepycat.je.dbi.CursorImpl$KeyChangeStatus: com.sleepycat.je.OperationStatus status>
Checking obsolete offsets ...	@Statistics /\ Verifier
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
<din>
</din>
<dupkey>
<<\\"\\">>
</dupkey>
<dupCountLN/>
foreignKeyDeleteAction
DIN
NEXT
PREV
NEXT_DUP
PREV_DUP
NEXT_NODUP
PREV_NODUP
The SecondaryConfig argument is null.
LN_TX
LN
MapLN_TX
The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
MapLN
<<\\" SecondaryKeyCreator\n\\">>
<<\\" SecondaryMultiKeyCreator\n\\">>
NameLN_TX
<<\\" ForeignKeyDelete\n\\">>
NameLN
<<\\" ForeignKeyDeleteAction\n\\">>
<<\\" ForeignKeyNullifier\n\\">>
DelDupLN_TX
<<\\" ForeignMultiKeyNullifier\n\\">>
<<\\" ImmutableSecondaryKey\n\\">>
DelDupLN
DupCountLN_TX
DupCountLN
FileSummaryLN	@Cleaner
IN
BIN
DIN
DBIN
Root
Commit
Abort
CkptStart
CkptEnd
INDelete
BINDelta
DupBINDelta
Trace
FileHeader
INDupDelete
Prepare
<lastFullLsn>
</lastFullLsn>
\\\"/>
\\".jdb\\"
\\".cif\\"
\\".del\\"
\\".bad\\"
\\".lck\\"
.del
.jdb
.jdb
.del
<<\\"Environment home \\">>
READ
WRITE
RANGE_READ
RANGE_WRITE
RANGE_INSERT
NONE
RESTART
.jdb
\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\"
.jdb
idKey=
\\"LatchImpl\\"
<<\\"\\">>
.
<<\\"Couldn\'t rename \\">>
<<\\"Couldn\'t delete \\">>
LatchImpl	@Latches
unknown GetMode
waitTarget.active but not owner	@(Latches) /\ (Latches)
No value after -records	@(Memory_Budget) /\ (Memory_Budget)
<<\\"Couldn\'t open file \\">>
No value after -key	@(Memory_Budget) /\ (Memory_Budget)
<<\\"Couldn\'t open file \\">>
No value after -data	@(Memory_Budget) /\ (Memory_Budget)
No value after -nodemax	@(Memory_Budget) /\ (Memory_Budget)
No value after -density	@(Memory_Budget) /\ (Memory_Budget)
No value after -overhead	@(Memory_Budget) /\ (Memory_Budget)
No value after -measure	@(Memory_Budget) /\ (Memory_Budget)
<<\\"Unknown arg: \\">>	@(Memory_Budget) /\ (Memory_Budget)
Channel closed, may be due to thread interrupt
<<\\"IOException caught: \\">>
<<\\"File \\">>
-records not specified	@(Memory_Budget) /\ (Memory_Budget)
-key not specified	@(Memory_Budget) /\ (Memory_Budget)
fsyncLatch	@FSync /\ Latches
<<\\"usage:\njava \\">>	@Memory_Budget
FileManager would overwrite non-empty file 0x
generated for testing
File closed, may be due to thread interrupt
generated for testing	@DiskFullErro
<<\\"A transaction was not supplied when opening this cursor: \\">>
key
data
key
data
Inputs: records=	@Memory_Budget
<<\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\">>	@Memory_Budget
Minimum, internal nodes only	@Memory_Budget
Maximum, internal nodes only	@Memory_Budget
Minimum, internal nodes and leaf nodes	@Memory_Budget
Maximum, internal nodes and leaf nodes	@Memory_Budget
\nTo get leaf node sizing specify -data	@Memory_Budget
<<\\"\nBtree levels: \\">>	@Memory_Budget
copy.remaining=
.
<<\\"Directory is not empty: \\">>	@Memory_Budget
<<\\"\nMeasuring with cache size: \\">>	@Memory_Budget
Stats for internal and leaf nodes (after insert)	@Memory_Budget /\ Statistics
<<\\"\nPreloading with cache size: \\">>	@Memory_Budget
Stats for internal nodes only (after preload)	@Memory_Budget /\ Statistics
<<\\"During close: \\">>	@Memory_Budget
je.lck	@(Environment_Locking) /\ (Environment_Locking)
rw	@(Environment_Locking) /\ (Environment_Locking)
<<\\"During close: \\">>	@Memory_Budget
<<\\"Usage: \\">>
<<\\"                 -h <environment home>\\">>
(optional)
<<\\"                 -f <file number, in hex>\\">>
<<\\"                 -o <offset, in hex>\\">>
<<\\"A je.lckfile exists in \\">>	@(Environment_Locking) /\ (Environment_Locking)
Log file is truncated at position starting at and inclusive of the offset. Beware, not  for general purpose use yet!
shared	@(Environment_Locking) /\ (Environment_Locking)
single writer	@(Environment_Locking) /\ (Environment_Locking)
foo	@Memory_Budget
<<\\"The Environment directory \\">>
*** Key doesn\'t fit value=	@Memory_Budget
Random key already exists -- retrying	@Memory_Budget
<<\\"*** \\">>	@Memory_Budget
<<\\"*** Ran out of cache memory at record \\">>	@Memory_Budget /\ Statistics
.	@Memory_Budget
Write after RunRecoveryException
Randomly generated for testing
CacheSize=	@Memory_Budget /\ Statistics
<<\\"usage: \\">>
*** All records did not fit in the cache ***	@Memory_Budget /\ Statistics
<<\\"Environment invalid because of previous exception: \\">>
-f requires an argument
-h requires an argument
-d requires an argument
-s requires an argument
-h is a required argument
Must supply a database name if -l not supplied.
true
false
remaining=
<<\\"DbDump.dump of \\">>	@Logging_Info
DATA=END
<<\\"DbDump.dump of \\">>	@Logging_Info
VERSION=3
format=print
format=bytevalue
type=btree
dupsort=
1
0
HEADER=END
\n
\\"je.disable.java.adler32\\"
Channel closed, may be due to thread interrupt
MapTreeRoot	@Latches
Can\'t set \'je.env.isNoLocking\' and \'je.env.isTransactional\';	@Transactions
<<\\"Enviroment creation isn\'t allowed,  but there is no pre-existing  environment in \\">>
TriggerLatch	@Latches
\\\">
</INDeleteEntry>
Evictor	@Evictor
Checkpointer	@Checkpointer_Daemon
INCompressor	@INCompressor
Cleaner	@Cleaner
\\"sun.arch.data.model\\"
\\"je.forceJVMArch\\"
1.4 based 64 bit JVM not supported	@Memory_Budget
Attempt to use a Environment that has been closed.
Mac OS X
\\"<fileSummaryLN>\\"
\\"</fileSummaryLN>\\"
<<\\"Close of environment \\">>	@Logging_Fine
close
<<\\"\nException shutting down daemon threads: \\">>
\n
<<\\"Env \\">>	@Logging_Fine
<<\\"\nException clearing file manager: \\">>
\n
<<\\"\nException clearing file manager: \\">>
\n
UTF-8	@Cleaner
<fileSummaryLN>	@(Cleaner) /\ (Cleaner)
<<\\"Problem: \\">>	@Statistics /\ CheckLeaks
</fileSummaryLN>	@(Cleaner) /\ (Cleaner)
<<\\"Problem: \\">>	@Transactions /\ CheckLeaks /\ Statistics
Some latches held at env close.	@CheckLeaks /\ Latches
Lock, transaction, or latch left behind at environment close
Txnl access to UP db not allowed	@(Cleaner) /\ (Cleaner)
File Flip	@Logging_FileHandler /\ Logging_Base
manual	@Evictor
<<\\"\\">>
<<\\"Cache percent is not a valid integer: \\">>
beginTransaction called,  but Environment was not opened with transactional cpabilities	@Transactions
txnId=
primaryDatabase
Can\'t use as primary:
<<\\"Duplicates must not be allowed for a primary database: \\">>
Primary and secondary databases must be in the same environment
secConfig.getKeyCreator() and getMultiKeyCreator() may not both be non-null
secConfig and getKeyCreator()/getMultiKeyCreator() may be null only if the primary database is read-only
secConfig.getForeignKeyNullifier() and getForeignMultiKeyNullifier() may not both be non-null
<<\\"environmentImpl is null for target db \\">>
ForeignKeyNullifier or ForeignMultiKeyNullifier must be non-null when ForeignKeyDeleteAction is NULLIFY
ForeignKeyNullifier may not be used with SecondaryMultiKeyCreator -- use ForeignMultiKeyNullifier instead
<<\\"Duplicates must not be allowed for a foreign key  database: \\">>
<<\\"Secondary is already associated with a different primary: \\">>
\n	@(Statistics) /\ (Statistics)
SecondaryDatabase open	@Logging_Finest
numBottomInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
numInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
numDuplicateInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
numDuplicateBottomInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
key
Can\'t call SecondaryDatabase.delete:
SecondaryDatabase.delete	@Logging_Finest
key
pKey
data
Can\'t call SecondaryDatabase.get:
SecondaryDatabase.get	@Logging_Finest
Usage: EnvironmentParams <samplePropertyFile>
####################################################\n# Example Berkeley DB, Java Edition property file\n# Each parameter is set to its default value\n####################################################\n\n
key
#
pKey
data
Can\'t call SecondaryDatabase.getSearchBoth:
SecondaryDatabase.getSearchBoth	@Logging_Finest
<<\\"No transaction found for \\">>	@Transactions
.bad
<<\\"No transaction found for \\">>	@(Transactions) /\ (Transactions)
\\"CleanIN:\\"
\\"CleanLN:\\"
\\"CleanMigrateLN:\\"
\\"CleanPendingLN:\\"
<<\\"No transaction found for \\">>	@(Transactions) /\ (Transactions)
\\"                                                                                                                                \\"
<<\\"                                                                                                                                \\">>
<<\\"Both \\">>	@Cleaner
<<\\" \\">>
null
<<\\"Secondary \\">>
<<\\"Secondary \\">>
<<\\"\\">>	@Cleaner
<<\\"Could not insert secondary key in \\">>
<<\\"txnId = \\">>	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
<<\\"Secondary \\">>
<<\\"Cleaner has \\">>	@Cleaner /\ Environment_Locking /\ Logging_Severe
.del	@Cleaner /\ Environment_Locking
Cleaner deleted file 0x	@Cleaner /\ Environment_Locking /\ Logging_Severe
Log file 0x	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
deleted	@Cleaner /\ Logging_Severe
renamed	@Cleaner /\ Logging_Severe
Cleaner	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
deleteSafeToDeleteFiles	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
<<\\"Secondary \\">>
Operation not allowed on a secondary
initialized
open
closed
invalid
<<\\"Can\'t go from environment state \\">>
nGets=	@(Statistics) /\ (Statistics)
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner
CleanPendingLN:	@Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
<LockInfo locker=\\\"
\\\" type=\\\"
\\\"/>
<<\\" lock taken at: \\">>
<knownDeleted val=\\\"
true
false
\\\"/>
CleanMigrateLN:	@Cleaner
CleanMigrateLN:	@Cleaner
CleanMigrateLN:	@Cleaner
Nested transactions are not supported yet.	@Transactions
<<\\"XA Transaction \\">>	@Transactions
\n
SUCCESS
KEYEXIST
KEYEMPTY
NOTFOUND
OperationStatus.
OPEN
CLOSED
INVALID
DatabaseConfig.setReadOnly() must be set to false when creating a Database
activeTxns=[	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
]\n	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
<<\\"You can\'t open a Database with a duplicatesAllowed configuration of \\">>
<<\\"You can\'t open a Database with a transactional configuration of \\">>	@Transactions
\\"<mapLN>\\"
\\"</mapLN>\\"
Can\'t close Database:
<<\\"Database.close: \\">>	@Logging_Finest
There are open cursors against the database.\n
They will be closed.\n
<mapLN>
</mapLN>
key
Can\'t call Database.openSequence:
openSequence
Database.openSequence	@Logging_Finest
\\\">
Can\'t open a cursor
Only one may be specified: ReadCommitted or ReadUncommitted
Database.openCursor	@Logging_Finest
key
Can\'t call Database.delete:
delete
Database.delete	@Logging_Finest
<offsets size=\\\"
\\\">
0x
</offsets>
<offsets size=\\\"0\\\"/>
key
data
Can\'t call Database.get:
Database.get	@Logging_Finest
key
data
Can\'t call Database.getSearchBoth:
Database.getSearchBoth	@Logging_Finest
<<\\"Obsolete lsns contains valid lsn \\">>	@Verifier
<<\\"Tree contains obsolete lsn \\">>	@Verifier
Lsn mismatch	@Verifier
key
data
Can\'t call Database.put
put
Database.put	@Logging_Finest
key
data
Can\'t call Database.putNoOverWrite
putNoOverwrite
Database.putNoOverwrite	@Logging_Finest
<<\\"CleanAddPendingDB \\">>	@(Cleaner /\ DeleteOp) /\ (DeleteOp /\ Cleaner /\ Logging_Cleaner)
key
data
Can\'t call Database.putNoDupData
putNoDupData
Database.putNoDupData	@Logging_Finest
<<\\" node=\\">>	@Cleaner /\ Logging_Cleaner /\ Logging_Base
<<\\" logLsn=\\">>	@Cleaner /\ Logging_Cleaner /\ Logging_Base
Can\'t call Database.join
cursors
At least one cursor is required.
All cursors must use the same transaction.	@Transactions
All cursors must use the same environment.	@Transactions
All cursors must use the same transaction.	@Transactions
<<\\"Wrong filenum in header for file \\">>
Can\'t call Database.truncate	@TruncateOp
truncate	@TruncateOp
Database.truncate: txnId=	@Logging_Finest /\ TruncateOp
null	@Latches /\ TruncateOp
<<\\"Expected log version 3 or earlier but found \\">>
<FileHeader num=\\\"0x
couldn\'t find database - truncate	@TruncateOp
truncate	@DeleteOp /\ TruncateOp
\\\" lastEntryInPrevFileOffset=\\\"0x
\\\" logVersion=\\\"0x
\\\"/>
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.stat	@Statistics
stat	@DeleteOp /\ Statistics
Can\'t call Database.verify	@Statistics /\ Verifier
verify	@DeleteOp /\ Verifier /\ Statistics
<<\\"Database is Read Only: \\">>
<<\\" name=\\">>	@Logging_Finest /\ Logging_Base
\\\">
</INDupDeleteEntry>
<summary totalCount=\\\"	@Cleaner
\\\" totalSize=\\\"	@Cleaner
\\\" totalINCount=\\\"	@Cleaner
\\\" totalINSize=\\\"	@Cleaner
\\\" totalLNCount=\\\"	@Cleaner
\\\" totalLNSize=\\\"	@Cleaner
\\\" obsoleteINCount=\\\"	@Cleaner
\\\" obsoleteLNCount=\\\"	@Cleaner
\\\"/>	@Cleaner
<<\\"DatabaseEntry \\">>
<<\\"Data field for DatabaseEntry \\">>
A partial key DatabaseEntry is not allowed
<<\\"Dup Offset \\">>
\\\">
>
\\\" gTxnId=\\\"
null
\\\" bqual=\\\"
null
\\\"/>
\\"<dbin>\\"
\\"</dbin>\\"
.
.
<dbin>
</dbin>
A checksum error was found in the log.
<<\\"Corruption begins at LSN:\n   \\">>
<<\\"Last known good record before corruption is at LSN:\n   \\">>
<<\\"Next known good record after corruption is at LSN:\n   \\">>
<dupkey>
<<\\"\\">>
</dupkey>
\\"  File    Size (KB)  % Used\n--------  ---------  ------\\"
DBIN
<<\\"<LatchWaiter: \\">>	@(Latches) /\ (Latches)
\\"<ln>\\"
\\"</ln>\\"
<<\\" TOTALS \\">>	@(Cleaner) /\ (Cleaner)
<<\\"  \\">>	@(Cleaner) /\ (Cleaner)
<<\\"     \\">>	@(Cleaner) /\ (Cleaner)
<ln>
</ln>
<data>
</data>
Btree
Duplicate
The following DatabaseConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
<<\\" Transactional\n\\">>	@Transactions
<<\\" Read-Only\n\\">>
<<\\" Sorted Duplicates\n\\">>
<<\\" Btree Comparator\n\\">>
<<\\" Duplicate Comparator\n\\">>
<data>
</data>
delete
<<\\"SecondaryCursor.delete: \\">>	@Logging_Finest
\\"INCompress:\\"
<<\\"SecondaryCursor.getCurrent: \\">>	@Logging_Finest
\\\"/>	@(INCompressor) /\ (INCompressor)
<<\\"SecondaryCursor.getFirst: \\">>	@Logging_Finest
INCompressor.addToQueue should never be called.	@INCompressor
<<\\"SecondaryCursor.getLast: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getNext: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getNextDup: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getNextNoDup: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getPrev: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getPrevDup: \\">>	@Logging_Finest
<<\\"InCompress.doCompress called, queue size: \\">>	@INCompressor /\ Logging_Fine
<<\\"SecondaryCursor.getPrevNoDup: \\">>	@Logging_Finest
key
pKey
data
<<\\"SecondaryCursor.getSearchKey: \\">>	@Logging_Finest
key
pKey
data
<<\\"SecondaryCursor.getSearchKeyRange: \\">>	@Logging_Finest
key
pKey
data
<<\\"SecondaryCursor.getSearchBoth: \\">>	@Logging_Finest
key
pKey
data
<<\\"SecondaryCursor.getSearchBothRange: \\">>	@Logging_Finest
key
pKey
data
Sequences not supported in databases configured for duplicates
Minimum sequence value must be less than the maximum
Initial sequence value is out of range
The cache size is larger than the sequence range
ExclusiveCreate=true and the sequence record already exists.
Sequence record removed during openSequence.
AllowCreate=false and the sequence record does not exist.
Sequence delta must be greater than zero
Sequence delta is larger than the range
<<\\"Sequence overflow \\">>
Sequence.get value=	@Logging_Finest /\ Logging_Base
The sequence record has been deleted while it is open.
<<\\"locker \\">>
<<\\"locker \\">>
<<\\" Owners:\\">>
<<\\" (none)\\">>
<<\\" Waiters:\\">>
<<\\" (none)\\">>
Recovery Info
<<\\" lastUsed=\\">>
<<\\" nextAvail=\\">>
<<\\" ckptStart=\\">>
<<\\" firstActive=\\">>
<<\\" ckptEnd=\\">>
<<\\" useRoot=\\">>
>
----- Event Dump -----
<<\\"Lock Table \\">>	@Latches
Transaction
Lock
Transaction
++++++++++ begin lock table dump ++++++++++
++++++++++ end lock table dump ++++++++++
: waited for lock
\n
<<\\"Transfer, lock \\">>
<<\\"Transfer, lock \\">>
----\n
\n
<<\\" waits for \\">>
<<\\" nothing\\">>
<<\\" node \\">>
\n
<<\\"Transaction \\">>
