<<unique-context>>	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<<unique-context>>	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<<unique-context>>	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<<unique-context>>	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.Cool: void sleep(long)>
<<unique-context>>	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<<unique-context>>	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<<unique-context>>	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<<unique-context>>	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>
<<unique-context>>	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>
<<unique-context>>	<org.prevayler.foundation.Chunking: void <clinit>()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void <clinit>()>
<<unique-context>>	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher$1: void run()>
<<unique-context>>	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>
<<unique-context>>	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.journal.TransientJournal: void close()>
<<unique-context>>	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<<unique-context>>	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<<unique-context>>	<org.prevayler.implementation.publishing.POBox: void run()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<<unique-context>>	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>
<<unique-context>>	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<<unique-context>>	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<<unique-context>>	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<<unique-context>>	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<<unique-context>>	<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>
<<unique-context>>	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<<unique-context>>	<org.prevayler.foundation.Chunking: void <init>()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
<<unique-context>>	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>
<<unique-context>>	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>
<<unique-context>>	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>
<<unique-context>>	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection$1: void run()>
<<unique-context>>	<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>
<<unique-context>>	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.MainTransient: void <init>()>
<<unique-context>>	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<<unique-context>>	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
<<unique-context>>	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<<unique-context>>	<org.prevayler.implementation.Capsule: byte[] serialized()>
<<unique-context>>	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>
<<unique-context>>	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.Main: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.MainSkaringa: void <init>()>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
<<unique-context>>	<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>
<<unique-context>>	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<<unique-context>>	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<<unique-context>>	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>
<<unique-context>>	<org.prevayler.foundation.Turn: void start()>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>
<<unique-context>>	<org.prevayler.foundation.Turn: void end()>
<<unique-context>>	<org.prevayler.foundation.Turn: void alwaysSkip()>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void run()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<<unique-context>>	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<<unique-context>>	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: long number()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: long balance()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<<unique-context>>	<org.prevayler.foundation.DeepCopier: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>
<<unique-context>>	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<<unique-context>>	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<<unique-context>>	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>
<<unique-context>>	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<<unique-context>>	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>
<<unique-context>>	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<<unique-context>>	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
<<unique-context>>	<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<<unique-context>>	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<<unique-context>>	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>
<<unique-context>>	<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<<unique-context>>	<org.prevayler.demos.demo2.MainXStream: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: void close()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
<<unique-context>>	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<<unique-context>>	<org.prevayler.foundation.Cool: void <init>()>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>
<<unique-context>>	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>
<<unique-context>>	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<<unique-context>>	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: void <init>(long)>
<<unique-context>>	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<<unique-context>>	<org.prevayler.foundation.DurableInputStream: void close()>
<<unique-context>>	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
<<unique-context>>	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<<unique-context>>	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<<unique-context>>	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<<unique-context>>	<org.prevayler.demos.scalability.Record: long getId()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
<<unique-context>>	<org.prevayler.implementation.clock.MachineClock: void <init>()>
<<unique-context>>	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: int hashCode()>
<<unique-context>>	<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>
<<unique-context>>	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<<unique-context>>	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<<unique-context>>	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<<unique-context>>	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<<unique-context>>	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>
<<unique-context>>	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void close()>
<<unique-context>>	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<<unique-context>>	<org.prevayler.foundation.monitor.NullMonitor: void <init>()>
<<unique-context>>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<<unique-context>>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<<unique-context>>	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerListener: void run()>
<<unique-context>>	<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>
<<unique-context>>	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<<unique-context>>	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkImpl: void <init>()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: void close()>
<<unique-context>>	<org.prevayler.foundation.FileManager: void <init>()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<<unique-context>>	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<<unique-context>>	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
<<unique-context>>	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<<unique-context>>	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
<<unique-context>>	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
<<unique-context>>	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<<unique-context>>	<org.prevayler.demos.demo1.Main: void <init>()>
<<unique-context>>	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>
<<unique-context>>	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<<unique-context>>	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.Guided: void startTurn()>
<<unique-context>>	<org.prevayler.foundation.Guided: void endTurn()>
<<unique-context>>	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.foundation.FileLocker: void release()>
<<unique-context>>	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<<unique-context>>	<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>
<<unique-context>>	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<<unique-context>>	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<<unique-context>>	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>
<<unique-context>>	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<<unique-context>>	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>
<<unique-context>>	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>
<<unique-context>>	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<<unique-context>>	<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>
<<unique-context>>	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
<<unique-context>>	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>
<<unique-context>>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>
<<unique-context>>	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
<<unique-context>>	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void close()>
<<unique-context>>	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>
<<unique-context>>	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>
<<unique-context>>	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>
<<unique-context>>	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>
<<unique-context>>	<org.prevayler.demos.demo2.MainReplica: void <init>()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<<unique-context>>	<org.prevayler.foundation.Chunk: void <init>(byte[])>
<<unique-context>>	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<<unique-context>>	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<<unique-context>>	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.Chunk: java.util.Map getParameters()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<<unique-context>>	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<<unique-context>>	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
<<unique-context>>	<org.prevayler.implementation.clock.PausableClock: void pause()>
<<unique-context>>	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<<unique-context>>	<org.prevayler.implementation.clock.PausableClock: void resume()>
<<unique-context>>	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: void close()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void <init>()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<<unique-context>>	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<<unique-context>>	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<<unique-context>>	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>
<<unique-context>>	<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: void <clinit>()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>
<<unique-context>>	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<<unique-context>>	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
<<unique-context>>	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<<unique-context>>	<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>
<<unique-context>>	<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<<unique-context>>	<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<<unique-context>>	<java.lang.Thread: void sleep(long)>
<<unique-context>>	<org.prevayler.demos.demo1.Main: void printMessage()>
<<unique-context>>	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>
<<unique-context>>	<java.io.OutputStream: void write(byte[])>
<<unique-context>>	<java.io.OutputStream: void write(int)>
<<unique-context>>	<java.lang.Object: void wait()>
<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<<unique-context>>	<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>
<<unique-context>>	<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>
<<unique-context>>	<java.lang.Thread: void yield()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
<<unique-context>>	<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>
<<unique-context>>	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<<unique-context>>	<java.io.IOException: void <init>(java.lang.String)>
<<unique-context>>	<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<<unique-context>>	<java.util.LinkedHashMap: void <init>()>
<<unique-context>>	<java.io.EOFException: void <init>(java.lang.String)>
<<unique-context>>	<java.io.File: void <init>(java.lang.String)>
<<unique-context>>	<java.io.FileInputStream: void <init>(java.io.File)>
<<unique-context>>	<java.io.ByteArrayOutputStream: void <init>()>
<<unique-context>>	<java.io.ByteArrayInputStream: void <init>(byte[])>
<<unique-context>>	<java.io.PipedOutputStream: void <init>()>
<<unique-context>>	<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>
<<unique-context>>	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<<unique-context>>	<org.prevayler.demos.demo2.MainXStream$1: void <init>()>
<<unique-context>>	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<<unique-context>>	<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<<unique-context>>	<java.lang.Thread: void <init>(java.lang.Runnable)>
<<unique-context>>	<org.prevayler.demos.demo1.NumberKeeper: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<<unique-context>>	<org.prevayler.foundation.StopWatch: void <init>()>
<<unique-context>>	<org.prevayler.foundation.Turn: void <init>(int)>
<<unique-context>>	<java.io.PipedOutputStream: void close()>
<<unique-context>>	<java.lang.Thread: void setDaemon(boolean)>
<<unique-context>>	<java.lang.Thread: void start()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>
<<unique-context>>	<java.lang.StringBuilder: void <init>()>
<<unique-context>>	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<<unique-context>>	<java.lang.System: void gc()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<<unique-context>>	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<<unique-context>>	<java.lang.Object: void notify()>
<<unique-context>>	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<<unique-context>>	<javax.swing.JFrame: void setDefaultCloseOperation(int)>
<<unique-context>>	<javax.swing.JFrame: void setContentPane(java.awt.Container)>
<<unique-context>>	<javax.swing.JFrame: void setBounds(int,int,int,int)>
<<unique-context>>	<javax.swing.JFrame: void setVisible(boolean)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<<unique-context>>	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<<unique-context>>	<java.lang.Object: void notifyAll()>
<<unique-context>>	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>
<<unique-context>>	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<<unique-context>>	<java.lang.Thread: void join()>
<<unique-context>>	<java.util.Properties: void <init>()>
<<unique-context>>	<java.lang.Object: void <init>()>
<<unique-context>>	<java.util.ArrayList: void <init>()>
<<unique-context>>	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>
<<unique-context>>	<java.util.HashMap: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<<unique-context>>	<java.lang.Long: void <init>(long)>
<<unique-context>>	<java.util.LinkedList: void <init>()>
<<unique-context>>	<java.util.ArrayList: void <init>(java.util.Collection)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
<<unique-context>>	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<<unique-context>>	<java.lang.RuntimeException: void <init>(java.lang.String)>
<<unique-context>>	<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<<unique-context>>	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<<unique-context>>	<java.util.Date: void <init>(long)>
<<unique-context>>	<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<<unique-context>>	<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>
<<unique-context>>	<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
<<unique-context>>	<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void close()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<<unique-context>>	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>
<<unique-context>>	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<<unique-context>>	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<<unique-context>>	<javax.swing.JFrame: void <init>(java.lang.String)>
<<unique-context>>	<javax.swing.JDesktopPane: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<<unique-context>>	<java.util.Random: void <init>(long)>
<<unique-context>>	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>
<<unique-context>>	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<<unique-context>>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<<unique-context>>	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<<unique-context>>	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<<unique-context>>	<java.net.ServerSocket: void <init>(int)>
<<unique-context>>	<java.io.FileOutputStream: void <init>(java.io.File)>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>
<<unique-context>>	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<<unique-context>>	<java.io.OutputStream: void <init>()>
<<unique-context>>	<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<<unique-context>>	<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<<unique-context>>	<java.lang.UnsupportedOperationException: void <init>()>
<<unique-context>>	<java.io.EOFException: void <init>()>
<<unique-context>>	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<<unique-context>>	<java.math.BigDecimal: void <init>(int)>
<<unique-context>>	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<<unique-context>>	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<<unique-context>>	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<<unique-context>>	<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<<unique-context>>	<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.clock.MachineClock: void update()>
<<unique-context>>	<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>
<<unique-context>>	<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>
<<unique-context>>	<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<<unique-context>>	<java.lang.Error: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>
<<unique-context>>	<java.lang.Thread: void <init>()>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<<unique-context>>	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
<<unique-context>>	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<<unique-context>>	<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>
<<unique-context>>	<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<<unique-context>>	<java.net.Socket: void <init>(java.lang.String,int)>
<<unique-context>>	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>
<<unique-context>>	<java.io.InputStream: void <init>()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>
<<unique-context>>	<java.text.SimpleDateFormat: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<<unique-context>>	<java.lang.Thread: void setName(java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>
<<unique-context>>	<java.util.ArrayList: boolean add(java.lang.Object)>
<<unique-context>>	<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<<unique-context>>	<java.io.ObjectOutputStream: void close()>
<<unique-context>>	<java.io.ObjectInputStream: void close()>
<<unique-context>>	<javax.swing.JDesktopPane: java.awt.Component add(java.awt.Component)>
<<unique-context>>	<javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>
<<unique-context>>	<java.util.Properties: void load(java.io.InputStream)>
<<unique-context>>	<java.io.OutputStreamWriter: void flush()>
<<unique-context>>	<java.io.BufferedReader: java.lang.String readLine()>
<<unique-context>>	<java.util.Random: void <init>()>
<<unique-context>>	<java.io.BufferedReader: void <init>(java.io.Reader)>
<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>
<<unique-context>>	<java.net.ServerSocket: void close()>
<<unique-context>>	<java.io.FileOutputStream: void close()>
<<unique-context>>	<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>
<<unique-context>>	<java.util.zip.GZIPOutputStream: void close()>
<<unique-context>>	<java.io.RandomAccessFile: void close()>
<<unique-context>>	<java.io.ObjectOutputStream: void reset()>
<<unique-context>>	<java.io.ObjectOutputStream: void flush()>
<<unique-context>>	<java.io.OutputStream: void flush()>
<<unique-context>>	<java.io.OutputStream: void write(byte[],int,int)>
<<unique-context>>	<java.io.ByteArrayOutputStream: void write(int)>
<<unique-context>>	<java.util.Arrays: void fill(char[],char)>
<<unique-context>>	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<<unique-context>>	<java.text.DecimalFormat: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
<<unique-context>>	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
<<unique-context>>	<java.lang.Class: java.lang.Class forName(java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<<unique-context>>	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
<<unique-context>>	<java.lang.Thread: void interrupt()>
<<unique-context>>	<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>
<<unique-context>>	<javax.swing.JInternalFrame: void show()>
<<unique-context>>	<javax.swing.JInternalFrame: void setContentPane(java.awt.Container)>
<<unique-context>>	<javax.swing.JInternalFrame: void setBackground(java.awt.Color)>
<<unique-context>>	<javax.swing.JInternalFrame: void setVisible(boolean)>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>
<<unique-context>>	<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>
<<unique-context>>	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>
<<unique-context>>	<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<<unique-context>>	<java.io.ByteArrayOutputStream: void reset()>
<<unique-context>>	<java.io.FileOutputStream: void flush()>
<<unique-context>>	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>
<<unique-context>>	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>
<<unique-context>>	<java.lang.Exception: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>
<<unique-context>>	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<<unique-context>>	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<<unique-context>>	<javax.swing.JInternalFrame: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<<unique-context>>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<<unique-context>>	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<<unique-context>>	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<<unique-context>>	<java.lang.ThreadLocal: void <init>()>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<<unique-context>>	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>
<<unique-context>>	<java.lang.String: void <init>(char[])>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
<<unique-context>>	<java.io.PrintStream: void <init>(java.io.OutputStream)>
<<unique-context>>	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<<unique-context>>	<java.net.Socket: void close()>
<<unique-context>>	<java.io.PrintStream: void println(java.lang.String)>
<<unique-context>>	<java.sql.Date: void <init>(long)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
<<unique-context>>	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<<unique-context>>	<java.util.HashSet: void <init>()>
<<unique-context>>	<javax.swing.JList: void <init>()>
<<unique-context>>	<javax.swing.JScrollPane: void <init>(java.awt.Component)>
<<unique-context>>	<java.awt.Color: void <init>(int,int,int)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
<<unique-context>>	<java.lang.Integer: void <init>(int)>
<<unique-context>>	<java.lang.IllegalStateException: void <init>()>
<<unique-context>>	<java.io.File: void <init>(java.io.File,java.lang.String)>
<<unique-context>>	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
<<unique-context>>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>
<<unique-context>>	<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<<unique-context>>	<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<<unique-context>>	<java.io.FileInputStream: void close()>
<<unique-context>>	<javax.swing.JList: void setSelectionMode(int)>
<<unique-context>>	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<<unique-context>>	<javax.swing.JList: void setListData(java.lang.Object[])>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<<unique-context>>	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<<unique-context>>	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>
<<unique-context>>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>
<<unique-context>>	<java.io.File: boolean delete()>
<<unique-context>>	<javax.swing.JPanel: void <init>()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<<unique-context>>	<javax.swing.JButton: void <init>(javax.swing.Action)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<<unique-context>>	<javax.swing.JLabel: void <init>(java.lang.String)>
<<unique-context>>	<java.awt.BorderLayout: void <init>(int,int)>
<<unique-context>>	<java.awt.FlowLayout: void <init>(int,int,int)>
<<unique-context>>	<javax.swing.JButton: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
<<unique-context>>	<javax.swing.table.DefaultTableModel: void <init>()>
<<unique-context>>	<javax.swing.JTable: void <init>(javax.swing.table.TableModel)>
<<unique-context>>	<net.sourceforge.javamatch.engine.MatchEngine: void <init>()>
<<unique-context>>	<net.sourceforge.javamatch.query.QuerySet: void <init>()>
<<unique-context>>	<net.sourceforge.javamatch.query.Maximum: void <init>(java.lang.String)>
<<unique-context>>	<java.lang.Float: void <init>(float)>
<<unique-context>>	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
<<unique-context>>	<javax.swing.JTextField: void <init>()>
<<unique-context>>	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<<unique-context>>	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<<unique-context>>	<javax.swing.JLabel: void setAlignmentX(float)>
<<unique-context>>	<javax.swing.JPanel: void setLayout(java.awt.LayoutManager)>
<<unique-context>>	<javax.swing.JButton: void addActionListener(java.awt.event.ActionListener)>
<<unique-context>>	<javax.swing.table.DefaultTableModel: void setColumnIdentifiers(java.lang.Object[])>
<<unique-context>>	<javax.swing.table.DefaultTableModel: void setRowCount(int)>
<<unique-context>>	<net.sourceforge.javamatch.query.QuerySet: void addPreferred(net.sourceforge.javamatch.query.MatchQuery)>
<<unique-context>>	<javax.swing.table.DefaultTableModel: void addRow(java.lang.Object[])>
<<unique-context>>	<javax.swing.JTextField: void requestFocus()>
<<unique-context>>	<java.io.File: boolean renameTo(java.io.File)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<<unique-context>>	<javax.swing.AbstractAction: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<<unique-context>>	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
<<unique-context>>	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>
<<unique-context>>	<javax.swing.JTextField: void setText(java.lang.String)>
<<unique-context>>	<javax.swing.JTextField: void setEnabled(boolean)>
<<unique-context>>	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<<unique-context>>	<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>
<<unique-context>>	<javax.swing.AbstractAction: void setEnabled(boolean)>
<<unique-context>>	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<<unique-context>>	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<<unique-context>>	<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>
<<unique-context>>	<javax.swing.JList: void addListSelectionListener(javax.swing.event.ListSelectionListener)>
<<unique-context>>	<java.lang.Exception: void printStackTrace(java.io.PrintStream)>
