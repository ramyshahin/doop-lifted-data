private	<Graph$EdgeIter1: void <init>(Graph)>
public	<Graph$EdgeIter1: EdgeIfc next()>
public	<Graph$EdgeIter1: boolean hasNext()>
	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
private	<Vertex$VertexIter3: void <init>(Vertex)>
public	<Vertex$VertexIter3: Vertex next()>
public	<Vertex$VertexIter3: boolean hasNext()>
public	<RegionWorkSpace: void <init>()>
public	<RegionWorkSpace: void init_vertex(Vertex)>
public	<RegionWorkSpace: void postVisitAction(Vertex)>
public	<RegionWorkSpace: void nextRegionAction(Vertex)>
private	<Graph$Comparator2: void <init>(Graph)>
public	<Graph$Comparator2: int compare(Vertex,Vertex)>
public	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
bridge	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
private	<Vertex$VertexIter2: void <init>(Vertex)>
public	<Vertex$VertexIter2: Vertex next()>
public	<Vertex$VertexIter2: boolean hasNext()>
public	<Edge: void <init>(Vertex,Vertex,int)>
public	<Edge: void adjustAdorns(EdgeIfc)>
public	<Edge: void setWeight(int)>
public	<Edge: int getWeight()>
public	<Edge: Vertex getOtherVertex(Vertex)>
public	<Edge: Vertex getStart()>
public	<Edge: Vertex getEnd()>
public	<Edge: void display()>
public	<EdgeIfc: Vertex getStart()>
abstract	<EdgeIfc: Vertex getStart()>
public	<EdgeIfc: Vertex getEnd()>
abstract	<EdgeIfc: Vertex getEnd()>
public	<EdgeIfc: void display()>
abstract	<EdgeIfc: void display()>
public	<EdgeIfc: Vertex getOtherVertex(Vertex)>
abstract	<EdgeIfc: Vertex getOtherVertex(Vertex)>
public	<EdgeIfc: void adjustAdorns(EdgeIfc)>
abstract	<EdgeIfc: void adjustAdorns(EdgeIfc)>
public	<EdgeIfc: void setWeight(int)>
abstract	<EdgeIfc: void setWeight(int)>
public	<EdgeIfc: int getWeight()>
abstract	<EdgeIfc: int getWeight()>
public	<EdgeIter: void <init>()>
public	<EdgeIter: boolean hasNext()>
public	<EdgeIter: EdgeIfc next()>
public	<FinishTimeWorkSpace: void <init>()>
public	<FinishTimeWorkSpace: void preVisitAction(Vertex)>
public	<FinishTimeWorkSpace: void postVisitAction(Vertex)>
private	<Vertex$EdgeIter1: void <init>(Vertex)>
public	<Vertex$EdgeIter1: EdgeIfc next()>
public	<Vertex$EdgeIter1: boolean hasNext()>
	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
	<VertexIter: void <init>()>
	<VertexIter: void <init>(Graph)>
public	<VertexIter: Vertex next()>
public	<VertexIter: boolean hasNext()>
public	<WorkSpaceTranspose: void <init>()>
public	<WorkSpaceTranspose: void preVisitAction(Vertex)>
public	<WorkSpaceTranspose: void nextRegionAction(Vertex)>
private	<Vertex$EdgeIter2: void <init>(Vertex)>
public	<Vertex$EdgeIter2: EdgeIfc next()>
public	<Vertex$EdgeIter2: boolean hasNext()>
public	<Main: void <init>()>
public	<Main: void main(java.lang.String[])>
static	<Main: void main(java.lang.String[])>
static	<Main: EdgeIfc addEdge(Graph,int)>
static	<Main: void readWeights(Graph,int)>
private	<Graph$Comparator3: void <init>(Graph)>
public	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
public	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
bridge	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
private	<Vertex$VertexIter1: void <init>(Vertex)>
public	<Vertex$VertexIter1: Vertex next()>
public	<Vertex$VertexIter1: boolean hasNext()>
	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
private	<Vertex$EdgeIter3: void <init>(Vertex)>
public	<Vertex$EdgeIter3: EdgeIfc next()>
public	<Vertex$EdgeIter3: boolean hasNext()>
public	<Neighbor: void <init>()>
public	<Neighbor: void <init>(Vertex,int)>
public	<Neighbor: void display()>
public	<Neighbor: Vertex getStart()>
public	<Neighbor: Vertex getEnd()>
public	<Neighbor: void setWeight(int)>
public	<Neighbor: int getWeight()>
public	<Neighbor: Vertex getOtherVertex(Vertex)>
public	<Neighbor: void adjustAdorns(EdgeIfc)>
public	<Neighbor: void <init>(Vertex,Edge)>
public	<CycleWorkSpace: void <init>()>
public	<CycleWorkSpace: void init_vertex(Vertex)>
public	<CycleWorkSpace: void preVisitAction(Vertex)>
public	<CycleWorkSpace: void postVisitAction(Vertex)>
public	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
public	<NumberWorkSpace: void <init>()>
public	<NumberWorkSpace: void preVisitAction(Vertex)>
public	<WorkSpace: void <init>()>
public	<WorkSpace: void init_vertex(Vertex)>
public	<WorkSpace: void preVisitAction(Vertex)>
public	<WorkSpace: void postVisitAction(Vertex)>
public	<WorkSpace: void nextRegionAction(Vertex)>
public	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>
static	<Graph: void <clinit>()>
	<Graph: void <init>()>
public	<Graph: VertexIter getVertices()>
public	<Graph: EdgeIter getEdges()>
public	<Graph: void sortVertices(java.util.Comparator)>
public	<Graph: void sortEdges(java.util.Comparator)>
	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
public	<Graph: void addEdge(Vertex,Neighbor)>
	<Graph: Vertex findsVertex(java.lang.String)>
	<Graph: void display()>
	<Graph: void addVertex(Vertex)>
public	<Graph: void runBenchmark(java.lang.String)>
public	<Graph: void stopBenchmark()>
public	<Graph: int readNumber()>
public	<Graph: void startProfile()>
static	<Graph: void startProfile()>
public	<Graph: void stopProfile()>
static	<Graph: void stopProfile()>
public	<Graph: void resumeProfile()>
static	<Graph: void resumeProfile()>
public	<Graph: void endProfile()>
static	<Graph: void endProfile()>
public	<Graph: void run(Vertex)>
public	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
public	<Graph: void graphSearch(WorkSpace)>
public	<Graph: void numberVertices()>
public	<Graph: void connectedComponents()>
public	<Graph: Graph strongComponents()>
public	<Graph: Graph computeTranspose(Graph)>
public	<Graph: boolean cycleCheck()>
public	<Graph: Graph kruskal()>
public	<Graph: Graph prim(Vertex)>
static	<Graph: java.util.LinkedList access$0(Graph)>
	<Vertex: void <init>()>
public	<Vertex: Vertex assignName(java.lang.String)>
public	<Vertex: java.lang.String getName()>
public	<Vertex: void addAdjacent(Vertex)>
public	<Vertex: void adjustAdorns(Vertex,int)>
public	<Vertex: VertexIter getNeighbors()>
public	<Vertex: Vertex getStart()>
public	<Vertex: Vertex getEnd()>
public	<Vertex: int getWeight()>
public	<Vertex: Vertex getOtherVertex(Vertex)>
public	<Vertex: void adjustAdorns(EdgeIfc)>
public	<Vertex: void addEdge(Neighbor)>
public	<Vertex: void adjustAdorns(Neighbor)>
public	<Vertex: void addNeighbor(Neighbor)>
public	<Vertex: EdgeIter getEdges()>
public	<Vertex: java.util.LinkedList getNeighborsObj()>
public	<Vertex: void addWeight(int)>
public	<Vertex: void setWeight(int)>
public	<Vertex: void init_vertex(WorkSpace)>
public	<Vertex: void nodeSearch(WorkSpace)>
public	<Vertex: void display()>
static	<GlobalVarsWrapper: void <clinit>()>
public	<GlobalVarsWrapper: void <init>()>
private	<Graph$Comparator1: void <init>(Graph)>
public	<Graph$Comparator1: int compare(Vertex,Vertex)>
public	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
bridge	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
