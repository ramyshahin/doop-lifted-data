<Main: void main(java.lang.String[])>
<Graph: void startProfile()>
<Graph: void stopProfile()>
<Graph: void resumeProfile()>
<Graph: void endProfile()>
<Graph: void <clinit>()>
<Graph$EdgeIter1: EdgeIfc next()>
<Graph$EdgeIter1: boolean hasNext()>
<Vertex$VertexIter3: Vertex next()>
<Vertex$VertexIter3: boolean hasNext()>
<RegionWorkSpace: void <init>()>
<RegionWorkSpace: void init_vertex(Vertex)>
<RegionWorkSpace: void postVisitAction(Vertex)>
<RegionWorkSpace: void nextRegionAction(Vertex)>
<Graph$Comparator2: int compare(Vertex,Vertex)>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Vertex$VertexIter2: Vertex next()>
<Vertex$VertexIter2: boolean hasNext()>
<Edge: void <init>(Vertex,Vertex,int)>
<Edge: void adjustAdorns(EdgeIfc)>
<Edge: void setWeight(int)>
<Edge: int getWeight()>
<Edge: Vertex getOtherVertex(Vertex)>
<Edge: Vertex getStart()>
<Edge: Vertex getEnd()>
<Edge: void display()>
<EdgeIter: void <init>()>
<EdgeIter: boolean hasNext()>
<EdgeIter: EdgeIfc next()>
<FinishTimeWorkSpace: void <init>()>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>
<FinishTimeWorkSpace: void postVisitAction(Vertex)>
<Vertex$EdgeIter1: EdgeIfc next()>
<Vertex$EdgeIter1: boolean hasNext()>
<VertexIter: Vertex next()>
<VertexIter: boolean hasNext()>
<WorkSpaceTranspose: void <init>()>
<WorkSpaceTranspose: void preVisitAction(Vertex)>
<WorkSpaceTranspose: void nextRegionAction(Vertex)>
<Vertex$EdgeIter2: EdgeIfc next()>
<Vertex$EdgeIter2: boolean hasNext()>
<Main: void <init>()>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Vertex$VertexIter1: Vertex next()>
<Vertex$VertexIter1: boolean hasNext()>
<Vertex$EdgeIter3: EdgeIfc next()>
<Vertex$EdgeIter3: boolean hasNext()>
<Neighbor: void <init>()>
<Neighbor: void <init>(Vertex,int)>
<Neighbor: void display()>
<Neighbor: Vertex getStart()>
<Neighbor: Vertex getEnd()>
<Neighbor: void setWeight(int)>
<Neighbor: int getWeight()>
<Neighbor: Vertex getOtherVertex(Vertex)>
<Neighbor: void adjustAdorns(EdgeIfc)>
<Neighbor: void <init>(Vertex,Edge)>
<CycleWorkSpace: void <init>()>
<CycleWorkSpace: void init_vertex(Vertex)>
<CycleWorkSpace: void preVisitAction(Vertex)>
<CycleWorkSpace: void postVisitAction(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<NumberWorkSpace: void <init>()>
<NumberWorkSpace: void preVisitAction(Vertex)>
<WorkSpace: void <init>()>
<WorkSpace: void init_vertex(Vertex)>
<WorkSpace: void preVisitAction(Vertex)>
<WorkSpace: void postVisitAction(Vertex)>
<WorkSpace: void nextRegionAction(Vertex)>
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph: VertexIter getVertices()>
<Graph: EdgeIter getEdges()>
<Graph: void sortVertices(java.util.Comparator)>
<Graph: void sortEdges(java.util.Comparator)>
<Graph: void addEdge(Vertex,Neighbor)>
<Graph: void runBenchmark(java.lang.String)>
<Graph: void stopBenchmark()>
<Graph: int readNumber()>
<Graph: void run(Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Graph: void graphSearch(WorkSpace)>
<Graph: void numberVertices()>
<Graph: void connectedComponents()>
<Graph: Graph strongComponents()>
<Graph: Graph computeTranspose(Graph)>
<Graph: boolean cycleCheck()>
<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>
<Vertex: Vertex assignName(java.lang.String)>
<Vertex: java.lang.String getName()>
<Vertex: void addAdjacent(Vertex)>
<Vertex: void adjustAdorns(Vertex,int)>
<Vertex: VertexIter getNeighbors()>
<Vertex: Vertex getStart()>
<Vertex: Vertex getEnd()>
<Vertex: int getWeight()>
<Vertex: Vertex getOtherVertex(Vertex)>
<Vertex: void adjustAdorns(EdgeIfc)>
<Vertex: void addEdge(Neighbor)>
<Vertex: void adjustAdorns(Neighbor)>
<Vertex: void addNeighbor(Neighbor)>
<Vertex: EdgeIter getEdges()>
<Vertex: java.util.LinkedList getNeighborsObj()>
<Vertex: void addWeight(int)>
<Vertex: void setWeight(int)>
<Vertex: void init_vertex(WorkSpace)>
<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void display()>
<GlobalVarsWrapper: void <init>()>
<Graph$Comparator1: int compare(Vertex,Vertex)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<GlobalVarsWrapper: void <clinit>()>
<Main: void readWeights(Graph,int)>
<Main: EdgeIfc addEdge(Graph,int)>
<Graph: void <init>()>
<Vertex: void <init>()>
<Graph: void addVertex(Vertex)>
<Graph: Vertex findsVertex(java.lang.String)>
<Graph: void display()>
<VertexIter: void <init>(Graph)>
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Graph$EdgeIter1: void <init>(Graph)>
<Graph$Comparator1: void <init>(Graph)>
<Graph$Comparator3: void <init>(Graph)>
<Graph$Comparator2: void <init>(Graph)>
<Vertex$VertexIter1: void <init>(Vertex)>
<Vertex$EdgeIter1: void <init>(Vertex)>
<Graph: java.util.LinkedList access$0(Graph)>
<VertexIter: void <init>()>
