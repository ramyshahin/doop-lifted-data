java.lang.String[]::: (Mock)	<Main: void main(java.lang.String[])>/@parameter0	@ (Prog /\ Prog)
java.lang.String[]::: (Mock)	<Main: void main(java.lang.String[])>/args#_0	@ (Prog /\ Prog)
<<string-constant>>	<Main: void main(java.lang.String[])>/$stringconstant0	@ (Prog /\ Prog)
<<string-constant>>	<Main: void main(java.lang.String[])>/$stringconstant1	@ (Prog /\ Prog)
<<string-builder>>	<Main: void main(java.lang.String[])>/$r7	@ (Prog /\ Prog)
<<string-builder>>	<Main: void main(java.lang.String[])>/$r18	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new int[]/0	<Main: void main(java.lang.String[])>/$r3	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new int[]/1	<Main: void main(java.lang.String[])>/$r4	@ (Prog /\ Prog)
<<string-constant>>	<Graph: void endProfile()>/$stringconstant0	@ (Benchmark /\ Benchmark)
<<string-builder>>	<Graph: void endProfile()>/$r0	@ (Benchmark /\ Benchmark)
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void main(java.lang.String[])>/$r0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: void main(java.lang.String[])>/$r2	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: void main(java.lang.String[])>/$r5	@ (Prog /\ Prog)
Vertex::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/@this
Vertex::: (Mock)	<Vertex: java.lang.String getName()>/@this
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/@this	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/@this	@ G_NoEdges
Vertex::: (Mock)	<Vertex: VertexIter getNeighbors()>/@this	@ G_NoEdges
Vertex::: (Mock)	<Vertex: Vertex getStart()>/@this	@ (Undirected /\ G_NoEdges)
Vertex::: (Mock)	<Vertex: Vertex getEnd()>/@this	@ G_NoEdges
Vertex::: (Mock)	<Vertex: int getWeight()>/@this	@ G_NoEdges
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/@this	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void addEdge(Neighbor)>/@this	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/@this	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/@this	@ GEN_Edges
Vertex::: (Mock)	<Vertex: EdgeIter getEdges()>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Vertex::: (Mock)	<Vertex: java.util.LinkedList getNeighborsObj()>/@this	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Vertex: void addWeight(int)>/@this	@ Weighted
Vertex::: (Mock)	<Vertex: void setWeight(int)>/@this	@ (Weighted /\ G_NoEdges)
Vertex::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/@this	@ SearchBase
Vertex::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/@this
Vertex::: (Mock)	<Vertex: void display()>/@this
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: Vertex next()>/@this	@ GN_OnlyNeighbors
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: boolean hasNext()>/@this	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void <init>()>/@this
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,int)>/@this
Neighbor::: (Mock)	<Neighbor: void display()>/@this	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: Vertex getStart()>/@this	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: Vertex getEnd()>/@this	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void setWeight(int)>/@this	@ (Weighted /\ GN_OnlyNeighbors)
Neighbor::: (Mock)	<Neighbor: int getWeight()>/@this	@ (Weighted /\ GN_OnlyNeighbors)
Neighbor::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/@this	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/@this	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/@this
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void <init>()>/@this
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/@this
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: Vertex next()>/@this	@ G_NoEdges
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: boolean hasNext()>/@this	@ G_NoEdges
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: EdgeIfc next()>/@this	@ (EdgeObjects /\ GN_OnlyNeighbors)
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: boolean hasNext()>/@this	@ (EdgeObjects /\ GN_OnlyNeighbors)
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@this	@ MSTKruskal
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@this
Main::: (Mock)	<Main: void <init>()>/@this
Edge::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/@this
Edge::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/@this	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: void setWeight(int)>/@this	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
Edge::: (Mock)	<Edge: int getWeight()>/@this	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
Edge::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/@this	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: Vertex getStart()>/@this	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: Vertex getEnd()>/@this	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: void display()>/@this	@ (EdgeObjects /\ EdgeObjects)
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void <init>()>/@this
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/@this	@ Connected
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/@this	@ Connected
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this	@ Connected
VertexIter::: (Mock)	<VertexIter: Vertex next()>/@this
VertexIter::: (Mock)	<VertexIter: boolean hasNext()>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void <init>()>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/@this	@ Cycle
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/@this	@ Cycle
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/@this	@ MSTPrim
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@this
EdgeIter::: (Mock)	<EdgeIter: void <init>()>/@this
EdgeIter::: (Mock)	<EdgeIter: boolean hasNext()>/@this
EdgeIter::: (Mock)	<EdgeIter: EdgeIfc next()>/@this
WorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this
WorkSpace::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/@this	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/@this	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/@this	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this	@ SearchBase
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: EdgeIfc next()>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: boolean hasNext()>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/@this	@ StronglyConnected
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@this
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: Vertex next()>/@this	@ GEN_Edges
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: boolean hasNext()>/@this	@ GEN_Edges
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void <init>()>/@this
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@this	@ StronglyConnected
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@this	@ StronglyConnected
Graph::: (Mock)	<Graph: VertexIter getVertices()>/@this
Graph::: (Mock)	<Graph: EdgeIter getEdges()>/@this
Graph::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/@this
Graph::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/@this	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/@this	@ GN_OnlyNeighbors
Graph::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/@this	@ (Benchmark /\ Benchmark)
Graph::: (Mock)	<Graph: void stopBenchmark()>/@this	@ (Benchmark /\ Benchmark)
Graph::: (Mock)	<Graph: int readNumber()>/@this	@ (Benchmark /\ Benchmark)
Graph::: (Mock)	<Graph: void run(Vertex)>/@this
Graph::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph: void graphSearch(WorkSpace)>/@this
Graph::: (Mock)	<Graph: void numberVertices()>/@this	@ Number
Graph::: (Mock)	<Graph: void connectedComponents()>/@this	@ Connected
Graph::: (Mock)	<Graph: Graph strongComponents()>/@this
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/@this	@ (Transpose /\ Transpose)
Graph::: (Mock)	<Graph: boolean cycleCheck()>/@this	@ Cycle
Graph::: (Mock)	<Graph: Graph kruskal()>/@this
Graph::: (Mock)	<Graph: Graph prim(Vertex)>/@this
GlobalVarsWrapper::: (Mock)	<GlobalVarsWrapper: void <init>()>/@this
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: EdgeIfc next()>/@this	@ (EdgeObjects /\ EdgeObjects)
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: boolean hasNext()>/@this	@ (EdgeObjects /\ EdgeObjects)
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void <init>()>/@this
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@this	@ StronglyConnected
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this	@ StronglyConnected
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: EdgeIfc next()>/@this	@ (EdgeObjects /\ GEN_Edges)
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: boolean hasNext()>/@this	@ (EdgeObjects /\ GEN_Edges)
<<string-constant>>	<Vertex: void display()>/$stringconstant0	@ (Weighted /\ G_NoEdges)
<<string-constant>>	<Vertex: void display()>/$stringconstant1
<<string-constant>>	<Vertex: void display()>/$stringconstant2	@ SearchBase
<<string-constant>>	<Vertex: void display()>/$stringconstant3	@ SearchBase
<<string-constant>>	<Vertex: void display()>/$stringconstant4	@ Number
<<string-constant>>	<Vertex: void display()>/$stringconstant5	@ Connected
<<string-constant>>	<Vertex: void display()>/$stringconstant6	@ StronglyConnected
<<string-constant>>	<Vertex: void display()>/$stringconstant7	@ Cycle
<<string-constant>>	<Vertex: void display()>/$stringconstant8	@ MSTKruskal
<<string-constant>>	<Vertex: void display()>/$stringconstant9	@ MSTKruskal
<<string-constant>>	<Vertex: void display()>/$stringconstant10	@ MSTPrim
<<string-builder>>	<Vertex: void display()>/$r2	@ (Weighted /\ G_NoEdges)
<<string-builder>>	<Vertex: void display()>/$r10
<<string-builder>>	<Vertex: void display()>/$r16
<<string-builder>>	<Vertex: void display()>/$r23	@ Number
<<string-builder>>	<Vertex: void display()>/$r28	@ Connected
<<string-builder>>	<Vertex: void display()>/$r33	@ StronglyConnected
<<string-builder>>	<Vertex: void display()>/$r39	@ Cycle
<<string-builder>>	<Vertex: void display()>/$r45	@ MSTKruskal
<<string-builder>>	<Vertex: void display()>/$r52	@ MSTPrim
<<string-builder>>	<Neighbor: void display()>/$r0	@ GN_OnlyNeighbors
<<string-constant>>	<Edge: void display()>/$stringconstant0	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
<<string-constant>>	<Edge: void display()>/$stringconstant1	@ (EdgeObjects /\ EdgeObjects)
<<string-builder>>	<Edge: void display()>/$r0	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
<<string-builder>>	<Edge: void display()>/$r4	@ (EdgeObjects /\ EdgeObjects)
<<string-constant>>	<Graph: void runBenchmark(java.lang.String)>/$stringconstant0	@ (Benchmark /\ Benchmark)
<<string-builder>>	<Graph: void runBenchmark(java.lang.String)>/$r2	@ (Benchmark /\ Benchmark)
<Graph: int readNumber()>/new char[]/0	<Graph: int readNumber()>/word#_208	@ (Benchmark /\ Benchmark)
<<string-constant>>	<Graph: void run(Vertex)>/$stringconstant0	@ (Cycle /\ Prog)
<<string-builder>>	<Graph: void run(Vertex)>/$r0	@ (Cycle /\ Prog)
<<null pseudo heap>>	<Vertex: VertexIter getNeighbors()>/$null0	@ G_NoEdges
<<null pseudo heap>>	<Vertex: Vertex getEnd()>/$null0	@ G_NoEdges
<<null pseudo heap>>	<Vertex: EdgeIter getEdges()>/$null0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<<null pseudo heap>>	<Neighbor: void <init>()>/$null0	@ GN_OnlyNeighbors
<<null pseudo heap>>	<Neighbor: void <init>()>/$null1	@ GEN_Edges
<<null pseudo heap>>	<Neighbor: void <init>()>/$null2	@ GEN_Edges
<<null pseudo heap>>	<Neighbor: Vertex getStart()>/$null0	@ GN_OnlyNeighbors
<<null pseudo heap>>	<Edge: Vertex getOtherVertex(Vertex)>/$null0	@ (EdgeObjects /\ EdgeObjects)
<<null pseudo heap>>	<EdgeIter: EdgeIfc next()>/$null0
<<null pseudo heap>>	<Graph: EdgeIter getEdges()>/$null0	@ (EdgeObjects /\ EdgeObjects)
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$null0	@ (EdgeObjects /\ EdgeObjects)
<<null pseudo heap>>	<Graph: Graph strongComponents()>/$null0	@ StronglyConnected
<<null pseudo heap>>	<Graph: Graph kruskal()>/$null0	@ MSTKruskal
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/$null0	@ MSTPrim
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/$null1	@ MSTPrim
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/$null2	@ MSTPrim
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void main(java.lang.String[])>/g#_16	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new int[]/0	<Main: void main(java.lang.String[])>/$r13	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new int[]/1	<Main: void main(java.lang.String[])>/$r14	@ (Prog /\ Prog)
<Vertex: void adjustAdorns(Vertex,int)>/new java.lang.Integer/0	<Vertex: void adjustAdorns(Vertex,int)>/$r3	@ (Weighted /\ G_NoEdges)
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: VertexIter getNeighbors()>/$r0	@ G_NoEdges
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex: EdgeIter getEdges()>/$r0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Vertex: void addWeight(int)>/new java.lang.Integer/0	<Vertex: void addWeight(int)>/$r0	@ (Weighted /\ G_NoEdges)
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: VertexIter getVertices()>/$r0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph: EdgeIter getEdges()>/$r0	@ (EdgeObjects /\ EdgeObjects)
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Graph: void addEdge(Vertex,Neighbor)>/$r0	@ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: void runBenchmark(java.lang.String)>/$r0	@ (Benchmark /\ Benchmark)
<Graph: int readNumber()>/new java.lang.String/0	<Graph: int readNumber()>/$r3	@ (Benchmark /\ Benchmark)
<Graph: int readNumber()>/new java.lang.String/1	<Graph: int readNumber()>/$r4	@ (Benchmark /\ Benchmark)
<Graph: void numberVertices()>/new NumberWorkSpace/0	<Graph: void numberVertices()>/$r0	@ Number
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<Graph: void connectedComponents()>/$r0	@ Connected
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: Graph strongComponents()>/$r0	@ StronglyConnected
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph: Graph strongComponents()>/$r1	@ StronglyConnected
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: Graph strongComponents()>/$r2	@ StronglyConnected
<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<Graph: Graph computeTranspose(Graph)>/$r0	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/$r1	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/$r3	@ (Transpose /\ Transpose)
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: boolean cycleCheck()>/$r0	@ Cycle
<Graph: Graph kruskal()>/new java.util.LinkedList/0	<Graph: Graph kruskal()>/$r0	@ MSTKruskal
<Graph: Graph kruskal()>/new java.util.LinkedList/1	<Graph: Graph kruskal()>/$r1	@ MSTKruskal
<Graph: Graph kruskal()>/new java.util.LinkedList/2	<Graph: Graph kruskal()>/$r2	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph: Graph kruskal()>/$r3	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: Graph kruskal()>/$r24	@ MSTKruskal
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph kruskal()>/$r26	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<Graph: Graph prim(Vertex)>/$r0	@ MSTPrim
<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<Graph: Graph prim(Vertex)>/$r1	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph: Graph prim(Vertex)>/$r11	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Graph prim(Vertex)>/$r13	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r14	@ MSTPrim
Vertex::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/this#_0
Vertex::: (Mock)	<Vertex: java.lang.String getName()>/this#_0
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/this#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/this#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: VertexIter getNeighbors()>/this#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: Vertex getStart()>/this#_0	@ (Undirected /\ G_NoEdges)
Vertex::: (Mock)	<Vertex: Vertex getEnd()>/this#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: int getWeight()>/this#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/this#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void addEdge(Neighbor)>/this#_0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/this#_0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/this#_0	@ GEN_Edges
Vertex::: (Mock)	<Vertex: EdgeIter getEdges()>/this#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Vertex::: (Mock)	<Vertex: java.util.LinkedList getNeighborsObj()>/this#_0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Vertex: void addWeight(int)>/this#_0	@ Weighted
Vertex::: (Mock)	<Vertex: void setWeight(int)>/this#_0	@ (Weighted /\ G_NoEdges)
Vertex::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/this#_0	@ SearchBase
Vertex::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/this#_0
Vertex::: (Mock)	<Vertex: void display()>/this#_0
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: Vertex next()>/this#_0	@ GN_OnlyNeighbors
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: boolean hasNext()>/this#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void <init>()>/this#_0
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,int)>/this#_0
Neighbor::: (Mock)	<Neighbor: void display()>/this#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: Vertex getStart()>/this#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: Vertex getEnd()>/this#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void setWeight(int)>/this#_0	@ (Weighted /\ GN_OnlyNeighbors)
Neighbor::: (Mock)	<Neighbor: int getWeight()>/this#_0	@ (Weighted /\ GN_OnlyNeighbors)
Neighbor::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/this#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/this#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/this#_0
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void <init>()>/this#_0
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/this#_0
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: Vertex next()>/this#_0	@ G_NoEdges
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: boolean hasNext()>/this#_0	@ G_NoEdges
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: EdgeIfc next()>/this#_0	@ (EdgeObjects /\ GN_OnlyNeighbors)
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: boolean hasNext()>/this#_0	@ (EdgeObjects /\ GN_OnlyNeighbors)
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/this#_0	@ MSTKruskal
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l0#_0
Main::: (Mock)	<Main: void <init>()>/this#_0
Edge::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/this#_0
Edge::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/this#_0	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: void setWeight(int)>/this#_0	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
Edge::: (Mock)	<Edge: int getWeight()>/this#_0	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
Edge::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/this#_0	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: Vertex getStart()>/this#_0	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: Vertex getEnd()>/this#_0	@ (EdgeObjects /\ EdgeObjects)
Edge::: (Mock)	<Edge: void display()>/this#_0	@ (EdgeObjects /\ EdgeObjects)
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void <init>()>/this#_0
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/this#_0	@ Connected
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/this#_0	@ Connected
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0	@ Connected
VertexIter::: (Mock)	<VertexIter: Vertex next()>/this#_0
VertexIter::: (Mock)	<VertexIter: boolean hasNext()>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void <init>()>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/this#_0	@ Cycle
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/this#_0	@ Cycle
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/this#_0	@ MSTPrim
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l0#_0
EdgeIter::: (Mock)	<EdgeIter: void <init>()>/this#_0
EdgeIter::: (Mock)	<EdgeIter: boolean hasNext()>/this#_0
EdgeIter::: (Mock)	<EdgeIter: EdgeIfc next()>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/this#_0	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/this#_0	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/this#_0	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ SearchBase
WorkSpace::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0	@ SearchBase
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: boolean hasNext()>/this#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/this#_0	@ StronglyConnected
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l0#_0
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: Vertex next()>/this#_0	@ GEN_Edges
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: boolean hasNext()>/this#_0	@ GEN_Edges
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void <init>()>/this#_0
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/this#_0	@ StronglyConnected
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/this#_0	@ StronglyConnected
Graph::: (Mock)	<Graph: VertexIter getVertices()>/this#_0
Graph::: (Mock)	<Graph: EdgeIter getEdges()>/this#_0
Graph::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/this#_0
Graph::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/this#_0	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/this#_0	@ GN_OnlyNeighbors
Graph::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/this#_0	@ (Benchmark /\ Benchmark)
Graph::: (Mock)	<Graph: void stopBenchmark()>/this#_0	@ (Benchmark /\ Benchmark)
Graph::: (Mock)	<Graph: int readNumber()>/this#_0	@ (Benchmark /\ Benchmark)
Graph::: (Mock)	<Graph: void run(Vertex)>/this#_0
Graph::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph: void graphSearch(WorkSpace)>/this#_0
Graph::: (Mock)	<Graph: void numberVertices()>/this#_0	@ Number
Graph::: (Mock)	<Graph: void connectedComponents()>/this#_0	@ Connected
Graph::: (Mock)	<Graph: Graph strongComponents()>/this#_0
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/this#_0	@ (Transpose /\ Transpose)
Graph::: (Mock)	<Graph: boolean cycleCheck()>/this#_0	@ Cycle
Graph::: (Mock)	<Graph: Graph kruskal()>/this#_0
Graph::: (Mock)	<Graph: Graph prim(Vertex)>/this#_0
GlobalVarsWrapper::: (Mock)	<GlobalVarsWrapper: void <init>()>/this#_0
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: EdgeIfc next()>/this#_0	@ (EdgeObjects /\ EdgeObjects)
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: boolean hasNext()>/this#_0	@ (EdgeObjects /\ EdgeObjects)
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void <init>()>/this#_0
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/this#_0	@ StronglyConnected
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0	@ StronglyConnected
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: EdgeIfc next()>/this#_0	@ (EdgeObjects /\ GEN_Edges)
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: boolean hasNext()>/this#_0	@ (EdgeObjects /\ GEN_Edges)
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: void main(java.lang.String[])>/$r6	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: void main(java.lang.String[])>/$r11	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: EdgeIfc addEdge(Graph,int)>/$r1	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: EdgeIfc addEdge(Graph,int)>/$r3	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new int[]/0	<Main: EdgeIfc addEdge(Graph,int)>/$r0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new int[]/1	<Main: EdgeIfc addEdge(Graph,int)>/$r2	@ (Prog /\ Prog)
java.lang.String::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/@parameter0
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/@parameter0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/@parameter0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0	@ G_NoEdges
Neighbor::: (Mock)	<Vertex: void addEdge(Neighbor)>/@parameter0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/@parameter0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/@parameter0	@ GEN_Edges
WorkSpace::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/@parameter0	@ SearchBase
WorkSpace::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/@parameter0
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,int)>/@parameter0
Vertex::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/@parameter0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/@parameter0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/@parameter0
Edge::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/@parameter1
Vertex::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter0	@ MSTKruskal
Vertex::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter1	@ MSTKruskal
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter0
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter1
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/@parameter0
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/@parameter1
Vertex::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/@parameter0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/@parameter0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/@parameter0	@ Connected
Vertex::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/@parameter0	@ Connected
Vertex::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/@parameter0	@ Connected
Vertex::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/@parameter0	@ Cycle
Vertex::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/@parameter0	@ Cycle
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter0	@ MSTPrim
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter1	@ MSTPrim
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter0
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter1
Vertex::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/@parameter0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/@parameter0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/@parameter0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/@parameter0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1	@ SearchBase
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter0	@ StronglyConnected
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter1	@ StronglyConnected
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter0
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter1
Vertex::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@parameter0	@ StronglyConnected
Vertex::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@parameter0	@ StronglyConnected
Graph$Comparator3::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/@parameter0
Graph$Comparator3::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/@parameter0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/@parameter0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/@parameter1	@ GN_OnlyNeighbors
java.lang.String::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/@parameter0	@ (Benchmark /\ Benchmark)
Vertex::: (Mock)	<Graph: void run(Vertex)>/@parameter0
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter1	@ (EdgeObjects /\ EdgeObjects)
WorkSpace::: (Mock)	<Graph: void graphSearch(WorkSpace)>/@parameter0
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/@parameter0	@ (Transpose /\ Transpose)
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@parameter0	@ StronglyConnected
Vertex::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@parameter0	@ StronglyConnected
<Graph: int readNumber()>/new java.lang.String/0	<Graph: int readNumber()>/theString#_224	@ (Benchmark /\ Benchmark)
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: Graph strongComponents()>/FTWS#_324	@ StronglyConnected
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: Graph strongComponents()>/WST#_337	@ StronglyConnected
<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<Graph: Graph computeTranspose(Graph)>/newVertices#_347	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/newGraph#_350	@ (Transpose /\ Transpose)
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: boolean cycleCheck()>/c#_393	@ Cycle
<Graph: Graph kruskal()>/new java.util.LinkedList/0	<Graph: Graph kruskal()>/A#_401	@ MSTKruskal
<Graph: Graph kruskal()>/new java.util.LinkedList/2	<Graph: Graph kruskal()>/vxiter_$$A_1#_415	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: Graph kruskal()>/e1_$$A_1#_481	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	@ MSTPrim
<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<Graph: Graph prim(Vertex)>/indx#_540	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	@ MSTPrim
java.lang.String::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/name#_0
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/n#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/the_vertex#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/vertex#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ G_NoEdges
Neighbor::: (Mock)	<Vertex: void addEdge(Neighbor)>/n#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/sourceNeighbor#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/n#_0	@ GEN_Edges
WorkSpace::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/w#_0	@ SearchBase
WorkSpace::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/w#_0
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,int)>/theNeighbor#_0
Vertex::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/vertex#_0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/v#_0
Edge::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/e#_0
Vertex::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0	@ MSTKruskal
Vertex::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0	@ MSTKruskal
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l1#_0
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l2#_0
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/the_start#_0
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/the_end#_0
Vertex::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/vertex#_0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/v#_0	@ Connected
Vertex::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/v#_0	@ Connected
Vertex::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/v#_0	@ Connected
Vertex::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/v#_0	@ Cycle
Vertex::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/v#_0	@ Cycle
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0	@ MSTPrim
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0	@ MSTPrim
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l1#_0
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l2#_0
Vertex::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/v#_0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/v#_0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/v#_0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/v#_0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	@ SearchBase
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	@ SearchBase
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0	@ StronglyConnected
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0	@ StronglyConnected
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l1#_0
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l2#_0
Vertex::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/v#_0	@ StronglyConnected
Vertex::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/v#_0	@ StronglyConnected
Graph$Comparator3::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/c#_0
Graph$Comparator3::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/c#_0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/start#_0	@ GN_OnlyNeighbors
Neighbor::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0	@ GN_OnlyNeighbors
java.lang.String::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/FileName#_0	@ (Benchmark /\ Benchmark)
Vertex::: (Mock)	<Graph: void run(Vertex)>/v#_0
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0	@ (EdgeObjects /\ EdgeObjects)
WorkSpace::: (Mock)	<Graph: void graphSearch(WorkSpace)>/w#_0
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/the_graph#_0	@ (Transpose /\ Transpose)
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/r#_0
Vertex::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/v#_0	@ StronglyConnected
Vertex::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/v#_0	@ StronglyConnected
<Main: void main(java.lang.String[])>/new Graph/0	<Main: EdgeIfc addEdge(Graph,int)>/@parameter0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void readWeights(Graph,int)>/@parameter0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void <init>()>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void <init>()>/@this	@ (Prog /\ Prog)
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<GlobalVarsWrapper: void <clinit>()>/$r0	@ (BFS /\ BFS)
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/root#_522	@ MSTPrim
<Main: void main(java.lang.String[])>/new Graph/0	<Main: EdgeIfc addEdge(Graph,int)>/g#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void readWeights(Graph,int)>/g#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void <init>()>/this#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void <init>()>/this#_0	@ (Prog /\ Prog)
java.lang.String::: (Mock)	<Main: void main(java.lang.String[])>/$r1	@ (Prog /\ Prog)
java.lang.String::: (Mock)	<Main: void main(java.lang.String[])>/$r16	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void runBenchmark(java.lang.String)>/@this	@ ((Prog /\ Prog) /\ (Benchmark /\ Benchmark))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: int readNumber()>/@this	@ ((Prog /\ Prog) /\ (Benchmark /\ Benchmark))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void addVertex(Vertex)>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void stopBenchmark()>/@this	@ ((Prog /\ Prog) /\ (Benchmark /\ Benchmark))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void run(Vertex)>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void display()>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void runBenchmark(java.lang.String)>/this#_0	@ ((Prog /\ Prog) /\ (Benchmark /\ Benchmark))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: int readNumber()>/this#_0	@ ((Prog /\ Prog) /\ (Benchmark /\ Benchmark))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void stopBenchmark()>/this#_0	@ ((Prog /\ Prog) /\ (Benchmark /\ Benchmark))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void run(Vertex)>/this#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void display()>/this#_0	@ (Prog /\ Prog)
java.lang.String::: (Mock)	<Vertex: java.lang.String getName()>/$r0
java.lang.String::: (Mock)	<Vertex: void display()>/$r12
<<null pseudo heap>>	<Neighbor: void display()>/$r1	@ GN_OnlyNeighbors
<<null pseudo heap>>	<Neighbor: Vertex getEnd()>/$r0	@ GN_OnlyNeighbors
<<null pseudo heap>>	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Neighbor: void display()>/$r1	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Neighbor: Vertex getEnd()>/$r0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	@ GN_OnlyNeighbors
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r2	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: Vertex getStart()>/$r0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: void display()>/$r6	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r1	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r3	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: Vertex getEnd()>/$r0	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Edge: void display()>/$r10	@ (EdgeObjects /\ EdgeObjects)
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: void stopBenchmark()>/$r0	@ (Benchmark /\ Benchmark)
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: int readNumber()>/$r0	@ (Benchmark /\ Benchmark)
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: int readNumber()>/$r1	@ (Benchmark /\ Benchmark)
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: int readNumber()>/$r2	@ (Benchmark /\ Benchmark)
<<null pseudo heap>>	<Graph: void addEdge(Vertex,Neighbor)>/end#_148	@ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))
Vertex::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/end#_148	@ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))
Vertex::: (Mock)	<Main: void main(java.lang.String[])>/$r10	@ (Prog /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this	@ MSTPrim
Graph::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ MSTPrim
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@this	@ G_NoEdges
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
NumberWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this	@ Number
RegionWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this	@ Connected
CycleWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this	@ Cycle
FinishTimeWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: void <init>(Graph)>/@this
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@this	@ (EdgeObjects /\ EdgeObjects)
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Neighbor: void <init>(Vertex,int)>/@this	@ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))
<Graph: void numberVertices()>/new NumberWorkSpace/0	<NumberWorkSpace: void <init>()>/@this	@ Number
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void <init>()>/@this	@ Connected
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<FinishTimeWorkSpace: void <init>()>/@this	@ StronglyConnected
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@this	@ StronglyConnected
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void <init>()>/@this	@ StronglyConnected
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void <init>()>/@this	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void <init>()>/@this	@ (Transpose /\ Transpose)
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<CycleWorkSpace: void <init>()>/@this	@ Cycle
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@this	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: void <init>()>/@this	@ MSTKruskal
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void <init>()>/@this	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@this	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void <init>()>/@this	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void <init>()>/@this	@ MSTPrim
WorkSpaceTranspose::: (Mock)	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<<null pseudo heap>>	<Vertex: void <init>()>/$null0	@ (Prog /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ MSTPrim
Graph::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ MSTPrim
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l0#_0	@ G_NoEdges
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l0#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
NumberWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0	@ Number
RegionWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0	@ Connected
CycleWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0	@ Cycle
FinishTimeWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: void <init>(Graph)>/this#_0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l0#_0	@ (EdgeObjects /\ EdgeObjects)
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Neighbor: void <init>(Vertex,int)>/this#_0	@ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))
<Graph: void numberVertices()>/new NumberWorkSpace/0	<NumberWorkSpace: void <init>()>/this#_0	@ Number
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void <init>()>/this#_0	@ Connected
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<FinishTimeWorkSpace: void <init>()>/this#_0	@ StronglyConnected
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l0#_0	@ StronglyConnected
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void <init>()>/this#_0	@ StronglyConnected
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void <init>()>/this#_0	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void <init>()>/this#_0	@ (Transpose /\ Transpose)
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<CycleWorkSpace: void <init>()>/this#_0	@ Cycle
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l0#_0	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: void <init>()>/this#_0	@ MSTKruskal
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void <init>()>/this#_0	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l0#_0	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void <init>()>/this#_0	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void <init>()>/this#_0	@ MSTPrim
WorkSpaceTranspose::: (Mock)	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r0	@ (SearchBase /\ BFS)
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r1	@ (SearchBase /\ BFS)
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r2	@ (SearchBase /\ BFS)
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r4	@ (SearchBase /\ BFS)
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10	@ (Prog /\ Prog)
java.lang.String::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/@parameter0	@ (Prog /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void addVertex(Vertex)>/@this	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: VertexIter getVertices()>/@this	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Graph/0	<Graph: void addVertex(Vertex)>/@this	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void addVertex(Vertex)>/@this	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ MSTPrim
<Vertex: void <init>()>/new java.util.LinkedList/0	<Vertex: void <init>()>/$r0	@ (G_NoEdges /\ (Prog /\ Prog))
<Vertex: void <init>()>/new java.util.LinkedList/1	<Vertex: void <init>()>/$r1	@ ((Prog /\ Prog) /\ GN_OnlyNeighbors)
<Vertex: void <init>()>/new java.util.LinkedList/2	<Vertex: void <init>()>/$r2	@ (GEN_Edges /\ (Prog /\ Prog))
<Vertex: void <init>()>/new java.util.LinkedList/3	<Vertex: void <init>()>/$r3	@ ((Weighted /\ G_NoEdges) /\ (Prog /\ Prog))
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void <init>()>/$r0	@ (Prog /\ Prog)
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph: void <init>()>/$r1	@ (GEN_Edges /\ (Prog /\ Prog))
<<string-constant>>	<Graph: void display()>/$stringconstant0	@ (Prog /\ Prog)
<<string-constant>>	<Graph: void display()>/$stringconstant1	@ (Prog /\ Prog)
<<string-constant>>	<Graph: void display()>/$stringconstant2	@ (Prog /\ Prog)
<<string-constant>>	<Graph: void display()>/$stringconstant3	@ (GEN_Edges /\ (Prog /\ Prog))
<<string-constant>>	<Graph: void display()>/$stringconstant4	@ (GEN_Edges /\ (Prog /\ Prog))
<<null pseudo heap>>	<Graph: Vertex findsVertex(java.lang.String)>/$null0	@ (Prog /\ Prog)
<<null pseudo heap>>	<Graph: Vertex findsVertex(java.lang.String)>/$null1	@ (Prog /\ Prog)
java.lang.String::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/name#_0	@ (Prog /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ MSTKruskal
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ MSTPrim
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ MSTPrim
<<null pseudo heap>>	<Vertex: void display()>/$r54	@ MSTPrim
java.lang.String::: (Mock)	<Neighbor: void display()>/$r2	@ GN_OnlyNeighbors
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207	@ ((DFS /\ SearchBase) /\ G_NoEdges)
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218	@ ((SearchBase /\ BFS) /\ G_NoEdges)
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: void display()>/vxiter_$$A_1#_265	@ G_NoEdges
<Graph: Graph kruskal()>/new Graph/0	<Graph: void run(Vertex)>/gaux#_259	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void run(Vertex)>/gaux1#_264	@ (MSTPrim /\ Prog)
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: void graphSearch(WorkSpace)>/vxiter#_293	@ SearchBase
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305	@ SearchBase
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: Graph strongComponents()>/gaux#_334	@ (StronglyConnected /\ (Transpose /\ Transpose))
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph computeTranspose(Graph)>/vxiter#_353	@ (Transpose /\ Transpose)
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ (Transpose /\ Transpose)
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367	@ (Transpose /\ Transpose)
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph kruskal()>/vxiter#_406	@ MSTKruskal
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph: Graph kruskal()>/edgeiter#_428	@ (MSTKruskal /\ (EdgeObjects /\ EdgeObjects))
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484	@ MSTKruskal
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph kruskal()>/$r27	@ (MSTKruskal /\ Prog)
Vertex::: (Mock)	<Graph: Graph kruskal()>/$r27	@ MSTKruskal
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter#_526	@ MSTPrim
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545	@ MSTPrim
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633	@ MSTPrim
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15	@ (MSTPrim /\ Prog)
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/$r15	@ MSTPrim
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646	@ MSTPrim
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/e#_664	@ (MSTPrim /\ (EdgeObjects /\ EdgeObjects))
<Graph: void numberVertices()>/new NumberWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ Number
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ Connected
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ StronglyConnected
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph: void sortVertices(java.util.Comparator)>/@parameter0	@ StronglyConnected
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ Cycle
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph: void sortEdges(java.util.Comparator)>/@parameter0	@ (MSTKruskal /\ (EdgeObjects /\ EdgeObjects))
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter0	@ G_NoEdges
<<null pseudo heap>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter1	@ G_NoEdges
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<<null pseudo heap>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter1	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Graph::: (Mock)	<VertexIter: void <init>(Graph)>/@parameter0
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ (EdgeObjects /\ EdgeObjects)
<<null pseudo heap>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter1	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0	@ StronglyConnected
<<null pseudo heap>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter1	@ StronglyConnected
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0	@ MSTKruskal
<<null pseudo heap>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter1	@ MSTKruskal
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0	@ MSTPrim
<<null pseudo heap>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter1	@ MSTPrim
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v#_358	@ (Transpose /\ Transpose)
<Graph: void numberVertices()>/new NumberWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0	@ Number
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0	@ Connected
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0	@ StronglyConnected
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph: void sortVertices(java.util.Comparator)>/c#_0	@ StronglyConnected
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0	@ Cycle
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph: void sortEdges(java.util.Comparator)>/c#_0	@ (MSTKruskal /\ (EdgeObjects /\ EdgeObjects))
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l1#_0	@ G_NoEdges
<<null pseudo heap>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l2#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l1#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<<null pseudo heap>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l2#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Graph::: (Mock)	<VertexIter: void <init>(Graph)>/g#_0
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ (EdgeObjects /\ EdgeObjects)
<<null pseudo heap>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l2#_0	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0	@ StronglyConnected
<<null pseudo heap>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l2#_0	@ StronglyConnected
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0	@ MSTKruskal
<<null pseudo heap>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l2#_0	@ MSTKruskal
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0	@ MSTPrim
<<null pseudo heap>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l2#_0	@ MSTPrim
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ (Prog /\ Prog)
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void display()>/$r2	@ (Prog /\ Prog)
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void display()>/$r3	@ (Prog /\ Prog)
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void addVertex(Vertex)>/$r0	@ (Prog /\ Prog)
Vertex::: (Mock)	<Main: void main(java.lang.String[])>/$r12	@ (Prog /\ Prog)
Vertex::: (Mock)	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ (Prog /\ Prog)
Vertex::: (Mock)	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ (Prog /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph kruskal()>/$r27	@ ((Transpose /\ Transpose) /\ MSTKruskal)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15	@ ((Transpose /\ Transpose) /\ MSTPrim)
<Graph: Graph kruskal()>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10	@ (MSTKruskal /\ Prog)
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ ((Transpose /\ Transpose) /\ MSTKruskal)
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph kruskal()>/$r27	@ MSTKruskal
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15	@ (MSTKruskal /\ MSTPrim)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10	@ (MSTPrim /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ ((Transpose /\ Transpose) /\ MSTPrim)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph kruskal()>/$r27	@ (MSTKruskal /\ MSTPrim)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15	@ MSTPrim
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r1	@ (EdgeObjects /\ EdgeObjects)
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r7	@ (EdgeObjects /\ EdgeObjects)
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r3	@ (EdgeObjects /\ EdgeObjects)
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r5	@ (EdgeObjects /\ EdgeObjects)
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph computeTranspose(Graph)>/newvxiter#_366	@ (Transpose /\ Transpose)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void connectedComponents()>/@this	@ (Prog /\ Connected)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: boolean cycleCheck()>/@this	@ (Cycle /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph kruskal()>/@this	@ (MSTKruskal /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph prim(Vertex)>/@this	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void numberVertices()>/@this	@ (Prog /\ Number)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph strongComponents()>/@this	@ (Prog /\ StronglyConnected)
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358	@ ((Transpose /\ Transpose) /\ MSTKruskal)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358	@ ((Transpose /\ Transpose) /\ MSTPrim)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void connectedComponents()>/this#_0	@ (Prog /\ Connected)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: boolean cycleCheck()>/this#_0	@ (Cycle /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph kruskal()>/this#_0	@ (MSTKruskal /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph prim(Vertex)>/this#_0	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void numberVertices()>/this#_0	@ (Prog /\ Number)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph strongComponents()>/this#_0	@ (Prog /\ StronglyConnected)
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ (Prog /\ Prog)
<<null pseudo heap>>	<Main: void main(java.lang.String[])>/$r17	@ (Prog /\ Prog)
<<null pseudo heap>>	<Graph: Graph kruskal()>/theNewEnd#_505	@ (MSTKruskal /\ Prog)
<<null pseudo heap>>	<Graph: Graph kruskal()>/j_$$A_1#_504	@ (MSTKruskal /\ Prog)
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/theNewVertex#_658	@ (MSTPrim /\ Prog)
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/theNewPred#_659	@ (MSTPrim /\ Prog)
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/vtx_$$A_3#_650	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void run(Vertex)>/gaux2#_271	@ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r0	@ (EdgeObjects /\ EdgeObjects)
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r2	@ (EdgeObjects /\ EdgeObjects)
java.lang.String::: (Mock)	<Graph: Graph prim(Vertex)>/$r2	@ MSTPrim
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0	@ (Transpose /\ Transpose)
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0	@ ((((Transpose /\ Transpose) /\ (Prog /\ Prog)) \/ (MSTKruskal /\ Prog)) \/ (MSTPrim /\ Prog))
Vertex::: (Mock)	<Graph: void addVertex(Vertex)>/@parameter0	@ (((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim)
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void <init>()>/@this	@ Number
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<WorkSpace: void <init>()>/@this	@ Connected
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void <init>()>/@this	@ Cycle
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ (Transpose /\ Transpose)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ ((Transpose /\ Transpose) /\ MSTKruskal)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ ((Transpose /\ Transpose) /\ MSTPrim)
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/vtx_$$A_2#_666	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0	@ (Transpose /\ Transpose)
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0	@ ((((Transpose /\ Transpose) /\ (Prog /\ Prog)) \/ (MSTKruskal /\ Prog)) \/ (MSTPrim /\ Prog))
Vertex::: (Mock)	<Graph: void addVertex(Vertex)>/v#_0	@ (((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim)
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void <init>()>/this#_0	@ Number
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<WorkSpace: void <init>()>/this#_0	@ Connected
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void <init>()>/this#_0	@ Cycle
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
java.lang.String::: (Mock)	<Edge: void display()>/$r7	@ (EdgeObjects /\ EdgeObjects)
java.lang.String::: (Mock)	<Edge: void display()>/$r11	@ (EdgeObjects /\ EdgeObjects)
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ (Prog /\ Prog)
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ (Prog /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0	@ MSTPrim
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Vertex: void addEdge(Neighbor)>/@parameter0	@ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: VertexIter getVertices()>/@this	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIter getEdges()>/@this	@ (GEN_Edges /\ (Prog /\ Prog))
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: Vertex next()>/@this	@ G_NoEdges
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: boolean hasNext()>/@this	@ G_NoEdges
<Graph: Graph kruskal()>/new Graph/0	<Graph: void display()>/@this	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void display()>/@this	@ (MSTPrim /\ Prog)
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: boolean hasNext()>/@this	@ (((SearchBase \/ (Transpose /\ Transpose)) \/ MSTKruskal) \/ MSTPrim)
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: Vertex next()>/@this	@ (((SearchBase \/ (Transpose /\ Transpose)) \/ MSTKruskal) \/ MSTPrim)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/@this	@ (StronglyConnected /\ (Transpose /\ Transpose))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: EdgeIfc next()>/@this	@ (MSTKruskal /\ (EdgeObjects /\ EdgeObjects))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: boolean hasNext()>/@this	@ (MSTKruskal /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph kruskal()>/new Graph/0	<Graph: VertexIter getVertices()>/@this	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: VertexIter getVertices()>/@this	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ ((Transpose /\ Transpose) /\ MSTKruskal)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ ((Transpose /\ Transpose) /\ MSTPrim)
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ (Prog /\ Prog)
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ (Prog /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0	@ (Transpose /\ Transpose)
<Graph: Graph kruskal()>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0	@ MSTPrim
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Vertex: void addEdge(Neighbor)>/n#_0	@ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0	@ (GEN_Edges /\ (Prog /\ Prog))
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: Vertex next()>/this#_0	@ G_NoEdges
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: boolean hasNext()>/this#_0	@ G_NoEdges
<Graph: Graph kruskal()>/new Graph/0	<Graph: void display()>/this#_0	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void display()>/this#_0	@ (MSTPrim /\ Prog)
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: boolean hasNext()>/this#_0	@ (((SearchBase \/ (Transpose /\ Transpose)) \/ MSTKruskal) \/ MSTPrim)
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: Vertex next()>/this#_0	@ (((SearchBase \/ (Transpose /\ Transpose)) \/ MSTKruskal) \/ MSTPrim)
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/this#_0	@ (StronglyConnected /\ (Transpose /\ Transpose))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: EdgeIfc next()>/this#_0	@ (MSTKruskal /\ (EdgeObjects /\ EdgeObjects))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: boolean hasNext()>/this#_0	@ (MSTKruskal /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph kruskal()>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph kruskal()>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph kruskal()>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph kruskal()>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0	@ (MSTKruskal /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0	@ (Prog /\ StronglyConnected)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/@parameter0	@ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ (Prog /\ Prog)
<<null pseudo heap>>	<Graph: void run(Vertex)>/@parameter0	@ (Prog /\ Prog)
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ ((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog))
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ ((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog))
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0	@ ((MSTPrim /\ Prog) /\ (EdgeObjects /\ EdgeObjects))
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ (Number /\ SearchBase)
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this	@ (SearchBase /\ Connected)
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ (SearchBase /\ StronglyConnected)
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ (SearchBase /\ Cycle)
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex)>/@this	@ G_NoEdges
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex)>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph)>/@this	@ (EdgeObjects /\ EdgeObjects)
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph)>/@this	@ StronglyConnected
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph)>/@this	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph)>/@this	@ MSTPrim
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0	@ (MSTKruskal /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0	@ (Prog /\ StronglyConnected)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/the_graph#_0	@ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ (Prog /\ Prog)
<<null pseudo heap>>	<Graph: void run(Vertex)>/v#_0	@ (Prog /\ Prog)
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ ((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog))
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ ((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog))
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	@ ((MSTPrim /\ Prog) /\ (EdgeObjects /\ EdgeObjects))
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (Number /\ SearchBase)
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (SearchBase /\ Connected)
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (SearchBase /\ StronglyConnected)
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (SearchBase /\ Cycle)
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex)>/this#_0	@ G_NoEdges
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex)>/this#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph)>/this#_0	@ (EdgeObjects /\ EdgeObjects)
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph)>/this#_0	@ StronglyConnected
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph)>/this#_0	@ MSTKruskal
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph)>/this#_0	@ MSTPrim
<Graph: void <init>()>/new java.util.LinkedList/0	<VertexIter: void <init>(Graph)>/$r0	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161	@ (Prog /\ Prog)
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph: void display()>/edgeiter_$$A_1#_177	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ (StronglyConnected /\ (Transpose /\ Transpose))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void display()>/@this	@ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: EdgeIfc next()>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: boolean hasNext()>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/@this	@ ((((Prog /\ Number) \/ (Prog /\ Connected)) \/ (Prog /\ StronglyConnected)) \/ (Cycle /\ Prog))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortVertices(java.util.Comparator)>/@this	@ (Prog /\ StronglyConnected)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/@this	@ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortEdges(java.util.Comparator)>/@this	@ ((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this	@ ((MSTPrim /\ Prog) /\ (EdgeObjects /\ EdgeObjects))
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	@ ((MSTPrim /\ Prog) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: void graphSearch(WorkSpace)>/w#_0	@ (StronglyConnected /\ (Transpose /\ Transpose))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void display()>/this#_0	@ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: boolean hasNext()>/this#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/this#_0	@ ((((Prog /\ Number) \/ (Prog /\ Connected)) \/ (Prog /\ StronglyConnected)) \/ (Cycle /\ Prog))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortVertices(java.util.Comparator)>/this#_0	@ (Prog /\ StronglyConnected)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/this#_0	@ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortEdges(java.util.Comparator)>/this#_0	@ ((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0	@ ((MSTPrim /\ Prog) /\ (EdgeObjects /\ EdgeObjects))
Vertex::: (Mock)	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ (G_NoEdges /\ (Prog /\ Prog))
Vertex::: (Mock)	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Main: void main(java.lang.String[])>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph kruskal()>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ (MSTPrim /\ Prog)
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex)>/@parameter0	@ G_NoEdges
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex)>/@parameter0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph)>/@parameter0	@ StronglyConnected
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph)>/@parameter0	@ MSTKruskal
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph)>/@parameter0	@ MSTPrim
<Main: void main(java.lang.String[])>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0	@ (Prog /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph kruskal()>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ (MSTPrim /\ Prog)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ ((Transpose /\ Transpose) /\ (Prog /\ Prog))
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ (MSTKruskal /\ Prog)
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ (MSTPrim /\ Prog)
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex)>/l1#_0	@ G_NoEdges
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex)>/l1#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ (EdgeObjects /\ EdgeObjects)
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph)>/l1#_0	@ StronglyConnected
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph)>/l1#_0	@ MSTKruskal
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph)>/l1#_0	@ MSTPrim
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ (G_NoEdges /\ (Prog /\ Prog))
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<<null pseudo heap>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ (((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog)) /\ G_NoEdges)
<<null pseudo heap>>	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph)>/@parameter0	@ (MSTKruskal /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph)>/@parameter0	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph)>/@parameter0	@ (Prog /\ StronglyConnected)
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/@parameter0	@ (MSTPrim /\ Prog)
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIter getEdges()>/@this	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ GEN_Edges))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIter getEdges()>/@this	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph)>/l1#_0	@ (MSTKruskal /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph)>/l1#_0	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph)>/l1#_0	@ (Prog /\ StronglyConnected)
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/r#_0	@ (MSTPrim /\ Prog)
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ GEN_Edges))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges))
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void sortVertices(java.util.Comparator)>/$r0	@ (Prog /\ StronglyConnected)
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph: void sortEdges(java.util.Comparator)>/$r0	@ (((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects)) /\ (GEN_Edges /\ (Prog /\ Prog)))
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ (Prog /\ Prog))
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void setWeight(int)>/@this	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Prog /\ Prog))
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addWeight(int)>/@this	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (Prog /\ Prog))
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/root#_522	@ (MSTPrim /\ Prog)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ (Prog /\ Prog))
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Prog /\ Prog))
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (Prog /\ Prog))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511	@ (((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ (((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph kruskal()>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ (((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511	@ (((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<<null pseudo heap>>	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ (((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog)) /\ G_NoEdges)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ (Prog /\ Prog))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this	@ (SearchBase /\ (StronglyConnected /\ (Transpose /\ Transpose)))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIter getEdges()>/@this	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected)))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<<null pseudo heap>>	<Vertex: void addAdjacent(Vertex)>/n#_0	@ (((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog)) /\ G_NoEdges)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ (Prog /\ Prog))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0	@ (SearchBase /\ (StronglyConnected /\ (Transpose /\ Transpose)))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected)))
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ (((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects)) /\ (GEN_Edges /\ (Prog /\ Prog)))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges)) /\ (EdgeObjects /\ EdgeObjects))
Graph::: (Mock)	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ (EdgeObjects /\ EdgeObjects)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ (((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog)) /\ G_NoEdges)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void setWeight(int)>/@this	@ (((Weighted /\ G_NoEdges) /\ (Prog /\ Prog)) /\ ((Weighted /\ G_NoEdges) /\ (Transpose /\ Transpose)))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void setWeight(int)>/@this	@ (((Weighted /\ G_NoEdges) /\ (Prog /\ Prog)) /\ ((Weighted /\ G_NoEdges) /\ MSTKruskal))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void setWeight(int)>/@this	@ (((Weighted /\ G_NoEdges) /\ (Prog /\ Prog)) /\ ((Weighted /\ G_NoEdges) /\ MSTPrim))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addWeight(int)>/@this	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Transpose /\ Transpose) /\ (Prog /\ Prog)))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addWeight(int)>/@this	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (MSTKruskal /\ Prog))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addWeight(int)>/@this	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (MSTPrim /\ Prog))
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<VertexIter: void <init>()>/@this	@ G_NoEdges
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<EdgeIter: void <init>()>/@this	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<EdgeIter: void <init>()>/@this	@ (EdgeObjects /\ EdgeObjects)
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ (((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects)) /\ (GEN_Edges /\ (Prog /\ Prog)))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges)) /\ (EdgeObjects /\ EdgeObjects))
Graph::: (Mock)	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ (EdgeObjects /\ EdgeObjects)
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ (((MSTKruskal /\ Prog) \/ (MSTPrim /\ Prog)) /\ G_NoEdges)
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0	@ (((Weighted /\ G_NoEdges) /\ (Prog /\ Prog)) /\ ((Weighted /\ G_NoEdges) /\ (Transpose /\ Transpose)))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0	@ (((Weighted /\ G_NoEdges) /\ (Prog /\ Prog)) /\ ((Weighted /\ G_NoEdges) /\ MSTKruskal))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0	@ (((Weighted /\ G_NoEdges) /\ (Prog /\ Prog)) /\ ((Weighted /\ G_NoEdges) /\ MSTPrim))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Transpose /\ Transpose) /\ (Prog /\ Prog)))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (MSTKruskal /\ Prog))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (MSTPrim /\ Prog))
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<VertexIter: void <init>()>/this#_0	@ G_NoEdges
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<EdgeIter: void <init>()>/this#_0	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<EdgeIter: void <init>()>/this#_0	@ (EdgeObjects /\ EdgeObjects)
<Vertex: void <init>()>/new java.util.LinkedList/0	<Vertex: void addAdjacent(Vertex)>/$r0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ (Prog /\ Prog))
<Vertex: void <init>()>/new java.util.LinkedList/3	<Vertex: void addWeight(int)>/$r1	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (Prog /\ Prog))
<Vertex: void <init>()>/new java.util.LinkedList/1	<Vertex: void addWeight(int)>/$r2	@ ((Weighted /\ GN_OnlyNeighbors) /\ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ (Prog /\ Prog)))
<Vertex: void <init>()>/new java.util.LinkedList/0	<Vertex: void setWeight(int)>/$r0	@ (((((Transpose /\ Transpose) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Prog /\ Prog))
<<null pseudo heap>>	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0	@ (((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges)) /\ (MSTPrim /\ (EdgeObjects /\ EdgeObjects)))
<<null pseudo heap>>	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ (((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges)) /\ (MSTPrim /\ (EdgeObjects /\ EdgeObjects)))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ ((((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges)) /\ (MSTKruskal /\ G_NoEdges)) \/ (((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges)) /\ (MSTPrim /\ G_NoEdges)))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ ((((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges)) /\ (MSTKruskal /\ G_NoEdges)) \/ (((G_NoEdges /\ (Prog /\ Prog)) /\ ((Transpose /\ Transpose) /\ G_NoEdges)) /\ (MSTPrim /\ G_NoEdges)))
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges))
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ ((G_NoEdges /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges))
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ (((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects)) /\ (GEN_Edges /\ (Prog /\ Prog)))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ (((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects)) /\ (GEN_Edges /\ (Prog /\ Prog)))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph: java.util.LinkedList access$0(Graph)>/$r0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph kruskal()>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ (((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects)) /\ (GEN_Edges /\ (Prog /\ Prog)))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph kruskal()>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ (((MSTKruskal /\ Prog) /\ (EdgeObjects /\ EdgeObjects)) /\ (GEN_Edges /\ (Prog /\ Prog)))
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ (MSTPrim /\ GEN_Edges)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph$EdgeIter1: void <init>(Graph)>/$r0	@ ((GEN_Edges /\ (Prog /\ Prog)) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (EdgeObjects /\ EdgeObjects))
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ (((GEN_Edges /\ (Prog /\ Prog)) /\ ((StronglyConnected /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (EdgeObjects /\ EdgeObjects))
