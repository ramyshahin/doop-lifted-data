<Vertex: void <init>()>
<Vertex: Vertex assignName(java.lang.String)>
<Vertex: java.lang.String getName()>
<Vertex: void addAdjacent(Vertex)>	@ G_NoEdges
<Vertex: void adjustAdorns(Vertex,int)>	@ G_NoEdges
<Vertex: VertexIter getNeighbors()>	@ G_NoEdges
<Vertex: Vertex getStart()>	@ (Undirected /\ G_NoEdges)
<Vertex: Vertex getEnd()>	@ G_NoEdges
<Vertex: int getWeight()>	@ G_NoEdges
<Vertex: Vertex getOtherVertex(Vertex)>	@ G_NoEdges
<Vertex: void adjustAdorns(EdgeIfc)>	@ G_NoEdges
<Vertex: void addEdge(Neighbor)>	@ GN_OnlyNeighbors
<Vertex: void adjustAdorns(Neighbor)>	@ GN_OnlyNeighbors
<Vertex: void addNeighbor(Neighbor)>	@ GEN_Edges
<Vertex: EdgeIter getEdges()>	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Vertex: java.util.LinkedList getNeighborsObj()>	@ GN_OnlyNeighbors
<Vertex: void addWeight(int)>	@ Weighted
<Vertex: void setWeight(int)>	@ (Weighted /\ G_NoEdges)
<Vertex: void init_vertex(WorkSpace)>	@ SearchBase
<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void display()>
<Vertex$VertexIter2: void <init>(Vertex)>
<Vertex$VertexIter2: Vertex next()>	@ GN_OnlyNeighbors
<Vertex$VertexIter2: boolean hasNext()>	@ GN_OnlyNeighbors
<Neighbor: void <init>()>
<Neighbor: void <init>(Vertex,int)>
<Neighbor: void display()>	@ GN_OnlyNeighbors
<Neighbor: Vertex getStart()>	@ GN_OnlyNeighbors
<Neighbor: Vertex getEnd()>	@ GN_OnlyNeighbors
<Neighbor: void setWeight(int)>	@ (Weighted /\ GN_OnlyNeighbors)
<Neighbor: int getWeight()>	@ (Weighted /\ GN_OnlyNeighbors)
<Neighbor: Vertex getOtherVertex(Vertex)>	@ GN_OnlyNeighbors
<Neighbor: void adjustAdorns(EdgeIfc)>	@ GN_OnlyNeighbors
<Neighbor: void <init>(Vertex,Edge)>
<EdgeIfc: Vertex getStart()>
<EdgeIfc: Vertex getEnd()>
<EdgeIfc: void display()>
<EdgeIfc: Vertex getOtherVertex(Vertex)>
<EdgeIfc: void adjustAdorns(EdgeIfc)>
<EdgeIfc: void setWeight(int)>
<EdgeIfc: int getWeight()>
<NumberWorkSpace: void <init>()>
<NumberWorkSpace: void preVisitAction(Vertex)>
<Vertex$VertexIter1: void <init>(Vertex)>
<Vertex$VertexIter1: Vertex next()>	@ G_NoEdges
<Vertex$VertexIter1: boolean hasNext()>	@ G_NoEdges
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Vertex$EdgeIter2: void <init>(Vertex)>
<Vertex$EdgeIter2: EdgeIfc next()>	@ (EdgeObjects /\ GN_OnlyNeighbors)
<Vertex$EdgeIter2: boolean hasNext()>	@ (EdgeObjects /\ GN_OnlyNeighbors)
<Graph$Comparator3: void <init>(Graph)>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@ MSTKruskal
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Main: void <init>()>
<Main: void main(java.lang.String[])>	@ (Prog /\ Prog)
<Main: EdgeIfc addEdge(Graph,int)>	@ (Prog /\ Prog)
<Main: void readWeights(Graph,int)>	@ (Prog /\ Prog)
<Edge: void <init>(Vertex,Vertex,int)>
<Edge: void adjustAdorns(EdgeIfc)>	@ (EdgeObjects /\ EdgeObjects)
<Edge: void setWeight(int)>	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
<Edge: int getWeight()>	@ (EdgeObjects /\ (EdgeObjects /\ Weighted))
<Edge: Vertex getOtherVertex(Vertex)>	@ (EdgeObjects /\ EdgeObjects)
<Edge: Vertex getStart()>	@ (EdgeObjects /\ EdgeObjects)
<Edge: Vertex getEnd()>	@ (EdgeObjects /\ EdgeObjects)
<Edge: void display()>	@ (EdgeObjects /\ EdgeObjects)
<RegionWorkSpace: void <init>()>
<RegionWorkSpace: void init_vertex(Vertex)>	@ Connected
<RegionWorkSpace: void postVisitAction(Vertex)>	@ Connected
<RegionWorkSpace: void nextRegionAction(Vertex)>	@ Connected
<VertexIter: void <init>()>
<VertexIter: void <init>(Graph)>
<VertexIter: Vertex next()>
<VertexIter: boolean hasNext()>
<CycleWorkSpace: void <init>()>
<CycleWorkSpace: void init_vertex(Vertex)>	@ Cycle
<CycleWorkSpace: void preVisitAction(Vertex)>
<CycleWorkSpace: void postVisitAction(Vertex)>	@ Cycle
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph$Comparator2: void <init>(Graph)>
<Graph$Comparator2: int compare(Vertex,Vertex)>	@ MSTPrim
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<EdgeIter: void <init>()>
<EdgeIter: boolean hasNext()>
<EdgeIter: EdgeIfc next()>
<WorkSpace: void <init>()>
<WorkSpace: void init_vertex(Vertex)>	@ SearchBase
<WorkSpace: void preVisitAction(Vertex)>	@ SearchBase
<WorkSpace: void postVisitAction(Vertex)>	@ SearchBase
<WorkSpace: void nextRegionAction(Vertex)>	@ SearchBase
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ SearchBase
<Vertex$EdgeIter1: void <init>(Vertex)>
<Vertex$EdgeIter1: EdgeIfc next()>	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Vertex$EdgeIter1: boolean hasNext()>	@ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<Graph$Comparator1: void <init>(Graph)>
<Graph$Comparator1: int compare(Vertex,Vertex)>	@ StronglyConnected
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<Vertex$VertexIter3: void <init>(Vertex)>
<Vertex$VertexIter3: Vertex next()>	@ GEN_Edges
<Vertex$VertexIter3: boolean hasNext()>	@ GEN_Edges
<FinishTimeWorkSpace: void <init>()>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@ StronglyConnected
<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@ StronglyConnected
<Graph: void <clinit>()>
<Graph: void <init>()>
<Graph: VertexIter getVertices()>
<Graph: EdgeIter getEdges()>
<Graph: void sortVertices(java.util.Comparator)>
<Graph: void sortEdges(java.util.Comparator)>	@ (EdgeObjects /\ EdgeObjects)
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<Graph: void addEdge(Vertex,Neighbor)>	@ GN_OnlyNeighbors
<Graph: Vertex findsVertex(java.lang.String)>
<Graph: void display()>
<Graph: void addVertex(Vertex)>
<Graph: void runBenchmark(java.lang.String)>	@ (Benchmark /\ Benchmark)
<Graph: void stopBenchmark()>	@ (Benchmark /\ Benchmark)
<Graph: int readNumber()>	@ (Benchmark /\ Benchmark)
<Graph: void startProfile()>	@ (Benchmark /\ Benchmark)
<Graph: void stopProfile()>	@ (Benchmark /\ Benchmark)
<Graph: void resumeProfile()>	@ (Benchmark /\ Benchmark)
<Graph: void endProfile()>	@ (Benchmark /\ Benchmark)
<Graph: void run(Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@ (EdgeObjects /\ EdgeObjects)
<Graph: void graphSearch(WorkSpace)>
<Graph: void numberVertices()>	@ Number
<Graph: void connectedComponents()>	@ Connected
<Graph: Graph strongComponents()>
<Graph: Graph computeTranspose(Graph)>	@ (Transpose /\ Transpose)
<Graph: boolean cycleCheck()>	@ Cycle
<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>
<Graph: java.util.LinkedList access$0(Graph)>
<GlobalVarsWrapper: void <clinit>()>	@ (BFS /\ BFS)
<GlobalVarsWrapper: void <init>()>
<Graph$EdgeIter1: void <init>(Graph)>
<Graph$EdgeIter1: EdgeIfc next()>	@ (EdgeObjects /\ EdgeObjects)
<Graph$EdgeIter1: boolean hasNext()>	@ (EdgeObjects /\ EdgeObjects)
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<WorkSpaceTranspose: void <init>()>
<WorkSpaceTranspose: void preVisitAction(Vertex)>	@ StronglyConnected
<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@ StronglyConnected
<Vertex$EdgeIter3: void <init>(Vertex)>
<Vertex$EdgeIter3: EdgeIfc next()>	@ (EdgeObjects /\ GEN_Edges)
<Vertex$EdgeIter3: boolean hasNext()>	@ (EdgeObjects /\ GEN_Edges)
