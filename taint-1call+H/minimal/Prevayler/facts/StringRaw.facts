<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
OK	OK
<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<net.sourceforge.javamatch.engine.MatchResult: java.util.Iterator getResultIterator()>	<net.sourceforge.javamatch.engine.MatchResult: java.util.Iterator getResultIterator()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.DurableOutputStream: void internalClose()>	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
Transfer...	Transfer...
<org.prevayler.foundation.Cool: void wait(java.lang.Object)>	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>	<java.io.FileOutputStream: java.io.FileDescriptor getFD()>
<java.io.ObjectStreamClass: java.lang.String getName()>	<java.io.ObjectStreamClass: java.lang.String getName()>
PrevaylerTransactionThreadsMaximum	PrevaylerTransactionThreadsMaximum
<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>	<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<com.skaringa.javaxml.ObjectTransformer: java.lang.Object deserialize(javax.xml.transform.Source)>	<com.skaringa.javaxml.ObjectTransformer: java.lang.Object deserialize(javax.xml.transform.Source)>
<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>	<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.implementation.Capsule: void <init>(byte[])>	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
RunPrevaylerTransactionTest	RunPrevaylerTransactionTest
\\"SubscriberUpToDate\\"	\\"SubscriberUpToDate\\"
QueryTest	QueryTest
<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
East	East
<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
\\"(0|[1-9A-F][0-9A-F]{0,6}|[1-7][0-9A-F]{7})(;[^\u0000- ()<>@,;:\\\\\\\"/\\[\\]?={}\u007f-\uffff]+=[^\u0000- ()<>@,;:\\\\\\\"/\\[\\]?={}\u007f-\uffff]+)*\r\n\\"	\\"(0|[1-9A-F][0-9A-F]{0,6}|[1-7][0-9A-F]{7})(;[^\u0000- ()<>@,;:\\\\\\\"/\\[\\]?={}\u007f-\uffff]+=[^\u0000- ()<>@,;:\\\\\\\"/\\[\\]?={}\u007f-\uffff]+)*\r\n\\"
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>	<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.foundation.Chunking: void <clinit>()>	<org.prevayler.foundation.Chunking: void <clinit>()>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
RunJdbcTransactionTest	RunJdbcTransactionTest
PrevaylerTransactionThreadsMinimum	PrevaylerTransactionThreadsMinimum
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
yes	yes
JdbcQueryThreadsMaximum	JdbcQueryThreadsMaximum
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>	<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>	<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<javax.swing.Box: javax.swing.Box createVerticalBox()>	<javax.swing.Box: javax.swing.Box createVerticalBox()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.Cool: void <init>()>	<org.prevayler.foundation.Cool: void <init>()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<java.lang.Float: void <init>(float)>	<java.lang.Float: void <init>(float)>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<java.io.PrintStream: void println(java.lang.String)>	<java.io.PrintStream: void println(java.lang.String)>
<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<java.io.IOException: void printStackTrace()>	<java.io.IOException: void printStackTrace()>
<<\\"preparing statement: \\">>	<<\\"preparing statement: \\">>
<java.io.File: boolean createNewFile()>	<java.io.File: boolean createNewFile()>
NumberOfObjects	NumberOfObjects
<net.sourceforge.javamatch.query.QuerySet: void <init>()>	<net.sourceforge.javamatch.query.QuerySet: void <init>()>
Journal.update() has to be called at least once before Journal.journal().	Journal.update() has to be called at least once before Journal.journal().
<java.util.Random: void <init>(long)>	<java.util.Random: void <init>(long)>
<java.util.Date: void <init>(long)>	<java.util.Date: void <init>(long)>
<javax.swing.JPanel: void setLayout(java.awt.LayoutManager)>	<javax.swing.JPanel: void setLayout(java.awt.LayoutManager)>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.implementation.journal.Journal: void close()>	<org.prevayler.implementation.journal.Journal: void close()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.Main: void <init>()>	<org.prevayler.demos.scalability.Main: void <init>()>
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
From Account	From Account
South	South
<java.lang.Long: void <init>(long)>	<java.lang.Long: void <init>(long)>
<java.io.File: java.io.File getParentFile()>	<java.io.File: java.io.File getParentFile()>
<org.prevayler.implementation.journal.PersistentJournal: void close()>	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<java.nio.channels.FileLock: void release()>	<java.nio.channels.FileLock: void release()>
<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>	<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>
Transfer	Transfer
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>	<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.lang.Object: void notify()>	<java.lang.Object: void notify()>
<<\\"There are transactions needing to be recovered from \\">>	<<\\"There are transactions needing to be recovered from \\">>
<<\\"Directory doesn\'t exist and could not be created: \\">>	<<\\"Directory doesn\'t exist and could not be created: \\">>
<javax.swing.Box: java.awt.Component createVerticalStrut(int)>	<javax.swing.Box: java.awt.Component createVerticalStrut(int)>
<org.prevayler.foundation.network.NetworkImpl: void <init>()>	<org.prevayler.foundation.network.NetworkImpl: void <init>()>
update() must be called at least once	update() must be called at least once
<<\\"Unable to find journal file containing transaction \\">>	<<\\"Unable to find journal file containing transaction \\">>
<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>	<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>
#	#
systemVersion	systemVersion
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Record: void <init>(long)>	<org.prevayler.demos.scalability.Record: void <init>(long)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>	<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>
\n\n\n	\n\n\n
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.PrevaylerFactory: void <init>()>	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.TransactionPublisher: org.prevayler.Clock clock()>	<org.prevayler.implementation.publishing.TransactionPublisher: org.prevayler.Clock clock()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<java.lang.Object: boolean equals(java.lang.Object)>	<java.lang.Object: boolean equals(java.lang.Object)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
All Accounts	All Accounts
Deposit	Deposit
Prevayler is no longer processing queries due to an Error thrown from an earlier transaction.	Prevayler is no longer processing queries due to an Error thrown from an earlier transaction.
<com.skaringa.javaxml.SerializerException: java.lang.String getMessage()>	<com.skaringa.javaxml.SerializerException: java.lang.String getMessage()>
This test will be skipped (see properties file).	This test will be skipped (see properties file).
<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>	<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
Error during deserialization	Error during deserialization
<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<javax.swing.JFrame: void setDefaultCloseOperation(int)>	<javax.swing.JFrame: void setDefaultCloseOperation(int)>
<java.util.Properties: void load(java.io.InputStream)>	<java.util.Properties: void load(java.io.InputStream)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<java.lang.Long: long longValue()>	<java.lang.Long: long longValue()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
<java.io.File: boolean exists()>	<java.io.File: boolean exists()>
0.00	0.00
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<java.io.FileDescriptor: void sync()>	<java.io.FileDescriptor: void sync()>
<javax.swing.JTable: void <init>(javax.swing.table.TableModel)>	<javax.swing.JTable: void <init>(javax.swing.table.TableModel)>
<<\\"\nMemory used: \\">>	<<\\"\nMemory used: \\">>
<java.math.BigDecimal: void <init>(int)>	<java.math.BigDecimal: void <init>(int)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
New Account	New Account
<java.util.StringTokenizer: java.lang.String nextToken()>	<java.util.StringTokenizer: java.lang.String nextToken()>
<com.thoughtworks.xstream.XStream: java.lang.Object fromXML(java.io.Reader)>	<com.thoughtworks.xstream.XStream: java.lang.Object fromXML(java.io.Reader)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.Main: void <clinit>()>	<org.prevayler.demos.scalability.Main: void <clinit>()>
<org.prevayler.Prevayler: void takeSnapshot()>	<org.prevayler.Prevayler: void takeSnapshot()>
<java.lang.Error: void <init>(java.lang.String)>	<java.lang.Error: void <init>(java.lang.String)>
<java.lang.String: boolean equals(java.lang.Object)>	<java.lang.String: boolean equals(java.lang.Object)>
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<java.io.PrintStream: void println(java.lang.Object)>	<java.io.PrintStream: void println(java.lang.Object)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
<javax.swing.JList: void setEnabled(boolean)>	<javax.swing.JList: void setEnabled(boolean)>
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>
<javax.swing.JButton: void addActionListener(java.awt.event.ActionListener)>	<javax.swing.JButton: void addActionListener(java.awt.event.ActionListener)>
<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>	<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>
<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>	<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>
<org.prevayler.foundation.network.ObjectServerSocket: org.prevayler.foundation.network.ObjectSocket accept()>	<org.prevayler.foundation.network.ObjectServerSocket: org.prevayler.foundation.network.ObjectSocket accept()>
<javax.swing.JScrollPane: void <init>(java.awt.Component)>	<javax.swing.JScrollPane: void <init>(java.awt.Component)>
<java.util.LinkedList: int size()>	<java.util.LinkedList: int size()>
<javax.swing.JTextField: java.lang.String getText()>	<javax.swing.JTextField: java.lang.String getText()>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>	<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>
<org.prevayler.foundation.DurableOutputStream: java.io.File file()>	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
\nRobustness Reminder: You can kill this process at any time.\nWhen you restart the system, you will see that nothing was lost.\nPress Enter to continue.\n	\nRobustness Reminder: You can kill this process at any time.\nWhen you restart the system, you will see that nothing was lost.\nPress Enter to continue.\n
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
<java.sql.Connection: void setAutoCommit(boolean)>	<java.sql.Connection: void setAutoCommit(boolean)>
Unexpected end of stream in chunk trailer	Unexpected end of stream in chunk trailer
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>()>	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>()>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>
<<\\"Attempted to process \\">>	<<\\"Attempted to process \\">>
<org.prevayler.foundation.FileManager: void <init>()>	<org.prevayler.foundation.FileManager: void <init>()>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<<\\"Disk space used: \\">>	<<\\"Disk space used: \\">>
<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>	<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>	<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean)>	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean)>
<java.io.File: java.lang.String getCanonicalPath()>	<java.io.File: java.lang.String getCanonicalPath()>
<java.io.InputStream: void close()>	<java.io.InputStream: void close()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<<HASH:1156460636>>	<<\\"###########################################################\n#                                                         #\n#      PREVAYLER VS JDBC SCALABILITY TEST PROPERTIES      #\n#                                                         #\n###########################################################\n\nNumberOfObjects = ONE_HUNDRED_THOUSAND\n# NumberOfObjects = ONE_MILLION\n# NumberOfObjects = TEN_MILLION\n# NumberOfObjects = TWENTY_MILLION\n#\n# The results are only valid if both Prevayler and the\n# database can run the tests without paging memory to disk.\n#\n# Running the tests with one hundred thousand objects\n# (default option) requires approx. 128MB free RAM.\n# The VM must be started with a sufficient maximum heap\n# size or you will get an OutOfMemoryError.\n#\n# Example for Linux and Windows:  java -Xmx128000000 ...\n#\n# (This can be set with the scalability.jvmarg property\n# in build.properties; see sample.build.properties for\n# examples.)\n#\n# Running the tests with one million objects requires\n# approx. 940MB free RAM.\n# Running the tests with ten million objects requires\n# approx. 9.4GB free RAM and a 64bit VM.\n#\n# IMPORTANT: Remember to shutdown all other non-vital\n# processes before running the tests. Even the database\n# process should be down while running the Prevayler tests\n# that do not use it.\n\n\n###########################################################\n# PREVAYLER QUERY TEST\n\nRunPrevaylerQueryTest = YES\n# RunPrevaylerQueryTest = NO\n\nPrevaylerQueryThreadsMinimum = 1\nPrevaylerQueryThreadsMaximum = 5\n# More threads can produce better results on\n# multi-processor machines.\n\n\n###########################################################\n# PREVAYLER TRANSACTION TEST\n\nRunPrevaylerTransactionTest = YES\n# RunPrevaylerTransactionTest = NO\n\nPrevaylerTransactionThreadsMinimum = 1\nPrevaylerTransactionThreadsMaximum = 5\n#\n# More threads can produce better results on machines with\n# multiple disks.\n\nTransactionTestCheckConsistency = YES\n# TransactionTestCheckConsistency = NO\n#\n# Verifies the integrity of the journal files produced in\n# your particular environment.\n\nTransactionLogDirectory = TransactionTest\n#\n# The full path name can be used. Example for Windows:\n# TransactionLogDirectory1 = c:\\\\temp\\\\TransactionTest\n# The back-slash (\\) is the escape character so you must\n# use two back-slashes (\\\\).\n\nPrevaylerJournalSerializer = \\">>
Unexpected end of stream in chunk data	Unexpected end of stream in chunk data
<java.lang.Exception: java.lang.String getMessage()>	<java.lang.Exception: java.lang.String getMessage()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.lang.String table()>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.lang.String table()>
<java.lang.Thread: void setDaemon(boolean)>	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean)>	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean)>
Account	Account
<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
<org.prevayler.foundation.network.NetworkServerObjectReceiver: void shutdown()>	<org.prevayler.foundation.network.NetworkServerObjectReceiver: void shutdown()>
<java.lang.String: java.lang.String substring(int)>	<java.lang.String: java.lang.String substring(int)>
<org.prevayler.implementation.clock.BrokenClock: void <init>()>	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>
<java.lang.Object: int hashCode()>	<java.lang.Object: int hashCode()>
<org.prevayler.implementation.clock.PausableClock: void resume()>	<org.prevayler.implementation.clock.PausableClock: void resume()>
<org.prevayler.implementation.publishing.POBox: void run()>	<org.prevayler.implementation.publishing.POBox: void run()>
<java.util.LinkedList: java.lang.Object removeFirst()>	<java.util.LinkedList: java.lang.Object removeFirst()>
<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>	<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>
<java.util.List: boolean add(java.lang.Object)>	<java.util.List: boolean add(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String name()>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String name()>
Unexpected Exception thrown.	Unexpected Exception thrown.
<<\\"\n\n========= Running \\">>	<<\\"\n\n========= Running \\">>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<java.lang.Integer: void <init>(int)>	<java.lang.Integer: void <init>(int)>
<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<javax.swing.JList: java.lang.Object getSelectedValue()>	<javax.swing.JList: java.lang.Object getSelectedValue()>
<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>	<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>	<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
demo1	demo1
<java.lang.Math: double ceil(double)>	<java.lang.Math: double ceil(double)>
<java.util.Set: boolean remove(java.lang.Object)>	<java.util.Set: boolean remove(java.lang.Object)>
Transaction History	Transaction History
<<\\"All transaction processing is now blocked. An IOException was thrown while \\">>	<<\\"All transaction processing is now blocked. An IOException was thrown while \\">>
<java.io.InputStream: void <init>()>	<java.io.InputStream: void <init>()>
skaringajournal	skaringajournal
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>	<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<java.lang.Object: void <init>()>	<java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>	<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.lang.Class: java.lang.Class forName(java.lang.String)>	<java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<java.io.PrintStream: void <init>(java.io.OutputStream)>	<java.io.PrintStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>	<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.foundation.DurableOutputStream: void close()>	<org.prevayler.foundation.DurableOutputStream: void close()>
<java.lang.RuntimeException: void <init>(java.lang.String)>	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>
<<\\"Property \\">>	<<\\"Property \\">>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>
The minimum number of threads cannot be greater than the maximum number.	The minimum number of threads cannot be greater than the maximum number.
<org.prevayler.foundation.Chunk: void <init>(byte[])>	<org.prevayler.foundation.Chunk: void <init>(byte[])>
Invalid parameter value \'	Invalid parameter value \'
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<java.util.ArrayList: void <init>()>	<java.util.ArrayList: void <init>()>
\\"\\d{19}\\.[a-zA-Z0-9]*[Ss]napshot\\"	\\"\\d{19}\\.[a-zA-Z0-9]*[Ss]napshot\\"
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>	<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<java.io.ByteArrayOutputStream: byte[] toByteArray()>	<java.io.ByteArrayOutputStream: byte[] toByteArray()>
JdbcTransactionThreadsMaximum	JdbcTransactionThreadsMaximum
<com.skaringa.javaxml.ObjectTransformer: void serialize(java.lang.Object,javax.xml.transform.Result)>	<com.skaringa.javaxml.ObjectTransformer: void serialize(java.lang.Object,javax.xml.transform.Result)>
<org.prevayler.demos.scalability.Record: java.lang.String getString1()>	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
<javax.swing.JOptionPane: java.lang.String showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>	<javax.swing.JOptionPane: java.lang.String showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.Capsule: byte[] serialized()>	<org.prevayler.implementation.Capsule: byte[] serialized()>
<javax.swing.JTextField: void setText(java.lang.String)>	<javax.swing.JTextField: void setText(java.lang.String)>
<java.io.File: boolean isDirectory()>	<java.io.File: boolean isDirectory()>
<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>	<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<java.lang.String: int indexOf(java.lang.String)>	<java.lang.String: int indexOf(java.lang.String)>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<<\\"Account \\">>	<<\\"Account \\">>
Transaction log consistency check failed.	Transaction log consistency check failed.
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<<\\"Exception while trying to connect: \\">>	<<\\"Exception while trying to connect: \\">>
inserting record	inserting record
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
Transaction Test	Transaction Test
<<\\"delete from \\">>	<<\\"delete from \\">>
<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<java.net.Socket: java.io.InputStream getInputStream()>	<java.net.Socket: java.io.InputStream getInputStream()>
<org.prevayler.demos.demo2.business.Account: void verify(long)>	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<javax.swing.JOptionPane: int showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>	<javax.swing.JOptionPane: int showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>
Error	Error
<java.text.DecimalFormat: java.lang.Number parse(java.lang.String)>	<java.text.DecimalFormat: java.lang.Number parse(java.lang.String)>
<java.util.List: java.lang.Object remove(int)>	<java.util.List: java.lang.Object remove(int)>
<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<java.io.ByteArrayOutputStream: void write(int)>	<java.io.ByteArrayOutputStream: void write(int)>
TransactionLogDirectory	TransactionLogDirectory
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>()>	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<java.io.FileInputStream: void close()>	<java.io.FileInputStream: void close()>
Unable to serialize transaction	Unable to serialize transaction
<org.prevayler.foundation.network.ObjectServerSocket: void close()>	<org.prevayler.foundation.network.ObjectServerSocket: void close()>
To Account	To Account
<javax.swing.JInternalFrame: void show()>	<javax.swing.JInternalFrame: void show()>
<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.Object createTestConnection()>	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.Object createTestConnection()>
<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
<java.lang.Thread: void interrupt()>	<java.lang.Thread: void interrupt()>
<java.io.FileOutputStream: void flush()>	<java.io.FileOutputStream: void flush()>
<java.text.DecimalFormat: java.lang.String format(double)>	<java.text.DecimalFormat: java.lang.String format(double)>
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
<javax.swing.JList: void <init>()>	<javax.swing.JList: void <init>()>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.demos.demo2.Main: void out(java.lang.String)>	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>	<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>
Creating the properties file.	Creating the properties file.
<javax.swing.JFrame: void setContentPane(java.awt.Container)>	<javax.swing.JFrame: void setContentPane(java.awt.Container)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<java.util.Map: java.lang.Object remove(java.lang.Object)>	<java.util.Map: java.lang.Object remove(java.lang.Object)>
<java.awt.BorderLayout: void <init>(int,int)>	<java.awt.BorderLayout: void <init>(int,int)>
<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>	<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<java.io.File: java.lang.String toString()>	<java.io.File: java.lang.String toString()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<<\\"\n----------- BEST ROUND: \\">>	<<\\"\n----------- BEST ROUND: \\">>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>	<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<<\\" You can kill this process at any time. \\">>	<<\\" You can kill this process at any time. \\">>
<org.prevayler.foundation.FileLocker: void release()>	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<java.lang.String: int indexOf(int)>	<java.lang.String: int indexOf(int)>
<net.sourceforge.javamatch.engine.MatchEngine: void <init>()>	<net.sourceforge.javamatch.engine.MatchEngine: void <init>()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>()>	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>()>
<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
<java.lang.ThreadLocal: java.lang.Object get()>	<java.lang.ThreadLocal: java.lang.Object get()>
<org.prevayler.Prevayler: org.prevayler.Clock clock()>	<org.prevayler.Prevayler: org.prevayler.Clock clock()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
0000000000000000000	0000000000000000000
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo1.Main: void <init>()>	<org.prevayler.demos.demo1.Main: void <init>()>
<java.lang.Integer: int parseInt(java.lang.String,int)>	<java.lang.Integer: int parseInt(java.lang.String,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>
Journal filename suffix must match /[a-zA-Z0-9]*[Jj]ournal/, but \'	Journal filename suffix must match /[a-zA-Z0-9]*[Jj]ournal/, but \'
<java.text.DecimalFormat: void <init>(java.lang.String)>	<java.text.DecimalFormat: void <init>(java.lang.String)>
<java.lang.String: byte[] getBytes(java.lang.String)>	<java.lang.String: byte[] getBytes(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void <init>()>	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
Prevalence	Prevalence
<java.text.SimpleDateFormat: void <init>(java.lang.String)>	<java.text.SimpleDateFormat: void <init>(java.lang.String)>
\\"[a-zA-Z0-9]*[Jj]ournal\\"	\\"[a-zA-Z0-9]*[Jj]ournal\\"
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<java.io.PipedOutputStream: void <init>()>	<java.io.PipedOutputStream: void <init>()>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>	<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
QUERY_TEST	QUERY_TEST
ONE_HUNDRED_THOUSAND	ONE_HUNDRED_THOUSAND
<java.lang.StringBuilder: java.lang.String toString()>	<java.lang.StringBuilder: java.lang.String toString()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>	<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>
<java.util.List: java.lang.Object get(int)>	<java.util.List: java.lang.Object get(int)>
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<java.io.FileInputStream: void <init>(java.io.File)>	<java.io.FileInputStream: void <init>(java.io.File)>
<javax.swing.AbstractAction: void setEnabled(boolean)>	<javax.swing.AbstractAction: void setEnabled(boolean)>
<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>	<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<<\\"NumberFormatException reading property \\">>	<<\\"NumberFormatException reading property \\">>
<javax.swing.Box: javax.swing.Box createHorizontalBox()>	<javax.swing.Box: javax.swing.Box createHorizontalBox()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<java.io.IOException: void <init>(java.lang.String)>	<java.io.IOException: void <init>(java.lang.String)>
<java.util.zip.GZIPInputStream: int read(byte[],int,int)>	<java.util.zip.GZIPInputStream: int read(byte[],int,int)>
<org.prevayler.implementation.journal.Journal: long nextTransaction()>	<org.prevayler.implementation.journal.Journal: long nextTransaction()>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>	<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<java.sql.Statement: boolean execute(java.lang.String)>	<java.sql.Statement: boolean execute(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>	<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
JdbcQueryThreadsMinimum	JdbcQueryThreadsMinimum
<javax.swing.JList: void addListSelectionListener(javax.swing.event.ListSelectionListener)>	<javax.swing.JList: void addListSelectionListener(javax.swing.event.ListSelectionListener)>
<org.prevayler.implementation.journal.TransientJournal: void close()>	<org.prevayler.implementation.journal.TransientJournal: void close()>
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>	<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<com.skaringa.javaxml.ObjectTransformerFactory: com.skaringa.javaxml.ObjectTransformerFactory getInstance()>	<com.skaringa.javaxml.ObjectTransformerFactory: com.skaringa.javaxml.ObjectTransformerFactory getInstance()>
<javax.swing.JFrame: void setVisible(boolean)>	<javax.swing.JFrame: void setVisible(boolean)>
JdbcUser	JdbcUser
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<java.lang.Exception: void <init>(java.lang.String)>	<java.lang.Exception: void <init>(java.lang.String)>
<java.sql.ResultSet: boolean next()>	<java.sql.ResultSet: boolean next()>
<<\\"Already at \\">>	<<\\"Already at \\">>
Prevayler	Prevayler
RunJdbcQueryTest	RunJdbcQueryTest
<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>	<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<java.util.Map: java.util.Collection values()>	<java.util.Map: java.util.Collection values()>
<org.prevayler.foundation.network.StubbornNetworkClientConnector: void disconnect()>	<org.prevayler.foundation.network.StubbornNetworkClientConnector: void disconnect()>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>	<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>
<<\\" you will see that nothing was lost. \\">>	<<\\" you will see that nothing was lost. \\">>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
<org.prevayler.Prevayler: void close()>	<org.prevayler.Prevayler: void close()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>	<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>()>	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>()>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>
You can edit this file to configure the tests for the next run.\n	You can edit this file to configure the tests for the next run.\n
<org.prevayler.foundation.network.ObjectSocket: java.lang.Object readObject()>	<org.prevayler.foundation.network.ObjectSocket: java.lang.Object readObject()>
<org.prevayler.foundation.monitor.NullMonitor: void <init>()>	<org.prevayler.foundation.monitor.NullMonitor: void <init>()>
TEN_MILLION	TEN_MILLION
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<java.net.ServerSocket: java.net.Socket accept()>	<java.net.ServerSocket: java.net.Socket accept()>
<javax.swing.JPanel: void <init>()>	<javax.swing.JPanel: void <init>()>
<org.prevayler.demos.demo2.MainTransient: void <init>()>	<org.prevayler.demos.demo2.MainTransient: void <init>()>
Balance	Balance
<org.prevayler.foundation.StopWatch: void <init>()>	<org.prevayler.foundation.StopWatch: void <init>()>
<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
Already locked internally	Already locked internally
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>	<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.sql.PreparedStatement: void setLong(int,long)>	<java.sql.PreparedStatement: void setLong(int,long)>
<java.lang.Long: long parseLong(java.lang.String)>	<java.lang.Long: long parseLong(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>
<org.prevayler.foundation.DurableInputStream: void close()>	<org.prevayler.foundation.DurableInputStream: void close()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>	<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>
<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>	<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
<<\\"Creating \\">>	<<\\"Creating \\">>
<java.util.zip.GZIPInputStream: int available()>	<java.util.zip.GZIPInputStream: int available()>
<java.io.File: java.lang.String getAbsolutePath()>	<java.io.File: java.lang.String getAbsolutePath()>
<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
\\"\\d{19}\\.[a-zA-Z0-9]*[Jj]ournal\\"	\\"\\d{19}\\.[a-zA-Z0-9]*[Jj]ournal\\"
<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>	<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>()>	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>	<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule cleanCopy()>	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
transactionHistory().size()	transactionHistory().size()
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>	<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.Record: int hashCode()>	<org.prevayler.demos.scalability.Record: int hashCode()>
commiting insertion of test records	commiting insertion of test records
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.demos.demo2.business.Account: void <init>()>	<org.prevayler.demos.demo2.business.Account: void <init>()>
TRANSACTION_TEST	TRANSACTION_TEST
<java.lang.Number: long longValue()>	<java.lang.Number: long longValue()>
<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>	<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>	<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>
<java.math.BigDecimal: int hashCode()>	<java.math.BigDecimal: int hashCode()>
<java.awt.Container: java.awt.Component add(java.awt.Component)>	<java.awt.Container: java.awt.Component add(java.awt.Component)>
<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<net.sourceforge.javamatch.engine.ResultItem: java.lang.Object getMatchedObject()>	<net.sourceforge.javamatch.engine.ResultItem: java.lang.Object getMatchedObject()>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
JdbcTransactionThreadsMinimum	JdbcTransactionThreadsMinimum
<java.util.Map: java.util.Set keySet()>	<java.util.Map: java.util.Set keySet()>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<java.net.ServerSocket: void close()>	<java.net.ServerSocket: void close()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.foundation.Turn: void alwaysSkip()>	<org.prevayler.foundation.Turn: void alwaysSkip()>
withQuery	withQuery
<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.String name()>	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.String name()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.StopWatch: long millisEllapsed()>	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<java.util.Map: void clear()>	<java.util.Map: void clear()>
<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<<\\"\\">>	<<\\"\\">>
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>
Withdraw...	Withdraw...
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
prevayler-scalability@lists.sourceforge.net. Please include info about your	prevayler-scalability@lists.sourceforge.net. Please include info about your
Journal.update() has to be called at least once before Journal.append().	Journal.update() has to be called at least once before Journal.append().
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<java.sql.PreparedStatement: boolean execute()>	<java.sql.PreparedStatement: boolean execute()>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<java.io.ByteArrayOutputStream: void reset()>	<java.io.ByteArrayOutputStream: void reset()>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<javax.swing.JLabel: void setAlignmentX(float)>	<javax.swing.JLabel: void setAlignmentX(float)>
Unable to deserialize transaction	Unable to deserialize transaction
<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>	<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<javax.swing.JTextField: void addFocusListener(java.awt.event.FocusListener)>	<javax.swing.JTextField: void addFocusListener(java.awt.event.FocusListener)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<java.lang.System: long currentTimeMillis()>	<java.lang.System: long currentTimeMillis()>
<java.util.Map: boolean isEmpty()>	<java.util.Map: boolean isEmpty()>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
<java.lang.Thread: void join()>	<java.lang.Thread: void join()>
<org.prevayler.implementation.PrevaylerImpl: void close()>	<org.prevayler.implementation.PrevaylerImpl: void close()>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<javax.swing.JButton: void <init>(javax.swing.Action)>	<javax.swing.JButton: void <init>(javax.swing.Action)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
JdbcConnectionURL	JdbcConnectionURL
<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
<java.io.ObjectInputStream: java.lang.Object readObject()>	<java.io.ObjectInputStream: java.lang.Object readObject()>
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>	<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>	<java.io.InputStreamReader: void <init>(java.io.InputStream)>
\n\n\nFor better results, edit the properties file:	\n\n\nFor better results, edit the properties file:
<java.awt.FlowLayout: void <init>(int,int,int)>	<java.awt.FlowLayout: void <init>(int,int,int)>
<java.sql.PreparedStatement: void setString(int,java.lang.String)>	<java.sql.PreparedStatement: void setString(int,java.lang.String)>
<org.prevayler.foundation.Guided: void startTurn()>	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>	<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>
<org.prevayler.implementation.clock.PausableClock: void pause()>	<org.prevayler.implementation.clock.PausableClock: void pause()>
<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>	<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
\\"[^\u0000- ()<>@,;:\\\\\\\"/\\[\\]?={}\u007f-\uffff]+\\"	\\"[^\u0000- ()<>@,;:\\\\\\\"/\\[\\]?={}\u007f-\uffff]+\\"
<java.lang.Class: java.lang.String getName()>	<java.lang.Class: java.lang.String getName()>
Delete	Delete
00000	00000
<<\\"Exception loading JDBC driver class: \\">>	<<\\"Exception loading JDBC driver class: \\">>
<org.prevayler.demos.demo2.business.Account: long balance()>	<org.prevayler.demos.demo2.business.Account: long balance()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<java.util.Random: int nextInt()>	<java.util.Random: int nextInt()>
executionTime	executionTime
<java.lang.String: java.lang.String valueOf(boolean)>	<java.lang.String: java.lang.String valueOf(boolean)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
processors (quantity, type, speed), compiler, VM, operating system and DBMS.	processors (quantity, type, speed), compiler, VM, operating system and DBMS.
<java.lang.Object: java.lang.String toString()>	<java.lang.Object: java.lang.String toString()>
Transaction log OK.\n	Transaction log OK.\n
<java.lang.StringBuilder: void <init>(java.lang.String)>	<java.lang.StringBuilder: void <init>(java.lang.String)>
<java.io.ObjectOutputStream: void close()>	<java.io.ObjectOutputStream: void close()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>	<javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>	<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>
xstreamjournal	xstreamjournal
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<java.util.HashMap: void <init>()>	<java.util.HashMap: void <init>()>
<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
<org.prevayler.implementation.publishing.TransactionPublisher: void close()>	<org.prevayler.implementation.publishing.TransactionPublisher: void close()>
Amount must be greater than zero.	Amount must be greater than zero.
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>	<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>
<<\\"The transaction journal has not yet reached transaction \\">>	<<\\"The transaction journal has not yet reached transaction \\">>
;=\r\n	;=\r\n
commiting transaction	commiting transaction
<net.sourceforge.javamatch.query.QuerySet: void addPreferred(net.sourceforge.javamatch.query.MatchQuery)>	<net.sourceforge.javamatch.query.QuerySet: void addPreferred(net.sourceforge.javamatch.query.MatchQuery)>
Snapshot filename suffix must match /[a-zA-Z0-9]*[Ss]napshot/, but \'	Snapshot filename suffix must match /[a-zA-Z0-9]*[Ss]napshot/, but \'
<java.util.List: boolean isEmpty()>	<java.util.List: boolean isEmpty()>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
already closed	already closed
<org.prevayler.demos.demo2.business.Account: long number()>	<org.prevayler.demos.demo2.business.Account: long number()>
Edit	Edit
NAME	NAME
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
Prevayler is no longer processing transactions due to an Error thrown from an earlier transaction.	Prevayler is no longer processing transactions due to an Error thrown from an earlier transaction.
<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
The prevalent system must be configured.	The prevalent system must be configured.
<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>	<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>	<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.io.InputStream: int read(byte[],int,int)>	<java.io.InputStream: int read(byte[],int,int)>
<java.util.Set: boolean add(java.lang.Object)>	<java.util.Set: boolean add(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
\\"RemoteTransaction\\"	\\"RemoteTransaction\\"
<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
<java.lang.String: java.lang.String toUpperCase()>	<java.lang.String: java.lang.String toUpperCase()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>	<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<javax.swing.AbstractAction: void <init>(java.lang.String)>	<javax.swing.AbstractAction: void <init>(java.lang.String)>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>	<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
balance()	balance()
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>	<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>	<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<javax.swing.JInternalFrame: void dispose()>	<javax.swing.JInternalFrame: void dispose()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<<\\"Unexpected Exception: \\">>	<<\\"Unexpected Exception: \\">>
<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>	<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>
\n=============================================================	\n=============================================================
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<javax.swing.JInternalFrame: java.awt.Container getContentPane()>	<javax.swing.JInternalFrame: java.awt.Container getContentPane()>
<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>	<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<org.prevayler.demos.demo1.NumberKeeper: void <init>()>	<org.prevayler.demos.demo1.NumberKeeper: void <init>()>
See you there.\n	See you there.\n
<java.util.Map: int hashCode()>	<java.util.Map: int hashCode()>
<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>	<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>
<java.lang.Object: java.lang.Object createTestConnection()>	<java.lang.Object: java.lang.Object createTestConnection()>
<java.util.Map$Entry: java.lang.Object getKey()>	<java.util.Map$Entry: java.lang.Object getKey()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<java.io.File: boolean equals(java.lang.Object)>	<java.io.File: boolean equals(java.lang.Object)>
<java.net.Socket: void <init>(java.lang.String,int)>	<java.net.Socket: void <init>(java.lang.String,int)>
<java.util.List: java.util.Iterator iterator()>	<java.util.List: java.util.Iterator iterator()>
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>	<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<java.io.ByteArrayInputStream: void <init>(byte[])>	<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>	<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
Center	Center
writing to	writing to
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
<<\\"--------- Round Result: \\">>	<<\\"--------- Round Result: \\">>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>	<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
JdbcDriverClassName	JdbcDriverClassName
<java.io.OutputStream: void flush()>	<java.io.OutputStream: void flush()>
<java.sql.PreparedStatement: void setDate(int,java.sql.Date)>	<java.sql.PreparedStatement: void setDate(int,java.sql.Date)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>	<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>
Deposit...	Deposit...
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
RunPrevaylerQueryTest	RunPrevaylerQueryTest
<java.net.ServerSocket: void <init>(int)>	<java.net.ServerSocket: void <init>(int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<java.lang.Thread: void <init>()>	<java.lang.Thread: void <init>()>
<java.lang.Runtime: java.lang.Runtime getRuntime()>	<java.lang.Runtime: java.lang.Runtime getRuntime()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>	<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>
<org.prevayler.foundation.StopWatch: double secondsEllapsed()>	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>	<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>
If you have any trouble running the tests, just write to	If you have any trouble running the tests, just write to
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>	<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
=============================================================\n	=============================================================\n
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
<java.io.OutputStream: void close()>	<java.io.OutputStream: void close()>
\\"[a-zA-Z0-9]*[Ss]napshot\\"	\\"[a-zA-Z0-9]*[Ss]napshot\\"
\\d{19}\\.[a-zA-Z0-9]*[Ss]napshot	\\d{19}\\.[a-zA-Z0-9]*[Ss]napshot
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>	<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>
Invalid holder name.	Invalid holder name.
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<<\\"Account not found: \\">>	<<\\"Account not found: \\">>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
PrevaylerQueryThreadsMinimum	PrevaylerQueryThreadsMinimum
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>	<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>
<java.awt.event.FocusAdapter: void <init>()>	<java.awt.event.FocusAdapter: void <init>()>
<java.io.OutputStream: void write(byte[],int,int)>	<java.io.OutputStream: void write(byte[],int,int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<java.sql.Connection: void commit()>	<java.sql.Connection: void commit()>
<org.prevayler.demos.demo2.MainSkaringa: void <init>()>	<org.prevayler.demos.demo2.MainSkaringa: void <init>()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<<\\"update \\">>	<<\\"update \\">>
\nYou can publish your best results by mail to:	\nYou can publish your best results by mail to:
Withdrawal	Withdrawal
<java.util.LinkedList: void <init>()>	<java.util.LinkedList: void <init>()>
locked	locked
<org.prevayler.foundation.Chunk: byte[] getBytes()>	<org.prevayler.foundation.Chunk: byte[] getBytes()>
Match	Match
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<java.io.FileOutputStream: void close()>	<java.io.FileOutputStream: void close()>
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
ONE_MILLION	ONE_MILLION
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
Prevayler is no longer accepting transactions due to an Error thrown from an earlier transaction.	Prevayler is no longer accepting transactions due to an Error thrown from an earlier transaction.
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<java.lang.Integer: int intValue()>	<java.lang.Integer: int intValue()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
Amount maximum (10000) exceeded.	Amount maximum (10000) exceeded.
<org.prevayler.foundation.Guided: void endTurn()>	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
Bank	Bank
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
<java.util.regex.Matcher: boolean matches()>	<java.util.regex.Matcher: boolean matches()>
<java.io.File: void <init>(java.io.File,java.lang.String)>	<java.io.File: void <init>(java.io.File,java.lang.String)>
<java.io.ObjectOutputStream: void reset()>	<java.io.ObjectOutputStream: void reset()>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
Robustness Reminder	Robustness Reminder
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<com.thoughtworks.xstream.XStream: void toXML(java.lang.Object,java.io.Writer)>	<com.thoughtworks.xstream.XStream: void toXML(java.lang.Object,java.io.Writer)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
Refresh	Refresh
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.demo2.gui.RobustAction: void action()>	<org.prevayler.demos.demo2.gui.RobustAction: void action()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<java.lang.Thread: void start()>	<java.lang.Thread: void start()>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<java.util.Map$Entry: java.lang.Object getValue()>	<java.util.Map$Entry: java.lang.Object getValue()>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>	<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<java.lang.Object: void wait()>	<java.lang.Object: void wait()>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>	<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<java.lang.Class: java.lang.Object newInstance()>	<java.lang.Class: java.lang.Object newInstance()>
<org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>	<org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<<\\"SQLException \\">>	<<\\"SQLException \\">>
<java.io.File: long length()>	<java.io.File: long length()>
<java.io.FileOutputStream: void <init>(java.io.File)>	<java.io.FileOutputStream: void <init>(java.io.File)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.apache.log4j.Logger: boolean isInfoEnabled()>	<org.apache.log4j.Logger: boolean isInfoEnabled()>
<java.io.File: java.io.File[] listFiles()>	<java.io.File: java.io.File[] listFiles()>
<java.text.DateFormat: java.lang.String format(java.util.Date)>	<java.text.DateFormat: java.lang.String format(java.util.Date)>
<net.sourceforge.javamatch.engine.MatchEngine: net.sourceforge.javamatch.engine.MatchResult executeQuery(net.sourceforge.javamatch.query.MatchQuery,java.util.List)>	<net.sourceforge.javamatch.engine.MatchEngine: net.sourceforge.javamatch.engine.MatchResult executeQuery(net.sourceforge.javamatch.query.MatchQuery,java.util.List)>
<java.util.List: int size()>	<java.util.List: int size()>
<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>	<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>
<<\\"The transaction log has not yet reached transaction \\">>	<<\\"The transaction log has not yet reached transaction \\">>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: void hang()>	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>	<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.util.Arrays: void fill(char[],char)>	<java.util.Arrays: void fill(char[],char)>
<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>	<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<java.lang.System: void gc()>	<java.lang.System: void gc()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>	<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<javax.swing.table.DefaultTableModel: void addRow(java.lang.Object[])>	<javax.swing.table.DefaultTableModel: void addRow(java.lang.Object[])>
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>	<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
creating	creating
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>
Unexpected Exception was thrown.	Unexpected Exception was thrown.
<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>	<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>
<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>	<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>
<java.lang.StringBuilder: void <init>()>	<java.lang.StringBuilder: void <init>()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<<HASH:-595253473>>	This demo shows how persistence can be turned off\nwithout changing ONE SINGLE LINE OF CODE in the\nbusiness classes or GUI. This is useful for\nrunning automated test scripts orders of magnitude\nfaster than with persistence turned on.\n(Pay no attention to the \'Robustness Reminder\' this time ;)
<<HASH:-279482281>>	Stream corruption found while reading a transaction from the journal. If this is a transaction that was being written when a system crash occurred, there is no problem because it was never executed on the Prevalent System. Before executing each transaction, Prevayler writes it to the journal and calls the java.io.FileDescritor.sync() method to instruct the Java API to physically sync all operating system RAM buffers to disk.
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>
<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
<java.util.StringTokenizer: boolean hasMoreTokens()>	<java.util.StringTokenizer: boolean hasMoreTokens()>
<org.prevayler.foundation.network.ObjectSocket: void close()>	<org.prevayler.foundation.network.ObjectSocket: void close()>
<javax.swing.JFrame: void <init>(java.lang.String)>	<javax.swing.JFrame: void <init>(java.lang.String)>
<java.awt.Color: void <init>(int,int,int)>	<java.awt.Color: void <init>(int,int,int)>
<org.prevayler.demos.demo1.Main: void printMessage()>	<org.prevayler.demos.demo1.Main: void printMessage()>
<java.io.File: java.lang.String getName()>	<java.io.File: java.lang.String getName()>
<java.io.File: boolean renameTo(java.io.File)>	<java.io.File: boolean renameTo(java.io.File)>
<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>	<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
TWENTY_MILLION	TWENTY_MILLION
<org.prevayler.demos.scalability.Record: void <clinit>()>	<org.prevayler.demos.scalability.Record: void <clinit>()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
\\"US-ASCII\\"	\\"US-ASCII\\"
<org.prevayler.demos.demo2.business.AccountEntry: void <init>()>	<org.prevayler.demos.demo2.business.AccountEntry: void <init>()>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<com.skaringa.javaxml.NoImplementationException: java.lang.String getMessage()>	<com.skaringa.javaxml.NoImplementationException: java.lang.String getMessage()>
<org.prevayler.implementation.clock.MachineClock: void update()>	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<javax.swing.JList: void setListData(java.lang.Object[])>	<javax.swing.JList: void setListData(java.lang.Object[])>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>	<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.sql.ResultSet: long getLong(int)>	<java.sql.ResultSet: long getLong(int)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
<java.util.zip.GZIPOutputStream: void close()>	<java.util.zip.GZIPOutputStream: void close()>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
Reading the properties file:\n	Reading the properties file:\n
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<<\\"Primes found: \\">>	<<\\"Primes found: \\">>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
updating record	updating record
<java.net.Socket: java.io.OutputStream getOutputStream()>	<java.net.Socket: java.io.OutputStream getOutputStream()>
<javax.swing.JFrame: void setTitle(java.lang.String)>	<javax.swing.JFrame: void setTitle(java.lang.String)>
<java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>	<java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
<java.io.ObjectOutputStream: void flush()>	<java.io.ObjectOutputStream: void flush()>
<<\\"Expected \\">>	<<\\"Expected \\">>
<<\\"             Prevayler vs JDBC Scalability Tests             \\">>	<<\\"             Prevayler vs JDBC Scalability Tests             \\">>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<java.sql.ResultSet: java.sql.Date getDate(int)>	<java.sql.ResultSet: java.sql.Date getDate(int)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
\\d{19}\\.[a-zA-Z0-9]*[Jj]ournal	\\d{19}\\.[a-zA-Z0-9]*[Jj]ournal
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>()>	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>()>
<java.util.Map: java.util.Set entrySet()>	<java.util.Map: java.util.Set entrySet()>
<org.prevayler.foundation.Turn: void <init>(int)>	<org.prevayler.foundation.Turn: void <init>(int)>
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>
<<\\"\n\nPrevayler Journal Serializer: \\">>	<<\\"\n\nPrevayler Journal Serializer: \\">>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
prevayler-scalability@lists.sourceforge.net and we will be glad to help.\n	prevayler-scalability@lists.sourceforge.net and we will be glad to help.\n
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<net.sourceforge.javamatch.engine.ResultItem: float getMatchValue()>	<net.sourceforge.javamatch.engine.ResultItem: float getMatchValue()>
<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>	<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>
<<\\"selecting record from \\">>	<<\\"selecting record from \\">>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<java.io.OutputStreamWriter: void flush()>	<java.io.OutputStreamWriter: void flush()>
<java.io.OutputStream: void write(int)>	<java.io.OutputStream: void write(int)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<java.lang.Long: int compareTo(java.lang.Long)>	<java.lang.Long: int compareTo(java.lang.Long)>
<<\\"Attempted to apply transaction \\">>	<<\\"Attempted to apply transaction \\">>
<java.lang.Exception: void printStackTrace()>	<java.lang.Exception: void printStackTrace()>
<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
<com.thoughtworks.xstream.XStream: void <init>()>	<com.thoughtworks.xstream.XStream: void <init>()>
<<\\"insert into \\">>	<<\\"insert into \\">>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>
<javax.swing.JInternalFrame: void <init>(java.lang.String)>	<javax.swing.JInternalFrame: void <init>(java.lang.String)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<javax.swing.JButton: void <init>(java.lang.String)>	<javax.swing.JButton: void <init>(java.lang.String)>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<java.util.ArrayList: boolean add(java.lang.Object)>	<java.util.ArrayList: boolean add(java.lang.Object)>
<java.net.Socket: void close()>	<java.net.Socket: void close()>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.demos.scalability.Record: java.lang.String getName()>	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(int)>	<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(int)>
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>	<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>
\\"0|[1-9A-F][0-9A-F]{0,6}|[1-7][0-9A-F]{7}\\"	\\"0|[1-9A-F][0-9A-F]{0,6}|[1-7][0-9A-F]{7}\\"
<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
setting AutoCommit to false	setting AutoCommit to false
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<javax.swing.table.DefaultTableModel: void setRowCount(int)>	<javax.swing.table.DefaultTableModel: void setRowCount(int)>
<org.prevayler.demos.demo2.business.AccountListener: void accountChanged()>	<org.prevayler.demos.demo2.business.AccountListener: void accountChanged()>
<java.awt.Container: void setLayout(java.awt.LayoutManager)>	<java.awt.Container: void setLayout(java.awt.LayoutManager)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
ScalabilityTest.properties	ScalabilityTest.properties
Chunk trailer corrupted	Chunk trailer corrupted
<<\\"Unable to serialize with Skaringa: \\">>	<<\\"Unable to serialize with Skaringa: \\">>
<java.lang.String: void <init>(char[])>	<java.lang.String: void <init>(char[])>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
<javax.swing.JFrame: void setBounds(int,int,int,int)>	<javax.swing.JFrame: void setBounds(int,int,int,int)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>	<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>	<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>
<javax.swing.table.DefaultTableModel: void <init>()>	<javax.swing.table.DefaultTableModel: void <init>()>
Scalability test results are published on www.prevayler.org.	Scalability test results are published on www.prevayler.org.
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<java.lang.Integer: java.lang.String toHexString(int)>	<java.lang.Integer: java.lang.String toHexString(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<<\\"Unable to recover transaction \\">>	<<\\"Unable to recover transaction \\">>
<<\\"Path exists but is not a directory: \\">>	<<\\"Path exists but is not a directory: \\">>
<javax.swing.JInternalFrame: void setVisible(boolean)>	<javax.swing.JInternalFrame: void setVisible(boolean)>
<java.lang.Thread: void yield()>	<java.lang.Thread: void yield()>
<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<java.io.OutputStream: void <init>()>	<java.io.OutputStream: void <init>()>
<<\\" When you run the application again, \\">>	<<\\" When you run the application again, \\">>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>	<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>
<javax.swing.JTextField: void requestFocus()>	<javax.swing.JTextField: void requestFocus()>
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>
<java.io.ObjectInputStream: void close()>	<java.io.ObjectInputStream: void close()>
Klaus Wuestefeld and Daniel Santos.\n\n	Klaus Wuestefeld and Daniel Santos.\n\n
<java.io.File: boolean delete()>	<java.io.File: boolean delete()>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<javax.swing.JLabel: void <init>(java.lang.String)>	<javax.swing.JLabel: void <init>(java.lang.String)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<java.util.Map: java.lang.Object get(java.lang.Object)>	<java.util.Map: java.lang.Object get(java.lang.Object)>
<org.prevayler.foundation.Turn: void end()>	<org.prevayler.foundation.Turn: void end()>
<java.util.Iterator: boolean hasNext()>	<java.util.Iterator: boolean hasNext()>
<java.util.LinkedHashMap: void <init>()>	<java.util.LinkedHashMap: void <init>()>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>
PrevaylerQueryThreadsMaximum	PrevaylerQueryThreadsMaximum
<org.prevayler.demos.scalability.Record: long getId()>	<org.prevayler.demos.scalability.Record: long getId()>
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>()>	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>()>
<org.prevayler.implementation.publishing.CentralPublisher: void close()>	<org.prevayler.implementation.publishing.CentralPublisher: void close()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.demo2.MainXStream$1: void <init>()>	<org.prevayler.demos.demo2.MainXStream$1: void <init>()>
Holder	Holder
<java.io.OutputStream: void write(byte[])>	<java.io.OutputStream: void write(byte[])>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<java.sql.ResultSet: java.lang.String getString(int)>	<java.sql.ResultSet: java.lang.String getString(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>	<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>
<<\\"Unable to start Skaringa: \\">>	<<\\"Unable to start Skaringa: \\">>
JDBC	JDBC
<org.prevayler.Prevayler: java.lang.Object prevalentSystem()>	<org.prevayler.Prevayler: java.lang.Object prevalentSystem()>
<java.util.List: java.lang.Object[] toArray()>	<java.util.List: java.lang.Object[] toArray()>
<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
#Entries	#Entries
<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>	<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>
Read the javadoc to this method.	Read the javadoc to this method.
<java.util.Iterator: java.lang.Object next()>	<java.util.Iterator: java.lang.Object next()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.foundation.Cool: void sleep(long)>	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<java.sql.Connection: java.sql.Statement createStatement()>	<java.sql.Connection: java.sql.Statement createStatement()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.awt.Container: void add(java.awt.Component,java.lang.Object)>	<java.awt.Container: void add(java.awt.Component,java.lang.Object)>
<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.util.Set: java.util.Iterator iterator()>	<java.util.Set: java.util.Iterator iterator()>
<javax.swing.JInternalFrame: void setContentPane(java.awt.Container)>	<javax.swing.JInternalFrame: void setContentPane(java.awt.Container)>
<javax.swing.JTextField: void setEnabled(boolean)>	<javax.swing.JTextField: void setEnabled(boolean)>
Query Test	Query Test
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>	<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.prevayler.foundation.network.ObjectReceiver: void close()>	<org.prevayler.foundation.network.ObjectReceiver: void close()>
<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>	<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>
<net.sourceforge.javamatch.query.Maximum: void <init>(java.lang.String)>	<net.sourceforge.javamatch.query.Maximum: void <init>(java.lang.String)>
<<\\"Unable to deserialize with Skaringa: \\">>	<<\\"Unable to deserialize with Skaringa: \\">>
<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>	<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>
<java.io.File: void <init>(java.lang.String)>	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.MainReplica: void <init>()>	<org.prevayler.demos.demo2.MainReplica: void <init>()>
<java.util.Properties: void <init>()>	<java.util.Properties: void <init>()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>	<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.lang.Boolean: boolean booleanValue()>	<java.lang.Boolean: boolean booleanValue()>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<java.util.List: boolean remove(java.lang.Object)>	<java.util.List: boolean remove(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>	<java.lang.Thread: void <init>(java.lang.Runnable)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<java.sql.SQLException: void printStackTrace()>	<java.sql.SQLException: void printStackTrace()>
<java.lang.Object: void notifyAll()>	<java.lang.Object: void notifyAll()>
Unexpected InterruptedException	Unexpected InterruptedException
Deep copy failed in an unknown way	Deep copy failed in an unknown way
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
Interesting accounts	Interesting accounts
\nOne snapshot per day is more than enough for most applications\n  because the journal recovery rate is in the order of\n  6000 transactions per second. For demoing purposes, though, a\n  snapshot will be taken every 20 seconds...	\nOne snapshot per day is more than enough for most applications\n  because the journal recovery rate is in the order of\n  6000 transactions per second. For demoing purposes, though, a\n  snapshot will be taken every 20 seconds...
<java.io.File: java.io.File getCanonicalFile()>	<java.io.File: java.io.File getCanonicalFile()>
<java.util.Random: int nextInt(int)>	<java.util.Random: int nextInt(int)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>	<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>	<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>
<java.io.ByteArrayOutputStream: int size()>	<java.io.ByteArrayOutputStream: int size()>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
Runtime Exception simulated for rollback demonstration purposes.	Runtime Exception simulated for rollback demonstration purposes.
<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
The minimum number of threads cannot be smaller than one.	The minimum number of threads cannot be smaller than one.
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
West	West
JdbcPassword	JdbcPassword
<<\\"Seconds ellapsed: \\">>	<<\\"Seconds ellapsed: \\">>
<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
Checking transaction log consistency.	Checking transaction log consistency.
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<java.lang.UnsupportedOperationException: void <init>()>	<java.lang.UnsupportedOperationException: void <init>()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
Unexpected end of stream in chunk header	Unexpected end of stream in chunk header
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<<\\"deleting all records from \\">>	<<\\"deleting all records from \\">>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
journal	journal
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
Prevayler is no longer allowing access to the prevalent system due to an Error thrown from an earlier transaction.	Prevayler is no longer allowing access to the prevalent system due to an Error thrown from an earlier transaction.
TransactionTestCheckConsistency	TransactionTestCheckConsistency
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.sql.Date: void <init>(long)>	<java.sql.Date: void <init>(long)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<<\\"select ID,STRING1,BIGDECIMAL1,BIGDECIMAL2,DATE1,DATE2 from \\">>	<<\\"select ID,STRING1,BIGDECIMAL1,BIGDECIMAL2,DATE1,DATE2 from \\">>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>	<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>
<java.lang.String: boolean matches(java.lang.String)>	<java.lang.String: boolean matches(java.lang.String)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>	<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.foundation.Chunk: java.util.Map getParameters()>	<org.prevayler.foundation.Chunk: java.util.Map getParameters()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<java.lang.String: int length()>	<java.lang.String: int length()>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
<java.lang.Exception: void printStackTrace(java.io.PrintStream)>	<java.lang.Exception: void printStackTrace(java.io.PrintStream)>
<java.util.Map: boolean containsKey(java.lang.Object)>	<java.util.Map: boolean containsKey(java.lang.Object)>
<java.io.PipedOutputStream: void close()>	<java.io.PipedOutputStream: void close()>
<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>	<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>
<java.lang.String: boolean endsWith(java.lang.String)>	<java.lang.String: boolean endsWith(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<java.lang.Object: java.lang.Class getClass()>	<java.lang.Object: java.lang.Class getClass()>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>()>	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>()>
<org.prevayler.Clock: java.util.Date time()>	<org.prevayler.Clock: java.util.Date time()>
<com.skaringa.javaxml.DeserializerException: java.lang.String getMessage()>	<com.skaringa.javaxml.DeserializerException: java.lang.String getMessage()>
<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>	<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>
<com.skaringa.javaxml.ObjectTransformerFactory: com.skaringa.javaxml.ObjectTransformer getImplementation()>	<com.skaringa.javaxml.ObjectTransformerFactory: com.skaringa.javaxml.ObjectTransformer getImplementation()>
<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>
<java.io.File: boolean mkdirs()>	<java.io.File: boolean mkdirs()>
<javax.swing.Box: java.awt.Component add(java.awt.Component)>	<javax.swing.Box: java.awt.Component add(java.awt.Component)>
<java.lang.String: java.lang.String substring(int,int)>	<java.lang.String: java.lang.String substring(int,int)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>	<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>
<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>	<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<java.io.BufferedReader: void <init>(java.io.Reader)>	<java.io.BufferedReader: void <init>(java.io.Reader)>
<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<java.util.ArrayList: void <init>(java.util.Collection)>	<java.util.ArrayList: void <init>(java.util.Collection)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<java.lang.IllegalStateException: void <init>()>	<java.lang.IllegalStateException: void <init>()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<java.lang.Math: double sqrt(double)>	<java.lang.Math: double sqrt(double)>
rw	rw
<java.lang.String: int hashCode()>	<java.lang.String: int hashCode()>
<<\\"Bank - \\">>	<<\\"Bank - \\">>
<org.prevayler.foundation.DeepCopier: void <init>()>	<org.prevayler.foundation.DeepCopier: void <init>()>
<java.lang.IllegalStateException: void <init>(java.lang.String)>	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>	<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>	<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>
\n\nOutOfMemoryError.\n===========================================================\nThe VM must be started with a sufficient maximum heap size.\nExample for Linux and Windows:  java -Xmx512000000 ...\n\n	\n\nOutOfMemoryError.\n===========================================================\nThe VM must be started with a sufficient maximum heap size.\nExample for Linux and Windows:  java -Xmx512000000 ...\n\n
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<java.io.EOFException: void <init>(java.lang.String)>	<java.io.EOFException: void <init>(java.lang.String)>
Chunk header corrupted	Chunk header corrupted
<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
<javax.swing.JDesktopPane: java.awt.Component add(java.awt.Component)>	<javax.swing.JDesktopPane: java.awt.Component add(java.awt.Component)>
<org.prevayler.foundation.Chunking: void <init>()>	<org.prevayler.foundation.Chunking: void <init>()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<javax.swing.Box: java.awt.Component createHorizontalStrut(int)>	<javax.swing.Box: java.awt.Component createHorizontalStrut(int)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<javax.swing.JDesktopPane: void <init>()>	<javax.swing.JDesktopPane: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<java.text.DecimalFormat: java.lang.String format(long)>	<java.text.DecimalFormat: java.lang.String format(long)>
<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
Create	Create
<javax.swing.JInternalFrame: void setBackground(java.awt.Color)>	<javax.swing.JInternalFrame: void setBackground(java.awt.Color)>
<java.util.HashSet: void <init>()>	<java.util.HashSet: void <init>()>
<<\\"\n\nPrevayler TransactionLog Directory: \\">>	<<\\"\n\nPrevayler TransactionLog Directory: \\">>
<java.io.BufferedReader: java.lang.String readLine()>	<java.io.BufferedReader: java.lang.String readLine()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
Already locked externally	Already locked externally
<java.lang.Thread: void sleep(long)>	<java.lang.Thread: void sleep(long)>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<java.lang.ThreadLocal: void <init>()>	<java.lang.ThreadLocal: void <init>()>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
demo2	demo2
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>	<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>
deleting record	deleting record
<javax.swing.JTextField: void <init>()>	<javax.swing.JTextField: void <init>()>
<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
NumberOfObjects property must be equal to ONE_HUNDRED_THOUSAND, ONE_MILLION, TEN_MILLION or TWENTY_MILLION.	NumberOfObjects property must be equal to ONE_HUNDRED_THOUSAND, ONE_MILLION, TEN_MILLION or TWENTY_MILLION.
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<java.io.InputStream: int read()>	<java.io.InputStream: int read()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<java.lang.Thread: void setName(java.lang.String)>	<java.lang.Thread: void setName(java.lang.String)>
closing	closing
<javax.swing.JInternalFrame: javax.swing.JDesktopPane getDesktopPane()>	<javax.swing.JInternalFrame: javax.swing.JDesktopPane getDesktopPane()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.demo2.business.Bank: void <init>()>	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>	<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
North	North
hh:mm:ss	hh:mm:ss
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>	<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.Main: void <init>()>	<org.prevayler.demos.demo2.Main: void <init>()>
Amount	Amount
<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>	<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>
<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>	<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>
<java.util.Date: long getTime()>	<java.util.Date: long getTime()>
<java.lang.Runtime: long totalMemory()>	<java.lang.Runtime: long totalMemory()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.demo2.MainXStream: void <init>()>	<org.prevayler.demos.demo2.MainXStream: void <init>()>
<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<javax.swing.table.DefaultTableModel: void setColumnIdentifiers(java.lang.Object[])>	<javax.swing.table.DefaultTableModel: void setColumnIdentifiers(java.lang.Object[])>
<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>	<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<javax.swing.JList: void setSelectionMode(int)>	<javax.swing.JList: void setSelectionMode(int)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<java.util.Random: void <init>()>	<java.util.Random: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>	<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>
<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>	<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>	<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>	<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<org.prevayler.foundation.network.Network: void stopService(int)>	<org.prevayler.foundation.network.Network: void stopService(int)>
<java.io.RandomAccessFile: void close()>	<java.io.RandomAccessFile: void close()>
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>	<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>
yyyy/MM/dd  hh:mm:ss.SSS	yyyy/MM/dd  hh:mm:ss.SSS
<<\\"Error reading file list from directory \\">>	<<\\"Error reading file list from directory \\">>
<java.util.LinkedList: boolean add(java.lang.Object)>	<java.util.LinkedList: boolean add(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(long)>	<java.lang.String: java.lang.String valueOf(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
PrevalenceBase	PrevalenceBase
<java.util.zip.Inflater: int getRemaining()>	<java.util.zip.Inflater: int getRemaining()>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
Each round will take approx. 20 seconds to run...	Each round will take approx. 20 seconds to run...
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>	<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.prevayler.foundation.Turn: void start()>	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>	<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>
<java.io.EOFException: void <init>()>	<java.io.EOFException: void <init>()>
\\"QueryTest\\"	\\"QueryTest\\"
Invalid parameter name \'	Invalid parameter name \'
<org.prevayler.implementation.clock.MachineClock: void <init>()>	<org.prevayler.implementation.clock.MachineClock: void <init>()>
<javax.swing.Box: java.awt.Component createHorizontalGlue()>	<javax.swing.Box: java.awt.Component createHorizontalGlue()>
<java.io.ByteArrayOutputStream: void <init>()>	<java.io.ByteArrayOutputStream: void <init>()>
