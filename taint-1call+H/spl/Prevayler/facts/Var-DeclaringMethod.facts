<org.prevayler.foundation.StopWatch: long millisEllapsed()>/@this	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>/$r0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>	@Replication
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/@this	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter2	<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/$r1	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>/$numconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l5	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/$numconstant0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r7	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.clock.PausableClock: void pause()>/@this	<org.prevayler.implementation.clock.PausableClock: void pause()>
<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>/this#_0	<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>	@Replication
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/$r0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
<org.prevayler.implementation.clock.PausableClock: void resume()>/$r0	<org.prevayler.implementation.clock.PausableClock: void resume()>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r7	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r11	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r10	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r14	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/$r2	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$1530127508	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/$r4	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/@parameter0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>/remoteServerIpAddress#_0	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$1322723666	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/result#_97	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l13	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.FileLocker: void release()>/$r1	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.foundation.DurableOutputStream: void close()>/l1#_163	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/password#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: void close()>/$r0	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/$r0	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r0	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/records#_36	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>/$r1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant2	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/journal#_0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r4	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/$i1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$r2	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/l6#_57	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>/$r0	<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r10_$$A_2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>/@this	<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$r4	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$numconstant1	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>/this#_0	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$r3	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/$numconstant1	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/id#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r3	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>/@this	<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/$r3	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r11	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>/this#_0	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/suffix#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r0	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/$r4	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/$numconstant0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/$stringconstant1	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>/$r0	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$z1	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/ignored#_0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/$numconstant0	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>/a#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$l2	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r6	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>/@this	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/$r2	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/$b0_$$A_1	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>/id#_0	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/this#_0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/$r3_$$A_2	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/@parameter0	<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/guide#_0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>/account#_0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>/@parameter0	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/$r2	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/$l0	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/ix#_148	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r7	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>/this#_0	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>/message#_0	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$stringconstant2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/tmp$1340794871	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/this#_0	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.foundation.Turn: void <init>(int)>/@parameter0	<org.prevayler.foundation.Turn: void <init>(int)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/$z0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.AccountEntry: void <init>()>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>/this#_0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>	@GZip
<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>/@this	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/$numconstant2	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$stringconstant2	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@this	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/tmp$600309885	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r6	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/$r4	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/iox#_152	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/$r5	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>/@this	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.demos.scalability.Record: void <init>(long)>/@this	<org.prevayler.demos.scalability.Record: void <init>(long)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/$r1	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$b3_$$A_2	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/this#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/sqlx_$$A_3#_71	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/initialTransaction#_42	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/l5#_15	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r11	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>/this#_0	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/$r0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/$r2	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$i0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/client#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r1	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/totalSize_$$A_2#_31	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/key#_28	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$l0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>/this#_0	<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant3	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r7	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>/this#_0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/@parameter0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r11	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r10	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$numconstant0	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/tmp$2008213816	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/$r4_$$A_2	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$stringconstant2	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$z1	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r8	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$z0	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/i_$$A_1#_107	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r0	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/$r1	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/$r2	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/outputJournalToClose_$$A_1#_85	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/thisWrite#_67	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/@this	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r9	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/recordToUpdate#_38	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/e#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r22	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>/@parameter0	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>	@Monitor
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/this#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>/$r1	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$i7	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/$numconstant0	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>/$numconstant0	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r7	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/largestPrime_$$A_1#_33	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/amount#_0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/primeCandidate_$$A_2#_38	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/capsule#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r2	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>/$stringconstant0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r4	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>/@this	<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.Record: java.lang.String getName()>/@this	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$l0_$$A_2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r1	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$l3	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/serializer#_0	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r8	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/this#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>/@parameter0	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>/this#_0	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$i4	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$z0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/entry#_46	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/prevalentSystem#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$r1	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/l1#_0	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/@parameter2	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r10	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$r6	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.foundation.Cool: void sleep(long)>/e#_19	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/l2#_121	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/$r3	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/out#_77	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.Record: int hashCode()>/$l16	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/$stringconstant0	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/$r1	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/$r1	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/publisher#_377	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/sqlx_$$A_2#_69	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$l1	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>/$r0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r7	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r10	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r8	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/$i1	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/result_$$A_1#_280	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r11	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/$numconstant0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r1	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant14	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r13	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/this#_0	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.foundation.Chunking: void <clinit>()>/$r2	<org.prevayler.foundation.Chunking: void <clinit>()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/action#_0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/$stringconstant1	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/@parameter1	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$i0	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>/@this	<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/@this	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/runtime#_153	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant3	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.replication.ServerConnection: void close()>/$r0	<org.prevayler.implementation.replication.ServerConnection: void close()>	@Replication
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/chunk#_71	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r9	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/$l0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/$l0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r3	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/@parameter1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/records_$$A_1#_38	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant1	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>/this#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>	@GZip
<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@this	<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/@parameter1	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.Record: int hashCode()>/$r0	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter1	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/sessionServices#_29	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>/@this	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r14	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/message#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r10	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/bank#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r9	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/ex_$$A_1#_106	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>/this#_0	<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>
<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>/@parameter0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>/$r0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>/@this	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/$r1	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/@this	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>/@this	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/date1#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/@parameter2	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>/@this	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>/@parameter0	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/tmp$1435954984	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$l3	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/@this	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/l4#_90	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>/this#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r9	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>/@parameter0	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/$r0	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r5	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>/this#_0	<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>	@Snapshot
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>/stream#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$stringconstant3	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$r0	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/iox_$$A_1_$$A_2#_108	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/handle#_68	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/$numconstant0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$numconstant0	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>/@this	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
<org.prevayler.foundation.DurableOutputStream: void close()>/@this	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/$b1	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>/this#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>	@Replication
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$r0	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/fileName#_71	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/$stringconstant0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>/@parameter1	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>	@Snapshot
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/@this	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/@parameter4	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/$r2	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/$r0	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/objectSocket#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/$r0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>	@Replication
<org.prevayler.demos.demo2.MainSkaringa: void <init>()>/@this	<org.prevayler.demos.demo2.MainSkaringa: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/off#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/object#_0	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.NetworkImpl: void <init>()>/@this	<org.prevayler.foundation.network.NetworkImpl: void <init>()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r4	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/@this	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>/$z0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$stringconstant1	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$stringconstant0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$r3	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$null0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/$null0	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/this#_0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>/$i0	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$r4	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/proxy_$$A_2#_97	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/$r0	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.scalability.Record: void <init>(long)>/$r0	<org.prevayler.demos.scalability.Record: void <init>(long)>
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/$numconstant0	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/client#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.Chunking: void <clinit>()>/$numconstant1	<org.prevayler.foundation.Chunking: void <clinit>()>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r7	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>/$r0	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/@parameter1	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>/@this	<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/@parameter0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/n#_32	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>/chars#_92	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r6	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>/message#_0	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i3	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/stream#_0	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/this#_0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/@parameter0	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>/$r0	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r20	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/$r2	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$r6	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/l1#_0	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter1	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>/l1#_59	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>	@Replication
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/this#_0	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i2	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/iox#_0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r5	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r7	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter1	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r10	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/$r3_$$A_1	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$null0	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r12	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$l2	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$r4	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$l0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>/@this	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/$r3	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/$numconstant0	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter1	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>/this#_0	<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r2	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/@parameter0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/@this	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/@parameter2	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$stringconstant1	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/socket#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$null0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/$r1	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/bank#_0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/connection_$$A_1#_136	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>/@this	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$stringconstant0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/tmp$1604634603	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/minThreads#_0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$r0	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r2	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>/@this	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r4	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/$r0	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r8	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r9	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r1	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/threads#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>/$l0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>/$i0	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>
<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/$r4	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant6	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>/this#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>	@Censor
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/@this	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r3	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l7	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/files#_101	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/this#_0	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>/e#_0	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/journal_$$A_3#_241	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/$r0	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/$r0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/timestampCopy_$$A_2#_33	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant12	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/@parameter1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/$null0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r7	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/this#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$stringconstant2	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/@this	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r4	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>/@this	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r4	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/e#_45	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/l4#_80	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/$r1	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/$numconstant0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/journals#_118	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r5	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/$r0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/$r2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$r1	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$stringconstant0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>/@parameter0	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/user#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r5	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/newMillis#_30	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/clazz#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>/@this	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/@this	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r0_$$A_1	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>	@GZip
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant2	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/sqlx#_17	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/$stringconstant0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>/$i0	<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>/@this	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r4	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r3	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.Clock: java.util.Date time()>/@this	<org.prevayler.Clock: java.util.Date time()>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/$r0	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r8	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r6	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/@this	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/initialTransaction_$$A_2#_53	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$l0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>/@parameter0	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/initialTransactionWanted#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/$r1	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/account#_0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>/$r1	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>/@this	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r30	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r1	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToUpdate#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/@parameter0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@this	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>	@GZip
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r7	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.business.Account: void <init>()>/@this	<org.prevayler.demos.demo2.business.Account: void <init>()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/$numconstant0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>/@this	<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>	@Snapshot
<org.prevayler.foundation.Cool: void wait(java.lang.Object)>/$r0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r13	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/@parameter0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/@this	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/$r0	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/$l1	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/$r1_$$A_1	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/ex#_103	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/@this	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/@parameter0	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r7	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$r3	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/se#_38	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/$r3	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>/@this	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/l1_$$A_1#_75	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/@parameter0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.Prevayler: void takeSnapshot()>/@this	<org.prevayler.Prevayler: void takeSnapshot()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r3	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/$stringconstant0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>	@Replication
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant3	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/l2#_107	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r9	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.foundation.DurableOutputStream: java.io.File file()>/$r0	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r0	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r26	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r1	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>/this#_0	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r8	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/@parameter0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/l1_$$A_2#_77	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r3	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/l5#_122	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>/$numconstant0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>
<org.prevayler.implementation.clock.MachineClock: void update()>/newTime#_22	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r3	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$i1	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>/this#_0	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>/@parameter0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>	@GZip
<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>/$r1	<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/@parameter0	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/$classconstant0	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r5	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>	@GZip
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/ex#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/l8#_78	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/this#_0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.TransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$i3	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/@parameter0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/@this	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/@parameter0	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/this#_0	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/e#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.monitor.NullMonitor: void <init>()>/this#_0	<org.prevayler.foundation.monitor.NullMonitor: void <init>()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/@parameter0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/@parameter0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r52	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/$stringconstant0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r8	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/journalAgeThresholdInMillis#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>/$numconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>
<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/listener#_0	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/message#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r1	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r0	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/subscriber#_0	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>	@Snapshot
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r1	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r6	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/rx_$$A_1#_75	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$b9	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/tmp$1354556604	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/$r0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/chunk_$$A_2#_46	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>/@this	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/snapshotManager#_0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/@parameter1	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$r0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r14	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$l2	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$stringconstant0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/journal#_0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/matchEngine_$$A_1#_107	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$l2	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.String name()>/@this	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.String name()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r9	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/subscriber#_0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/$l0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r12	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$l0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$l2	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$numconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/message#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/l1#_106	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r2	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>/$i0	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter2	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$i2	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/subscriber#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>/@this	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/@this	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r5	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$r0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	@Replication
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/number#_0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/@this	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/objects#_27	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/directory#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$r4	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r1	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>/this#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/$l0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/withQuery#_77	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r14	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r12_$$A_1	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/@parameter0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.foundation.Turn: void alwaysSkip()>/@this	<org.prevayler.foundation.Turn: void alwaysSkip()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/tmp$1793647697	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/$r1	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$stringconstant4	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/o1#_0	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/@this	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>/$r0	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r0	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.foundation.FileLocker: void release()>/l2#_71	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/sqlx#_47	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/$r0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$null1	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.demos.demo2.business.Account: long balance()>/$l0	<org.prevayler.demos.demo2.business.Account: long balance()>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/connection#_0	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.Guided: void endTurn()>/this#_0	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r11	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/this#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>/l0#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$l1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/clazz#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/sqlx#_59	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>/$numconstant1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/$r4	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$r1	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r7	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r3	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/clazz#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>/$stringconstant0	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>/@this	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/file#_0	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant1	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r36	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/$r1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r3	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>/$r1_$$A_1	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$r3	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r6	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$stringconstant2	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>/prevayler#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$r3	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/message#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r2	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/file#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r11	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/this#_0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r3	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>/@this	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>/transactionTimestamp#_0	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/@parameter0	<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/$l0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/$stringconstant1	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>/$null0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>/$stringconstant0	<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r6	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.replication.ServerListener: void run()>/$r1	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/serverPort#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToUpdate#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r3	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/inputStream#_0	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>/$r1	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>/@parameter0	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r2	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/sqlx#_45	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.foundation.Chunking: void <clinit>()>/$r1	<org.prevayler.foundation.Chunking: void <clinit>()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r7	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r0	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r9	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>/clazz#_0	<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>/@this	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>/@this	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>/amount#_0	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>	@Snapshot
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/rx#_25	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/chunk#_0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$1221135510	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.Record: int hashCode()>/@this	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/$l0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$r3	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/$numconstant1	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.implementation.PrevaylerImpl: void close()>/this#_0	<org.prevayler.implementation.PrevaylerImpl: void close()>
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/l2_$$A_1#_52	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@this	<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/$numconstant1	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/$r2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>/newPrevalentSystem#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/this#_0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>/this#_0	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/@this	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r18	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/version#_0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/$z0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.implementation.Capsule: byte[] serialized()>/this#_0	<org.prevayler.implementation.Capsule: byte[] serialized()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/@parameter1	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r0	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r29	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/@this	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>/l0#_0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$stringconstant0	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/$r0	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/$stringconstant0	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$r5	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>/@this	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.foundation.FileLocker: void release()>/$r4	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r3	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant3	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter1	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.demo1.Main: void <init>()>/@this	<org.prevayler.demos.demo1.Main: void <init>()>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/accounts#_81	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/$r2	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/e#_141	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/$r0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/$r0	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/$r0	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.foundation.FileLocker: void release()>/$stringconstant0	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/$r0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$r3	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/l1#_150	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r8	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>	@GZip
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$r4	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/suffix#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$numconstant5	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/port#_0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@this	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/transactionPublisher#_0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r7	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/@parameter1	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r7	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.clock.BrokenClock: void <init>()>/@this	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/outputStream#_48	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/$i1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r4	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r10	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/$r0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
<org.prevayler.foundation.Guided: void endTurn()>/$r0	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r17	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/$z0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/proxy_$$A_1#_94	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/serverIpAddress#_0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/$r1	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/ignored#_0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r2	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r4	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r6	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/tt_$$A_1#_100	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/$numconstant0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r6	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.Main: void <init>()>/@this	<org.prevayler.demos.demo2.Main: void <init>()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/ex_$$A_1#_46	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$b2	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r3	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>/@parameter0	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/$stringconstant1	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r42	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r8	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>/@this	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
<org.prevayler.foundation.Turn: void start()>/$i0	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$i11	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$i1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@this	<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/@this	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/resultSet#_30	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r7	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/file#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r10	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.Turn: void alwaysSkip()>/$i0	<org.prevayler.foundation.Turn: void alwaysSkip()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r9	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/journalSizeThresholdInBytes#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r1	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/$r2	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r4	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter1	<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>	@GZip
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r20	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r7	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$r0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/l1#_30	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r1	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>/@this	<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>/@parameter0	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/container#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r14	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/$stringconstant2	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r1	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>/this#_0	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/numberOfObjects#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l3	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/l4#_40	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>/@this	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/tt_$$A_2#_101	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/sessionId#_0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/$r3	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r13	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/$r1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/$i0	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r3	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r2	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.replication.ClientPublisher$1: void run()>/$r0	<org.prevayler.implementation.replication.ClientPublisher$1: void run()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/@parameter0	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/account#_0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/this#_0	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r9	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/iox#_93	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/prevalentSystem#_0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/@parameter0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>/$numconstant1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>	@Replication
<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>/this#_0	<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>
<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>/@this	<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/$r0	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$l3	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r8	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/$r2	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>/$r0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.foundation.DurableOutputStream: void close()>/$r1	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/l2#_77	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>()>/@this	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/@parameter0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
<org.prevayler.implementation.replication.ServerListener: void run()>/iox#_33	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/initialTransaction#_0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$r5	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void close()>/@this	<org.prevayler.implementation.publishing.CentralPublisher: void close()>
<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>/@this	<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>/this#_0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r3	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/$r5	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/@this	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>/$r0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>	@Replication
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/@parameter0	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/@parameter1	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$i2	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/this#_0	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>/@parameter0	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>/$r1	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestSnapshot#_104	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/$r0	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/@parameter1	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/object#_0	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/newRecords#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>/@parameter0	<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$stringconstant2	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r4	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>/l2#_0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/this#_0	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/this#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/prevayler#_0	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/$r1	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>	@Replication
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/tmp$1270149011	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/@this	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>/sessionId#_0	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r3	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.replication.ClientPublisher: void close()>/@this	<org.prevayler.implementation.replication.ClientPublisher: void close()>	@Replication
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/@this	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/@this	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/@this	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/name#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/tmp$1018267765	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/@this	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>/$r0	<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/it#_36	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter1	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$z2	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>/nextNumber#_0	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$l2	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/$r1	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/$r1	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>/$r0	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>	@Replication
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$l1	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r4	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$stringconstant0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/$r1	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant5	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@this	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$r1	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/read_$$A_1#_76	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>/this#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/i#_30	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r7	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>/$r0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$r6	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.implementation.replication.ClientPublisher$1: void run()>/$r1	<org.prevayler.implementation.replication.ClientPublisher$1: void run()>	@Replication
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/this#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r2	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r4	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>/$r2	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>/@parameter1	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$numconstant1	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/chunk_$$A_3#_48	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/@parameter0	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/@this	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>/value#_0	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>/@this	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>/@parameter0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r12	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>/@parameter0	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.Query)>
<org.prevayler.foundation.Chunk: java.util.Map getParameters()>/@this	<org.prevayler.foundation.Chunk: java.util.Map getParameters()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r12	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r11	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>/capsule#_0	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r2	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$r3	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/$r4	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/$null0	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$l5	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/tmp$665018091	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/$r1	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/file#_0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/$r1	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>/$r1	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/@this	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>	@Censor
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/@parameter0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r5	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>/@this	<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/this#_0	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/snapshotSerializers#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/connectionURL#_0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/bytes_$$A_1#_20	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$stringconstant0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$r4	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/@this	<org.prevayler.demos.scalability.prevayler.ScalabilitySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>/@this	<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>	@Replication
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/minThreads#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/nextFile_$$A_1#_228	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>/@this	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/ipAddress#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/@parameter2	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$i0	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/this#_0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$r5	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.network.NetworkServerObjectReceiver: void shutdown()>/@this	<org.prevayler.foundation.network.NetworkServerObjectReceiver: void shutdown()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/$stringconstant0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$z1	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$l0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/$r1	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@this	<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$l1	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/$null0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
<org.prevayler.demos.demo2.business.Bank: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>/out#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r16	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo1.NumberKeeper: void <init>()>/this#_0	<org.prevayler.demos.demo1.NumberKeeper: void <init>()>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/$r0	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/duringOperation#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l10	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/tmp$1103014037	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$b3	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r33	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r12	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/l5#_99	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/$r4	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r1	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>/$r0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/service#_0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.business.BankListener: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$stringconstant1	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/l1	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>/$r2	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/this#_0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/$r3	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>/@parameter0	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/fileName#_91	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>/l2#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/password#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.scalability.Record: void <clinit>()>/$r0	<org.prevayler.demos.scalability.Record: void <clinit>()>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/exception#_42	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$i1	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/newPrevalentSystem#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$z0	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>/@this	<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@parameter2	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.foundation.FileLocker: void release()>/l1#_68	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/$r0	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant2	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$stringconstant0	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo1.Main: void printMessage()>/$r1	<org.prevayler.demos.demo1.Main: void printMessage()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r3	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>/$r0	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>/$r0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>	@Snapshot
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant4	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/sessionsManager#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToInsert#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>/$r0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/$r3	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@this	<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r6	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/records#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/@parameter0	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r10	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>/$r0	<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/$z0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/l1#_74	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/holder#_0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>/@this	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>	@Snapshot
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$stringconstant3	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$r5	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestSnapshot_$$A_1#_107	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/$r1	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/$r3	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/@this	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/$z0_$$A_1	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: org.prevayler.foundation.network.ObjectReceiver getClient()>	@Replication
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/largestPrime#_22	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$b2	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r19	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>	@Snapshot
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/tmp$1509513554	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.Account: long balance()>/this#_0	<org.prevayler.demos.demo2.business.Account: long balance()>
<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>/$r0	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/amount#_0	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/$r2	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/idToDelete#_0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$z0	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/e#_105	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/$r3	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$null0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.DurableOutputStream: java.io.File file()>/@this	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r5	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter2	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r6	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/@parameter1	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>/@parameter0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r5	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/ex#_22	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/@parameter1	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>/l0#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/@parameter1	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$stringconstant0	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>/clock#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/prevayler#_0	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>/this#_0	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$stringconstant0	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>/$r0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$stringconstant3	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/@this	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/@this	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$186402705	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r5_$$A_2	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$l0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/this#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.clock.BrokenClock: void <init>()>/$r0	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/$r2	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/e_$$A_1#_83	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/@this	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/tmp$1214066610	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/$r1	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/@this	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$l0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.scalability.Main: void <init>()>/this#_0	<org.prevayler.demos.scalability.Main: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r5	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/@parameter0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/@parameter1	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/this#_0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/format#_37	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/@this	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.Cool: void <init>()>/@this	<org.prevayler.foundation.Cool: void <init>()>
<org.prevayler.foundation.network.ObjectSocket: java.lang.Object readObject()>/@this	<org.prevayler.foundation.network.ObjectSocket: java.lang.Object readObject()>
<org.prevayler.demos.demo2.MainXStream$1: void <init>()>/@this	<org.prevayler.demos.demo2.MainXStream$1: void <init>()>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/systemVersion#_0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/this#_0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/totalSize#_28	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>/@this	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r15	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$r5	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$l0	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$null2	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>/$r1	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/l1#_54	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/filenamePattern#_0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r2	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/tokenizer#_62	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$numconstant0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/$numconstant0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>/this#_0	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>	@Replication
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/tmp$738614321	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/$r1	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r7	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$l0	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/socket#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/ignored#_0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$r0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/@this	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>	@Snapshot
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r1	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/$numconstant0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/operationSequence#_0	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/this#_0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>	@Replication
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/@this	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.foundation.network.Network: void stopService(int)>/@parameter0	<org.prevayler.foundation.network.Network: void stopService(int)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/$r1	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/@parameter1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.scalability.Record: java.lang.String getName()>/$r0	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>/$i0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/guide#_0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/random#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$b0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r4	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/originAccountNumber#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/operation_$$A_1#_127	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r3	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/systemVersion#_54	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/@this	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>/$i0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r49	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>/$r0	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>/@parameter1	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$numconstant0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/operation_$$A_3#_130	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/@this	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/$r1	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/$i0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>	@GZip
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$i2	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/l1#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r2	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r4	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/factor_$$A_2#_60	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/$r0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/value_$$A_1_$$A_2#_80	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r3	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant4	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@parameter5	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r9	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>/@this	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r4	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>/timeStamp#_0	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r9	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$l2	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/account#_0	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String name()>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String name()>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/$r5	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r6	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/$z0	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r14	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r10	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant10	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@this	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$l0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/i_$$A_2#_52	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>	@Replication
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/@parameter0	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/parameters#_66	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/$numconstant0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>/$numconstant0	<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r6	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/this#_0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/$r1	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/objectSocket#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant8	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$r0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/$r4	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/$r2	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>/@this	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/this#_0	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r8	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>/@this	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>	@GZip
<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>/message#_0	<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>	@Snapshot
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r1	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/stream#_0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>/@this	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/chunk#_0	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/$numconstant2	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/i#_109	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/journalFile#_0	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/serializer#_0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/@parameter2	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/@this	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/account#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$r2	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$b4	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/$r0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/$r1_$$A_2	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>/message#_0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/@parameter0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$l3	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/@parameter1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/$r5	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/totalSize_$$A_1#_31	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/directory#_0	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r13	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l13	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/tmp$993581769	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>/$r0	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/$stringconstant0	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r13	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/$r0	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$r3	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>/$r0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r5	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$r0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/$r3	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/factory#_16	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r4	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r15	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/holder#_0	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$r1	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>/this#_0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$l5	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/connection#_0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r8	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.Guided: void startTurn()>/this#_0	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>/dir#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r15	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/iox_$$A_1#_99	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$z1	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.implementation.replication.ServerConnection: void run()>/$r6	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void run()>/initialTransaction#_41	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$z0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/writer#_58	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>	@Replication
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/$r3	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>/$r1	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>/@parameter1	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$l0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>/@parameter1	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$numconstant0	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/name#_0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/@this	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>	@Replication
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/@this	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/@parameter3	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/this#_0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>/l1#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/port#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>/$r0	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/$r2	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$i2	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/$z0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/$r1	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$l6	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$numconstant0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter2	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r9	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/$stringconstant0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$numconstant1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/@this	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/@parameter1	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r7	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r4	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/$r0	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/$classconstant2	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/journalSerializer#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r15	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/tmp$590732827	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/chunk#_42	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>	@Replication
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>/this#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
<org.prevayler.foundation.FileManager: void <init>()>/@this	<org.prevayler.foundation.FileManager: void <init>()>
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>/$i1	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/value#_69	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r3_$$A_1	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/file#_0	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/$r1	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@parameter0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$stringconstant1	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>/$i0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/id#_0	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/initialOperationCount#_87	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/@parameter2	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r11	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/file#_132	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/$r0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r11	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/$r1	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$numconstant0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>/@this	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/$r4	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$r6	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/systemVersion#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>	@Censor
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/$stringconstant1	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>/amount#_0	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r10_$$A_1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l0	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/listener#_45	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>	@Replication
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/$r3	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.demos.scalability.Record: long getId()>/this#_0	<org.prevayler.demos.scalability.Record: long getId()>
<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>/@this	<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>
<org.prevayler.demos.demo2.Main: void out(java.lang.String)>/message#_0	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l8	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant8	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/$z0	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r11	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>/@parameter0	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>/this#_0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>	@Replication
<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>/$r0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>	@Replication
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/l3#_68	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/connection#_121	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$r3	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>/bytes#_0	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/permanent#_70	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/journal#_193	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/recoveringTransaction#_47	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>/this#_0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Cool: void sleep(long)>/@parameter0	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/@this	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r4	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$stringconstant2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/$numconstant1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r13	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>/@this	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>/this#_0	<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/$stringconstant1	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>/@this	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/l2#_124	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/transaction#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.foundation.Turn: void end()>/@this	<org.prevayler.foundation.Turn: void end()>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$i2_$$A_1	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$numconstant4	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/@this	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>/$r2	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/serializer#_95	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$numconstant3	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>/@this	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r16	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/$z1	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/suffix#_0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r6	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$i0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r9	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>/@this	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/value_$$A_1_$$A_1#_81	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/iox_$$A_1_$$A_3#_75	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$l1	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/b#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r0	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/$r1	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/systemVersion#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$b0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/$r1	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$r2	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/service#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/@parameter0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>/this#_0	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/@parameter2	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/@this	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/idToDelete#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/reader#_45	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r6	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter0	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter0	<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.DurableOutputStream: void close()>/$r2	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r23	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/@this	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r8	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>/transactionFiltering#_0	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r5	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/@this	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>/this#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r6	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$z0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$numconstant3	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$z0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/@parameter0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/$r1	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$null0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$i0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>/tmp$1808384008	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>/@this	<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>	@Replication
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>/$r0	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>	@Monitor
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r14	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/file#_0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/$r3	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>/sessionKey#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>/$i0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>	@Replication
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/value#_34	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$r1	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$z0	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r35	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/@this	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r10	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$l0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>/$i0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/this#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r13	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/$r1_$$A_1	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/@this	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/@this	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/@parameter0	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r13	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/newRecord#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/subject#_0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>	@Replication
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$i0	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$z1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/$r1	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>/newPrevalentSystem#_0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>	@Snapshot
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r7	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/initialTransactionWanted#_0	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r27	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/$z0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/@this	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/$r2	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/$l0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>	@GZip
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>/event#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>
<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>/directory#_9	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r0	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$r0	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>	@Replication
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/primesFound_$$A_1#_34	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>/@this	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/exception_$$A_1#_151	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r5	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r2	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r1	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/$r4	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$r2	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/initialTransaction#_0	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r2	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/this#_0	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r8	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/l4#_62	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i1	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$numconstant1	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo1.Main: void printMessage()>/$r2	<org.prevayler.demos.demo1.Main: void printMessage()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$stringconstant0	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>/newPrevalentSystem#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/$r0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/eof#_202	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>/@this	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>/port#_0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>/@this	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/l2#_105	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/service#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/@this	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>	@Replication
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/stream#_0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/proxy#_92	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r0	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/@parameter0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>	@Snapshot
<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/@parameter0	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	@Replication
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r5	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/this#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>/$numconstant0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>	@GZip
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/journalDirectory#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/$z0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/$stringconstant1	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/amount#_0	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>/this#_0	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r1	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>/account#_0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/size#_64	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r6	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/primeCandidate#_24	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>/@this	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>/@this	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$r3	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r1	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$l0_$$A_1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>	@GZip
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/system#_0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r32	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/$r1	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>	@Censor
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/byteOut#_31	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/$r0	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/$stringconstant0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$595352435	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$r4	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.DurableOutputStream: void close()>/this#_0	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/e#_124	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/matchEngine#_85	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/@parameter2	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/transactionTimestamp#_0	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/$stringconstant0	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/this#_0	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.foundation.network.NetworkImpl: void <init>()>/this#_0	<org.prevayler.foundation.network.NetworkImpl: void <init>()>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/@this	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/factory#_13	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r1	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/$r1	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$r5	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$d0	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r6	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/@this	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/sqlx_$$A_1#_65	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/journal#_0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/socket#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r0	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>	@GZip
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/connection#_0	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$l1	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/sessionId#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r16	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@this	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>/exception#_15	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r11	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestVersion#_105	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r13	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$stringconstant1	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>/name#_0	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/expectedSystemVersion#_0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToInsert#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$i1	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$i2	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r9	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r6	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r17	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/numberOfObjects#_0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/entries#_49	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.implementation.Capsule: void <init>(byte[])>/this#_0	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$b1	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/myOutputJournal#_92	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/service#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/startingOperation#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/$r1	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>/@this	<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/@this	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r3	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/@this	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r6	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>/@this	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant7	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r5_$$A_1	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>/sizeInBytes#_0	<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>/$r3	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$stringconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>/this#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>/$r0	<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>
<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>/network#_0	<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r6	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$984675800	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>/$r1_$$A_2	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/ex#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/version#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>/$r0	<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r0	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>	@GZip
<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>/@this	<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter2	<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l14	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/$null0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r14	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>/$i0	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l9	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>	@GZip
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$numconstant0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>/$r0	<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$639230370	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/$r1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r0	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$stringconstant0	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/clazz#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>/@this	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/$r1	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/client#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r10	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r1	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>/$r1	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/expectedResult#_37	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/@parameter0	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/$stringconstant0	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$z0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/ipAddress#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r5	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$stringconstant2	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/$r1	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/$r1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l1	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>/newPrevalentSystem#_0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/exception#_127	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>/serialized#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r9	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r12	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/$r1	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r7	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/@parameter1	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$l1	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/ignored#_0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@parameter1	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant3	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r4	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l15	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/other#_0	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/@this	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$z1	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$i0	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>/$r1	<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>
<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>/message#_0	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/this#_0	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/@this	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$r3	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>/$r0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>/this#_0	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$numconstant0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/threads#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.foundation.Turn: void <init>(int)>/this#_0	<org.prevayler.foundation.Turn: void <init>(int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$stringconstant1	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/$stringconstant0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$r2	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r51	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r15	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r16	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$stringconstant1	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Record: void <init>(long)>/id#_0	<org.prevayler.demos.scalability.Record: void <init>(long)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/factory#_173	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$i0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/l1_$$A_3#_78	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/@this	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/container#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>/l1#_0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/@parameter1	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r3	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/capsule#_144	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>/$r1	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r5	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r6	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$b2	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>/$l0	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>/this#_0	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/result#_342	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>/this#_0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>	@GZip
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/name#_0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$i0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/$r0	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.foundation.StopWatch: long millisEllapsed()>/$l1	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r8	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$r1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>/$numconstant0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>	@Replication
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$r1	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/ex#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>/this#_0	<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$r5	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter0	<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r7	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/$r3	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/$r2	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$l0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$stringconstant1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/ipAddress#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$r1	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.implementation.PrevaylerImpl: void close()>/@this	<org.prevayler.implementation.PrevaylerImpl: void close()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/$r0	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/proxy#_84	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/this#_0	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/this#_0	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r5	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/$r1	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>/$null0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r0	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/unExpected#_114	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/@parameter1	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>/$r0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>/@this	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>	@GZip
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$i1	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$b1	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r1	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/ex#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/$i1	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
<org.prevayler.demos.scalability.Main: void <init>()>/@this	<org.prevayler.demos.scalability.Main: void <init>()>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$numconstant1	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r4	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>/$r0	<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/i_$$A_1#_31	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.StopWatch: void <init>()>/this#_0	<org.prevayler.foundation.StopWatch: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/$r4	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/$r2	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.implementation.clock.MachineClock: void update()>/@this	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$b1	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/operation_$$A_4#_138	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/idToDelete#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$numconstant2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r7	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$l1	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r0	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/bigDecimal2#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.StopWatch: double secondsEllapsed()>/$d1	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@this	<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r8	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l14	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter2	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.foundation.Turn: void alwaysSkip()>/$numconstant0	<org.prevayler.foundation.Turn: void alwaysSkip()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>	@GZip
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/this#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/$l0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/$r0	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/@parameter0	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/number#_0	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$numconstant0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$r2	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/$r1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r4	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/prevayler#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$null3	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/$r1	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l7	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>/$stringconstant0	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>/$r0	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$numconstant2	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/$r1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>/$l0	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/buttonPanel#_58	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$stringconstant1	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/$r2	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/$r5	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$i1	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/$r0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$r4	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/l3#_85	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r2	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/ignored#_0	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>/time#_0	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/$i0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$r6	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>/@this	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>	@GZip
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r13	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/$r2	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$stringconstant1	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>/this#_0	<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/this#_0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r7	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/@parameter1	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/@parameter1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/this#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/$r3	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>/$r0	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/factor#_56	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/$r0	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$r1	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/l5#_111	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r8	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$z0	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$1810099305	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r3	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r3	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$z0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/$r4	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/timestampCopy#_27	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r13	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/len#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>/this#_0	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r10	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/$z0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$stringconstant0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r2	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>/ageInMilliseconds#_0	<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant10	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.StopWatch: void <init>()>/$l0	<org.prevayler.foundation.StopWatch: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/factory#_133	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>/records#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/executionTime#_0	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$r3	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter0	<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r6	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r8	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$1289000940	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$l0	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/@parameter0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>/@this	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/@this	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>/$i0	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>/@this	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/$i0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>/$l0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/$stringconstant0	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>/tmp$1892224655	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/$stringconstant1	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.Chunk: void <init>(byte[])>/@this	<org.prevayler.foundation.Chunk: void <init>(byte[])>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/$r2	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/provider#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/primesFound#_23	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/object_$$A_1#_62	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>/@this	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>/@parameter0	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/$r1	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r16	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/$r1	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/$i2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/$r0	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/$r0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$l0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r10	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$numconstant4	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r2	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/$r1	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$r1	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>/holder#_0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>
<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>/$r0	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$z0	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/this#_0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>/@this	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$l3	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/$r1	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/recoveringTransaction#_191	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$r2	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/bank#_0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/realClock#_0	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/$i0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/l0#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r3	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunk: void <init>(byte[])>/@parameter0	<org.prevayler.foundation.Chunk: void <init>(byte[])>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$numconstant0	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/$r6	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/@parameter1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>/l1#_0	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/account#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@parameter3	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/$r3	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>/$r0	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r3	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/@this	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r5	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/this#_0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r1	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/iterator#_26	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>/@parameter1	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.foundation.StopWatch: long millisEllapsed()>/this#_0	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r4	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$l0	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>/@parameter0	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>/@this	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>	@GZip
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>/account#_0	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/@parameter0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/$numconstant0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>/$r1	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/$r0	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>/this#_0	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/connection#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r17	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r2	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r2	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/$r1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/$r3	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/$r1	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/@this	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/l3_$$A_1#_53	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/@parameter2	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r10	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/iox_$$A_1_$$A_1#_101	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/this#_0	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/prevayler#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$l2	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$stringconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r7	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/$r0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$r2	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$i3	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l15	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/$stringconstant0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>	@Snapshot
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/clock#_0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$i2	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/snapshotFile#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/$r2	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r14	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/@parameter0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r10	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/l1#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r6	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$r0	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>/@parameter0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>/$r0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$stringconstant1	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r2	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r6	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$b3	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/$r1	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/out#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/@this	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>/$numconstant0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$l3	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r8	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/@parameter0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r7	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>()>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$null5	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>/@parameter0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@parameter2	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/ignored#_0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: long number()>/$l0	<org.prevayler.demos.demo2.business.Account: long number()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/$r0	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/$r2	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>/@parameter0	<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/newHolder#_0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/secondsEllapsed#_94	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$l2	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r1	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/this#_0	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/this#_0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>	@GZip
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/$r2	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/this#_0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/f2#_123	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r12	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/service#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/@parameter1	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestVersion_$$A_3#_112	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r12	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>/$r1	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r1	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/@this	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureJournalFileSizeThreshold(long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$z0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>/this#_0	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r4	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant6	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>/@parameter0	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>/@parameter1	<org.prevayler.foundation.network.Network: void startService(org.prevayler.foundation.network.Service,int)>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/@parameter0	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/@this	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.foundation.Chunk: byte[] getBytes()>/this#_0	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/server#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/prevayler#_17	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/jdbcDriverClassName#_0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r6	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$r0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r2	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/$i1	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant3	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/tmp$2008499139	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r8	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/suffix_$$A_1#_42	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/xstream#_21	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/$stringconstant0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>	@Snapshot
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$stringconstant2	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$numconstant0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.MainXStream: void <init>()>/this#_0	<org.prevayler.demos.demo2.MainXStream: void <init>()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/prevayler#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/@parameter2	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/off#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>/$stringconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/$r3	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r4	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/$r4	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/@parameter0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r2	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/$r2	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r48	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/$r0	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>/transactionWithQuery#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>/clazz#_0	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r4	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/$r3	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.DurableOutputStream: java.io.File file()>/this#_0	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/client#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/l4#_109	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>/this#_0	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/tmp$471241454	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$r0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$z2	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/@this	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>/$l0	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>/client#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>/this#_0	<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/$r0	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>/$r0	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/guide#_0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/@this	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/@this	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/exception#_86	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/newRecord#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r7	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$stringconstant0	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$stringconstant1	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/this#_0	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/$z0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.foundation.Guided: void startTurn()>/@this	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r6	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/clock#_0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r5	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>/name#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.gui.RobustAction: void action()>/@this	<org.prevayler.demos.demo2.gui.RobustAction: void action()>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/$r2	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/service#_70	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r6	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/$r0	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r5	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$l0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/i_$$A_1#_129	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/$r1	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.implementation.journal.TransientJournal: void <init>()>/$numconstant0	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r2	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r3	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/label#_66	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$r2	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$r7	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$r4	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/@this	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>/$numconstant0	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>/$r0	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestVersion_$$A_1#_107	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.StopWatch: long millisEllapsed()>/$l2	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l9_$$A_2	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l16	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/curResultItem#_97	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>/this#_0	<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r45	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>	@Snapshot
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/@parameter0	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/this#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>/this#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>
<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>/$r0	<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r3	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r15	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.network.ObjectServerSocket: org.prevayler.foundation.network.ObjectSocket accept()>/@this	<org.prevayler.foundation.network.ObjectServerSocket: org.prevayler.foundation.network.ObjectSocket accept()>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r3	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/this#_0	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>/serialized#_0	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r3	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/$numconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r11	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/@this	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$l0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/nie#_59	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>/$stringconstant0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>/@this	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>/transientMode#_0	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>	@Snapshot
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$i12	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/@parameter0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
<org.prevayler.foundation.StopWatch: double secondsEllapsed()>/$d0	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/@parameter0	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r21	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i5	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$i2	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant4	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/$l0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>	@Replication
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$stringconstant3	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter3	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/$r3	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r7	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>/@parameter0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/ex#_19	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/tmp$843892378	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/$r1	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>/readlimit#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>	@GZip
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>/$r0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>	@GZip
<org.prevayler.implementation.replication.ServerConnection: void close()>/@this	<org.prevayler.implementation.replication.ServerConnection: void close()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/l1#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>/$stringconstant0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/object#_0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/stream#_0	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/iox#_82	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/@parameter0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r4	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r12	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/tmp$1450215067	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/transactionTimestamp#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>	@Replication
<org.prevayler.foundation.FileManager: void <init>()>/this#_0	<org.prevayler.foundation.FileManager: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/$numconstant0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r8	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.PrevaylerFactory: void <init>()>/$r0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/$stringconstant0	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/$z0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/@this	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>/this#_0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$z0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$stringconstant1	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.publishing.CentralPublisher: void close()>/$r0	<org.prevayler.implementation.publishing.CentralPublisher: void close()>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/message#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/$r0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/directory#_461	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter0	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/message#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter1	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/$r1	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r3	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/$r2	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$r2	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r3	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l1	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/$r0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/this#_0	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/$r0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/tmp$730561930	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r11	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>/this#_0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/tmp$266575910	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r9	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$r1	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/@parameter0	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/transactionPublisher#_0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/recoveringTransaction_$$A_2#_225	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r2	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$2096949319	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>/prevayler#_0	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/$r2	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/@parameter1	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/$r2	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter2	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r11	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r7	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/serializer#_0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$i1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$z1	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@parameter0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/original#_0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>/$z0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>	@Snapshot
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/@this	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/$r1	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>/$r0	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/$r5	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/$r2	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/@this	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/$r3	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/this#_0	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l8	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$stringconstant1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant5	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/$null0	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/$numconstant0	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/@this	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>/$r0	<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>	@Replication
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.implementation.replication.ServerListener: void run()>/$r2	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/$r0	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r6	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r4	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/afterTrailer#_16	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.Prevayler: void close()>/@this	<org.prevayler.Prevayler: void close()>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/$r2	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>	@GZip
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r12	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/destinationAccountNumber#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>/$r0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/@this	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter1	<org.prevayler.demos.scalability.TransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/this#_0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r5	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/$numconstant0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/sessionsManager#_34	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/list#_27	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r8	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/this#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/timestamp#_130	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>/this#_0	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>	@Snapshot
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/serverPort#_0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.implementation.clock.PausableClock: void pause()>/$r1	<org.prevayler.implementation.clock.PausableClock: void pause()>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r6	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r4	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>/@this	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/socket#_0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/swap#_132	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/$r1	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/this#_0	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.Guided: void endTurn()>/@this	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.foundation.network.ObjectServerSocket: void close()>/@this	<org.prevayler.foundation.network.ObjectServerSocket: void close()>
<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant1	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/$r0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/tickets#_0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/newPrevalentSystem#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r4	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$stringconstant0	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter1	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$r6	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/@this	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/operationsPerSecond#_95	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant3	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r2	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/message#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$l0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r10	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r7	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>/this#_0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/$r4_$$A_1	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$z2	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$r3	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/$null1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>()>/this#_0	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/@this	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/$r2	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/$r1	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/maxThreads#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/l1#_46	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/$r2	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$f0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/$l0	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/$r2	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/prevalentSystem#_0	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>/@parameter0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r4	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/$r0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/$numconstant1	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/threads_$$A_1#_80	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r8	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$r1	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.implementation.journal.TransientJournal: void <init>()>/this#_0	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/transactionTimestamp#_0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r1	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/delegate#_0	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>/@this	<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>	@Snapshot
<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@this	<org.prevayler.implementation.journal.Journal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/$r3	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/prevalentSystem#_0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.implementation.replication.ServerConnection: void run()>/$r5	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/$stringconstant0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>/@parameter0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/line#_0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/$r2	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r5	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/publisher#_0	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.implementation.publishing.TransactionPublisher: org.prevayler.Clock clock()>/@this	<org.prevayler.implementation.publishing.TransactionPublisher: org.prevayler.Clock clock()>
<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter0	<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>/@this	<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>/$null0	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>/$l0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/$r1	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r9	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r17	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$i0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r39	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$r0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/suffix#_27	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$r6	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$numconstant6	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r5	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/this#_0	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/account#_0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/@this	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/poBox#_43	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>/@parameter0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>	@GZip
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r17	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$1992198820	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$numconstant1	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>/l0#_0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$i3	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>/$r0	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>/$r2	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/$r0	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/i_$$A_2#_23	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/object#_0	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r10	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/$r1	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r1	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/$r0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream createXStream()>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r7	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$1848248326	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r7	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>/@this	<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r1	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r5	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r5	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r9	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$r1	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/$r1	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/@this	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/candidateVersion#_108	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/$r0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/@parameter2	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r19	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/this#_0	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>/this#_0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/$l2	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r4	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.demo2.business.AccountListener: void accountChanged()>/@this	<org.prevayler.demos.demo2.business.AccountListener: void accountChanged()>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$stringconstant0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$i0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r11	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	@Replication
<org.prevayler.foundation.DeepCopier: void <init>()>/this#_0	<org.prevayler.foundation.DeepCopier: void <init>()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/$l1	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/tmp$1656955644	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter1	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/runtime_$$A_1#_155	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/$i1	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$i2_$$A_2	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$r1	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>/this#_0	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/service#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r17	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/$r1	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/$r4	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/@this	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>/@this	<org.prevayler.demos.scalability.ScalabilityTestSubject: void replaceAllRecords(int)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r9	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/tmp$1171932619	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>/$i0	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/$stringconstant0	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>/@this	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/version#_130	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$numconstant4	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/subscriber#_0	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r11	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$z2	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$1863180880	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$i5	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$z1	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>/$r0	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>/@parameter0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$r1	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>/@parameter0	<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/$r4	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/guide#_0	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r0	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$r3	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.foundation.Chunking: void <clinit>()>/$r0	<org.prevayler.foundation.Chunking: void <clinit>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/@parameter1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/this#_0	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/@this	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/@parameter2	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/operationIncrement#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r6	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/$r1	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>/@parameter0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>/$r1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>/$r0	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>/$i0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>/this#_0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/ex#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$stringconstant0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/@parameter1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/socket#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>/$i0	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/snapshotSuffix#_468	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/sox_$$A_1#_49	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$null0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.Prevayler: org.prevayler.Clock clock()>/@this	<org.prevayler.Prevayler: org.prevayler.Clock clock()>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>/@this	<org.prevayler.foundation.serialization.XStreamSerializer$1: java.lang.Object initialValue()>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>/$r0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r23	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/name#_0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/proxy#_73	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r1	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/@this	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$numconstant2	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant4	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r5	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/$numconstant2	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>	@GZip
<org.prevayler.demos.demo2.Main: void out(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@parameter2	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/$r3	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/prevayler#_0	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/$r1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/@parameter2	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/l6#_98	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/container#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/@this	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r13	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/prevayler#_21	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/$r0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r11	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$r1	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@this	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.foundation.Chunk: byte[] getBytes()>/@this	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/this#_0	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/this#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/service#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/@parameter0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/i_$$A_2#_106	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>/$r1	<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>	@Replication
<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>/@parameter0	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/clazz#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>/out#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/@this	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>/@parameter0	<org.prevayler.implementation.publishing.TransactionPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/$r3	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>/this#_0	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$stringconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/@parameter2	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>/snapshotAttemptErrorMessage#_0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/$r3	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$stringconstant2	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r5	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$r3	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/guide#_65	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.clock.BrokenClock: void <init>()>/$numconstant0	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r2	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l5	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r12	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r3	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$numconstant2	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$stringconstant1	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r10	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/$r0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/@this	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/original#_0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r14	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/$r0	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/$stringconstant0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/@parameter0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/amount#_72	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/read_$$A_2#_83	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/l3#_37	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/message#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l6	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l1	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>	@GZip
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/$l0	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r12	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l3	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>/this#_0	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/id#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>/this#_0	<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>	@Snapshot
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>/@parameter0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r4	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$l4	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/$stringconstant0	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l7	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/@parameter2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$stringconstant0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l8	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/nextFile#_213	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r8	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r0_$$A_2	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>	@GZip
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$r4	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/this#_0	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/@this	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/$i0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>/file#_0	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r15	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l2	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/this#_0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r22	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/@this	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r9	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$stringconstant1	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/this#_0	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r15	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r10	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>/@this	<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>/this#_0	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/$z1	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/password#_0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l7	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.implementation.publishing.POBox: void run()>/@this	<org.prevayler.implementation.publishing.POBox: void run()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/$numconstant0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.Service: org.prevayler.foundation.network.ObjectReceiver serverFor(org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/l1#_0	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>	@GZip
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>/@this	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>	@GZip
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/this#_0	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r2	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r11	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>/$r0	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.clock.MachineClock: void update()>/$r0	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/$r2_$$A_2	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/chunk#_47	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/this#_0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>/$i0	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>
<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>/$l0	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/@parameter0	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$i1	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/$r5	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/stream#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@parameter0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.foundation.FileLocker: void release()>/$r5	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@parameter6	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/minThreads#_0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$stringconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/$r1	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/@parameter1	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$i0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/$numconstant0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r47	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/@this	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/$numconstant0	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/account#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$null4	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>
<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$stringconstant1	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/$r0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.demos.demo2.MainTransient: void <init>()>/@this	<org.prevayler.demos.demo2.MainTransient: void <init>()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$numconstant0	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>/l1#_0	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r12	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/@parameter0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/executionTime#_0	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>/amount#_0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/@this	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/@parameter0	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: void <init>()>/$numconstant0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$r1	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/connectionURL#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.network.ObjectSocket: void close()>/@this	<org.prevayler.foundation.network.ObjectSocket: void close()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>/$r0	<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$r5	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>/monitor#_0	<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>/$z0	<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r3	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/$z0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/@parameter2	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r1	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.journal.TransientJournal: void <init>()>/$r0	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$i1	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>/message#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/this#_0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/$stringconstant1	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/this#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r7	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$stringconstant1	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$r4	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>/$l0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$r2	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$i0	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/factory#_32	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.MainXStream$1: void <init>()>/this#_0	<org.prevayler.demos.demo2.MainXStream$1: void <init>()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r14	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/initialTransactionWanted#_0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$r2	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>/stream#_0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>	@GZip
<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>/@this	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/capsule#_0	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void close()>/this#_0	<org.prevayler.implementation.replication.ServerConnection: void close()>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>	@GZip
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>/@parameter0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/ignored#_0	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/jdbcDriverClassName#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>/$l0	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/i_$$A_2#_112	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.implementation.replication.ClientPublisher: void close()>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void close()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@this	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/clazz#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/this#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>	@Replication
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/@this	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>/$numconstant0	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l6	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r13	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/executionTime#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/suffix#_0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/this#_0	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r14	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$stringconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/$r1	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/ipAddress#_0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>/@this	<org.prevayler.implementation.journal.Journal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/b#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/operationsPerSecond#_72	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>/@this	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/$b0	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/$r1	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>/$z0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/tmp$417751790	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>/stream#_0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.foundation.DurableOutputStream: void internalClose()>/this#_0	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/@parameter1	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r4	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/$stringconstant0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/message#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/$z0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/$r3	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/iox#_70	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$numconstant3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r7	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/$null0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$r4	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/@parameter0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.journal.TransientJournal: void close()>/this#_0	<org.prevayler.implementation.journal.TransientJournal: void close()>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/chunk_$$A_4#_50	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>/@this	<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$z0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r6	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$r4	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r6	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/threads#_70	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/$r3	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/this#_0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>/querySystem#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/e_$$A_1_$$A_1#_90	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>/l0#_0	<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/this#_0	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/directory#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/@this	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r4	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>/l2#_124	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/factor_$$A_1#_61	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>/$numconstant0	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/@parameter2	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$z0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/$r3	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/l4#_97	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r9	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r14	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/rx_$$A_1#_91	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/this#_0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$r1	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/newRecords#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.foundation.Chunk: void <init>(byte[])>/bytes#_0	<org.prevayler.foundation.Chunk: void <init>(byte[])>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l8	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r7	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/service#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i6	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>/message#_0	<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>	@Replication
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/$r1	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
<org.prevayler.implementation.publishing.POBox: void run()>/this#_0	<org.prevayler.implementation.publishing.POBox: void run()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/name#_68	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/fieldBox#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/@parameter1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>/encoding#_0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>/this#_0	<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>/@parameter0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/read#_81	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>/this#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>	@GZip
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant11	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>/@this	<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/matchedAccount#_98	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.FileLocker: void release()>/$stringconstant1	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>/@this	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$b10	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>/@this	<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/$r0	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>/b#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>	@GZip
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/message#_254	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.Record: long getId()>/@this	<org.prevayler.demos.scalability.Record: long getId()>
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>/@this	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>	@Monitor
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/$numconstant0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r15	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>/@this	<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$r3	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/option#_137	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/stream#_0	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>/$numconstant1	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToUpdate#_0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/$i0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.implementation.publishing.TransactionPublisher: void close()>/@this	<org.prevayler.implementation.publishing.TransactionPublisher: void close()>
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>/$r0	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>/number#_0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r6	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/$r0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/l2#_91	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.implementation.replication.ServerListener: void run()>/$r3	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.foundation.StopWatch: void <init>()>/@this	<org.prevayler.foundation.StopWatch: void <init>()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/date2#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$l9	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>/@this	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/$stringconstant0	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$l2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.business.Account: long number()>/this#_0	<org.prevayler.demos.demo2.business.Account: long number()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$numconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>/@this	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/journalSuffix#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$i0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$213603253	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$i1	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/$stringconstant0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r9	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/$r0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/$r2	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r11	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>/$r0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/initialTransaction#_0	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/recoveringTransaction_$$A_3#_207	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/@parameter2	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>	@GZip
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r2	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/header#_95	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/this#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/$r0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r6	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/numberOfObjects#_0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>/this#_0	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/nextTransaction#_160	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/@parameter0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/prevalenceBase#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r19	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$numconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$b2	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r14	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r12	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r1	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>/@parameter1	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/port#_0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/subject#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/transaction#_52	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: void close()>/@this	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r15	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$b2	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/prevalentSystem#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$stringconstant4	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.DurableOutputStream: void close()>/$r3	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/$r4	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r2	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/recordToInsert#_36	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/$numconstant0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$stringconstant2	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/tmp$656853389	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$l3	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r3	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r5	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>/@parameter0	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/number#_0	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@this	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>/this#_0	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>	@Replication
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r5	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r41	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/this#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/@this	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/value_$$A_1#_74	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/v#_0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/$stringconstant0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/suffix#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/$i0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/@parameter2	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@this	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$stringconstant0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/operations#_167	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r7	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/$numconstant5	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/@parameter1	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r3	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/l2#_0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/off#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/this#_0	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$stringconstant0	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$numconstant0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r10	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$636787386	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/$r3	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/stopWatch#_88	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/$z0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/ex#_0	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/result#_327	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void closeDown()>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/returnIt_$$A_1#_168	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/publisher#_0	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>/$null0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>	@Censor
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/subscriber#_0	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>/inboundChannel#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$r3	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>/$l0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r8	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/$i0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/$b0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/subject#_0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>/$r2	<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r25	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>/$d0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant13	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/iox_$$A_2#_76	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r8	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/@parameter0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/message#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r3	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$r1	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>/$numconstant0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: boolean markSupported()>	@GZip
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/$z0	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r3	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/$numconstant0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r1	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/initialJournal#_152	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/$r2	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r3	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>/l1#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/l2#_71	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/$r2	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>	@GZip
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/this#_0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$numconstant0	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>/$r1	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>	@Snapshot
<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/@this	<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>/@parameter0	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<org.prevayler.demos.scalability.Record: java.lang.String getString1()>/@this	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/@parameter0	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$i0	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.foundation.Cool: void wait(java.lang.Object)>/@parameter0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/n#_23	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/@parameter0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>	@Censor
<org.prevayler.implementation.replication.ServerListener: void run()>/this#_0	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r5	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/$r5	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/$z2	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>/directoryPath#_0	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>/$r0	<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$z0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.scalability.Record: int hashCode()>/$i1	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/$r1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.implementation.replication.ServerListener: void run()>/$r0	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$l0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r13	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/@parameter3	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/result#_277	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/$l0	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/iox_$$A_1#_75	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>/original#_0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/$r1	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>/@this	<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$z1	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/@this	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>/l1#_0	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/bank#_0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/stubbornService#_35	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r18	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/iox_$$A_1_$$A_4#_114	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$l2	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>	@GZip
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r13	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant7	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/rowData#_100	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.monitor.NullMonitor: void <init>()>/@this	<org.prevayler.foundation.monitor.NullMonitor: void <init>()>
<org.prevayler.implementation.journal.Journal: void close()>/@this	<org.prevayler.implementation.journal.Journal: void close()>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r2	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.demo2.business.AccountEntry: void <init>()>/@this	<org.prevayler.demos.demo2.business.AccountEntry: void <init>()>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$r2	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/recordToUpdate#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>/this#_0	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$l0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/@this	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r3	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.demo2.business.Account: void verify(long)>/amount#_0	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/journalSuffix#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/$z0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant6	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/$r0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/entry#_51	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>/$r0	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r0	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.clock.PausableClock: void pause()>/this#_0	<org.prevayler.implementation.clock.PausableClock: void pause()>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$r4	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$b1	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/$r0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/a#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.Turn: void <init>(int)>/tickets#_0	<org.prevayler.foundation.Turn: void <init>(int)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/$r2	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/$l0	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$stringconstant0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/censor#_0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>	@Censor
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/ignored#_0	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>/$r0	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/@parameter0	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/$r0	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/@this	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>/@this	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r2	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/@this	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r4	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/this#_0	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/$r1	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/$stringconstant0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/i#_106	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/$r0	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/files#_29	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>/$r0	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$i0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>/l1#_194	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.Object createTestConnection()>/@this	<org.prevayler.demos.scalability.ScalabilityTestSubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r3	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/@parameter0	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/destination#_50	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>	@Replication
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/stream#_0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$stringconstant0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/$r0	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r3	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r1	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>/$numconstant2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>/$null0	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>	@Replication
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/$r3	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$z0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/result#_69	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/@parameter1	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r31	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>/@this	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/$r2	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/@this	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/$stringconstant0	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>/this#_0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant1	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>/$null0	<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>	@Replication
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/@this	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r9	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$r6	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r13	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/$r0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>/loader#_0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>/@this	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter3	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/in#_96	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/this#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter2	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/@parameter1	<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/$null0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>	@GZip
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$numconstant3	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/sessionsManager_$$A_2#_45	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>/this#_0	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/@this	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/@this	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.demo1.Main: void printMessage()>/$r3	<org.prevayler.demos.demo1.Main: void printMessage()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$i0	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/$stringconstant0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/@this	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/this#_0	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/@this	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r6	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/$r1	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r1	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$stringconstant5	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r19	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>/@parameter0	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/@parameter1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r9	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r13	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>/this#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/directory#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r9	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/@this	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r13	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/clazz#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/@parameter0	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>/$r0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>/this#_0	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/input_$$A_1#_197	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.replication.ServerConnection: void close()>/$r1	<org.prevayler.implementation.replication.ServerConnection: void close()>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>/buttonPanel#_57	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/operationSequence#_0	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$z0	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/journal_$$A_1#_197	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/$r2	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>/time#_0	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>	@Replication
<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@this	<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$r4	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r5	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/capsule#_0	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/tmp$1552068798	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/l2#_90	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@parameter1	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/$b1	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/$numconstant0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter2	<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/@parameter1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r12	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r4	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/$l0	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.implementation.replication.ClientPublisher$1: void run()>/ex#_49	<org.prevayler.implementation.replication.ClientPublisher$1: void run()>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>/@parameter0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r3	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$numconstant6	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant1	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/$r0	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>/@this	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@this	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r11	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/$stringconstant0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/l1#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/this#_0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/entry#_32	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r7	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/timestampCopy_$$A_1#_30	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>	@Snapshot
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/@parameter4	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r1	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/$stringconstant0	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r2	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>	@Replication
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/$r2	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/$r2	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$numconstant3	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>/parameters#_0	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r3	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$stringconstant0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/@this	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>/snapshotDirectory#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.Chunk: byte[] getBytes()>/$r0	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/$r3	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/serverURI_$$A_1#_29	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r50	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$r1	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/l5#_54	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r7	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r8	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$r6	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/$r4	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/$r1	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>/@this	<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter3	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$numconstant1	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/$r1	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/sqlx#_61	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/this#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.foundation.FileLocker: void release()>/$r0	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter2	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>/$z0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>	@Replication
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/service#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void run()>/$r2	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r2	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.foundation.FileLocker: void release()>/$r2	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/@parameter0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$i2	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$numconstant0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r18	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$r1	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/sox#_46	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/account#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>	@GZip
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>/n#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>	@GZip
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/$r1	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>	@Snapshot
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter1	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>/event#_0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>	@Replication
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/@this	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/$r3	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>/$r1	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
<org.prevayler.foundation.Turn: void start()>/@this	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/this#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$numconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@this	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$stringconstant0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/@parameter0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r8	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/@this	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/tmp$1769027043	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r8	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/@parameter1	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/@parameter0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l9	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/$r1	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.foundation.DurableOutputStream: void internalClose()>/$numconstant0	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.implementation.replication.ClientPublisher: void close()>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void close()>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>	@GZip
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/@parameter0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/@this	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToInsert#_0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$r4	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>/$r0	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$numconstant1	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>/@this	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>	@Censor
<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>/@parameter0	<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>/$r0	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>	@Replication
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>/$r0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>/$z0	<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>/@this	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/ignored#_0	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/$l0	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/matchResult#_93	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>/@this	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>	@Snapshot
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/this#_0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r13	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/bigDecimal1#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/$r5	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r5	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r4	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$b4	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>/$r0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter3	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/$null0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/prevayler#_13	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$r5	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>/$r1	<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r9	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r6	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/transaction#_0	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r5	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/$r7	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.foundation.DurableOutputStream: void internalClose()>/l1#_176	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/$r1	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l2	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r4	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.implementation.publishing.POBox: void run()>/$r0	<org.prevayler.implementation.publishing.POBox: void run()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/clazz#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$r6	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/@this	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>/l1#_0	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/numericString#_0	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>	@Replication
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/$r3	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>/$r0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>	@GZip
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$i1	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/@this	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/@parameter0	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/this#_0	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/$r6	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.foundation.Cool: void sleep(long)>/milliseconds#_0	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/$r0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r8	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/$stringconstant0	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/$r0	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/$null0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.implementation.journal.Journal: long nextTransaction()>/@this	<org.prevayler.implementation.journal.Journal: long nextTransaction()>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/@this	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$r8	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>/$stringconstant0	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/@parameter0	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>/@this	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/$r1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$i7	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>/transaction#_0	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/executionTime#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.DeepCopier: void <init>()>/@this	<org.prevayler.foundation.DeepCopier: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r12	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l2	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$stringconstant2	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/this#_0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/this#_0	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/operation#_123	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$i2_$$A_2	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/$r1	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.DurableOutputStream: void internalClose()>/$r0	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/factory#_43	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$stringconstant1	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r8	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r6	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/snapshotSerializer#_0	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>/@parameter1	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r6	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/$r3	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$stringconstant0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunking: void <init>()>/@this	<org.prevayler.foundation.Chunking: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/$z0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>/$r0	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$numconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>/@this	<org.prevayler.demos.scalability.QueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r10	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r6	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@this	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>/@this	<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/property#_233	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/$stringconstant0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$stringconstant1	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r2	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>/$numconstant0	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>	@Snapshot
<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>	@Replication
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/this#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/$z0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$z3	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>/$r0	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/l3#_53	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/input_$$A_2#_207	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/$r0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/transaction#_0	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r22	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void close()>/@this	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void close()>	@GZip
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/serverIpAddress#_0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$stringconstant0	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.clock.BrokenClock: void <init>()>/this#_0	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/$l1	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>/pipelineTurn#_0	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToUpdate#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r4	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>/$null1	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r11	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/this#_0	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l5	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/source#_49	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/prevayler#_29	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/this#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>/$numconstant0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>/l1#_83	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>	@Replication
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/$r3	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>/@parameter0	<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>/@this	<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/square#_57	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l3	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/$null1	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/this#_0	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/$r2	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>
<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>/this#_0	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/object#_60	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/@parameter4	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>/$r1	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/l1#_0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/$l0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r11	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.implementation.Capsule: void <init>(byte[])>/@this	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/journal#_129	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r18	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$numconstant0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/$r0	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/$r1	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>/$numconstant1	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r4	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$stringconstant0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/$stringconstant0	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.MainTransient: void <init>()>/this#_0	<org.prevayler.demos.demo2.MainTransient: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>/$i0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int available()>	@GZip
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/bank#_80	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r15	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i0	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.TransientJournal: void <init>()>/@this	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: void close()>/$r4	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/@this	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r8	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/$r0	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$stringconstant6	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>/$r1	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$r5	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$610258464	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$stringconstant2	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r0	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/@this	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>/directory#_0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/tmp$2125993380	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/initialTransaction#_0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/suffix#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/@this	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/journalSizeThresholdInBytes#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/@this	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/$z0	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r6	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>/$r0	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
<org.prevayler.foundation.network.ObjectReceiver: void close()>/@this	<org.prevayler.foundation.network.ObjectReceiver: void close()>
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$numconstant3	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/amountText#_94	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r13	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r5	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$498461514	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/$r4	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/$l0	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.business.BankListener: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>	@Replication
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r11	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/l2#_97	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$r1	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.demo2.MainSkaringa: void <init>()>/this#_0	<org.prevayler.demos.demo2.MainSkaringa: void <init>()>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/@parameter0	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>/$z0	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r53	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>/this#_0	<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter2	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.network.StubbornNetworkClientConnector: void disconnect()>/@this	<org.prevayler.foundation.network.StubbornNetworkClientConnector: void disconnect()>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r10	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/maxThreads#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$i0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$i1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$i4	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>/@parameter0	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/threads_$$A_2#_79	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/this#_0	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>/$r0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/@parameter1	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/@parameter0	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/guide#_0	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/$z0	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.implementation.journal.PersistentJournal: void close()>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$z0	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/executionTime#_55	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/$classconstant1	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/i#_23	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.demos.demo2.business.Bank: void <init>()>/$r0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$l0	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/@this	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>/@this	<org.prevayler.Query: java.lang.Object query(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.Guided: void startTurn()>/$r0	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>/$stringconstant0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>
<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>/@this	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>	@Replication
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/de#_46	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountFrame: long parse(java.lang.String)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$r2	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r8	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo1.Main: void printMessage()>/$stringconstant0	<org.prevayler.demos.demo1.Main: void printMessage()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/l1#_0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/header#_52	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/$r0	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.demos.demo2.business.Account: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.Account: void <init>()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/ex#_44	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/$i1	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
<org.prevayler.demos.demo2.business.Account: long balance()>/@this	<org.prevayler.demos.demo2.business.Account: long balance()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$r0	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/$null0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r12	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.clock.MachineClock: void <init>()>/this#_0	<org.prevayler.implementation.clock.MachineClock: void <init>()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/$r0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/$numconstant1	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/$r0	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/$r4	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/capsule#_0	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/byteIn#_33	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>/this#_0	<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/systemVersion#_55	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/client#_0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$numconstant0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/sourceNumber#_0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/$stringconstant0	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r17	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r4	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/@parameter0	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: void <init>()>/$r0	<org.prevayler.demos.demo1.NumberKeeper: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$l9_$$A_1	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>/port#_0	<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void close()>/$r1	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r5	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/@parameter1	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/this#_0	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>/remoteServerPort#_0	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void run()>/$r4	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$stringconstant0	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/$r2	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>/@parameter0	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant9	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/@parameter1	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>/$r2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>	@Snapshot
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r4	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@this	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>/$r0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/$r1	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/@this	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/@parameter3	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/$r1	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$i5	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r8	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/name#_33	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/$r2	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/@parameter0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/$r0	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/port#_0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>	@Replication
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$numconstant2	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>/@parameter1	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r11	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r3	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>/snapshotManager#_0	<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>	@Snapshot
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>/@this	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/account#_13	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>/$r0	<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/@parameter1	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r6	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>/this#_0	<org.prevayler.PrevaylerFactory: void configureMonitor(org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$numconstant5	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/name_$$A_1#_73	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r15	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/bank#_0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.Turn: void <init>(int)>/@this	<org.prevayler.foundation.Turn: void <init>(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/@parameter1	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r1	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>/l1#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$r2	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/daemon#_29	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/transaction#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.Prevayler: java.lang.Object prevalentSystem()>/@this	<org.prevayler.Prevayler: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>/this#_0	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>/$r0	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$i2	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>/this#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>	@Monitor
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/transactionWithQuery#_0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/this#_0	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$numconstant3	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$i10	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/$r1	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/@parameter0	<org.prevayler.foundation.network.StubbornNetwork: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/$l2	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r38	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/candidateSnapshot#_107	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@parameter0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r6	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.implementation.PrevaylerImpl: void close()>/$r0	<org.prevayler.implementation.PrevaylerImpl: void close()>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$z1	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/$z0	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/capsule#_0	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/input#_196	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$numconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l6	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$r4	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/l4_$$A_1#_47	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/this#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>	@Censor
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r8	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r7	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>/@this	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/idToDelete#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r4	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r3	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>/@this	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/$r1	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/$r3	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/@this	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r18	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/message#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/iterator#_30	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$i0	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$l2	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.demos.scalability.Record: void <clinit>()>/$r1	<org.prevayler.demos.scalability.Record: void <clinit>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$numconstant1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/operationsPerSecond#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/tmp$806764371	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter1	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void close()>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: void close()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/primeCandidate_$$A_1#_39	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>/@this	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>/exception#_0	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/factory#_112	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.replication.ServerListener: void run()>/@this	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>/this#_0	<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$stringconstant1	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r4	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>()>
<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>/this#_0	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r4	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$stringconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/threads#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant5	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/result_$$A_2#_281	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/suffix#_91	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>/@parameter0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>	@Snapshot
<org.prevayler.implementation.publishing.POBox: void run()>/notification#_38	<org.prevayler.implementation.publishing.POBox: void run()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/lf#_84	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/$i0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$z1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$i1	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/prevayler#_36	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>/@this	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$l0	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>/$r0	<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$numconstant0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/$r3	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void run()>/$stringconstant0	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>/$r0	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/$r2	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>/$r0	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r5	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$i2_$$A_1	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>/@this	<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.demo2.Main: void out(java.lang.String)>/$r0	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/chunk#_0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>/$r0	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/executionTime#_56	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo1.Main: void <init>()>/this#_0	<org.prevayler.demos.demo1.Main: void <init>()>
<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>/@parameter0	<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l11	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/amount#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r12	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant9	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/title#_0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>/turn#_0	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/port#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>/l1#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>/$r0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$stringconstant1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>	@Snapshot
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r11	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>/b#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>	@GZip
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r10	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$r4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter1	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/$r2	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$i4	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/this#_0	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>/this#_0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>/$stringconstant0	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$l4	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter2	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$l0	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r44	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>/this#_0	<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/$i0	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>/$z0	<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>	@Snapshot
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r7	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>/$r0	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>/holder#_0	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>	@GZip
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$stringconstant0	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>/this#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void valueChanged(javax.swing.event.ListSelectionEvent)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/tmp$1559982639	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>/this#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/e_$$A_2_$$A_1#_96	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/sqlx#_51	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/$r6	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/$r0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/destinationNumber#_0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$z0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/l1#_89	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>/$numconstant0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>/this#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: int hashCode()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/snapshotManager#_374	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/$stringconstant0	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>	@Replication
<org.prevayler.foundation.Turn: void alwaysSkip()>/this#_0	<org.prevayler.foundation.Turn: void alwaysSkip()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/this#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>/$numconstant0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter2	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>	@Replication
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r1	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/$r3	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/$r3	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r5	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo1.Main: void printMessage()>/$r0	<org.prevayler.demos.demo1.Main: void printMessage()>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r5_$$A_3	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r2	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>/@parameter1	<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.foundation.Cool: void wait(java.lang.Object)>/e#_11	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/$numconstant0	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/@parameter0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>/$stringconstant0	<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/connectionURL#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.implementation.clock.MachineClock: void update()>/$l0	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/tmp$2017283527	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/idToDelete#_37	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/label#_66	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.implementation.clock.MachineClock: void <init>()>/@this	<org.prevayler.implementation.clock.MachineClock: void <init>()>
<org.prevayler.implementation.journal.TransientJournal: void close()>/@this	<org.prevayler.implementation.journal.TransientJournal: void close()>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/tmp$977096331	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>	@Snapshot
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$r10	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureNetwork(org.prevayler.foundation.network.OldNetwork)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/$z0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/this#_0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$stringconstant0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r10	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$i4	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/$z0	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>/this#_0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/this#_0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$l1	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/$z0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/thisWrite#_0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>/@parameter0	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/@this	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureJournalFileAgeThreshold(long)>
<org.prevayler.implementation.clock.PausableClock: void resume()>/this#_0	<org.prevayler.implementation.clock.PausableClock: void resume()>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/acc2#_0	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$stringconstant0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/$r1	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/name#_0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>/name#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/$r2	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/$r2	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>/$r0	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>	@Replication
<org.prevayler.foundation.Turn: void end()>/$r0	<org.prevayler.foundation.Turn: void end()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/$null1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/input_$$A_3#_245	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.StopWatch: long millisEllapsed()>/$l0	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>/this#_0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>()>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receiveFromNetwork()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$stringconstant0	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>/$i0	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>/$r1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant2	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/i#_128	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r12	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter1	<org.prevayler.foundation.network.NetworkReceiverFactory: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$numconstant1	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/@parameter1	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>/this#_0	<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>/stream#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/l4#_129	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/@parameter1	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/this#_0	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/$r2	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/exception#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$numconstant0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r6	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/@this	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l9	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r3	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/sureTransactionWithQuery#_0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r16	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/prevayler#_24	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>/@this	<org.prevayler.foundation.network.SessionsManager: void remove(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>/$r0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/@this	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/@parameter0	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r5	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/$r0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/$stringconstant0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>/@parameter0	<org.prevayler.Prevayler: void execute(org.prevayler.Transaction)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/@this	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$r3	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/$r0	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/number#_0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/buttonPanel#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/@parameter1	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r10	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter2	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$i0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/minThreads#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$i0	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/$numconstant0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>	@GZip
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/bytes#_17	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r2	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r24	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$l1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/$r1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter0	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>/unExpected#_83	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$b6	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r5	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/ipAddress#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.Turn: void end()>/$numconstant0	<org.prevayler.foundation.Turn: void end()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/@this	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/this#_0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>/@parameter0	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$r5	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/amount#_87	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$stringconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r11	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$numconstant0	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/@this	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>	@Snapshot
<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/$b0_$$A_2	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@this	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>/$l0	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r10	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$b3	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r4	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r19	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/$l2	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r3	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/sensitiveQuery#_0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/@parameter2	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/$l1	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/@parameter0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/@parameter2	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/e#_179	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r2	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/serverURI#_19	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/account#_21	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>/stream#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/maxThreads#_0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/l2#_45	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$i1	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter3	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r9	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/this#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>/name#_0	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/this#_0	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/$r0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/@this	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>/@this	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/$r3	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r5	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/desktop#_21	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>/this#_0	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/$z0	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>
<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>/@this	<org.prevayler.foundation.DurableOutputStream: boolean reallyClosed()>
<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/@this	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/$r2	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.foundation.Cool: void <init>()>/this#_0	<org.prevayler.foundation.Cool: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter0	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/this#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r11	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>()>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/accounts#_27	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/@parameter2	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/@this	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$z3	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.demos.demo2.business.Account: void <init>()>/$r0	<org.prevayler.demos.demo2.business.Account: void <init>()>
<org.prevayler.demos.scalability.Record: void <init>(long)>/this#_0	<org.prevayler.demos.scalability.Record: void <init>(long)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/@parameter0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestSnapshot_$$A_3#_112	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$r4	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r10	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/result#_271	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r24	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$stringconstant1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>/@this	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>	@Monitor
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/tmp$1805970642	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/@parameter0	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/$r2_$$A_1	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>/$r0	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$z2	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/capsule#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/$i0	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/files#_21	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/$r1	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/sensitiveQuery#_0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void close()>/$r0	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$numconstant1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.lang.String table()>/@this	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.lang.String table()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$r1	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@parameter1	<org.prevayler.foundation.serialization.Serializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/this#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/e_$$A_3#_87	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$stringconstant1	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$r1	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/$z0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r4	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/stream#_0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/$r2	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>/$r1	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>	@Replication
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r21	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r7	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/stubbornNetwork#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>/$numconstant0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/maxThreads#_0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$i2	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>/subscriber#_0	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>/clock#_0	<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/stream#_0	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>/b#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>	@GZip
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/$r0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/eof_$$A_1#_227	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.Record: java.lang.String getString1()>/this#_0	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>/$i0	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>	@GZip
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/$r0	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>/@parameter1	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void close()>/this#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void close()>	@GZip
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$l2	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>/$i0	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r7	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>/$r3	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/$r2	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$r4	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$r5	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/$i0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/args#_0	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/tmp$815714108	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/factory#_15	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/$r4	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$numconstant2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r9	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r12	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter2	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/serverIpAddress#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/@parameter1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/@this	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/snapshotFile#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/system#_0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void passToClient(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/l0#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/@parameter0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r2	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>/this#_0	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>/this#_0	<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r0	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/clockTick_$$A_2#_129	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/timestamp#_72	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>/this#_0	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>/l0#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame,org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/subscriber#_0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$r1	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/snapshotManager#_0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/@this	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/@parameter0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/$r0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/$r0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.publishing.censorship.TransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>/@this	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>/@parameter0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/$numconstant1	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/systemVersion#_131	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/@parameter1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/$numconstant0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/@parameter1	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>/@parameter1	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>/@parameter1	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/$r1	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>	@GZip
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r10	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter1	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$i1	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$z0	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/this#_0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>/$i0	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/connection#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l3	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/@parameter0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$i17	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/$r1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i8	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$r4	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>/$r0	<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>	@Snapshot
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/$r0	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>/numberToKeep#_0	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter1	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/@this	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/@parameter0	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/@parameter1	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/@this	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/operation_$$A_2#_126	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>	@Replication
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/@parameter3	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.Main: void <init>()>/this#_0	<org.prevayler.demos.demo2.Main: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>/$z0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$stringconstant0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/b#_97	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/statement#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/$z1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/$numconstant3	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>/this#_0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>	@Snapshot
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>/@parameter0	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$r4	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>/this#_0	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/args#_0	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/e_$$A_2#_85	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant2	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r43	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/sqlx#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$r5	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/user#_0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$r3	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/version#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
<org.prevayler.PrevaylerFactory: void <init>()>/this#_0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$r0	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r6	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/$r2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$numconstant4	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.foundation.DurableInputStream: void close()>/@this	<org.prevayler.foundation.DurableInputStream: void close()>
<org.prevayler.foundation.network.Network: void stopService(int)>/@this	<org.prevayler.foundation.network.Network: void stopService(int)>
<org.prevayler.demos.scalability.Record: int hashCode()>/this#_0	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/$r2	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r10	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>/$r2	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/this#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l8	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/@parameter0	<org.prevayler.implementation.publishing.AbstractPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/@parameter0	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>/@this	<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher$1: void run()>/@this	<org.prevayler.implementation.replication.ClientPublisher$1: void run()>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/this#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$d1	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/@this	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.foundation.Turn: void start()>/this#_0	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$stringconstant0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.journal.PersistentJournal: void hang()>/$r0	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r6	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$r4	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/$r0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>/$stringconstant0	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/$r0	<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/this#_0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$r6	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/$r6	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/args#_0	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/$r3	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/initialJournal#_0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/receiver#_51	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/suffix#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$i1	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$z0	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/$r4	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>/@parameter0	<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r16	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>/this#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$r1	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/$r0	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/@this	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>/$r1	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r6	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/@parameter0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/$r0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/@this	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>/l0#_0	<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r15	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>/$r1	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>/$r1	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter3	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$l1	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>/clazz#_0	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r7	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r12	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/file#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/capsule#_53	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r40	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/this#_0	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/$l1	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/@parameter0	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/$r0	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/@parameter1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/$numconstant0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r3	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>/$z0	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r9	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$r0	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/@this	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/snapshotManager#_0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>/$r0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>
<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r3	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/len#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/tmp$48614811	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r1	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r5	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/sessionsManager#_41	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter2	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/$z1	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>/$b0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>	@GZip
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>/$stringconstant0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/nfx#_335	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/@parameter3	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/clockRefresher#_34	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$l2	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r1	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/runnable#_0	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r6	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/@this	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>/this#_0	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$r5	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i4	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r16	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/$stringconstant0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@parameter1	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/serializer#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>	@Snapshot
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r3	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$numconstant1	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/file#_0	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r3	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.demo2.MainReplica: void <init>()>/@this	<org.prevayler.demos.demo2.MainReplica: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/$r2	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/$r2	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/$null0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>/$r0	<org.prevayler.demos.demo2.gui.AccountFrame: java.lang.String holderText()>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/@parameter0	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/string1#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>/this#_0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$r0	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/$r2	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r4	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/@parameter0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>	@GZip
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant2	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/$d0	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/message#_0	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>/this#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/this#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>/prefix#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/network#_0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/tmp$176569070	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/network#_0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/@this	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/publisher#_0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/@this	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>/$stringconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/$l0	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter0	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/$r1	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r10	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/directory#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r46	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: void hang()>/$numconstant0	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/$r0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/resultSet_$$A_1#_36	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/ipAddress#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/$numconstant0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>/stubbornService#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$stringconstant1	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.scalability.Record: java.lang.String getString1()>/$r0	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r7	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>/@this	<org.prevayler.demos.demo2.business.Account: java.util.List transactionHistory()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>/this#_0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>	@Snapshot
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/$r3	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l12	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/exception#_123	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$r0	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/$r0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/$r0	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/$r0	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/tmp$266761369	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/$r3	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/@parameter0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/this#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/@this	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/$r4	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/@this	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/@this	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/l1#_104	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>/this#_0	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/buttonPanel#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$numconstant0	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/$r1_$$A_2	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$z3	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/port#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$i0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/clockTick#_108	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>/@this	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/resultIterator#_96	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.foundation.Turn: void alwaysSkip()>/$r0	<org.prevayler.foundation.Turn: void alwaysSkip()>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r1	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.FileLocker: void release()>/this#_0	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/this#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$r2	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/jdbcDriverClassName#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/@this	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@this	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/recoveredPrevalentSystem#_43	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableOutputStream: void internalClose()>/$null0	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r9	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.foundation.FileLocker: void release()>/@this	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/objectsWritten#_136	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/$r2	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>/this#_0	<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>	@Replication
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/@this	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/@this	<org.prevayler.implementation.publishing.TransactionPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>/$r1	<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/l5#_102	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r2	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$r0	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$l10	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r17	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/this#_0	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.DurableOutputStream: void close()>/$z0	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/@this	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$l0	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/this#_0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$stringconstant0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/this#_0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/primarySnapshotSuffix#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/newTime#_0	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/@this	<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r3	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r21	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r9	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/$r4	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r5	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/journalAgeThresholdInMillis#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>/l0#_0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/$r1	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.DurableInputStream: void close()>/this#_0	<org.prevayler.foundation.DurableInputStream: void close()>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$r1	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/object#_34	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.Turn: void start()>/$i1	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/records_$$A_2#_40	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/$r10	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/tt#_0	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/$r1	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/len#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/this#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/$r1	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/$r2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>/$r1	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l6	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/i_$$A_2#_128	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/serverURI_$$A_2#_30	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/tmp$1751728439	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/this#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/sessionService#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/this#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/rx#_73	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r3	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/$i0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/capsule#_54	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/$r2	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/$r0	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/factory#_20	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>/prevalenceDirectory#_0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@this	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/this#_0	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r5	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/$stringconstant0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/outputJournalToClose_$$A_2#_88	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter3	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/amount#_62	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.PrevaylerFactory: void <init>()>/$numconstant1	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestSnapshot_$$A_2#_111	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r4	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>/$l0	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$r0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/$numconstant0	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/client#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r7	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>/$z0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/$r4	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$b3_$$A_1	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>/$z0	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>/@parameter0	<org.prevayler.demos.demo1.NumberKeeper: void keep(int)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r16	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$i0	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r2	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$i5	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>/@this	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$d2	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r3	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/$r3	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>/message#_0	<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/@this	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$i3	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r2	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/ex#_22	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$stringconstant0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/this#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/$r0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.demos.demo2.business.Account: void <init>()>/$numconstant0	<org.prevayler.demos.demo2.business.Account: void <init>()>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/text#_0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/@this	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>/$r1	<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>	@Snapshot
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/@this	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$z1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>/$i0	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>/this#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r3	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>/@this	<org.prevayler.foundation.network.ObjectReceiver: void receive(java.lang.Object)>
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/$r2	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/$r0	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/$r6	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/$numconstant1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>/@this	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/this#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.demos.scalability.Record: void <init>(long)>/@parameter0	<org.prevayler.demos.scalability.Record: void <init>(long)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/this#_0	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$r4	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>/@this	<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/iox#_135	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>/@parameter0	<org.prevayler.foundation.monitor.LoggingMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$l8	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.demo1.NumberKeeper: void <init>()>/@this	<org.prevayler.demos.demo1.NumberKeeper: void <init>()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@this	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/level#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/service#_0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/@this	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>	@Replication
<org.prevayler.implementation.replication.ServerListener: void run()>/$r4	<org.prevayler.implementation.replication.ServerListener: void run()>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>/@parameter1	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r8	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$r4	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/@parameter0	<org.prevayler.foundation.network.SessionsManager: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$l1	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/serverPort#_0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>	@Replication
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r1	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/snapshotManager#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>/transactionTimestamp#_0	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule cleanCopy()>/@this	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r11	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/user#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/$i2	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>/@this	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/$z0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>/@parameter0	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.PrevaylerFactory: void <init>()>/@this	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r5	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/$r2	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r12	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/message#_61	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/$r2	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$l0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/@this	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$d0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter2	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>/clazz#_0	<org.prevayler.foundation.monitor.SimpleMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/outputJournalToClose_$$A_3#_115	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r1	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$stringconstant0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/@parameter1	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r9	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/prevalentSystem#_0	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/$r3	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/subject#_63	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r5	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/i_$$A_1#_113	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/$r0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/this#_0	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$r4	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r2	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r1	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$r0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.clock.PausableClock: void pause()>/$r0	<org.prevayler.implementation.clock.PausableClock: void pause()>
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/@this	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>/this#_0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r2	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/query#_88	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$i4	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@this	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/$r3	<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/this#_0	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/$stringconstant0	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/this#_0	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l1	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/box#_65	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>	@Snapshot
<org.prevayler.foundation.Chunk: java.util.Map getParameters()>/this#_0	<org.prevayler.foundation.Chunk: java.util.Map getParameters()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void action()>
<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter0	<org.prevayler.foundation.network.Network: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.Chunking: void <clinit>()>/$numconstant0	<org.prevayler.foundation.Chunking: void <clinit>()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/i_$$A_1#_24	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/newPrevalentSystem#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableOutputStream: void close()>/l2#_164	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r7	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/newPrevalentSystem#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/$b0	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>/@this	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>	@Replication
<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>/$r0	<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>/$r0	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/@parameter0	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$z0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.implementation.Capsule: byte[] serialized()>/$r0	<org.prevayler.implementation.Capsule: byte[] serialized()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/key#_23	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/this#_0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r14	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter1	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/this#_0	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$numconstant0	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>/pathname#_0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: boolean accept(java.io.File)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/this#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>	@Monitor
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/this#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/returnIt#_166	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>/$numconstant0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>	@Replication
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$z0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/$r2	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r1	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/$z0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$stringconstant2	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/$r0	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>/@this	<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter2	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/$stringconstant0	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>/$i1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/objects#_33	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/$r5	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.SureTransactionWithQuery: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>/@this	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>	@Replication
<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/$r0	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>/@this	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$l0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.StopWatch: double secondsEllapsed()>/this#_0	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>/this#_0	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>	@Monitor
<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/@parameter0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>	@GZip
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/$r5	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@parameter0	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>/$r0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>/$r0	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$r3	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/this#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$r0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter3	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>()>/@this	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r9	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/ex#_51	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/journalSerializer#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>/@this	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>	@Replication
<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>/$r0	<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>	@Snapshot
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/@parameter0	<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>
<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter2	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>/@parameter1	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r8	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r37	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter2	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/$r1	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r3	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>/fieldBox#_46	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/port#_0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r2	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>/monitor#_0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$r1	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>/$r1_$$A_2	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/turn#_77	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/clazz#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/$r3	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/@parameter1	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/$numconstant2	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/$r5	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/$stringconstant1	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/this#_0	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/$r3	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>/@this	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r14	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r5	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>/this#_0	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/b#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/$numconstant0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$r1	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>/this#_0	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/@parameter2	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/$r3	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r1	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/destinationNumber#_61	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/factory#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>	@GZip
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>	@Replication
<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>/$stringconstant2	<org.prevayler.demos.demo2.MainXStream$1: com.thoughtworks.xstream.XStream createXStream()>	@Snapshot
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/recordToInsert#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/@parameter1	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/@this	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>/file#_0	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r6	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>/l0#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/factory#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/this#_0	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/@this	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.implementation.replication.ServerConnection: void run()>/initialTransaction_$$A_1#_51	<org.prevayler.implementation.replication.ServerConnection: void run()>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/listener#_0	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>/l1#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$z0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.Record: int hashCode()>/$l11	<org.prevayler.demos.scalability.Record: int hashCode()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>/$d0	<org.prevayler.demos.scalability.ScalabilityTestRun: double getOperationsPerSecond()>
<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>/this#_0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>/$numconstant0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r12	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/$r1	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>	@Replication
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/stream#_0	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter1	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/$r4	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/$r0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>/this#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>	@GZip
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/$r4	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.LoggingMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/$r1	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>/@this	<org.prevayler.foundation.serialization.Serializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r1	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>/this#_0	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/$r0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$z0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/version#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>/this#_0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$i12	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.DurableOutputStream: void internalClose()>/@this	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/tmp$189248757	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/this#_0	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r2	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.Transaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r16	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r7	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>/@this	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/buf#_22	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>/$r0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r3_$$A_2	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher$1: void run()>/this#_0	<org.prevayler.implementation.replication.ClientPublisher$1: void run()>	@Replication
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/@this	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/$l1	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/$r1	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>/$r0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>	@GZip
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$r2	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>/$r1	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/@parameter0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/$r5	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>/clazz#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>/@this	<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$z0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/this#_0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.implementation.clock.PausableClock: void pause()>/$r2	<org.prevayler.implementation.clock.PausableClock: void pause()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/iterator_$$A_1#_41	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$r3	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r8	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>/$r1	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/fieldBox#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>/$r2	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/@parameter0	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r8	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/this#_0	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$l1	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>/$r0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r8	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r20	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/$r0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/$r1	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/@parameter1	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant2	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/@this	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/chunk_$$A_1#_44	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/@parameter0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/@this	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/$stringconstant0	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/this#_0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$r2	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>/obj#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>/this#_0	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$r9	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/amount#_0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>/$r3	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>	@Snapshot
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>/name#_0	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>/$stringconstant0	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$stringconstant3	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/executionTime#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>/$stringconstant0	<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/$r0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>	@Replication
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@parameter1	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/$numconstant1	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/$numconstant0	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>/@this	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/e_$$A_3_$$A_1#_97	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/$r2	<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r11	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/@this	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>	@GZip
<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>/@this	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/prevayler#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/version#_0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/l2#_79	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/$r0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>/this#_0	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$l0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/tempFile#_66	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter2	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/$r3	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/account#_43	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/@parameter0	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/$numconstant4	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/$r1	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/inputStream#_49	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>/this#_0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$i2	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$stringconstant1	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/$i2	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/$r3	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/numberOfRecords#_0	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/@this	<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.Cool: void sleep(long)>/$r0	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r5	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>/$r0	<org.prevayler.foundation.monitor.Log4jMonitor: void <clinit>()>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>/$r0	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void action()>
<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>/token#_0	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/l4#_0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/b#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/$b4	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>/bankListener#_0	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r34	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/$r1	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>/tmp$234209846	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$null0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/stream#_0	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$r8	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/$r2	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r5	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/$r1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>	@Snapshot
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/$r0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>	@Censor
<org.prevayler.foundation.Chunk: void <init>(byte[])>/this#_0	<org.prevayler.foundation.Chunk: void <init>(byte[])>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/args#_0	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$r2	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>/l1#_0	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.demos.demo2.MainReplica: void <init>()>/this#_0	<org.prevayler.demos.demo2.MainReplica: void <init>()>
<org.prevayler.demos.demo2.MainXStream: void <init>()>/@this	<org.prevayler.demos.demo2.MainXStream: void <init>()>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/$l1	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>/@this	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>	@Replication
<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>/$stringconstant0	<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>
<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>/$r0	<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>	@Replication
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/$i0	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>/@parameter0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/stubbornService#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>/@parameter0	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>/@parameter0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>/$r0	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r16	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$stringconstant0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r14	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r6	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/args#_0	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>/@this	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r4	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/$r1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>	@Replication
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>	@GZip
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>/$stringconstant0	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>/@parameter0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/directory#_431	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/$b0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/$r2	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/$l0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>/$r1	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>	@Replication
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/$r0	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r8	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/$r5	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$i0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/@parameter0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>/this#_0	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r20	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/$r7	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/snapshotSerializer#_469	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>	@Snapshot
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/$r2	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/$r9	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>/$r0	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r2	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.PrevaylerFactory: void <init>()>/$numconstant0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/file#_0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/i#_42	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/@parameter0	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$z0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/$r1	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/unex#_113	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>	@Snapshot
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/$r4	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.implementation.journal.PersistentJournal: void hang()>/l0#_264	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
<org.prevayler.demos.scalability.Main: void <clinit>()>/$r0	<org.prevayler.demos.scalability.Main: void <clinit>()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/$r2	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>	@Replication
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l3	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>/this#_0	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/e#_81	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/$i1	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/latestVersion_$$A_2#_110	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/$r3	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>	@Replication
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/$null0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>/account#_0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/remoteSocket#_0	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/$r2	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/$l0	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/this#_0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>	@Replication
<org.prevayler.implementation.Capsule: byte[] serialized()>/@this	<org.prevayler.implementation.Capsule: byte[] serialized()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/@parameter0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/idToDelete#_0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.foundation.Cool: void wait(java.lang.Object)>/object#_0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r3	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r6	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/$l1	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>/operation#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number enterAmount(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$b1	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/$r0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>
<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>/$r1_$$A_1	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/e#_36	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>	@GZip
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$stringconstant0	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/@this	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/this#_0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$numconstant1	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Record: java.lang.String getName()>/this#_0	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$stringconstant2	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/$r5	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>/@parameter0	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/tmp$1698505528	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/$r2	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>/$r1	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>	@Replication
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>/$r2	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>/$r0	<org.prevayler.demos.demo2.gui.RobustAction: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/it#_91	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/container#_0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/$stringconstant0	<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/$r0	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r10	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>
<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>/this#_0	<org.prevayler.PrevaylerFactory: void configureClock(org.prevayler.Clock)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>/l1#_106	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>	@Replication
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r1	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$stringconstant1	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r13	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/$stringconstant0	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/this#_0	<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$stringconstant0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/l2#_29	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>/prevayler#_0	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
<org.prevayler.foundation.Chunk: void <init>(byte[])>/$r0	<org.prevayler.foundation.Chunk: void <init>(byte[])>
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/$r2	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>	@Replication
<org.prevayler.foundation.FileLocker: void release()>/$r6	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/recoveringTransaction_$$A_1#_197	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>/@this	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>	@Monitor
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r10	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$stringconstant1	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r3	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/$r6	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/$r6	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/@parameter1	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/this#_0	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/$r0	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>/$r0	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/service#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$i7	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/prevayler#_17	<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>	@Snapshot
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$stringconstant0	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r2	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r6	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant5	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/l3#_102	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$l0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/monitor#_0	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/this#_0	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>/@this	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r21	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/@parameter0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/clazz#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter0	<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$b1	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/transaction#_0	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/byteOut_$$A_1#_35	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.StopWatch: double secondsEllapsed()>/@this	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/@parameter1	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/clockTick_$$A_1#_113	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>/@this	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/$r5	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/@this	<org.prevayler.foundation.network.OldNetwork: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/this#_0	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r8	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/$null0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>/this#_0	<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/$r3	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>/@this	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$i4	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/$r4	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>	@Monitor
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/records#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/$stringconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/$r0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r4	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/tmp$1275501215	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>/@this	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/royalFoodTaster#_28	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r3	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/f1#_122	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/$r2	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: long number()>/@this	<org.prevayler.demos.demo2.business.Account: long number()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant11	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>/this#_0	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/rx#_89	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>	@Replication
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r5	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>/b#_0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>	@GZip
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/subscriber#_0	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/$numconstant0	<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$stringconstant8	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/fieldBox#_0	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/$r3	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r9	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>/this#_0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>/$r0	<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r28	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/$r3	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>/this#_0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>	@GZip
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$r7	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.Capsule: void <init>(byte[])>/@parameter0	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/$i0	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/@parameter1	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/o2#_0	<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/$r1	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$r2	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>/$r1	<org.prevayler.demos.scalability.QueryTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/$r12	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.clock.PausableClock: void resume()>/@this	<org.prevayler.implementation.clock.PausableClock: void resume()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/journal_$$A_2#_207	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>/@this	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/$r0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/@this	<org.prevayler.foundation.DeepCopier$Receiver: void run()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>/$r2	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/@parameter0	<org.prevayler.implementation.Capsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/prevalentSystem#_0	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>/@parameter0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>/@parameter0	<org.prevayler.demos.scalability.ScalabilityTestSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/@parameter0	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/tmp$72294299	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>/@this	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>/@this	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>/this#_0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/$r4	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/$i0	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$numconstant2	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/@parameter0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>/network#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/@this	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r6	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/$z0_$$A_2	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/@this	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>	@Replication
<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>/@parameter0	<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>	@Snapshot
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/message#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>/@this	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/port#_0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/port#_0	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/@parameter0	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$numconstant4	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/this#_0	<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>/candidate#_0	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/$numconstant7	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.demo2.business.Bank: void <init>()>/@this	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/prevayler#_0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>/records#_0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$null0	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$numconstant1	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/@parameter2	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/$z0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r3	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/$r0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/$null0	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/name#_0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/$r0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r13	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/$r7	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/$r9	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>/$i0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>	@GZip
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/@this	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/@parameter0	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r22	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$stringconstant3	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>/@this	<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>	@Replication
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/snapshotManager#_0	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>/$r4	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object acquireConnection()>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>/file#_0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/@this	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>/this#_0	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/$r13	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/$stringconstant2	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/@parameter0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>/@this	<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>	@Snapshot
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/$r1	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.foundation.Turn: void start()>/$i2	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.foundation.Chunking: void <init>()>/this#_0	<org.prevayler.foundation.Chunking: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/$r2	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>/$i1	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/@this	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Censor
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/$z0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.implementation.clock.MachineClock: void update()>/$b1	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/@parameter1	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/@parameter2	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>/$l0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>	@Replication
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$numconstant3	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/this#_0	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r11	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.Chunk: java.util.Map getParameters()>/$r0	<org.prevayler.foundation.Chunk: java.util.Map getParameters()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/@parameter1	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>/$stringconstant0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/$r1	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>	@Snapshot
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r0	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/sessionsManager_$$A_1#_43	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/@parameter0	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/this#_0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/nextTransaction#_0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/@parameter1	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter1	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/$r12_$$A_2	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/@parameter2	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$i0	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/@this	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/@parameter0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/this#_0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/@parameter1	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/i#_41	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/tmp$692771936	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/tmp$1025121911	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/$numconstant0	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>/$i0	<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>	@Replication
<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>/@this	<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/$r2	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>/@this	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/recordToInsert#_0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/transactionNumber#_0	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/@this	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>/@this	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/systemVersion#_0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/@parameter0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>	@Monitor
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@this	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/receiver#_0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>	@Replication
<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>/@parameter0	<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/this#_0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/$r1	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/$l2	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/@parameter0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$l1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$b1	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/$r8	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/@this	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>	@Replication
<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>/$r0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/$r0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>/this#_0	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/@this	<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/@parameter0	<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>/@this	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>/loader#_0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/$r4	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r10	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/@parameter1	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$r14	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>/this#_0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/monitor#_0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/tmp$2079188304	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/stream#_106	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/$r3	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r23	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/$stringconstant4	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>/$r0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void accountChanged()>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r5	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r7	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/@parameter0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>	@GZip
<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>/$r0	<org.prevayler.foundation.FileLocker: java.io.RandomAccessFile getStream()>
<org.prevayler.foundation.DurableOutputStream: void internalClose()>/$null1	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/$r0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$r0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/this#_0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/$r1	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/$r7	<org.prevayler.implementation.replication.ServerConnection$1: void run()>	@Replication
<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>/$i0	<org.prevayler.demos.demo1.NumberStorageTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/$numconstant0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>/@this	<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void <init>(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>/@parameter0	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/@this	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/$r6	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>/$i1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>	@Replication
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/holder#_0	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/$r7	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/clazz#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$stringconstant0	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>/@this	<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>	@Replication
<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>/acc1#_0	<org.prevayler.demos.demo2.business.Bank$1: int compare(java.lang.Object,java.lang.Object)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$l2	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>/this#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>	@Replication
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/number#_0	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$z2	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/@parameter1	<org.prevayler.implementation.publishing.TransactionPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$z0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/outputJournalToClose#_78	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>/rx_$$A_1#_28	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>/$r0	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>/l1#_188	<org.prevayler.foundation.DurableOutputStream: int fileSyncCount()>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/timestamp#_0	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/@parameter0	<org.prevayler.Prevayler: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/$z0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>/$numconstant1	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: boolean accept(java.io.File)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>/@parameter0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$r0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.foundation.DurableInputStream: void close()>/$r0	<org.prevayler.foundation.DurableInputStream: void close()>
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/this#_0	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>	@Replication
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/$r6	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/@this	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/this#_0	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/this#_0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/container#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/$r4	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/$r0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>	@Replication
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/@parameter1	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/$r0	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>/this#_0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/$r0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>/$r0	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/$r0	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/this#_0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>/@parameter1	<org.prevayler.demos.scalability.prevayler.TestTransaction: void executeOn(java.lang.Object,java.util.Date)>
<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>/@parameter0	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$r4	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/@this	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/$b1	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>/this#_0	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/prevalentSystem#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>	@Snapshot
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/@this	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/$r5	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/@this	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/@parameter0	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.demos.scalability.Record: long getId()>/$l0	<org.prevayler.demos.scalability.Record: long getId()>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/$r0	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/$r5	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/transactionCandidate#_105	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/systemVersion#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>	@Censor
<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>/this#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>
<org.prevayler.implementation.Capsule: void <init>(byte[])>/serialized#_0	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/this#_0	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/$r1	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/$r6	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/systemVersion#_0	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/clock#_0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/$stringconstant0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/suffix#_0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>	@Snapshot
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/$stringconstant1	<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>	@Replication
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/this#_0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>	@Monitor
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/buttonPanel#_0	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>/@parameter1	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.foundation.Turn: void end()>/this#_0	<org.prevayler.foundation.Turn: void end()>
<org.prevayler.implementation.clock.MachineClock: void update()>/this#_0	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>/@parameter1	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>/$numconstant1	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <clinit>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/$numconstant0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>	@Replication
<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>/$r5	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>	@Replication
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>/this#_0	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/i_$$A_2#_30	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/$r4	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/$r4	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/this#_0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/file#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>/@this	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>	@Monitor
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/$i0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/$l0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/$r2	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/this#_0	<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>
<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>/l0#_0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>/e#_0	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/file#_0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/$i0	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/$r11	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/$r12	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/$stringconstant4	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/$r3	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/sqlx#_35	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/transactionTimestamp#_0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>	@Censor
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>/directory#_0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/@parameter0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>/$r1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/$stringconstant1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/$r5	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.FileLocker: void release()>/$r7	<org.prevayler.foundation.FileLocker: void release()>
<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>/$r2	<org.prevayler.demos.scalability.TransactionTestRun: void executeOperation(java.lang.Object,long)>
<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>/@this	<org.prevayler.foundation.network.NetworkSessionId: int hashCode()>	@Replication
<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>/$r9	<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>	@Replication
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/timeStamp#_0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/$stringconstant0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/$z0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>	@Replication
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/snapshotDirectory#_0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/$numconstant0	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>/$r6	<org.prevayler.demos.demo2.gui.AccountEditFrame: void addFields(javax.swing.Box)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/l5#_55	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>/this#_0	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/$i0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>	@GZip
<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>/$r2	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>	@Replication
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>/$r0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void action(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>/newRecords#_55	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void replaceAllRecords(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>/$r0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/ex#_0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>	@Monitor
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/@this	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>	@Replication
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/@this	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>	@Snapshot
<org.prevayler.foundation.StopWatch: double secondsEllapsed()>/$l0	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<org.prevayler.foundation.DurableInputStream: void close()>/$numconstant0	<org.prevayler.foundation.DurableInputStream: void close()>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/$r8	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>/$l4	<org.prevayler.demos.scalability.TransactionTestRun: long spreadId(long)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/$z0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/@parameter0	<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>
<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>/@parameter0	<org.prevayler.foundation.monitor.LoggingMonitor: void info(java.lang.Class,java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/newPrevalentSystem#_0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/$r5	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>/$r1	<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>	@Replication
<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>/@this	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>	@Replication
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>/object#_0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>	@Replication
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/$r5	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/@parameter0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>/this#_0	<org.prevayler.demos.demo2.business.Account: java.lang.String holder()>
<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>/$l1	<org.prevayler.foundation.network.NetworkSessionId: boolean equals(java.lang.Object)>	@Replication
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/@this	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>	@Snapshot
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/$r1	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>	@Replication
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/$r6	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/$r1	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>/$r0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>	@Snapshot
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/sqlx#_38	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/tmp$2121172055	<org.prevayler.demos.demo2.gui.AccountEditFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>/@parameter0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>/l1#_155	<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>	@Replication
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/$r0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/@parameter0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/$r0	<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>/$r0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>	@Replication
<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>/@this	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>	@Snapshot
<org.prevayler.foundation.Turn: void <init>(int)>/$numconstant0	<org.prevayler.foundation.Turn: void <init>(int)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/i_$$A_1#_53	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>/@this	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>	@GZip
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/$numconstant2	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/$r18	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/$r3	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/@parameter0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/@parameter0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>	@Replication
<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/@parameter3	<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
