<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable)>/org.prevayler.PrevaylerFactory.createPrevayler/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.createCheckpointPrevayler/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>/org.prevayler.foundation.FileManager.produceDirectory/0	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunking.validToken/0	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunking.validToken/1	<org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/org.prevayler.foundation.Chunking.readLine/0	<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>
<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>/org.prevayler.implementation.PrevaylerDirectory.version/0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>/org.prevayler.implementation.PrevaylerDirectory.version/0	<org.prevayler.implementation.PrevaylerDirectory: long version(java.io.File,java.lang.String)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.demos.demo2.MainReplica.out/0	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.demos.demo2.MainReplica.out/1	<org.prevayler.demos.demo2.MainReplica: void out(java.lang.String)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.demos.demo2.Main.startSnapshots/0	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>/org.prevayler.demos.scalability.prevayler.PrevalenceTest.delete/0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/1	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/2	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/3	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/4	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.propertiesFile/0	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/5	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/6	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.propertiesFile/1	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.isPrevaylerQueryChosen/0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.runPrevaylerQuery/0	<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.isPrevaylerTransactionChosen/0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.runPrevaylerTransaction/0	<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.isJdbcQueryChosen/0	<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.runJdbcQuery/0	<org.prevayler.demos.scalability.Main: void runJdbcQuery()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.isJdbcTransactionChosen/0	<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.runJdbcTransaction/0	<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/7	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.propertiesFile/2	<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/8	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/9	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/10	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/11	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/12	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/13	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/14	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.Main.out/15	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/org.prevayler.demos.scalability.ScalabilityTestRun.outOfMemory/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.demos.demo2.MainReplicaServer.out/0	<org.prevayler.demos.demo2.MainReplicaServer: void out(java.lang.String)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.demos.demo2.Main.startGui/0	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/org.prevayler.demos.demo2.MainTransient.out/0	<org.prevayler.demos.demo2.MainTransient: void out(java.lang.String)>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.createTransientPrevayler/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/org.prevayler.demos.demo2.Main.startGui/0	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/org.prevayler.demos.demo1.Main.printMessage/0	<org.prevayler.demos.demo1.Main: void printMessage()>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.createPrevayler/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/org.prevayler.demos.demo2.Main.out/0	<org.prevayler.demos.demo2.Main: void out(java.lang.String)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.createPrevayler/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/org.prevayler.demos.demo2.Main.startSnapshots/0	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>/org.prevayler.foundation.DeepCopier.deepCopy/0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.Cool.unexpected/0	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.demos.demo2.MainXStream.out/0	<org.prevayler.demos.demo2.MainXStream: void out(java.lang.String)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.demos.demo2.Main.startSnapshots/0	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.foundation.Cool: void wait(java.lang.Object)>/org.prevayler.foundation.Cool.unexpected/0	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.foundation.Cool: void sleep(long)>/java.lang.Thread.sleep/0	<java.lang.Thread: void sleep(long)>
<org.prevayler.foundation.Cool: void sleep(long)>/org.prevayler.foundation.Cool.unexpected/0	<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.implementation.Capsule.fromChunk/0	<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.demos.demo2.MainSkaringa.out/0	<org.prevayler.demos.demo2.MainSkaringa: void out(java.lang.String)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.demos.demo2.Main.startSnapshots/0	<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getBytes/0	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/0	<java.io.OutputStream: void write(byte[])>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getParameters/0	<org.prevayler.foundation.Chunk: java.util.Map getParameters()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/1	<java.io.OutputStream: void write(int)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/2	<java.io.OutputStream: void write(byte[])>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/3	<java.io.OutputStream: void write(int)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/4	<java.io.OutputStream: void write(byte[])>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/5	<java.io.OutputStream: void write(byte[])>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getBytes/1	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/6	<java.io.OutputStream: void write(byte[])>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.OutputStream.write/7	<java.io.OutputStream: void write(byte[])>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.writeObject/0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.readObject/0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.writeObject/0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.Cool: void wait(java.lang.Object)>/java.lang.Object.wait/0	<java.lang.Object: void wait()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getParameter/0	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getParameter/1	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/org.prevayler.demos.scalability.jdbc.JDBCQueryConnection.dealWithSQLException/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher$1: void run()>/org.prevayler.implementation.replication.ClientPublisher.access$0/0	<org.prevayler.implementation.replication.ClientPublisher: void access$0(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.access$0/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.replication.ClientPublisher.wait/0	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/java.lang.Thread.yield/0	<java.lang.Thread: void yield()>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.replication.ClientPublisher.wait/0	<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevaylerDirectory.checkValidJournalSuffix/0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevaylerDirectory.checkValidSnapshotSuffix/0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/org.prevayler.foundation.Chunking.readChunk/0	<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.demos.scalability.prevayler.PrevalenceTest.delete/0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/java.lang.System.setProperty/0	<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<org.prevayler.foundation.FileLocker: void release()>/java.lang.System.setProperty/0	<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<org.prevayler.foundation.FileLocker: void release()>/java.lang.System.setProperty/1	<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>/org.prevayler.foundation.FileManager.produceDirectory/0	<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/org.prevayler.implementation.PrevaylerDirectory.checkValidSnapshotSuffix/0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/org.prevayler.implementation.PrevaylerDirectory.checkValidJournalSuffix/0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/org.prevayler.implementation.PrevaylerDirectory.snapshotVersion/0	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/org.prevayler.demos.demo2.gui.AccountEditFrame.access$0/0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/org.prevayler.demos.demo2.gui.AccountEditFrame.access$1/0	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/java.util.Arrays.sort/0	<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/org.prevayler.implementation.PrevaylerDirectory.journalVersion/0	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/org.prevayler.demos.demo2.gui.AccountEditFrame.access$0/0	<org.prevayler.demos.demo2.gui.AccountEditFrame: java.lang.Number access$0(org.prevayler.demos.demo2.gui.AccountEditFrame,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/org.prevayler.demos.demo2.gui.AccountEditFrame.access$1/0	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.access$1/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void access$1(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void run()>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.access$0/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: boolean access$0(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/java.util.Collections.sort/0	<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/org.prevayler.foundation.Cool.startDaemon/0	<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>
<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>/org.prevayler.foundation.Cool.wait/0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/org.prevayler.implementation.PrevaylerDirectory.journalVersion/0	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/org.prevayler.implementation.PrevaylerDirectory.journalVersion/1	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/org.prevayler.foundation.Turn.first/0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.foundation.Cool.wait/0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>/org.prevayler.demos.scalability.ScalabilityTestRun.toResultString/0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/org.prevayler.demos.demo2.gui.AccountEditFrame.access$1/0	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void actionPerformed(java.awt.event.ActionEvent)>/org.prevayler.demos.demo2.gui.MatchFrame.access$0/0	<org.prevayler.demos.demo2.gui.MatchFrame: void access$0(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.Cool.wait/0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.DeepCopier.deepCopyParallel/0	<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/org.prevayler.demos.demo2.gui.BankFrame.access$0/0	<org.prevayler.demos.demo2.gui.BankFrame: org.prevayler.Prevayler access$0(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/org.prevayler.foundation.Cool.sleep/0	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/org.prevayler.demos.demo2.gui.AccountEditFrame.access$1/0	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/org.prevayler.demos.demo2.gui.AccountEditFrame.access$1/1	<org.prevayler.demos.demo2.gui.AccountEditFrame: org.prevayler.demos.demo2.business.Account access$1(org.prevayler.demos.demo2.gui.AccountEditFrame)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/org.prevayler.demos.demo2.gui.RobustAction.display/0	<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/org.prevayler.implementation.PrevaylerDirectory.checkValidJournalSuffix/0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.foundation.StopWatch.start/0	<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/org.prevayler.demos.scalability.prevayler.PrevalenceTest.delete/0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/org.prevayler.demos.demo2.gui.TransferFrame.access$0/0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$0(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/org.prevayler.demos.demo2.gui.TransferFrame.access$1/0	<org.prevayler.demos.demo2.gui.TransferFrame: javax.swing.JTextField access$1(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/org.prevayler.demos.demo2.gui.TransferFrame.access$2/0	<org.prevayler.demos.demo2.gui.TransferFrame: org.prevayler.demos.demo2.business.Account access$2(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevaylerDirectory.checkValidSnapshotSuffix/0	<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevaylerDirectory.snapshotVersion/0	<org.prevayler.implementation.PrevaylerDirectory: long snapshotVersion(java.io.File)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/org.prevayler.foundation.Cool.sleep/0	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.foundation.Turn: void start()>/org.prevayler.foundation.Cool.wait/0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$0/0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.Object access$0(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$1/0	<org.prevayler.demos.scalability.ScalabilityTestRun: boolean access$1(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$2/0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$2/1	<org.prevayler.demos.scalability.ScalabilityTestRun: java.util.List access$2(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$3/0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$3(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$4/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$4(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$5/0	<org.prevayler.demos.scalability.ScalabilityTestRun: long access$5(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$6/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$6(org.prevayler.demos.scalability.ScalabilityTestRun,long)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$7/0	<org.prevayler.demos.scalability.ScalabilityTestRun: int access$7(org.prevayler.demos.scalability.ScalabilityTestRun)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.access$8/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void access$8(org.prevayler.demos.scalability.ScalabilityTestRun,int)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void run()>/org.prevayler.demos.scalability.ScalabilityTestRun.outOfMemory/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/org.prevayler.foundation.Chunking.writeChunk/0	<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/org.prevayler.implementation.replication.ServerConnection.access$0/0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/org.prevayler.implementation.replication.ServerConnection.access$0/1	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.foundation.network.ObjectSocket access$0(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/org.prevayler.implementation.replication.ServerConnection.access$1/0	<org.prevayler.implementation.replication.ServerConnection: org.prevayler.implementation.publishing.TransactionPublisher access$1(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/java.lang.Thread.sleep/0	<java.lang.Thread: void sleep(long)>
<org.prevayler.implementation.replication.ServerConnection$1: void run()>/org.prevayler.implementation.replication.ServerConnection.access$2/0	<org.prevayler.implementation.replication.ServerConnection: void access$2(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>/org.prevayler.demos.demo2.business.Account.numberString/0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.dealWithSQLException/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/org.prevayler.demos.demo1.PrimeCalculator.start/0	<org.prevayler.demos.demo1.PrimeCalculator: void start()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/org.prevayler.implementation.snapshot.NullSnapshotManager.<init>/0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.foundation.FileManager: java.io.File produceDirectory(java.lang.String)>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.FileManager: void produceDirectory(java.io.File)>/java.io.IOException.<init>/1	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: void writeChunk(java.io.OutputStream,org.prevayler.foundation.Chunk)>/java.io.IOException.<init>/1	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/java.util.StringTokenizer.<init>/0	<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/java.util.LinkedHashMap.<init>/0	<java.util.LinkedHashMap: void <init>()>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/java.io.EOFException.<init>/0	<java.io.EOFException: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/java.io.EOFException.<init>/1	<java.io.EOFException: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/java.io.IOException.<init>/1	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>/org.prevayler.foundation.Chunk.<init>/0	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidSnapshotSuffix(java.lang.String)>/java.lang.IllegalArgumentException.<init>/0	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>/java.lang.IllegalArgumentException.<init>/0	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.demos.demo2.business.Bank.<init>/0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.lang.String)>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/java.io.FileInputStream.<init>/0	<java.io.FileInputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.demos.demo2.business.Bank.<init>/0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.demos.demo2.MainTransient: void main(java.lang.String[])>/org.prevayler.demos.demo2.business.Bank.<init>/0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/org.prevayler.demos.demo1.NumberKeeper.<init>/0	<org.prevayler.demos.demo1.NumberKeeper: void <init>()>
<org.prevayler.demos.demo1.Main: void main(java.lang.String[])>/org.prevayler.demos.demo1.PrimeCalculator.<init>/0	<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.Main: void main(java.lang.String[])>/org.prevayler.demos.demo2.business.Bank.<init>/0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object)>/org.prevayler.foundation.serialization.JavaSerializer.<init>/0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.io.ByteArrayOutputStream.<init>/0	<java.io.ByteArrayOutputStream: void <init>()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.io.ByteArrayInputStream.<init>/0	<java.io.ByteArrayInputStream: void <init>(byte[])>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.io.PipedOutputStream.<init>/0	<java.io.PipedOutputStream: void <init>()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.io.PipedInputStream.<init>/0	<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.DeepCopier$Receiver.<init>/0	<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.demos.demo2.MainXStream$1.<init>/0	<org.prevayler.demos.demo2.MainXStream$1: void <init>()>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.demos.demo2.business.Bank.<init>/0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.foundation.Cool: void unexpected(java.lang.Exception)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>(java.lang.Runnable)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.implementation.TransactionTimestamp.<init>/0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.demos.demo2.business.Bank.<init>/0	<org.prevayler.demos.demo2.business.Bank: void <init>()>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.foundation.serialization.SkaringaSerializer.<init>/0	<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>
<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>/org.prevayler.foundation.StopWatch.<init>/0	<org.prevayler.foundation.StopWatch: void <init>()>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn first()>/org.prevayler.foundation.Turn.<init>/0	<org.prevayler.foundation.Turn: void <init>(int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/org.prevayler.PrevaylerFactory.configureTransientMode/0	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.configureTransientMode/0	<org.prevayler.PrevaylerFactory: void configureTransientMode(boolean)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createCheckpointPrevayler(java.io.Serializable,java.lang.String)>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configureReplicationClient/0	<org.prevayler.PrevaylerFactory: void configureReplicationClient(java.lang.String,int)>
<org.prevayler.demos.demo2.MainReplica: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configureReplicationServer/0	<org.prevayler.PrevaylerFactory: void configureReplicationServer(int)>
<org.prevayler.demos.demo2.MainReplicaServer: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.io.PipedOutputStream.close/0	<java.io.PipedOutputStream: void close()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.io.PipedOutputStream.close/1	<java.io.PipedOutputStream: void close()>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopyParallel(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.DeepCopier$Receiver.getResult/0	<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configureSnapshotSerializer/0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.demo2.MainXStream: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/java.lang.Thread.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.foundation.Cool: void startDaemon(java.lang.Runnable)>/java.lang.Thread.start/0	<java.lang.Thread: void start()>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.configureSnapshotSerializer/0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>
<org.prevayler.demos.demo2.MainSkaringa: void main(java.lang.String[])>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler createTransientPrevayler(java.io.Serializable)>/org.prevayler.PrevaylerFactory.configureNullSnapshotManager/0	<org.prevayler.PrevaylerFactory: void configureNullSnapshotManager(org.prevayler.implementation.snapshot.NullSnapshotManager)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Record: int hashCode()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.network.NetworkSessionId: java.lang.String toString()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.lang.StringBuilder.<init>/2	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Record: void <clinit>()>/org.prevayler.demos.scalability.Record.generateLargeString/0	<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>
<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.Main.startGui/0	<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>/java.lang.Thread.sleep/0	<java.lang.Thread: void sleep(long)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/org.prevayler.demos.scalability.prevayler.PrevalenceTest.deleteDirectoryContents/0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>/java.lang.System.gc/0	<java.lang.System: void gc()>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/org.prevayler.demos.scalability.Main.out/0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/org.prevayler.demos.scalability.Main.createPropertiesFile/0	<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>
<org.prevayler.demos.scalability.Main: boolean isPrevaylerQueryChosen()>/org.prevayler.demos.scalability.Main.booleanProperty/0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/org.prevayler.demos.scalability.Main.numberOfObjects/0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/org.prevayler.demos.scalability.Main.prevaylerQueryThreadsMin/0	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/org.prevayler.demos.scalability.Main.prevaylerQueryThreadsMax/0	<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionChosen()>/org.prevayler.demos.scalability.Main.booleanProperty/0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.prevaylerTransactionLogDirectory/0	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.prevaylerJournalSerializer/0	<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.numberOfObjects/0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.prevaylerTransactionThreadsMin/0	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.prevaylerTransactionThreadsMax/0	<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.isPrevaylerTransactionConsistencyChecked/0	<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.out/0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.Main.out/1	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: boolean isJdbcQueryChosen()>/org.prevayler.demos.scalability.Main.booleanProperty/0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.Main.jdbcDriverClassName/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.Main.jdbcConnectionURL/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.Main.jdbcUser/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.Main.jdbcPassword/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.Main.numberOfObjects/0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.Main.jdbcQueryThreadsMin/0	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.Main.jdbcQueryThreadsMax/0	<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>
<org.prevayler.demos.scalability.Main: boolean isJdbcTransactionChosen()>/org.prevayler.demos.scalability.Main.booleanProperty/0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.Main.jdbcDriverClassName/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.Main.jdbcConnectionURL/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.Main.jdbcUser/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.Main.jdbcPassword/0	<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.Main.numberOfObjects/0	<org.prevayler.demos.scalability.Main: int numberOfObjects()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.Main.jdbcTransactionThreadsMin/0	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.Main.jdbcTransactionThreadsMax/0	<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>/java.lang.System.gc/0	<java.lang.System: void gc()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void outOfMemory()>/org.prevayler.demos.scalability.ScalabilityTestRun.out/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/org.prevayler.demos.scalability.jdbc.JDBCQueryConnection.table/0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/org.prevayler.foundation.serialization.SkaringaSerializer.createTransformer/0	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/org.prevayler.foundation.serialization.SkaringaSerializer.createTransformer/0	<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>
<org.prevayler.foundation.StopWatch: double secondsEllapsed()>/org.prevayler.foundation.StopWatch.millisEllapsed/0	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/org.prevayler.implementation.clock.PausableClock.resume/0	<org.prevayler.implementation.clock.PausableClock: void resume()>
<org.prevayler.implementation.clock.PausableClock: void pause()>/org.prevayler.implementation.clock.PausableClock.advanceTo/0	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>/org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject.createConnection/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/org.prevayler.PrevaylerFactory.configureJournalSerializer/0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/org.prevayler.PrevaylerFactory.configureJournalSerializer/0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/org.prevayler.PrevaylerFactory.configureJournalSerializer/0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.JavaSerializer)>/org.prevayler.PrevaylerFactory.configureSnapshotSerializer/0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.XStreamSerializer)>/org.prevayler.PrevaylerFactory.configureSnapshotSerializer/0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(org.prevayler.foundation.serialization.SkaringaSerializer)>/org.prevayler.PrevaylerFactory.configureSnapshotSerializer/0	<org.prevayler.PrevaylerFactory: void configureSnapshotSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.DeepCopier$Receiver.start/0	<java.lang.Thread: void start()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/org.prevayler.foundation.DeepCopier$Receiver.join/0	<java.lang.Thread: void join()>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/org.prevayler.foundation.monitor.LoggingMonitor.isInfoEnabled/0	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String)>/org.prevayler.foundation.monitor.LoggingMonitor.info/0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.lang.Exception)>/org.prevayler.foundation.monitor.LoggingMonitor.error/0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/org.prevayler.foundation.monitor.LoggingMonitor.isInfoEnabled/0	<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File)>/org.prevayler.foundation.monitor.LoggingMonitor.info/0	<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/org.prevayler.foundation.monitor.LoggingMonitor.error/0	<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/org.prevayler.demos.demo2.business.Bank.findAccount/0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/org.prevayler.demos.demo2.business.Bank.findAccount/0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/org.prevayler.demos.demo2.business.Bank.findAccount/1	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.lang.Object.notify/0	<java.lang.Object: void notify()>
<org.prevayler.implementation.replication.ServerConnection: void run()>/org.prevayler.implementation.replication.ServerConnection.publishRemoteTransaction/0	<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: java.lang.Object executeAndQuery(java.lang.Object,java.util.Date)>/org.prevayler.demos.demo2.business.transactions.BankTransaction.executeAndQuery/0	<org.prevayler.demos.demo2.business.transactions.AccountDeletion: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/org.prevayler.implementation.PrevaylerImpl.clock/0	<org.prevayler.implementation.PrevaylerImpl: org.prevayler.Clock clock()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/org.prevayler.implementation.PrevaylerImpl.execute/0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.Capsule.deserialize/0	<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.Capsule.justExecute/0	<org.prevayler.implementation.TransactionCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.lang.Object.notifyAll/0	<java.lang.Object: void notifyAll()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.lang.Object.notifyAll/1	<java.lang.Object: void notifyAll()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.lang.Object.notifyAll/2	<java.lang.Object: void notifyAll()>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/org.prevayler.implementation.replication.ServerListener.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/org.prevayler.implementation.replication.ServerListener.start/0	<java.lang.Thread: void start()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.journal.PersistentJournal.handle/0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.journal.PersistentJournal.handle/1	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(int)>/org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream.write/0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[])>/org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream.write/0	<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.BankFrame.setDefaultCloseOperation/0	<javax.swing.JFrame: void setDefaultCloseOperation(int)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.BankFrame.setContentPane/0	<javax.swing.JFrame: void setContentPane(java.awt.Container)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.BankFrame.setBounds/0	<javax.swing.JFrame: void setBounds(int,int,int,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.BankFrame.setVisible/0	<javax.swing.JFrame: void setVisible(boolean)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read()>/org.prevayler.foundation.gzip.MultiMemberGZIPInputStream.read/0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[])>/org.prevayler.foundation.gzip.MultiMemberGZIPInputStream.read/0	<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>
<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>/org.prevayler.implementation.TransactionWithQueryCapsule.serialized/0	<org.prevayler.implementation.Capsule: byte[] serialized()>
<org.prevayler.foundation.Turn: void end()>/org.prevayler.foundation.Turn.next/0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.foundation.Turn: void alwaysSkip()>/org.prevayler.foundation.Turn.end/0	<org.prevayler.foundation.Turn: void end()>
<org.prevayler.foundation.Turn: void alwaysSkip()>/org.prevayler.foundation.Turn.next/0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>/org.prevayler.demos.scalability.jdbc.JDBCQuerySubject.createConnection/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>
<org.prevayler.demos.demo2.business.Account: java.lang.String toString()>/org.prevayler.demos.demo2.business.Account.numberString/0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString()>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/org.prevayler.foundation.network.BaseNetworkImpl.createService/0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.ObjectReceiver findServer(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/org.prevayler.foundation.network.BaseNetworkImpl.newReceiver/0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.insert/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.Main: void <clinit>()>/java.util.Properties.<init>/0	<java.util.Properties: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/java.util.ArrayList.<init>/0	<java.util.ArrayList: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/org.prevayler.demos.scalability.Record.<init>/0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/javax.xml.transform.stream.StreamResult.<init>/0	<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>
<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/javax.xml.transform.stream.StreamSource.<init>/0	<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>
<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.clock.MachineClock: void <init>()>/org.prevayler.implementation.clock.BrokenClock.<init>/0	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>/org.prevayler.implementation.clock.MachineClock.update/0	<org.prevayler.implementation.clock.MachineClock: void update()>
<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>/org.prevayler.implementation.clock.BrokenClock.time/0	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String toString()>/org.prevayler.demos.demo2.business.AccountEntry.timestampString/0	<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/org.prevayler.demos.scalability.prevayler.AllRecordsReplacement.<init>/0	<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Record: void <init>(long)>/org.prevayler.demos.scalability.Record.<init>/0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/java.math.BigDecimal.<init>/0	<java.math.BigDecimal: void <init>(int)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/java.math.BigDecimal.<init>/1	<java.math.BigDecimal: void <init>(int)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/java.util.Date.<init>/0	<java.util.Date: void <init>(long)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/java.util.Date.<init>/1	<java.util.Date: void <init>(long)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>/org.prevayler.demos.scalability.Record.<init>/0	<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void actionPerformed(java.awt.event.ActionEvent)>/org.prevayler.demos.demo2.gui.NewAccountFrame.<init>/0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.Record: void <init>(long,java.lang.String,java.lang.String,java.math.BigDecimal,java.math.BigDecimal,java.util.Date,java.util.Date)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>/java.util.Date.<init>/0	<java.util.Date: void <init>(long)>
<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>/java.util.Date.<init>/0	<java.util.Date: void <init>(long)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/org.prevayler.implementation.clock.BrokenClock.<init>/0	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/java.lang.Object.<init>/1	<java.lang.Object: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/java.lang.Object.<init>/2	<java.lang.Object: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/org.prevayler.implementation.replication.ClientPublisher.startListening/0	<org.prevayler.implementation.replication.ClientPublisher: void startListening()>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>/org.prevayler.implementation.clock.BrokenClock.<init>/0	<org.prevayler.implementation.clock.BrokenClock: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.lang.UnsupportedOperationException.<init>/0	<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: java.lang.Object createTestConnection()>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>
<org.prevayler.implementation.replication.ClientPublisher: void cancelSubscription(org.prevayler.implementation.publishing.TransactionSubscriber)>/java.lang.UnsupportedOperationException.<init>/0	<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.business.transactions.BankTransaction.<init>/0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.replication.ClientPublisher.throwEventualErrors/0	<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/org.prevayler.foundation.network.ObjectServerSocketImpl.<init>/0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>/org.prevayler.foundation.network.NetworkServerObjectReceiverImpl.<init>/0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>
<org.prevayler.PrevaylerFactory: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.PrevaylerFactory: void <init>()>/java.util.HashMap.<init>/0	<java.util.HashMap: void <init>()>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>/java.util.Random.<init>/0	<java.util.Random: void <init>(long)>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/org.prevayler.demos.scalability.RecordIterator.indicateProgress/0	<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>
<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>/org.prevayler.demos.scalability.Record.<init>/0	<org.prevayler.demos.scalability.Record: void <init>(long,java.util.Random)>
<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.foundation.FileManager: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/org.prevayler.PrevaylerFactory.snapshotManager/0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/org.prevayler.PrevaylerFactory.publisher/0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/org.prevayler.PrevaylerFactory.network/0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/org.prevayler.implementation.replication.ServerListener.<init>/0	<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/org.prevayler.PrevaylerFactory.journalSerializer/0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>/org.prevayler.implementation.PrevaylerImpl.<init>/0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>/org.prevayler.foundation.DurableInputStream.<init>/0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/java.io.FileInputStream.<init>/0	<java.io.FileInputStream: void <init>(java.io.File)>
<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File)>/java.io.BufferedInputStream.<init>/0	<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/java.io.EOFException.<init>/0	<java.io.EOFException: void <init>()>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/org.prevayler.foundation.DurableInputStream.ignoreStreamCorruption/0	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/org.prevayler.foundation.DurableInputStream.ignoreStreamCorruption/1	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/org.prevayler.foundation.DurableInputStream.ignoreStreamCorruption/2	<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>
<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>/java.io.EOFException.<init>/1	<java.io.EOFException: void <init>()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>/org.prevayler.demos.demo2.business.transactions.AccountTransaction.<init>/0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.demos.scalability.prevayler.QuerySystem.<init>/0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>
<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>/org.prevayler.demos.demo2.business.transactions.BankTransaction.<init>/0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.Chunk: void <init>(byte[])>/java.util.LinkedHashMap.<init>/0	<java.util.LinkedHashMap: void <init>()>
<org.prevayler.foundation.Chunk: void <init>(byte[])>/org.prevayler.foundation.Chunk.<init>/0	<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>
<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.isOpen/0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean isOpen()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.attemptToForward/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.waitTillOpen/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.attemptToForward/1	<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>
<org.prevayler.foundation.Chunking: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>/org.prevayler.foundation.network.StubbornNetworkProxy.closeClientChannel/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>
<org.prevayler.foundation.DeepCopier$Receiver: void <init>(java.io.InputStream,org.prevayler.foundation.serialization.Serializer)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/java.lang.RuntimeException.<init>/1	<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.prevayler.foundation.DeepCopier$Receiver: java.lang.Object getResult()>/java.lang.RuntimeException.<init>/2	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/org.prevayler.foundation.FileLocker.propertyName/0	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/java.io.RandomAccessFile.<init>/0	<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/org.prevayler.foundation.FileLocker.propertyName/1	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/java.io.IOException.<init>/1	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/java.lang.Object.<init>/1	<java.lang.Object: void <init>()>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/java.lang.Object.<init>/2	<java.lang.Object: void <init>()>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/java.io.ByteArrayOutputStream.<init>/0	<java.io.ByteArrayOutputStream: void <init>()>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/java.io.ByteArrayOutputStream.<init>/1	<java.io.ByteArrayOutputStream: void <init>()>
<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>/java.io.FileOutputStream.<init>/0	<java.io.FileOutputStream: void <init>(java.io.File)>
<org.prevayler.foundation.FileLocker: void release()>/org.prevayler.foundation.FileLocker.propertyName/0	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.FileLocker: void release()>/org.prevayler.foundation.FileLocker.propertyName/1	<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/org.prevayler.foundation.DurableOutputStream.writeObject/0	<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/org.prevayler.foundation.DurableOutputStream.waitUntilSynced/0	<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>/org.prevayler.implementation.PrevaylerDirectory.<init>/0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>
<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.io.File)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>/org.prevayler.implementation.PrevaylerDirectory.file/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>/org.prevayler.implementation.PrevaylerDirectory.file/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: void close()>/org.prevayler.foundation.DurableOutputStream.internalClose/0	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$WithdrawAction: void action()>/org.prevayler.demos.demo2.business.transactions.Withdrawal.<init>/0	<org.prevayler.demos.demo2.business.transactions.Withdrawal: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.demo2.MainReplica: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/org.prevayler.implementation.PrevaylerDirectory$FileFilter1.<init>/0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>/org.prevayler.implementation.PrevaylerDirectory$1.<init>/0	<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.publishing.censorship.StrictTransactionCensor.royalFoodTaster/0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.publishing.censorship.StrictTransactionCensor.letTheFoodTasterDie/0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.publishing.censorship.StrictTransactionCensor.letTheFoodTasterDie/1	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void letTheFoodTasterDie()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>/java.io.OutputStream.<init>/0	<java.io.OutputStream: void <init>()>
<org.prevayler.demos.scalability.Main: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.MainReplicaServer: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>/org.prevayler.foundation.network.ObjectSocketImpl.<init>/0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>
<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>/org.prevayler.foundation.network.ObjectServerSocketImpl.<init>/0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>
<org.prevayler.demos.demo2.MainTransient: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.gui.AccountEditFrame$DepositAction: void action()>/org.prevayler.demos.demo2.business.transactions.Deposit.<init>/0	<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>
<org.prevayler.demos.demo1.Main: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.Main: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.business.Bank: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.business.Bank: void <init>()>/java.util.HashMap.<init>/0	<java.util.HashMap: void <init>()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/org.prevayler.demos.demo2.business.Account.<init>/0	<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/java.util.ArrayList.<init>/0	<java.util.ArrayList: void <init>(java.util.Collection)>
<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>/org.prevayler.demos.demo2.business.Bank$1.<init>/0	<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/org.prevayler.demos.demo2.business.Bank.searchAccount/0	<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account findAccount(long)>/org.prevayler.demos.demo2.business.Bank$AccountNotFound.<init>/0	<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>
<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.implementation.clock.BrokenClock: void <init>()>/java.util.Date.<init>/0	<java.util.Date: void <init>(long)>
<org.prevayler.implementation.clock.BrokenClock: void <init>()>/org.prevayler.implementation.clock.BrokenClock.<init>/0	<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>
<org.prevayler.implementation.clock.BrokenClock: void <init>(java.util.Date)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void <init>(java.lang.Object,java.lang.String)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.<init>/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>
<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/org.prevayler.foundation.network.ObjectSocketImpl.<init>/0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.<init>/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/java.util.LinkedList.<init>/0	<java.util.LinkedList: void <init>()>
<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>/java.lang.Object.<init>/1	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.startReading/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>
<org.prevayler.implementation.publishing.POBox: void run()>/org.prevayler.implementation.publishing.POBox.waitForNotification/0	<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.startReading/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>
<org.prevayler.demos.demo2.business.transactions.AccountCreation: void <init>(java.lang.String)>/org.prevayler.demos.demo2.business.transactions.BankTransaction.<init>/0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<org.prevayler.implementation.replication.ServerConnection: void run()>/org.prevayler.implementation.publishing.POBox.<init>/0	<org.prevayler.implementation.publishing.POBox: void <init>(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/org.prevayler.implementation.replication.ServerConnection.send/0	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>
<org.prevayler.implementation.replication.ServerConnection: void run()>/org.prevayler.implementation.replication.ServerConnection.startSendingClockTicks/0	<org.prevayler.implementation.replication.ServerConnection: void startSendingClockTicks()>
<org.prevayler.implementation.replication.ServerConnection: void run()>/org.prevayler.implementation.replication.ServerConnection.close/0	<org.prevayler.implementation.replication.ServerConnection: void close()>
<org.prevayler.implementation.replication.ServerConnection: void run()>/org.prevayler.implementation.replication.ServerConnection.close/1	<org.prevayler.implementation.replication.ServerConnection: void close()>
<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>/java.io.ObjectInputStream.<init>/0	<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.<init>/0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.replication.ServerConnection.close/0	<org.prevayler.implementation.replication.ServerConnection: void close()>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.implementation.PrevaylerDirectory$1: int compare(java.lang.Object,java.lang.Object)>/java.lang.Long.<init>/1	<java.lang.Long: void <init>(long)>
<org.prevayler.foundation.monitor.NullMonitor: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/org.prevayler.demos.scalability.prevayler.TestTransaction.<init>/0	<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevaylerImpl.<init>/0	<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.Capsule.<init>/0	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>/org.prevayler.implementation.Capsule.<init>/0	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/org.prevayler.implementation.TransactionCapsule.<init>/0	<org.prevayler.implementation.TransactionCapsule: void <init>(org.prevayler.Transaction,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>/org.prevayler.implementation.PrevaylerImpl.publish/0	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/org.prevayler.implementation.TransactionWithQueryCapsule.<init>/0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/org.prevayler.implementation.PrevaylerImpl.publish/0	<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.SureTransactionWithQuery)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/org.prevayler.implementation.clock.PausableClock.<init>/0	<org.prevayler.implementation.clock.PausableClock: void <init>(org.prevayler.Clock)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/org.prevayler.implementation.publishing.AbstractPublisher.<init>/0	<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>/java.lang.Object.<init>/1	<java.lang.Object: void <init>()>
<org.prevayler.implementation.journal.TransientJournal: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.journal.TransientJournal: void <init>()>/java.util.ArrayList.<init>/0	<java.util.ArrayList: void <init>()>
<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>/org.prevayler.implementation.publishing.CentralPublisher.<init>/0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.journal.Journal)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.publishing.CentralPublisher.publishWithoutWorryingAboutNewSubscriptions/0	<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.io.IOException.<init>/1	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/java.io.IOException.<init>/2	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.publishing.AbstractPublisher.addSubscriber/0	<org.prevayler.implementation.publishing.AbstractPublisher: void addSubscriber(org.prevayler.implementation.publishing.TransactionSubscriber)>
<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/org.prevayler.demos.scalability.prevayler.QuerySystem.put/0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/org.prevayler.demos.scalability.prevayler.QuerySystem.makeReadOnly/0	<org.prevayler.demos.scalability.prevayler.QuerySystem: void makeReadOnly()>
<org.prevayler.demos.demo2.business.transactions.Deposit: void <init>(org.prevayler.demos.demo2.business.Account,long)>/org.prevayler.demos.demo2.business.transactions.AccountTransaction.<init>/0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.network.NetworkImpl: void <init>()>/org.prevayler.foundation.network.BaseNetworkImpl.<init>/0	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.<init>/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.<init>/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$TransferAction: void action()>/org.prevayler.demos.demo2.gui.TransferFrame.<init>/0	<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/java.io.ByteArrayInputStream.<init>/0	<java.io.ByteArrayInputStream: void <init>(byte[])>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/java.lang.Error.<init>/0	<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>/java.lang.Error.<init>/0	<java.lang.Error: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.lang.Error.<init>/0	<java.lang.Error: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.refreshAccounts/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/java.lang.Error.<init>/0	<java.lang.Error: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.refreshAccounts/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountChanged()>/org.prevayler.demos.demo2.gui.AllAccountsFrame.refreshAccounts/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/java.lang.Error.<init>/0	<java.lang.Error: void <init>(java.lang.String)>
<org.prevayler.foundation.monitor.Log4jMonitor: void <init>()>/org.prevayler.foundation.monitor.LoggingMonitor.<init>/0	<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/java.lang.Error.<init>/0	<java.lang.Error: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevalentSystemGuard.<init>/0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>/java.util.zip.GZIPInputStream.<init>/0	<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/java.io.ByteArrayInputStream.<init>/0	<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>/java.io.SequenceInputStream.<init>/0	<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.demos.demo2.gui.BankFrame$1: void run()>/java.text.SimpleDateFormat.<init>/0	<java.text.SimpleDateFormat: void <init>(java.lang.String)>
<org.prevayler.implementation.replication.ServerListener: void run()>/org.prevayler.implementation.replication.ServerConnection.<init>/0	<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>/org.prevayler.foundation.network.BaseNetworkImpl.<init>/0	<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkImpl: void <init>()>/java.util.HashMap.<init>/0	<java.util.HashMap: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.<init>/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/org.prevayler.foundation.network.StubbornNetworkImpl.getSessionManager/0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>/org.prevayler.foundation.network.StubbornServerReceiverImpl.<init>/0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>
<org.prevayler.demos.demo2.gui.AccountEditFrame$HolderListener: void focusLost(java.awt.event.FocusEvent)>/org.prevayler.demos.demo2.business.transactions.HolderChange.<init>/0	<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>/org.prevayler.foundation.network.ObjectSocketImpl.<init>/0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>/org.prevayler.implementation.journal.PersistentJournal.<init>/0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.journal.PersistentJournal.isOutputJournalStillValid/0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.journal.PersistentJournal.createOutputJournal/0	<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>
<org.prevayler.foundation.DeepCopier: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>/org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject.initializePrevayler/0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: java.lang.Object createTestConnection()>/org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.journal.PersistentJournal.initializeNextTransaction/0	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.journal.PersistentJournal.recoverPendingTransactions/0	<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.journal.PersistentJournal.initializeNextTransaction/1	<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject.initializePrevayler/0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.publishing.AbstractPublisher: void <init>(org.prevayler.Clock)>/java.util.LinkedList.<init>/0	<java.util.LinkedList: void <init>()>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.serialization.JavaSerializer: void <init>(java.lang.ClassLoader)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.io.ObjectOutputStream.<init>/0	<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/org.prevayler.foundation.ObjectInputStreamWithClassLoader.<init>/0	<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>
<org.prevayler.demos.demo2.MainXStream: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.<init>/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void action()>/org.prevayler.demos.demo2.business.transactions.Transfer.<init>/0	<org.prevayler.demos.demo2.business.transactions.Transfer: void <init>(long,long,long)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void <init>(int)>/java.net.ServerSocket.<init>/0	<java.net.ServerSocket: void <init>(int)>
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>()>/org.prevayler.foundation.monitor.SimpleMonitor.<init>/0	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>/org.prevayler.foundation.network.ObjectSocketImpl.<init>/0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>/org.prevayler.foundation.monitor.LoggingMonitor.<init>/0	<org.prevayler.foundation.monitor.LoggingMonitor: void <init>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/java.lang.IllegalArgumentException.<init>/0	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.readSnapshot/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevalentSystemGuard.<init>/0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/java.io.OutputStream.<init>/0	<java.io.OutputStream: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void <init>(java.io.OutputStream)>/org.prevayler.foundation.gzip.NonCloseableOutputStream.<init>/0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/java.util.zip.GZIPOutputStream.<init>/0	<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void close()>/java.lang.UnsupportedOperationException.<init>/0	<java.lang.UnsupportedOperationException: void <init>()>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/javax.swing.JFrame.<init>/0	<javax.swing.JFrame: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/javax.swing.JDesktopPane.<init>/0	<javax.swing.JDesktopPane: void <init>()>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.<init>/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.<init>/0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.MatchFrame.<init>/0	<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.BankFrame.refreshClock/0	<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>/java.io.InputStream.<init>/0	<java.io.InputStream: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void <init>(java.io.InputStream)>/org.prevayler.foundation.gzip.ContinuableGZIPInputStream.<init>/0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/org.prevayler.foundation.gzip.ContinuableGZIPInputStream.<init>/0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: void <init>(java.io.InputStream)>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void close()>/java.lang.UnsupportedOperationException.<init>/0	<java.lang.UnsupportedOperationException: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void reset()>/java.lang.UnsupportedOperationException.<init>/0	<java.lang.UnsupportedOperationException: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: void mark(int)>/java.lang.UnsupportedOperationException.<init>/0	<java.lang.UnsupportedOperationException: void <init>()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: long skip(long)>/java.lang.UnsupportedOperationException.<init>/0	<java.lang.UnsupportedOperationException: void <init>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.writeSnapshot/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.snapshotFile/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/org.prevayler.demos.demo2.business.transactions.AccountTransaction.<init>/0	<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/org.prevayler.foundation.network.NetworkSessionId.<init>/0	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/java.lang.Thread.setName/0	<java.lang.Thread: void setName(java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/java.lang.Thread.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.StubbornNetwork,java.lang.String,int,org.prevayler.foundation.network.ObjectReceiver)>/java.lang.Thread.start/0	<java.lang.Thread: void start()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.Service)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.foundation.Cool: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.waitIfNotOpen/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receive(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.forwardToProvider/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void close()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.shutdown/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>
<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(org.prevayler.TransactionWithQuery,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.Capsule.<init>/0	<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>/org.prevayler.implementation.Capsule.<init>/0	<org.prevayler.implementation.Capsule: void <init>(byte[])>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.sendSessionKey/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.startReading/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.closeForReconnect/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>
<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>/org.prevayler.implementation.TransactionWithQueryCapsule.<init>/0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>/org.prevayler.implementation.TransactionTimestamp.<init>/0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>/java.util.Date.<init>/0	<java.util.Date: void <init>(long)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/org.prevayler.implementation.TransactionTimestamp.<init>/0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>
<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>/org.prevayler.foundation.Turn.<init>/0	<org.prevayler.foundation.Turn: void <init>(int)>
<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.<init>/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/org.prevayler.demos.scalability.prevayler.TransactionSystem.put/0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/org.prevayler.demos.scalability.prevayler.TransactionSystem.put/1	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/java.net.Socket.<init>/0	<java.net.Socket: void <init>(java.lang.String,int)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.lang.String,int)>/org.prevayler.foundation.network.ObjectSocketImpl.<init>/0	<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/org.prevayler.demos.scalability.prevayler.TransactionSystem.put/0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/java.io.ObjectOutputStream.<init>/0	<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<org.prevayler.foundation.network.ObjectSocketImpl: void <init>(java.net.Socket)>/java.io.ObjectInputStream.<init>/0	<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<org.prevayler.demos.demo2.MainSkaringa: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>/org.prevayler.foundation.Guided.<init>/0	<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.SessionsManager)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void <init>(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.SessionsManager)>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl.<init>/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void <init>(org.prevayler.foundation.network.ObjectSocket,org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void receive(java.lang.Object)>/org.prevayler.foundation.network.StubbornServerReceiverImpl.handleSession/0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: java.lang.Object createTestConnection()>/org.prevayler.demos.scalability.jdbc.JDBCQueryConnection.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>/org.prevayler.foundation.network.SessionsManagerImpl.<init>/0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/org.prevayler.foundation.network.NetworkSessionId.<init>/0	<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void executeOn(java.lang.Object,java.util.Date)>/org.prevayler.demos.scalability.RecordIterator.<init>/0	<org.prevayler.demos.scalability.RecordIterator: void <init>(int)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>/org.prevayler.foundation.serialization.XStreamSerializer$1.<init>/0	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.serialization.XStreamSerializer: void <init>(java.lang.String)>/org.prevayler.foundation.serialization.XStreamSerializer$1.<init>/0	<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.io.OutputStreamWriter.<init>/0	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.io.OutputStreamWriter.<init>/1	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/org.prevayler.foundation.serialization.XStreamSerializer.getXStream/0	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/org.prevayler.foundation.serialization.XStreamSerializer.getXStream/0	<org.prevayler.foundation.serialization.XStreamSerializer: com.thoughtworks.xstream.XStream getXStream()>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/java.io.InputStreamReader.<init>/0	<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>/java.io.InputStreamReader.<init>/1	<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>/org.prevayler.demos.demo2.business.Account.verify/0	<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>/org.prevayler.demos.demo2.business.Account.notifyListeners/0	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/org.prevayler.demos.demo2.business.Account.verify/0	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>/org.prevayler.demos.demo2.business.Account.register/0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/org.prevayler.demos.demo2.business.Account.verify/0	<org.prevayler.demos.demo2.business.Account: void verify(long)>
<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>/org.prevayler.demos.demo2.business.Account.register/0	<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/org.prevayler.demos.demo2.business.Account.listeners/0	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>/org.prevayler.demos.demo2.business.Account.listeners/0	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.BaseNetworkImpl: void <init>()>/java.util.HashMap.<init>/0	<java.util.HashMap: void <init>()>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/org.prevayler.foundation.network.BaseNetworkImpl.checkPortNotUsed/0	<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void startService(org.prevayler.foundation.network.Service,int)>/org.prevayler.foundation.network.BaseNetworkImpl.markPortAsUsed/0	<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/org.prevayler.foundation.network.BaseNetworkImpl.locateService/0	<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/org.prevayler.foundation.network.BaseNetworkImpl.terminateService/0	<org.prevayler.foundation.network.BaseNetworkImpl: void terminateService(org.prevayler.foundation.network.NetworkServerObjectReceiver)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/org.prevayler.foundation.network.BaseNetworkImpl.releasePortForReuse/0	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void stopService(int)>/org.prevayler.foundation.network.BaseNetworkImpl.releasePortForReuse/1	<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.update/0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void performTransaction(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.delete/0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.writeObject/0	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.foundation.DeepCopier: java.lang.Object deepCopy(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.readObject/0	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.util.List queryByName(java.lang.String)>/java.util.ArrayList.add/0	<java.util.ArrayList: boolean add(java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>/org.prevayler.foundation.network.OldNetwork.openSocket/0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>
<org.prevayler.demos.demo2.business.transactions.AccountDeletion: void <init>(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.business.Account.number/0	<org.prevayler.demos.demo2.business.Account: long number()>
<org.prevayler.demos.demo2.business.transactions.Withdrawal: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/org.prevayler.demos.demo2.business.Account.withdraw/0	<org.prevayler.demos.demo2.business.Account: void withdraw(long,java.util.Date)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.PrevaylerFactory.configureTransactionFiltering/0	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.demos.demo2.business.transactions.Transfer: java.lang.Object executeAndQuery(org.prevayler.demos.demo2.business.Bank,java.util.Date)>/org.prevayler.demos.demo2.business.Bank.transfer/0	<org.prevayler.demos.demo2.business.Bank: void transfer(long,long,long,java.util.Date)>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/org.prevayler.foundation.Guided.startTurn/0	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/org.prevayler.foundation.Guided.endTurn/0	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>/org.prevayler.foundation.Guided.endTurn/1	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.recoveredPrevalentSystem/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.primarySerializer/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.cleanCopy/0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.systemVersion/0	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.implementation.replication.ServerConnection: void run()>/org.prevayler.implementation.publishing.POBox.waitToEmpty/0	<org.prevayler.implementation.publishing.POBox: void waitToEmpty()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.capsule/0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.systemVersion/0	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.executionTime/0	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.TransactionWithQuery)>/org.prevayler.implementation.TransactionWithQueryCapsule.result/0	<org.prevayler.implementation.TransactionWithQueryCapsule: java.lang.Object result()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.startTurn/0	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.checkSystemVersion/0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.timestamp/0	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/0	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/1	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.publishing.TransactionSubscriber.receive/0	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/org.prevayler.demos.scalability.RecordIterator.next/0	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/org.prevayler.demos.scalability.RecordIterator.hasNext/0	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.demos.demo2.business.transactions.Deposit: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/org.prevayler.demos.demo2.business.Account.deposit/0	<org.prevayler.demos.demo2.business.Account: void deposit(long,java.util.Date)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.readObject/0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/org.prevayler.implementation.publishing.TransactionPublisher.subscribe/0	<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.capsule/0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.systemVersion/0	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.TransactionTimestamp.executionTime/0	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.business.Account.addAccountListener/0	<org.prevayler.demos.demo2.business.Account: void addAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/org.prevayler.Clock.time/0	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.business.Account.removeAccountListener/0	<org.prevayler.demos.demo2.business.Account: void removeAccountListener(org.prevayler.demos.demo2.business.AccountListener)>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.writeSnapshot/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>
<org.prevayler.implementation.replication.ServerListener: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.OldNetwork,int)>/org.prevayler.foundation.network.OldNetwork.openObjectServerSocket/0	<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectServerSocket openObjectServerSocket(int)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.startTurn/0	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.checkSystemVersion/0	<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/0	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/1	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.startTurn/1	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/2	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/3	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.io.ObjectOutputStream.writeObject/0	<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.io.ObjectOutputStream.close/0	<java.io.ObjectOutputStream: void close()>
<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>/java.io.ObjectInputStream.close/0	<java.io.ObjectInputStream: void close()>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/javax.swing.JDesktopPane.add/0	<javax.swing.JDesktopPane: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>/javax.swing.JDesktopPane.add/1	<javax.swing.JDesktopPane: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.demo2.business.transactions.HolderChange: void executeAndQuery(org.prevayler.demos.demo2.business.Account,java.util.Date)>/org.prevayler.demos.demo2.business.Account.holder/0	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/org.prevayler.demos.scalability.RecordIterator.next/0	<org.prevayler.demos.scalability.RecordIterator: org.prevayler.demos.scalability.Record next()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void replaceAllRecords(org.prevayler.demos.scalability.RecordIterator)>/org.prevayler.demos.scalability.RecordIterator.hasNext/0	<org.prevayler.demos.scalability.RecordIterator: boolean hasNext()>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getParameter/0	<org.prevayler.foundation.Chunk: java.lang.String getParameter(java.lang.String)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getBytes/0	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.foundation.Chunk.getBytes/1	<org.prevayler.foundation.Chunk: byte[] getBytes()>
<org.prevayler.demos.demo2.gui.RobustAction: void display(java.lang.Exception)>/javax.swing.JOptionPane.showMessageDialog/0	<javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>
<org.prevayler.demos.scalability.Main: void main(java.lang.String[])>/java.util.Properties.load/0	<java.util.Properties: void load(java.io.InputStream)>
<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>/java.io.OutputStreamWriter.flush/0	<java.io.OutputStreamWriter: void flush()>
<org.prevayler.demos.demo1.Main: void printMessage()>/java.io.BufferedReader.readLine/0	<java.io.BufferedReader: java.lang.String readLine()>
<org.prevayler.demos.scalability.Record: void <clinit>()>/java.util.Random.<init>/0	<java.util.Random: void <init>()>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/java.io.ByteArrayOutputStream.<init>/0	<java.io.ByteArrayOutputStream: void <init>()>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/java.io.EOFException.<init>/0	<java.io.EOFException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.io.File propertiesFile()>/java.io.File.<init>/0	<java.io.File: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void <init>()>
<org.prevayler.demos.scalability.Main: void runPrevaylerQuery()>/org.prevayler.demos.scalability.QueryTestRun.<init>/0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void <init>(java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.TransactionTestRun.<init>/0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.jdbc.JDBCQuerySubject.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCQuerySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcQuery()>/org.prevayler.demos.scalability.QueryTestRun.<init>/0	<org.prevayler.demos.scalability.QueryTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionSubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.prevayler.demos.scalability.Main: void runJdbcTransaction()>/org.prevayler.demos.scalability.TransactionTestRun.<init>/0	<org.prevayler.demos.scalability.TransactionTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>
<org.prevayler.demos.demo2.Main: void startGui(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.BankFrame.<init>/0	<org.prevayler.demos.demo2.gui.BankFrame: void <init>(org.prevayler.Prevayler)>
<org.prevayler.demos.demo1.Main: void printMessage()>/java.io.InputStreamReader.<init>/0	<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<org.prevayler.demos.demo1.Main: void printMessage()>/java.io.BufferedReader.<init>/0	<java.io.BufferedReader: void <init>(java.io.Reader)>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.implementation.TransactionWithQueryCapsule.<init>/0	<org.prevayler.implementation.TransactionWithQueryCapsule: void <init>(byte[])>
<org.prevayler.implementation.Capsule: org.prevayler.implementation.Capsule fromChunk(org.prevayler.foundation.Chunk)>/org.prevayler.implementation.TransactionCapsule.<init>/0	<org.prevayler.implementation.TransactionCapsule: void <init>(byte[])>
<org.prevayler.implementation.clock.PausableClock: void pause()>/org.prevayler.Clock.time/0	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>/org.prevayler.implementation.clock.BrokenClock.advanceTo/0	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>/org.prevayler.Clock.time/0	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<org.prevayler.foundation.DeepCopier$Receiver: void run()>/org.prevayler.foundation.serialization.Serializer.readObject/0	<org.prevayler.foundation.serialization.SkaringaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/java.io.RandomAccessFile.close/0	<java.io.RandomAccessFile: void close()>
<org.prevayler.foundation.FileLocker: void <init>(java.io.File)>/java.io.RandomAccessFile.close/1	<java.io.RandomAccessFile: void close()>
<org.prevayler.foundation.FileLocker: void release()>/java.io.RandomAccessFile.close/0	<java.io.RandomAccessFile: void close()>
<org.prevayler.foundation.FileLocker: void release()>/java.io.RandomAccessFile.close/1	<java.io.RandomAccessFile: void close()>
<org.prevayler.foundation.DurableOutputStream: void close()>/java.io.FileOutputStream.close/0	<java.io.FileOutputStream: void close()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>/java.io.OutputStream.flush/0	<java.io.OutputStream: void flush()>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(int)>/java.io.OutputStream.write/0	<java.io.OutputStream: void write(int)>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[])>/java.io.OutputStream.write/0	<java.io.OutputStream: void write(byte[])>
<org.prevayler.foundation.gzip.NonCloseableOutputStream: void write(byte[],int,int)>/java.io.OutputStream.write/0	<java.io.OutputStream: void write(byte[],int,int)>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account createAccount(java.lang.String)>/org.prevayler.demos.demo2.business.BankListener.accountCreated/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountCreated(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.business.Bank: void deleteAccount(long)>/org.prevayler.demos.demo2.business.BankListener.accountDeleted/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void accountDeleted(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>
<org.prevayler.implementation.publishing.POBox: void run()>/org.prevayler.implementation.publishing.TransactionSubscriber.receive/0	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>/org.prevayler.foundation.network.ObjectSocket.writeObject/0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>/org.prevayler.foundation.network.ObjectSocket.close/0	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.recoveredPrevalentSystem/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.implementation.PrevalentSystemGuard recoveredPrevalentSystem()>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.publishing.TransactionPublisher.clock/0	<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.Clock clock()>
<org.prevayler.implementation.PrevaylerImpl: void close()>/org.prevayler.implementation.publishing.TransactionPublisher.close/0	<org.prevayler.implementation.replication.ClientPublisher: void close()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/java.lang.Object.notifyAll/0	<java.lang.Object: void notifyAll()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/java.lang.Object.notifyAll/1	<java.lang.Object: void notifyAll()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.journal.Journal.update/0	<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.journal.Journal.nextTransaction/0	<org.prevayler.implementation.journal.TransientJournal: long nextTransaction()>
<org.prevayler.implementation.publishing.CentralPublisher: void close()>/org.prevayler.implementation.journal.Journal.close/0	<org.prevayler.implementation.journal.TransientJournal: void close()>
<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String)>/org.prevayler.implementation.PrevaylerDirectory.produceDirectory/0	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.PrevaylerDirectory.findInitialJournalFile/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>
<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>/java.net.ServerSocket.close/0	<java.net.ServerSocket: void close()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevaylerDirectory.produceDirectory/0	<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevaylerDirectory.latestSnapshot/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File latestSnapshot()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void write(byte[],int,int)>/java.util.zip.GZIPOutputStream.write/0	<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/java.util.zip.GZIPOutputStream.close/0	<java.util.zip.GZIPOutputStream: void close()>
<org.prevayler.foundation.gzip.MultiMemberGZIPOutputStream: void flush()>/java.io.OutputStream.flush/0	<org.prevayler.foundation.gzip.NonCloseableOutputStream: void flush()>
<org.prevayler.foundation.gzip.MultiMemberGZIPInputStream: int read(byte[],int,int)>/org.prevayler.foundation.gzip.ContinuableGZIPInputStream.remainingInput/0	<org.prevayler.foundation.gzip.ContinuableGZIPInputStream: java.io.InputStream remainingInput()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/org.prevayler.implementation.PrevaylerDirectory.createTempFile/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File createTempFile(java.lang.String,java.lang.String)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void run()>/org.prevayler.foundation.network.StubbornNetwork.newInstance/0	<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.ObjectSocket newInstance(java.lang.String,int)>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/java.io.ObjectOutputStream.writeObject/0	<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/java.io.ObjectOutputStream.reset/0	<java.io.ObjectOutputStream: void reset()>
<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>/java.io.ObjectOutputStream.flush/0	<java.io.ObjectOutputStream: void flush()>
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/java.io.ObjectOutputStream.close/0	<java.io.ObjectOutputStream: void close()>
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/java.io.ObjectInputStream.close/0	<java.io.ObjectInputStream: void close()>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/org.prevayler.implementation.TransactionTimestamp.systemVersion/0	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>/org.prevayler.implementation.TransactionTimestamp.systemVersion/1	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>/org.prevayler.implementation.TransactionTimestamp.executionTime/0	<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>
<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>/org.prevayler.implementation.TransactionTimestamp.toChunk/0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void disconnect()>/org.prevayler.foundation.network.SessionsManager.remove/0	<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>/java.io.ByteArrayOutputStream.write/0	<java.io.ByteArrayOutputStream: void write(int)>
<org.prevayler.demos.scalability.Main: void runPrevaylerTransaction()>/org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject.isConsistent/0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>()>
<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>/java.util.Arrays.fill/0	<java.util.Arrays: void fill(char[],char)>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/org.prevayler.demos.scalability.prevayler.PrevalenceTest.delete/0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void delete(java.io.File)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/org.prevayler.demos.scalability.Main.property/1	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/org.prevayler.demos.scalability.Main.out/0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/org.prevayler.demos.scalability.Main.out/1	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMin()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: int prevaylerQueryThreadsMax()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/org.prevayler.demos.scalability.Main.out/0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/org.prevayler.demos.scalability.Main.out/0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMin()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: int prevaylerTransactionThreadsMax()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean isPrevaylerTransactionConsistencyChecked()>/org.prevayler.demos.scalability.Main.booleanProperty/0	<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcDriverClassName()>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcConnectionURL()>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcUser()>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String jdbcPassword()>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMin()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: int jdbcQueryThreadsMax()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMin()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.demos.scalability.Main: int jdbcTransactionThreadsMax()>/org.prevayler.demos.scalability.Main.intProperty/0	<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>
<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>/org.prevayler.Clock.time/0	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>/org.prevayler.Clock.time/0	<org.prevayler.implementation.clock.MachineClock: java.util.Date time()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/org.prevayler.demos.demo1.PrimeCalculator.isPrime/0	<org.prevayler.demos.demo1.PrimeCalculator: boolean isPrime(int)>
<org.prevayler.demos.demo1.NumberKeeper: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.MainXStream$1: void <init>()>/org.prevayler.foundation.serialization.XStreamSerializer.<init>/0	<org.prevayler.foundation.serialization.XStreamSerializer: void <init>()>
<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,long)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.StopWatch: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.Turn: void <init>(int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>/java.text.DecimalFormat.<init>/0	<java.text.DecimalFormat: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>/java.text.DecimalFormat.<init>/0	<java.text.DecimalFormat: void <init>(java.lang.String)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/org.prevayler.implementation.journal.PersistentJournal.hang/0	<org.prevayler.implementation.journal.PersistentJournal: void hang()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.dealWithSQLException/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/java.lang.System.gc/0	<java.lang.System: void gc()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/java.lang.Class.forName/0	<java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/org.prevayler.demos.scalability.RecordIterator.out/0	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/org.prevayler.demos.scalability.RecordIterator.out/1	<org.prevayler.demos.scalability.RecordIterator: void out(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>/java.lang.System.gc/0	<java.lang.System: void gc()>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/org.prevayler.demos.demo2.business.Account.numberString/0	<org.prevayler.demos.demo2.business.Account: java.lang.String numberString(long)>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/org.prevayler.foundation.Cool.wait/0	<org.prevayler.foundation.Cool: void wait(java.lang.Object)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.PrevaylerDirectory.journalVersion/0	<org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.TransactionTimestamp.fromChunk/0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.PrevaylerDirectory.renameUnusedFile/0	<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.out/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.out/1	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.out/2	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.dealWithSQLException/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void delete(long)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.dealWithSQLException/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.foundation.Turn: void end()>/org.prevayler.foundation.Turn.haveSomeTickets/0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.foundation.Turn: void alwaysSkip()>/org.prevayler.foundation.Turn.haveSomeTickets/0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/org.prevayler.demos.demo1.NumberStorageTransaction.<init>/0	<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>
<org.prevayler.demos.demo1.NumberKeeper: void <init>()>/java.util.ArrayList.<init>/0	<java.util.ArrayList: void <init>()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: boolean booleanProperty(java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerTransactionLogDirectory()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: java.lang.String prevaylerJournalSerializer()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.clock.MachineClock: void update()>/org.prevayler.implementation.clock.MachineClock.advanceTo/0	<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.NewAccountFrame.setBounds/0	<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.table/0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.prepare/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.table/1	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection.prepare/1	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/org.prevayler.foundation.network.NetworkServerObjectReceiverImpl.setName/0	<java.lang.Thread: void setName(java.lang.String)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/org.prevayler.foundation.network.NetworkServerObjectReceiverImpl.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/org.prevayler.foundation.network.NetworkServerObjectReceiverImpl.start/0	<java.lang.Thread: void start()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>/java.lang.Object.wait/0	<java.lang.Object: void wait()>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/org.prevayler.demos.demo2.business.Account.holder/0	<org.prevayler.demos.demo2.business.Account: void holder(java.lang.String)>
<org.prevayler.implementation.replication.ServerConnection: void close()>/org.prevayler.implementation.replication.ServerConnection.interrupt/0	<java.lang.Thread: void interrupt()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.prevayler.QuerySystem.queryByName/0	<org.prevayler.demos.scalability.prevayler.QuerySystem: java.util.List queryByName(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.TransferFrame.setBounds/0	<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/org.prevayler.implementation.replication.ServerConnection.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/org.prevayler.implementation.replication.ServerConnection.start/0	<java.lang.Thread: void start()>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/org.prevayler.implementation.journal.PersistentJournal.handle/0	<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.name/0	<org.prevayler.demos.scalability.TransactionTestRun: java.lang.String name()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.name/0	<org.prevayler.demos.scalability.QueryTestRun: java.lang.String name()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.prepare/0	<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.prepare/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.getResult/0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String getResult()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.setBounds/0	<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.show/0	<javax.swing.JInternalFrame: void show()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.setContentPane/0	<javax.swing.JInternalFrame: void setContentPane(java.awt.Container)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.setBackground/0	<javax.swing.JInternalFrame: void setBackground(java.awt.Color)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.setBounds/0	<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.setVisible/0	<javax.swing.JInternalFrame: void setVisible(boolean)>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.MatchFrame.setVisible/0	<javax.swing.JInternalFrame: void setVisible(boolean)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.primarySerializer/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: org.prevayler.foundation.serialization.Serializer primarySerializer()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.networkRequestToReceive/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCQueryConnection.table/0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCQueryConnection.prepare/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionTimestamp.cleanCopy/0	<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>
<org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>/java.lang.Object.wait/0	<java.lang.Object: void wait()>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/org.prevayler.foundation.monitor.Monitor.notify/0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getId/0	<org.prevayler.demos.scalability.Record: long getId()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getName/0	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getString1/0	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getBigDecimal1/0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getBigDecimal2/0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getDate1/0	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getDate2/0	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/org.prevayler.foundation.monitor.Monitor.notify/0	<org.prevayler.foundation.monitor.NullMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.business.Account.number/0	<org.prevayler.demos.demo2.business.Account: long number()>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/org.prevayler.foundation.Guided.writeTo/0	<org.prevayler.implementation.TransactionGuide: void writeTo(java.io.OutputStream)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/java.io.ByteArrayOutputStream.writeTo/0	<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/java.io.ByteArrayOutputStream.reset/0	<java.io.ByteArrayOutputStream: void reset()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/java.io.FileOutputStream.flush/0	<java.io.FileOutputStream: void flush()>
<org.prevayler.implementation.publishing.POBox: org.prevayler.implementation.TransactionTimestamp waitForNotification()>/java.lang.Object.notify/0	<java.lang.Object: void notify()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.writeObject/0	<org.prevayler.foundation.serialization.SkaringaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.publishing.TransactionPublisher.publish/0	<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.journal.Journal.append/0	<org.prevayler.implementation.journal.TransientJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/org.prevayler.implementation.PrevaylerDirectory.journalFile/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.publishing.TransactionSubscriber.receive/0	<org.prevayler.implementation.publishing.POBox: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.PrevaylerDirectory.journalFile/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestSubject.name/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.lang.String name()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.io.File snapshotFile(long)>/org.prevayler.implementation.PrevaylerDirectory.snapshotFile/0	<org.prevayler.implementation.PrevaylerDirectory: java.io.File snapshotFile(long,java.lang.String)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getId/0	<org.prevayler.demos.scalability.Record: long getId()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getName/0	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getString1/0	<org.prevayler.demos.scalability.Record: java.lang.String getString1()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getBigDecimal1/0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal1()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getBigDecimal2/0	<org.prevayler.demos.scalability.Record: java.math.BigDecimal getBigDecimal2()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getDate1/0	<org.prevayler.demos.scalability.Record: java.util.Date getDate1()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getDate2/0	<org.prevayler.demos.scalability.Record: java.util.Date getDate2()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getId/0	<org.prevayler.demos.scalability.Record: long getId()>
<org.prevayler.foundation.monitor.Log4jMonitor: boolean isInfoEnabled(java.lang.Class)>/org.prevayler.foundation.monitor.Log4jMonitor.logger/0	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>
<org.prevayler.foundation.monitor.Log4jMonitor: void info(java.lang.Class,java.lang.String)>/org.prevayler.foundation.monitor.Log4jMonitor.log/0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>
<org.prevayler.foundation.monitor.Log4jMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/org.prevayler.foundation.monitor.Log4jMonitor.log/0	<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/org.prevayler.implementation.replication.ServerConnection.send/0	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>
<org.prevayler.implementation.replication.ServerConnection: void publishRemoteTransaction()>/org.prevayler.implementation.replication.ServerConnection.send/1	<org.prevayler.implementation.replication.ServerConnection: void send(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.AllRecordsReplacement: void <init>(int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AccountFrame.<init>/0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectServerSocket)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.PrevaylerFactory.prevalenceDirectory/0	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.PrevaylerFactory.prevalentSystem/0	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.PrevaylerFactory.journalSerializer/0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.PrevaylerFactory.prevalentSystem/1	<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.PrevaylerFactory.journalSerializer/1	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.PrevaylerFactory.network/0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.PrevaylerFactory.clock/0	<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.PrevaylerFactory.censor/0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.PrevaylerFactory.journal/0	<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>
<org.prevayler.demos.demo2.business.transactions.AccountTransaction: void <init>(org.prevayler.demos.demo2.business.Account)>/org.prevayler.demos.demo2.business.transactions.BankTransaction.<init>/0	<org.prevayler.demos.demo2.business.transactions.BankTransaction: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQueryConnection: void <init>(org.prevayler.demos.scalability.prevayler.QuerySystem)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.closeClientChannel/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void closeClientChannel()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.waitTillOpen/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void waitTillOpen()>
<org.prevayler.foundation.network.StubbornNetworkProxy: void attemptToForward(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.forwarded/0	<org.prevayler.foundation.network.StubbornNetworkProxy: boolean forwarded(java.lang.Object)>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/org.prevayler.foundation.DurableOutputStream.internalClose/0	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/org.prevayler.foundation.DurableOutputStream.internalClose/0	<org.prevayler.foundation.DurableOutputStream: void internalClose()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory,org.prevayler.implementation.PrevaylerDirectory$FileFilter1)>/org.prevayler.implementation.PrevaylerDirectory$FileFilter1.<init>/0	<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>
<org.prevayler.implementation.PrevaylerDirectory$1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: org.prevayler.implementation.PrevalentSystemGuard royalFoodTaster(long)>/org.prevayler.implementation.publishing.censorship.StrictTransactionCensor.produceNewFoodTaster/0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.business.Bank$1: void <init>(org.prevayler.demos.demo2.business.Bank)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/java.lang.Exception.<init>/0	<java.lang.Exception: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.prevayler.TestTransaction: void <init>(org.prevayler.demos.scalability.Record,org.prevayler.demos.scalability.Record,long)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.Capsule: void <init>(byte[])>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.publishing.CentralPublisher.approve/0	<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.publishing.CentralPublisher.notifySubscribers/0	<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AccountFrame.<init>/0	<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>/org.prevayler.demos.demo2.gui.AllAccountsFrame.accounts/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.implementation.replication.ServerConnection: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.network.ObjectSocket)>/org.prevayler.implementation.replication.ServerConnection.createClockTickSender/0	<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/org.prevayler.implementation.journal.PersistentJournal.isOutputJournalTooBig/0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>/org.prevayler.implementation.journal.PersistentJournal.isOutputJournalTooOld/0	<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionConnection: void <init>(org.prevayler.Prevayler)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.performTest/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JInternalFrame.<init>/0	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.bank/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.listenToAccounts/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.refreshAccounts/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.accountButtons/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/javax.swing.JInternalFrame.<init>/0	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.addLine/0	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.addLine/1	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame.addLine/2	<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/javax.swing.JInternalFrame.<init>/0	<javax.swing.JInternalFrame: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.MatchFrame.initUI/0	<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>
<org.prevayler.demos.demo2.gui.MatchFrame: void <init>(org.prevayler.Prevayler)>/org.prevayler.demos.demo2.gui.MatchFrame.refreshTable/0	<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>
<org.prevayler.foundation.network.NetworkSessionId: void <init>(long,int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitIfNotOpen()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.sessionIsConnected/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.shutdown/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.waitToResend/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.sessionIsOpen/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsOpen()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void shutdown()>/org.prevayler.foundation.network.StubbornClientReceiverImpl.closeForReconnect/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>
<org.prevayler.foundation.Guided: void <init>(org.prevayler.foundation.Turn)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/org.prevayler.foundation.network.StubbornServerReceiverImpl.closeSession/0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/org.prevayler.foundation.network.StubbornServerReceiverImpl.reestablishSession/0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/org.prevayler.foundation.network.StubbornServerReceiverImpl.send/0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.<init>/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.foundation.serialization.XStreamSerializer$1: void <init>(org.prevayler.foundation.serialization.XStreamSerializer)>/java.lang.ThreadLocal.<init>/0	<java.lang.ThreadLocal: void <init>()>
<org.prevayler.demos.demo2.business.Account: void notifyListeners()>/org.prevayler.demos.demo2.business.Account.listeners/0	<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/org.prevayler.demos.demo2.business.Account.notifyListeners/0	<org.prevayler.demos.demo2.business.Account: void notifyListeners()>
<org.prevayler.demos.scalability.Record: java.lang.String generateLargeString()>/java.lang.String.<init>/0	<java.lang.String: void <init>(char[])>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest: void deleteDirectoryContents(java.io.File)>/org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/java.io.FileOutputStream.<init>/0	<java.io.FileOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/java.io.PrintStream.<init>/0	<java.io.PrintStream: void <init>(java.io.OutputStream)>
<org.prevayler.demos.scalability.Main: int numberOfObjects()>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void <init>(java.sql.Connection)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.RecordIterator: void indicateProgress()>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>()>
<org.prevayler.foundation.FileLocker: java.lang.String propertyName()>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.Bank$AccountNotFound: void <init>(org.prevayler.demos.demo2.business.Bank,long)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: void <init>(java.sql.Connection)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.Guided: void startTurn()>/org.prevayler.foundation.Turn.start/0	<org.prevayler.foundation.Turn: void start()>
<org.prevayler.foundation.Guided: void endTurn()>/org.prevayler.foundation.Turn.end/0	<org.prevayler.foundation.Turn: void end()>
<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>/org.prevayler.Prevayler.execute/0	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.implementation.replication.ClientPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.foundation.network.ObjectSocket.writeObject/0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.foundation.network.ObjectSocket.writeObject/0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/org.prevayler.foundation.network.ObjectServerSocket.accept/0	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void run()>/org.prevayler.foundation.network.NetworkReceiverFactory.newReceiver/0	<org.prevayler.foundation.network.NetworkImpl: org.prevayler.foundation.network.ObjectReceiver newReceiver(org.prevayler.foundation.network.Service,org.prevayler.foundation.network.ObjectSocket)>
<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void shutdown()>/org.prevayler.foundation.network.ObjectServerSocket.close/0	<org.prevayler.foundation.network.ObjectServerSocketImpl: void close()>
<org.prevayler.implementation.replication.ClientPublisher: void close()>/org.prevayler.foundation.network.ObjectSocket.close/0	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>
<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: java.lang.Object createTestConnection()>/org.prevayler.Prevayler.prevalentSystem/0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>
<org.prevayler.implementation.publishing.POBox: void run()>/org.prevayler.implementation.publishing.TransactionSubscriber.receive/0	<org.prevayler.implementation.replication.ServerConnection: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.replication.ServerListener: void run()>/org.prevayler.foundation.network.ObjectServerSocket.accept/0	<org.prevayler.foundation.network.ObjectServerSocketImpl: org.prevayler.foundation.network.ObjectSocket accept()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/org.prevayler.implementation.Capsule.cleanCopy/0	<org.prevayler.implementation.TransactionCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/org.prevayler.implementation.Capsule.toChunk/0	<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>
<org.prevayler.foundation.network.ObjectSocketImpl: void close()>/java.net.Socket.close/0	<java.net.Socket: void close()>
<org.prevayler.demos.demo2.Main: void startSnapshots(org.prevayler.Prevayler)>/org.prevayler.Prevayler.takeSnapshot/0	<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>
<org.prevayler.demos.scalability.Main: void createPropertiesFile(java.io.File)>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>
<org.prevayler.foundation.serialization.SkaringaSerializer: com.skaringa.javaxml.ObjectTransformer createTransformer()>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: java.sql.Connection createConnection()>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver createService(org.prevayler.foundation.network.Service,int)>/org.prevayler.foundation.network.NetworkServerObjectReceiverImpl.<init>/0	<org.prevayler.foundation.network.NetworkServerObjectReceiverImpl: void <init>(org.prevayler.foundation.network.NetworkReceiverFactory,org.prevayler.foundation.network.Service,int)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/java.sql.Date.<init>/0	<java.sql.Date: void <init>(long)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void insert(org.prevayler.demos.scalability.Record)>/java.sql.Date.<init>/1	<java.sql.Date: void <init>(long)>
<org.prevayler.implementation.clock.MachineClock: void update()>/java.util.Date.<init>/0	<java.util.Date: void <init>(long)>
<org.prevayler.demos.demo2.business.AccountEntry: java.lang.String timestampString()>/java.text.SimpleDateFormat.<init>/0	<java.text.SimpleDateFormat: void <init>(java.lang.String)>
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/org.prevayler.implementation.replication.ClientPublisher$1.<init>/0	<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.implementation.PrevaylerDirectory.<init>/0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.implementation.snapshot.GenericSnapshotManager.<init>/0	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.foundation.serialization.JavaSerializer.<init>/0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>/org.prevayler.implementation.snapshot.GenericSnapshotManager.<init>/1	<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.util.Map,java.lang.String,java.lang.Object,org.prevayler.implementation.PrevaylerDirectory,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.replication.ClientPublisher.<init>/0	<org.prevayler.implementation.replication.ClientPublisher: void <init>(org.prevayler.foundation.network.OldNetwork,java.lang.String,int)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.TransactionPublisher publisher(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.publishing.CentralPublisher.<init>/0	<org.prevayler.implementation.publishing.CentralPublisher: void <init>(org.prevayler.Clock,org.prevayler.implementation.publishing.censorship.TransactionCensor,org.prevayler.implementation.journal.Journal)>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.network.OldNetwork network()>/org.prevayler.foundation.network.OldNetworkImpl.<init>/0	<org.prevayler.foundation.network.OldNetworkImpl: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>/org.prevayler.foundation.serialization.JavaSerializer.<init>/0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void <init>()>/java.util.HashMap.<init>/0	<java.util.HashMap: void <init>()>
<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: java.io.File file(long,java.lang.String)>/java.io.File.<init>/0	<java.io.File: void <init>(java.io.File,java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void <init>(long,java.lang.String)>/java.util.ArrayList.<init>/0	<java.util.ArrayList: void <init>()>
<org.prevayler.demos.demo2.business.Bank: org.prevayler.demos.demo2.business.Account searchAccount(long)>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/org.prevayler.foundation.serialization.JavaSerializer.<init>/0	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/org.prevayler.foundation.serialization.JavaSerializer.<init>/1	<org.prevayler.foundation.serialization.JavaSerializer: void <init>()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void <init>(java.lang.Object)>/org.prevayler.implementation.PrevalentSystemGuard.<init>/0	<org.prevayler.implementation.PrevalentSystemGuard: void <init>(java.lang.Object,long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1.<init>/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.io.ByteArrayOutputStream.<init>/0	<java.io.ByteArrayOutputStream: void <init>()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/java.lang.Error.<init>/0	<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/java.util.ArrayList.<init>/0	<java.util.ArrayList: void <init>()>
<org.prevayler.foundation.network.StubbornNetworkImpl: org.prevayler.foundation.network.SessionsManager getSessionManager(org.prevayler.foundation.network.Service)>/org.prevayler.foundation.network.SessionsManagerImpl.<init>/0	<org.prevayler.foundation.network.SessionsManagerImpl: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long)>/org.prevayler.foundation.DurableOutputStream.<init>/0	<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/org.prevayler.PrevaylerFactory.<init>/0	<org.prevayler.PrevaylerFactory: void <init>()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/org.prevayler.demos.scalability.prevayler.TransactionSystem.<init>/0	<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/java.io.IOException.<init>/1	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.foundation.DurableInputStream.<init>/0	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/java.io.IOException.<init>/1	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.foundation.DurableInputStream.<init>/1	<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/java.util.LinkedList.<init>/0	<java.util.LinkedList: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/java.lang.IllegalArgumentException.<init>/0	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/java.lang.IllegalArgumentException.<init>/1	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/java.io.FileInputStream.<init>/0	<java.io.FileInputStream: void <init>(java.io.File)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JList.<init>/0	<javax.swing.JList: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JScrollPane.<init>/0	<javax.swing.JScrollPane: void <init>(java.awt.Component)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void <init>()>/java.awt.Color.<init>/0	<java.awt.Color: void <init>(int,int,int)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/org.prevayler.demos.demo2.gui.BankFrame$1.<init>/0	<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/java.io.FileOutputStream.<init>/0	<java.io.FileOutputStream: void <init>(java.io.File)>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: java.lang.Object put(org.prevayler.demos.scalability.Record)>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.foundation.network.SessionsManagerImpl: void <init>(long)>/java.util.HashMap.<init>/0	<java.util.HashMap: void <init>()>
<org.prevayler.demos.demo2.business.Account: void verify(java.lang.String)>/org.prevayler.demos.demo2.business.Account$InvalidHolder.<init>/0	<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/org.prevayler.demos.demo2.business.Account$InvalidAmount.<init>/0	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void verify(long)>/org.prevayler.demos.demo2.business.Account$InvalidAmount.<init>/1	<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>
<org.prevayler.demos.demo2.business.Account: void register(long,java.util.Date)>/org.prevayler.demos.demo2.business.AccountEntry.<init>/0	<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>
<org.prevayler.demos.demo2.business.Account: java.util.Set listeners()>/java.util.HashSet.<init>/0	<java.util.HashSet: void <init>()>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/java.lang.Integer.<init>/0	<java.lang.Integer: void <init>(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: void checkPortNotUsed(int)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.network.BaseNetworkImpl: void markPortAsUsed(int,org.prevayler.foundation.network.NetworkServerObjectReceiver)>/java.lang.Integer.<init>/0	<java.lang.Integer: void <init>(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/java.lang.Integer.<init>/0	<java.lang.Integer: void <init>(int)>
<org.prevayler.foundation.network.BaseNetworkImpl: org.prevayler.foundation.network.NetworkServerObjectReceiver locateService(int)>/java.io.IOException.<init>/0	<java.io.IOException: void <init>(java.lang.String)>
<org.prevayler.foundation.network.BaseNetworkImpl: void releasePortForReuse(int)>/java.lang.Integer.<init>/0	<java.lang.Integer: void <init>(int)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/java.sql.Date.<init>/0	<java.sql.Date: void <init>(long)>
<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: void update(org.prevayler.demos.scalability.Record)>/java.sql.Date.<init>/1	<java.sql.Date: void <init>(long)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/org.prevayler.demos.scalability.Main.property/0	<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/org.prevayler.demos.scalability.Main.out/0	<org.prevayler.demos.scalability.Main: void out(java.lang.Object)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp cleanCopy()>/org.prevayler.implementation.Capsule.cleanCopy/0	<org.prevayler.implementation.TransactionWithQueryCapsule: org.prevayler.implementation.Capsule cleanCopy()>
<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>/java.util.HashMap.put/0	<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.prevayler.foundation.network.SessionsManagerImpl: void remove(org.prevayler.foundation.network.NetworkSessionId)>/java.util.HashMap.remove/0	<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/java.lang.Thread.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.implementation.replication.ClientPublisher: void startListening()>/java.lang.Thread.start/0	<java.lang.Thread: void start()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/java.lang.Thread.setName/0	<java.lang.Thread: void setName(java.lang.String)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/java.lang.Thread.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void startReading()>/java.lang.Thread.start/0	<java.lang.Thread: void start()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/org.prevayler.PrevaylerFactory.configurePrevalentSystem/0	<org.prevayler.PrevaylerFactory: void configurePrevalentSystem(java.lang.Object)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/org.prevayler.PrevaylerFactory.configurePrevalenceDirectory/0	<org.prevayler.PrevaylerFactory: void configurePrevalenceDirectory(java.lang.String)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/org.prevayler.PrevaylerFactory.configureJournalSerializer/0	<org.prevayler.PrevaylerFactory: void configureJournalSerializer(java.lang.String,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/org.prevayler.PrevaylerFactory.configureTransactionFiltering/0	<org.prevayler.PrevaylerFactory: void configureTransactionFiltering(boolean)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void initializePrevayler()>/org.prevayler.PrevaylerFactory.create/0	<org.prevayler.PrevaylerFactory: org.prevayler.Prevayler create()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/java.io.FileInputStream.close/0	<java.io.FileInputStream: void close()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: java.lang.Object readSnapshot(java.io.File)>/java.io.FileInputStream.close/1	<java.io.FileInputStream: void close()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JList.setSelectionMode/0	<javax.swing.JList: void setSelectionMode(int)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/java.lang.Thread.setDaemon/0	<java.lang.Thread: void setDaemon(boolean)>
<org.prevayler.demos.demo2.gui.BankFrame: void refreshClock()>/java.lang.Thread.start/0	<java.lang.Thread: void start()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/java.io.OutputStream.close/0	<java.io.FileOutputStream: void close()>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,java.io.File)>/java.io.OutputStream.close/1	<java.io.FileOutputStream: void close()>
<org.prevayler.implementation.journal.PersistentJournal: void hang()>/java.lang.Thread.sleep/0	<java.lang.Thread: void sleep(long)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager,org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.PrevalentSystemGuard.subscribeTo/0	<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>/org.prevayler.implementation.PrevalentSystemGuard.prevalentSystem/0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object prevalentSystem()>
<org.prevayler.implementation.PrevaylerImpl: java.lang.Object execute(org.prevayler.Query)>/org.prevayler.implementation.PrevalentSystemGuard.executeQuery/0	<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>
<org.prevayler.implementation.PrevaylerImpl: void takeSnapshot()>/org.prevayler.implementation.PrevalentSystemGuard.takeSnapshot/0	<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.clock.PausableClock.pause/0	<org.prevayler.implementation.clock.PausableClock: void pause()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.clock.PausableClock.resume/0	<org.prevayler.implementation.clock.PausableClock: void resume()>
<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.clock.PausableClock.resume/1	<org.prevayler.implementation.clock.PausableClock: void resume()>
<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.Capsule.executeOn/0	<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.demos.demo1.PrimeCalculator: void <init>(org.prevayler.Prevayler)>/org.prevayler.Prevayler.prevalentSystem/0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getName/0	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.demos.scalability.prevayler.QuerySystem: void put(org.prevayler.demos.scalability.Record)>/org.prevayler.demos.scalability.Record.getName/1	<org.prevayler.demos.scalability.Record: java.lang.String getName()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.foundation.DurableInputStream.readChunk/0	<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.TransactionTimestamp.systemVersion/0	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.TransactionTimestamp.systemVersion/1	<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>/org.prevayler.foundation.network.ObjectSocket.writeObject/0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void sendSessionKey()>/org.prevayler.foundation.network.ObjectSocket.writeObject/0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/org.prevayler.foundation.network.ObjectSocket.readObject/0	<org.prevayler.foundation.network.ObjectSocketImpl: java.lang.Object readObject()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void startReading()>/org.prevayler.foundation.network.ObjectSocket.writeObject/0	<org.prevayler.foundation.network.ObjectSocketImpl: void writeObject(java.lang.Object)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void closeForReconnect()>/org.prevayler.foundation.network.ObjectSocket.close/0	<org.prevayler.foundation.network.ObjectSocketImpl: void close()>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.Main: int intProperty(java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.foundation.DurableOutputStream.sync/0	<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.foundation.DurableOutputStream.file/0	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
<org.prevayler.implementation.journal.PersistentJournal: void close()>/org.prevayler.foundation.DurableOutputStream.close/0	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/org.prevayler.Prevayler.execute/0	<org.prevayler.implementation.PrevaylerImpl: void execute(org.prevayler.Transaction)>
<org.prevayler.demos.scalability.Main: java.lang.String property(java.lang.String)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.dealWithSQLException/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>/java.lang.System.gc/0	<java.lang.System: void gc()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.dealWithSQLException/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void dealWithSQLException(java.sql.SQLException,java.lang.String)>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/org.prevayler.foundation.Turn.next/0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/java.lang.Object.notify/0	<java.lang.Object: void notify()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.foundation.DurableOutputStream.close/0	<org.prevayler.foundation.DurableOutputStream: void close()>
<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>/org.prevayler.foundation.DurableOutputStream.file/1	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void <init>(org.prevayler.demos.scalability.ScalabilityTestSubject,int,int,int)>/org.prevayler.demos.scalability.ScalabilityTestSubject.name/0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: java.lang.String name()>
<org.prevayler.demos.demo1.NumberStorageTransaction: void <init>(int)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AccountFrame.setBackground/0	<javax.swing.JInternalFrame: void setBackground(java.awt.Color)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AccountFrame.show/0	<javax.swing.JInternalFrame: void show()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.table/0	<org.prevayler.demos.scalability.jdbc.JDBCTransactionConnection: java.lang.String table()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.table/0	<org.prevayler.demos.scalability.jdbc.JDBCQueryConnection: java.lang.String table()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection.prepare/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.publishing.CentralPublisher.notifySubscribers/0	<org.prevayler.implementation.publishing.AbstractPublisher: void notifySubscribers(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/org.prevayler.demos.demo2.gui.MatchFrame.setBounds/0	<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void refreshAccounts()>/javax.swing.JList.setListData/0	<javax.swing.JList: void setListData(java.lang.Object[])>
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>/org.prevayler.demos.scalability.ScalabilityTestSubject.replaceAllRecords/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/org.prevayler.foundation.network.ObjectReceiver.receive/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/org.prevayler.implementation.PrevalentSystemGuard.deepCopy/0	<org.prevayler.implementation.PrevalentSystemGuard: org.prevayler.implementation.PrevalentSystemGuard deepCopy(long,org.prevayler.foundation.serialization.Serializer)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.clock.PausableClock.realTime/0	<org.prevayler.implementation.clock.PausableClock: java.util.Date realTime()>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.publishing.censorship.TransactionCensor.approve/0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/org.prevayler.foundation.Turn.next/0	<org.prevayler.foundation.Turn: org.prevayler.foundation.Turn next()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.clock.PausableClock.advanceTo/0	<org.prevayler.implementation.clock.PausableClock: void advanceTo(java.util.Date)>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>/org.prevayler.foundation.DurableOutputStream.file/0	<org.prevayler.foundation.DurableOutputStream: java.io.File file()>
<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>/org.prevayler.foundation.StopWatch.millisEllapsed/0	<org.prevayler.foundation.StopWatch: long millisEllapsed()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>/org.prevayler.Prevayler.prevalentSystem/0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/org.prevayler.Prevayler.prevalentSystem/0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/org.prevayler.foundation.network.ObjectReceiver.close/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void close()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>/org.prevayler.foundation.network.ObjectReceiver.close/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void close()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/org.prevayler.foundation.network.SessionsManager.find/0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.StubbornNetworkProxy find(org.prevayler.foundation.network.NetworkSessionId)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/org.prevayler.foundation.network.ObjectReceiver.receive/0	<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl: void receive(java.lang.Object)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/org.prevayler.foundation.network.ObjectReceiver.receive/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void receive(java.lang.Object)>
<org.prevayler.demos.scalability.TransactionTestRun: void prepare()>/org.prevayler.demos.scalability.ScalabilityTestRun.prepare/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.sessionIsConnected/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: boolean sessionIsConnected()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.receiveSessionKey/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void receiveSessionKey(java.lang.Object)>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void networkRequestToReceive(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.wakeUpSleepingClient/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void wakeUpSleepingClient()>
<org.prevayler.foundation.monitor.Log4jMonitor: void log(java.lang.Class,org.apache.log4j.Level,java.lang.String,java.lang.Exception)>/org.prevayler.foundation.monitor.Log4jMonitor.logger/0	<org.prevayler.foundation.monitor.Log4jMonitor: org.apache.log4j.Logger logger(java.lang.Class)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JInternalFrame.<init>/0	<javax.swing.JInternalFrame: void <init>(java.lang.String,boolean,boolean)>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AccountFrame.fieldBox/0	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.gui.AccountFrame.buttonPanel/0	<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/org.prevayler.PrevaylerFactory.prevalenceDirectory/0	<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/org.prevayler.PrevaylerFactory.journalSuffix/0	<org.prevayler.PrevaylerFactory: java.lang.String journalSuffix()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/org.prevayler.PrevaylerFactory.monitor/0	<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>
<org.prevayler.implementation.PrevaylerDirectory$FileFilter1: void <init>(org.prevayler.implementation.PrevaylerDirectory)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>/org.prevayler.demos.demo2.gui.AllAccountsFrame.bank/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: org.prevayler.demos.demo2.business.Bank bank()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void performTest(int,int)>/org.prevayler.demos.scalability.ScalabilityTestRun.performRound/0	<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void listenToAccounts()>/org.prevayler.demos.demo2.gui.AllAccountsFrame.accounts/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>
<org.prevayler.foundation.network.StubbornClientReceiverImpl: void waitToResend(java.lang.Object)>/org.prevayler.foundation.network.StubbornClientReceiverImpl.forwardToProvider/0	<org.prevayler.foundation.network.StubbornClientReceiverImpl: void forwardToProvider(java.lang.Object)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy reestablishSession(org.prevayler.foundation.network.NetworkSessionId)>/org.prevayler.foundation.network.StubbornServerReceiverImpl.establishNewSession/0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void send(java.lang.Object)>/org.prevayler.foundation.network.StubbornServerReceiverImpl.closeSession/0	<org.prevayler.foundation.network.StubbornServerReceiverImpl: void closeSession()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>(org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter)>/org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter.<init>/0	<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: java.sql.PreparedStatement prepare(java.lang.String)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.jdbc.JDBCScalabilityConnection: void <init>(java.sql.Connection)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.snapshot.GenericSnapshotManager: void writeSnapshot(java.lang.Object,long)>/java.io.File.delete/0	<java.io.File: boolean delete()>
<org.prevayler.demos.scalability.ScalabilityTestRun: void prepare()>/org.prevayler.demos.scalability.ScalabilityTestSubject.replaceAllRecords/0	<org.prevayler.demos.scalability.prevayler.PrevaylerScalabilitySubject: void replaceAllRecords(int)>
<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.foundation.network.NetworkClientObjectReceiverImpl$1: void <init>(org.prevayler.foundation.network.NetworkClientObjectReceiverImpl)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.gui.BankFrame$1: void <init>(org.prevayler.demos.demo2.gui.BankFrame)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.demos.demo2.business.Account$InvalidHolder: void <init>(org.prevayler.demos.demo2.business.Account)>/java.lang.Exception.<init>/0	<java.lang.Exception: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.Account$InvalidAmount: void <init>(org.prevayler.demos.demo2.business.Account,java.lang.String)>/java.lang.Exception.<init>/0	<java.lang.Exception: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.business.AccountEntry: void <init>(long,java.util.Date)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JTextField.<init>/0	<javax.swing.JTextField: void <init>()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/java.awt.Color.<init>/0	<java.awt.Color: void <init>(int,int,int)>
<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>/java.lang.IllegalStateException.<init>/0	<java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>/org.prevayler.implementation.clock.MachineClock.<init>/0	<org.prevayler.implementation.clock.MachineClock: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.publishing.censorship.StrictTransactionCensor.<init>/0	<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void <init>(org.prevayler.implementation.snapshot.GenericSnapshotManager)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.publishing.censorship.TransactionCensor censor(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor.<init>/0	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/org.prevayler.implementation.journal.TransientJournal.<init>/0	<org.prevayler.implementation.journal.TransientJournal: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/org.prevayler.implementation.PrevaylerDirectory.<init>/0	<org.prevayler.implementation.PrevaylerDirectory: void <init>(java.lang.String)>
<org.prevayler.PrevaylerFactory: org.prevayler.implementation.journal.Journal journal()>/org.prevayler.implementation.journal.PersistentJournal.<init>/0	<org.prevayler.implementation.journal.PersistentJournal: void <init>(org.prevayler.implementation.PrevaylerDirectory,long,long,java.lang.String,org.prevayler.foundation.monitor.Monitor)>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void produceNewFoodTaster(long)>/java.lang.RuntimeException.<init>/0	<java.lang.RuntimeException: void <init>(java.lang.String)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.TransactionTimestamp.<init>/0	<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.TransactionGuide.<init>/0	<org.prevayler.implementation.TransactionGuide: void <init>(org.prevayler.implementation.TransactionTimestamp,org.prevayler.foundation.Turn)>
<org.prevayler.implementation.replication.ServerConnection: java.lang.Thread createClockTickSender()>/org.prevayler.implementation.replication.ServerConnection$1.<init>/0	<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/javax.swing.JPanel.<init>/0	<javax.swing.JPanel: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation.<init>/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/javax.swing.JButton.<init>/0	<javax.swing.JButton: void <init>(javax.swing.Action)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction.<init>/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/javax.swing.JButton.<init>/1	<javax.swing.JButton: void <init>(javax.swing.Action)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction.<init>/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/javax.swing.JButton.<init>/2	<javax.swing.JButton: void <init>(javax.swing.Action)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/javax.swing.JLabel.<init>/0	<javax.swing.JLabel: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/java.awt.BorderLayout.<init>/0	<java.awt.BorderLayout: void <init>(int,int)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.JPanel.<init>/0	<javax.swing.JPanel: void <init>()>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/java.awt.FlowLayout.<init>/0	<java.awt.FlowLayout: void <init>(int,int,int)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.JButton.<init>/0	<javax.swing.JButton: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/org.prevayler.demos.demo2.gui.MatchFrame$1.<init>/0	<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.table.DefaultTableModel.<init>/0	<javax.swing.table.DefaultTableModel: void <init>()>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.JTable.<init>/0	<javax.swing.JTable: void <init>(javax.swing.table.TableModel)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.JScrollPane.<init>/0	<javax.swing.JScrollPane: void <init>(java.awt.Component)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/net.sourceforge.javamatch.engine.MatchEngine.<init>/0	<net.sourceforge.javamatch.engine.MatchEngine: void <init>()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/net.sourceforge.javamatch.query.QuerySet.<init>/0	<net.sourceforge.javamatch.query.QuerySet: void <init>()>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/net.sourceforge.javamatch.query.Maximum.<init>/0	<net.sourceforge.javamatch.query.Maximum: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/net.sourceforge.javamatch.query.Maximum.<init>/1	<net.sourceforge.javamatch.query.Maximum: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/java.lang.Float.<init>/0	<java.lang.Float: void <init>(float)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/java.lang.Long.<init>/0	<java.lang.Long: void <init>(long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/java.lang.Integer.<init>/0	<java.lang.Integer: void <init>(int)>
<org.prevayler.implementation.Capsule: void executeOn(java.lang.Object,java.util.Date,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.Capsule.justExecute/0	<org.prevayler.implementation.TransactionWithQueryCapsule: void justExecute(java.lang.Object,java.lang.Object,java.util.Date)>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/org.prevayler.Prevayler.prevalentSystem/0	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>
<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: boolean isConsistent()>/org.prevayler.Prevayler.prevalentSystem/1	<org.prevayler.implementation.PrevaylerImpl: java.lang.Object prevalentSystem()>
<org.prevayler.demos.demo2.gui.AccountFrame: void <init>(java.lang.String,org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JTextField.requestFocus/0	<javax.swing.JTextField: void requestFocus()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/javax.swing.JPanel.add/0	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/javax.swing.JPanel.add/1	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JPanel accountButtons()>/javax.swing.JPanel.add/2	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.demo2.gui.BankFrame$RobustnessFrame: void addLine(java.lang.String)>/javax.swing.JLabel.setAlignmentX/0	<javax.swing.JLabel: void setAlignmentX(float)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.JPanel.setLayout/0	<javax.swing.JPanel: void setLayout(java.awt.LayoutManager)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.JButton.addActionListener/0	<javax.swing.JButton: void addActionListener(java.awt.event.ActionListener)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.JPanel.add/0	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.demo2.gui.MatchFrame: void initUI()>/javax.swing.table.DefaultTableModel.setColumnIdentifiers/0	<javax.swing.table.DefaultTableModel: void setColumnIdentifiers(java.lang.Object[])>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/javax.swing.table.DefaultTableModel.setRowCount/0	<javax.swing.table.DefaultTableModel: void setRowCount(int)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/net.sourceforge.javamatch.query.QuerySet.addPreferred/0	<net.sourceforge.javamatch.query.QuerySet: void addPreferred(net.sourceforge.javamatch.query.MatchQuery)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/net.sourceforge.javamatch.query.QuerySet.addPreferred/1	<net.sourceforge.javamatch.query.QuerySet: void addPreferred(net.sourceforge.javamatch.query.MatchQuery)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/javax.swing.table.DefaultTableModel.addRow/0	<javax.swing.table.DefaultTableModel: void addRow(java.lang.Object[])>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/org.prevayler.foundation.Chunk.<init>/0	<org.prevayler.foundation.Chunk: void <init>(byte[])>
<org.prevayler.demos.scalability.prevayler.TransactionSystem: void <init>()>/java.util.HashMap.<init>/0	<java.util.HashMap: void <init>()>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/org.prevayler.Clock.time/0	<org.prevayler.implementation.clock.BrokenClock: java.util.Date time()>
<org.prevayler.implementation.Capsule: org.prevayler.foundation.Chunk toChunk()>/org.prevayler.foundation.Chunk.setParameter/0	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>/java.io.File.renameTo/0	<java.io.File: boolean renameTo(java.io.File)>
<org.prevayler.implementation.PrevaylerImpl: void <init>(org.prevayler.implementation.publishing.TransactionPublisher,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.implementation.publishing.TransactionPublisher.clock/0	<org.prevayler.implementation.publishing.AbstractPublisher: org.prevayler.Clock clock()>
<org.prevayler.implementation.PrevaylerImpl: void close()>/org.prevayler.implementation.publishing.TransactionPublisher.close/0	<org.prevayler.implementation.publishing.CentralPublisher: void close()>
<org.prevayler.implementation.PrevaylerImpl: void publish(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.publishing.TransactionPublisher.publish/0	<org.prevayler.implementation.publishing.CentralPublisher: void publish(org.prevayler.implementation.Capsule)>
<org.prevayler.foundation.Turn: void haveSomeTickets(int)>/org.prevayler.foundation.Turn.haveSomeTickets/0	<org.prevayler.foundation.Turn: void haveSomeTickets(int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.foundation.StopWatch.start/0	<org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.sleep/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.out/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.out/1	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.toResultString/0	<org.prevayler.demos.scalability.ScalabilityTestRun: java.lang.String toResultString(double,int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.out/2	<org.prevayler.demos.scalability.ScalabilityTestRun: void out(java.lang.Object)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/org.prevayler.foundation.Chunk.setParameter/0	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.implementation.TransactionTimestamp: org.prevayler.foundation.Chunk toChunk()>/org.prevayler.foundation.Chunk.setParameter/1	<org.prevayler.foundation.Chunk: void setParameter(java.lang.String,java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>/org.prevayler.demos.demo2.gui.AccountFrame.addFields/0	<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.Box fieldBox()>/org.prevayler.demos.demo2.gui.AccountFrame.addFields/0	<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>/org.prevayler.demos.demo2.gui.AccountFrame.addButtons/0	<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>/org.prevayler.demos.demo2.gui.AccountFrame.addButtons/0	<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>
<org.prevayler.implementation.PrevalentSystemGuard: void takeSnapshot(org.prevayler.implementation.snapshot.GenericSnapshotManager)>/org.prevayler.implementation.snapshot.GenericSnapshotManager.writeSnapshot/0	<org.prevayler.implementation.snapshot.NullSnapshotManager: void writeSnapshot(java.lang.Object,long)>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.startTurn/0	<org.prevayler.foundation.Guided: void startTurn()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.executionTime/0	<org.prevayler.implementation.TransactionGuide: java.util.Date executionTime()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.timestamp/0	<org.prevayler.implementation.TransactionGuide: org.prevayler.implementation.TransactionTimestamp timestamp()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/0	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.implementation.publishing.CentralPublisher: void notifySubscribers(org.prevayler.implementation.TransactionGuide)>/org.prevayler.implementation.TransactionGuide.endTurn/1	<org.prevayler.foundation.Guided: void endTurn()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestSubject.reportResourcesUsed/0	<org.prevayler.demos.scalability.prevayler.PrevaylerQuerySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestSubject.reportResourcesUsed/0	<org.prevayler.demos.scalability.prevayler.PrevaylerTransactionSubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestSubject.reportResourcesUsed/0	<org.prevayler.demos.scalability.jdbc.JDBCScalabilitySubject: void reportResourcesUsed(java.io.PrintStream)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/org.prevayler.foundation.network.SessionsManager.add/0	<org.prevayler.foundation.network.SessionsManagerImpl: org.prevayler.foundation.network.NetworkSessionId add(org.prevayler.foundation.network.StubbornNetworkProxy)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.startThreads/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.stopThreads/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>
<org.prevayler.demos.scalability.prevayler.PrevalenceTest$PrevalenceFilter: void <init>()>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/java.lang.StringBuilder.<init>/1	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/java.lang.StringBuilder.<init>/2	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.implementation.PrevalentSystemGuard: void subscribeTo(org.prevayler.implementation.publishing.TransactionPublisher)>/org.prevayler.implementation.publishing.TransactionPublisher.subscribe/0	<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.demos.demo2.gui.MatchFrame: void refreshTable()>/org.prevayler.demos.demo2.business.Bank.accounts/0	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.implementation.replication.ServerConnection$1: void <init>(org.prevayler.implementation.replication.ServerConnection)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountCreation: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/javax.swing.AbstractAction.<init>/0	<javax.swing.AbstractAction: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountEditAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction.<init>/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$AccountDeleteAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame)>/org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction.<init>/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>
<org.prevayler.demos.demo2.gui.MatchFrame$1: void <init>(org.prevayler.demos.demo2.gui.MatchFrame)>/java.lang.Object.<init>/0	<java.lang.Object: void <init>()>
<org.prevayler.demos.demo2.gui.AccountFrame: javax.swing.JPanel buttonPanel()>/javax.swing.JPanel.<init>/0	<javax.swing.JPanel: void <init>()>
<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>/org.prevayler.foundation.monitor.SimpleMonitor.<init>/0	<org.prevayler.foundation.monitor.SimpleMonitor: void <init>(java.io.PrintStream)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/org.prevayler.foundation.network.StubbornNetworkProxy.<init>/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void <init>()>
<org.prevayler.implementation.publishing.censorship.StrictTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>/org.prevayler.implementation.PrevalentSystemGuard.receive/0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.readObject/0	<org.prevayler.foundation.serialization.JavaSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/org.prevayler.demos.demo1.NumberKeeper.lastNumber/0	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/org.prevayler.demos.demo1.NumberKeeper.lastNumber/1	<org.prevayler.demos.demo1.NumberKeeper: int lastNumber()>
<org.prevayler.demos.demo1.PrimeCalculator: void start()>/org.prevayler.demos.demo1.NumberKeeper.numbers/0	<org.prevayler.demos.demo1.NumberKeeper: java.util.List numbers()>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: org.prevayler.foundation.network.StubbornNetworkProxy establishNewSession()>/org.prevayler.foundation.network.StubbornNetworkProxy.setClient/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void setClient(org.prevayler.foundation.network.ObjectReceiver)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void sleep()>/org.prevayler.foundation.Cool.sleep/0	<org.prevayler.foundation.Cool: void sleep(long)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: void <init>(org.prevayler.Prevayler,java.awt.Container)>/org.prevayler.demos.demo2.business.Bank.setBankListener/0	<org.prevayler.demos.demo2.business.Bank: void setBankListener(org.prevayler.demos.demo2.business.BankListener)>
<org.prevayler.implementation.publishing.CentralPublisher: org.prevayler.implementation.TransactionGuide approve(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.publishing.censorship.TransactionCensor.approve/0	<org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor: void approve(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame: java.util.List accounts()>/org.prevayler.demos.demo2.business.Bank.accounts/0	<org.prevayler.demos.demo2.business.Bank: java.util.List accounts()>
<org.prevayler.demos.scalability.ScalabilityTestRun: double performRound(int)>/org.prevayler.foundation.StopWatch.secondsEllapsed/0	<org.prevayler.foundation.StopWatch: double secondsEllapsed()>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.journal.Journal.update/0	<org.prevayler.implementation.journal.PersistentJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>
<org.prevayler.implementation.publishing.CentralPublisher: void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.journal.Journal.nextTransaction/0	<org.prevayler.implementation.journal.PersistentJournal: long nextTransaction()>
<org.prevayler.implementation.publishing.CentralPublisher: void close()>/org.prevayler.implementation.journal.Journal.close/0	<org.prevayler.implementation.journal.PersistentJournal: void close()>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.writeObject/0	<org.prevayler.foundation.serialization.JavaSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.Capsule: void <init>(java.lang.Object,org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.writeObject/0	<org.prevayler.foundation.serialization.XStreamSerializer: void writeObject(java.io.OutputStream,java.lang.Object)>
<org.prevayler.implementation.publishing.CentralPublisher: void publishWithoutWorryingAboutNewSubscriptions(org.prevayler.implementation.Capsule)>/org.prevayler.implementation.journal.Journal.append/0	<org.prevayler.implementation.journal.PersistentJournal: void append(org.prevayler.implementation.TransactionGuide)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void stopThreads()>/java.lang.Thread.yield/0	<java.lang.Thread: void yield()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/org.prevayler.demos.demo2.gui.AllAccountsFrame.access$1/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.demo2.gui.AccountFrame: void addFields(javax.swing.Box)>/org.prevayler.demos.demo2.gui.AccountFrame.labelContainer/0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/org.prevayler.demos.demo2.gui.TransferFrame.labelContainer/0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/org.prevayler.demos.demo2.gui.TransferFrame.gap/0	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/org.prevayler.demos.demo2.gui.TransferFrame.labelContainer/1	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/org.prevayler.demos.demo2.gui.TransferFrame.gap/1	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Component gap()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/org.prevayler.demos.demo2.gui.TransferFrame.labelContainer/2	<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>
<org.prevayler.implementation.Capsule: java.lang.Object deserialize(org.prevayler.foundation.serialization.Serializer)>/org.prevayler.foundation.serialization.Serializer.readObject/0	<org.prevayler.foundation.serialization.XStreamSerializer: java.lang.Object readObject(java.io.InputStream)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/javax.swing.JPanel.add/0	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/javax.swing.JPanel.add/0	<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThreads(int)>/org.prevayler.demos.scalability.ScalabilityTestRun.startThread/0	<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/org.prevayler.demos.demo2.gui.RobustAction.<init>/0	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction.refreshEnabled/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/javax.swing.JTextField.<init>/0	<javax.swing.JTextField: void <init>()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/javax.swing.JTextField.<init>/1	<javax.swing.JTextField: void <init>()>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/javax.swing.JTextField.<init>/2	<javax.swing.JTextField: void <init>()>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction.<init>/0	<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>
<org.prevayler.demos.demo2.gui.NewAccountFrame: void addButtons(javax.swing.JPanel)>/javax.swing.JButton.<init>/0	<javax.swing.JButton: void <init>(javax.swing.Action)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/org.prevayler.demos.demo2.gui.TransferFrame$OKAction.<init>/0	<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addButtons(javax.swing.JPanel)>/javax.swing.JButton.<init>/0	<javax.swing.JButton: void <init>(javax.swing.Action)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void close()>/org.prevayler.foundation.network.StubbornNetworkProxy.disconnect/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void disconnect()>
<org.prevayler.demos.demo2.gui.TransferFrame: void <init>(org.prevayler.demos.demo2.business.Account,org.prevayler.Prevayler,java.awt.Container)>/javax.swing.JTextField.setText/0	<javax.swing.JTextField: void setText(java.lang.String)>
<org.prevayler.foundation.network.StubbornServerReceiverImpl: void handleSession(java.lang.Object)>/org.prevayler.foundation.network.StubbornNetworkProxy.connect/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>
<org.prevayler.demos.demo2.gui.TransferFrame: void addFields(javax.swing.Box)>/javax.swing.JTextField.setEnabled/0	<javax.swing.JTextField: void setEnabled(boolean)>
<org.prevayler.implementation.PrevalentSystemGuard: java.lang.Object executeQuery(org.prevayler.Query,org.prevayler.Clock)>/org.prevayler.Clock.time/0	<org.prevayler.implementation.clock.PausableClock: java.util.Date time()>
<org.prevayler.implementation.journal.PersistentJournal: void handle(java.io.IOException,java.io.File,java.lang.String)>/org.prevayler.foundation.monitor.Monitor.notify/0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.implementation.journal.TransientJournal: void update(org.prevayler.implementation.publishing.TransactionSubscriber,long)>/org.prevayler.implementation.publishing.TransactionSubscriber.receive/0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/org.prevayler.demos.demo2.gui.AllAccountsFrame.access$1/0	<org.prevayler.demos.demo2.gui.AllAccountsFrame: javax.swing.JList access$1(org.prevayler.demos.demo2.gui.AllAccountsFrame)>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void refreshEnabled()>/org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction.setEnabled/0	<javax.swing.AbstractAction: void setEnabled(boolean)>
<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>/org.prevayler.foundation.monitor.LoggingMonitor.error/0	<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>
<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>/org.prevayler.foundation.monitor.Monitor.notify/0	<org.prevayler.foundation.monitor.LoggingMonitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>
<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>/org.prevayler.implementation.publishing.TransactionSubscriber.receive/0	<org.prevayler.implementation.PrevalentSystemGuard: void receive(org.prevayler.implementation.TransactionTimestamp)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/org.prevayler.demos.scalability.ScalabilityTestRun$1.start/0	<java.lang.Thread: void start()>
<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>/javax.swing.AbstractAction.<init>/0	<javax.swing.AbstractAction: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.NewAccountFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.NewAccountFrame)>/org.prevayler.demos.demo2.gui.RobustAction.<init>/0	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.TransferFrame$OKAction: void <init>(org.prevayler.demos.demo2.gui.TransferFrame)>/org.prevayler.demos.demo2.gui.RobustAction.<init>/0	<org.prevayler.demos.demo2.gui.RobustAction: void <init>(java.lang.String)>
<org.prevayler.demos.demo2.gui.AccountFrame: java.awt.Container labelContainer(java.lang.String)>/javax.swing.JLabel.<init>/0	<javax.swing.JLabel: void <init>(java.lang.String)>
<org.prevayler.demos.scalability.ScalabilityTestRun: void startThread(long,int)>/org.prevayler.demos.scalability.ScalabilityTestRun$1.<init>/0	<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void connect(org.prevayler.foundation.network.ObjectReceiver,org.prevayler.foundation.network.StubbornNetworkClientConnector)>/org.prevayler.foundation.network.StubbornNetworkProxy.openClientChannel/0	<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>
<org.prevayler.demos.demo2.gui.AllAccountsFrame$SelectedAccountAction: void <init>(org.prevayler.demos.demo2.gui.AllAccountsFrame,java.lang.String)>/javax.swing.JList.addListSelectionListener/0	<javax.swing.JList: void addListSelectionListener(javax.swing.event.ListSelectionListener)>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/java.lang.Exception.printStackTrace/0	<java.lang.Exception: void printStackTrace(java.io.PrintStream)>
<org.prevayler.demos.scalability.ScalabilityTestRun$1: void <init>(org.prevayler.demos.scalability.ScalabilityTestRun,long,int)>/java.lang.Thread.<init>/0	<java.lang.Thread: void <init>()>
<org.prevayler.foundation.monitor.SimpleMonitor: void error(java.lang.Class,java.lang.String,java.lang.Exception)>/java.lang.StringBuilder.<init>/0	<java.lang.StringBuilder: void <init>(java.lang.String)>
<org.prevayler.foundation.network.StubbornNetworkProxy: void openClientChannel()>/java.lang.Object.notify/0	<java.lang.Object: void notify()>
