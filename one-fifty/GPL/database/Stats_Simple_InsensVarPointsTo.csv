java.lang.String[]::: (Mock)	<Main: void main(java.lang.String[])>/@parameter0
java.lang.String[]::: (Mock)	<Main: void main(java.lang.String[])>/args#_0
<<string-constant>>	<Main: void main(java.lang.String[])>/$stringconstant0
<<string-constant>>	<Main: void main(java.lang.String[])>/$stringconstant1
<<string-builder>>	<Main: void main(java.lang.String[])>/$r7
<<string-builder>>	<Main: void main(java.lang.String[])>/$r18
<Main: void main(java.lang.String[])>/new int[]/0	<Main: void main(java.lang.String[])>/$r3
<Main: void main(java.lang.String[])>/new int[]/1	<Main: void main(java.lang.String[])>/$r4
<<string-constant>>	<Graph: void endProfile()>/$stringconstant0
<<string-builder>>	<Graph: void endProfile()>/$r0
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void main(java.lang.String[])>/$r0
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: void main(java.lang.String[])>/$r2
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: void main(java.lang.String[])>/$r5
GlobalVarsWrapper::: (Mock)	<GlobalVarsWrapper: void <init>()>/@this
Graph::: (Mock)	<Graph: VertexIter getVertices()>/@this
Graph::: (Mock)	<Graph: EdgeIter getEdges()>/@this
Graph::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/@this
Graph::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/@this
Graph::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/@this
Graph::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/@this
Graph::: (Mock)	<Graph: void stopBenchmark()>/@this
Graph::: (Mock)	<Graph: int readNumber()>/@this
Graph::: (Mock)	<Graph: void run(Vertex)>/@this
Graph::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this
Graph::: (Mock)	<Graph: void graphSearch(WorkSpace)>/@this
Graph::: (Mock)	<Graph: void numberVertices()>/@this
Graph::: (Mock)	<Graph: void connectedComponents()>/@this
Graph::: (Mock)	<Graph: Graph strongComponents()>/@this
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/@this
Graph::: (Mock)	<Graph: boolean cycleCheck()>/@this
Graph::: (Mock)	<Graph: Graph kruskal()>/@this
Graph::: (Mock)	<Graph: Graph prim(Vertex)>/@this
WorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this
WorkSpace::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/@this
WorkSpace::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/@this
WorkSpace::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/@this
WorkSpace::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/@this
WorkSpace::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
VertexIter::: (Mock)	<VertexIter: Vertex next()>/@this
VertexIter::: (Mock)	<VertexIter: boolean hasNext()>/@this
EdgeIter::: (Mock)	<EdgeIter: void <init>()>/@this
EdgeIter::: (Mock)	<EdgeIter: boolean hasNext()>/@this
EdgeIter::: (Mock)	<EdgeIter: EdgeIfc next()>/@this
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: Vertex next()>/@this
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: boolean hasNext()>/@this
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: EdgeIfc next()>/@this
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: boolean hasNext()>/@this
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void <init>()>/@this
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@this
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@this
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@this
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@this
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: Vertex next()>/@this
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: boolean hasNext()>/@this
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void <init>()>/@this
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/@this
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/@this
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this
Main::: (Mock)	<Main: void <init>()>/@this
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void <init>()>/@this
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/@this
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/@this
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@this
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/@this
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@this
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: Vertex next()>/@this
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: boolean hasNext()>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void <init>()>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/@this
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: EdgeIfc next()>/@this
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: boolean hasNext()>/@this
Edge::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/@this
Edge::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/@this
Edge::: (Mock)	<Edge: void setWeight(int)>/@this
Edge::: (Mock)	<Edge: int getWeight()>/@this
Edge::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/@this
Edge::: (Mock)	<Edge: Vertex getStart()>/@this
Edge::: (Mock)	<Edge: Vertex getEnd()>/@this
Edge::: (Mock)	<Edge: void display()>/@this
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: EdgeIfc next()>/@this
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: boolean hasNext()>/@this
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: EdgeIfc next()>/@this
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: boolean hasNext()>/@this
Neighbor::: (Mock)	<Neighbor: void <init>()>/@this
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,int)>/@this
Neighbor::: (Mock)	<Neighbor: void display()>/@this
Neighbor::: (Mock)	<Neighbor: Vertex getStart()>/@this
Neighbor::: (Mock)	<Neighbor: Vertex getEnd()>/@this
Neighbor::: (Mock)	<Neighbor: void setWeight(int)>/@this
Neighbor::: (Mock)	<Neighbor: int getWeight()>/@this
Neighbor::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/@this
Neighbor::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/@this
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/@this
Vertex::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/@this
Vertex::: (Mock)	<Vertex: java.lang.String getName()>/@this
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/@this
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/@this
Vertex::: (Mock)	<Vertex: VertexIter getNeighbors()>/@this
Vertex::: (Mock)	<Vertex: Vertex getStart()>/@this
Vertex::: (Mock)	<Vertex: Vertex getEnd()>/@this
Vertex::: (Mock)	<Vertex: int getWeight()>/@this
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/@this
Vertex::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/@this
Vertex::: (Mock)	<Vertex: void addEdge(Neighbor)>/@this
Vertex::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/@this
Vertex::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/@this
Vertex::: (Mock)	<Vertex: EdgeIter getEdges()>/@this
Vertex::: (Mock)	<Vertex: java.util.LinkedList getNeighborsObj()>/@this
Vertex::: (Mock)	<Vertex: void addWeight(int)>/@this
Vertex::: (Mock)	<Vertex: void setWeight(int)>/@this
Vertex::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/@this
Vertex::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/@this
Vertex::: (Mock)	<Vertex: void display()>/@this
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void <init>()>/@this
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@this
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this
<<string-constant>>	<Graph: void runBenchmark(java.lang.String)>/$stringconstant0
<<string-builder>>	<Graph: void runBenchmark(java.lang.String)>/$r2
<Graph: int readNumber()>/new char[]/0	<Graph: int readNumber()>/word#_208
<<string-constant>>	<Graph: void run(Vertex)>/$stringconstant0
<<string-builder>>	<Graph: void run(Vertex)>/$r0
<<string-constant>>	<Edge: void display()>/$stringconstant0
<<string-constant>>	<Edge: void display()>/$stringconstant1
<<string-builder>>	<Edge: void display()>/$r0
<<string-builder>>	<Edge: void display()>/$r4
<<string-builder>>	<Neighbor: void display()>/$r0
<<string-constant>>	<Vertex: void display()>/$stringconstant0
<<string-constant>>	<Vertex: void display()>/$stringconstant1
<<string-constant>>	<Vertex: void display()>/$stringconstant2
<<string-constant>>	<Vertex: void display()>/$stringconstant3
<<string-constant>>	<Vertex: void display()>/$stringconstant4
<<string-constant>>	<Vertex: void display()>/$stringconstant5
<<string-constant>>	<Vertex: void display()>/$stringconstant6
<<string-constant>>	<Vertex: void display()>/$stringconstant7
<<string-constant>>	<Vertex: void display()>/$stringconstant8
<<string-constant>>	<Vertex: void display()>/$stringconstant9
<<string-constant>>	<Vertex: void display()>/$stringconstant10
<<string-builder>>	<Vertex: void display()>/$r2
<<string-builder>>	<Vertex: void display()>/$r10
<<string-builder>>	<Vertex: void display()>/$r16
<<string-builder>>	<Vertex: void display()>/$r23
<<string-builder>>	<Vertex: void display()>/$r28
<<string-builder>>	<Vertex: void display()>/$r33
<<string-builder>>	<Vertex: void display()>/$r39
<<string-builder>>	<Vertex: void display()>/$r45
<<string-builder>>	<Vertex: void display()>/$r52
<<null pseudo heap>>	<Graph: EdgeIter getEdges()>/$null0
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$null0
<<null pseudo heap>>	<Graph: Graph strongComponents()>/$null0
<<null pseudo heap>>	<Graph: Graph kruskal()>/$null0
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/$null0
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/$null1
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/$null2
<<null pseudo heap>>	<EdgeIter: EdgeIfc next()>/$null0
<<null pseudo heap>>	<Edge: Vertex getOtherVertex(Vertex)>/$null0
<<null pseudo heap>>	<Neighbor: void <init>()>/$null0
<<null pseudo heap>>	<Neighbor: void <init>()>/$null1
<<null pseudo heap>>	<Neighbor: void <init>()>/$null2
<<null pseudo heap>>	<Neighbor: Vertex getStart()>/$null0
<<null pseudo heap>>	<Vertex: VertexIter getNeighbors()>/$null0
<<null pseudo heap>>	<Vertex: Vertex getEnd()>/$null0
<<null pseudo heap>>	<Vertex: EdgeIter getEdges()>/$null0
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void main(java.lang.String[])>/g#_16
<Main: void main(java.lang.String[])>/new int[]/0	<Main: void main(java.lang.String[])>/$r13
<Main: void main(java.lang.String[])>/new int[]/1	<Main: void main(java.lang.String[])>/$r14
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: VertexIter getVertices()>/$r0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph: EdgeIter getEdges()>/$r0
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Graph: void addEdge(Vertex,Neighbor)>/$r0
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: void runBenchmark(java.lang.String)>/$r0
<Graph: int readNumber()>/new java.lang.String/0	<Graph: int readNumber()>/$r3
<Graph: int readNumber()>/new java.lang.String/1	<Graph: int readNumber()>/$r4
<Graph: void numberVertices()>/new NumberWorkSpace/0	<Graph: void numberVertices()>/$r0
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<Graph: void connectedComponents()>/$r0
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: Graph strongComponents()>/$r0
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph: Graph strongComponents()>/$r1
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: Graph strongComponents()>/$r2
<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<Graph: Graph computeTranspose(Graph)>/$r0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/$r1
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/$r3
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: boolean cycleCheck()>/$r0
<Graph: Graph kruskal()>/new java.util.LinkedList/0	<Graph: Graph kruskal()>/$r0
<Graph: Graph kruskal()>/new java.util.LinkedList/1	<Graph: Graph kruskal()>/$r1
<Graph: Graph kruskal()>/new java.util.LinkedList/2	<Graph: Graph kruskal()>/$r2
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph: Graph kruskal()>/$r3
<Graph: Graph kruskal()>/new Graph/0	<Graph: Graph kruskal()>/$r24
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph kruskal()>/$r26
<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<Graph: Graph prim(Vertex)>/$r0
<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<Graph: Graph prim(Vertex)>/$r1
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph: Graph prim(Vertex)>/$r11
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Graph prim(Vertex)>/$r13
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r14
<Vertex: void adjustAdorns(Vertex,int)>/new java.lang.Integer/0	<Vertex: void adjustAdorns(Vertex,int)>/$r3
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: VertexIter getNeighbors()>/$r0
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex: EdgeIter getEdges()>/$r0
<Vertex: void addWeight(int)>/new java.lang.Integer/0	<Vertex: void addWeight(int)>/$r0
GlobalVarsWrapper::: (Mock)	<GlobalVarsWrapper: void <init>()>/this#_0
Graph::: (Mock)	<Graph: VertexIter getVertices()>/this#_0
Graph::: (Mock)	<Graph: EdgeIter getEdges()>/this#_0
Graph::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/this#_0
Graph::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/this#_0
Graph::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/this#_0
Graph::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/this#_0
Graph::: (Mock)	<Graph: void stopBenchmark()>/this#_0
Graph::: (Mock)	<Graph: int readNumber()>/this#_0
Graph::: (Mock)	<Graph: void run(Vertex)>/this#_0
Graph::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0
Graph::: (Mock)	<Graph: void graphSearch(WorkSpace)>/this#_0
Graph::: (Mock)	<Graph: void numberVertices()>/this#_0
Graph::: (Mock)	<Graph: void connectedComponents()>/this#_0
Graph::: (Mock)	<Graph: Graph strongComponents()>/this#_0
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/this#_0
Graph::: (Mock)	<Graph: boolean cycleCheck()>/this#_0
Graph::: (Mock)	<Graph: Graph kruskal()>/this#_0
Graph::: (Mock)	<Graph: Graph prim(Vertex)>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
WorkSpace::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0
VertexIter::: (Mock)	<VertexIter: Vertex next()>/this#_0
VertexIter::: (Mock)	<VertexIter: boolean hasNext()>/this#_0
EdgeIter::: (Mock)	<EdgeIter: void <init>()>/this#_0
EdgeIter::: (Mock)	<EdgeIter: boolean hasNext()>/this#_0
EdgeIter::: (Mock)	<EdgeIter: EdgeIfc next()>/this#_0
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: Vertex next()>/this#_0
Vertex$VertexIter2::: (Mock)	<Vertex$VertexIter2: boolean hasNext()>/this#_0
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: EdgeIfc next()>/this#_0
Vertex$EdgeIter2::: (Mock)	<Vertex$EdgeIter2: boolean hasNext()>/this#_0
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void <init>()>/this#_0
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/this#_0
FinishTimeWorkSpace::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/this#_0
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/this#_0
Graph$Comparator3::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l0#_0
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: Vertex next()>/this#_0
Vertex$VertexIter3::: (Mock)	<Vertex$VertexIter3: boolean hasNext()>/this#_0
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void <init>()>/this#_0
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/this#_0
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/this#_0
RegionWorkSpace::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0
Main::: (Mock)	<Main: void <init>()>/this#_0
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void <init>()>/this#_0
NumberWorkSpace::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/this#_0
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/this#_0
Graph$Comparator2::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l0#_0
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/this#_0
Graph$Comparator1::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l0#_0
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: Vertex next()>/this#_0
Vertex$VertexIter1::: (Mock)	<Vertex$VertexIter1: boolean hasNext()>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void <init>()>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/this#_0
CycleWorkSpace::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: EdgeIfc next()>/this#_0
Vertex$EdgeIter3::: (Mock)	<Vertex$EdgeIter3: boolean hasNext()>/this#_0
Edge::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/this#_0
Edge::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/this#_0
Edge::: (Mock)	<Edge: void setWeight(int)>/this#_0
Edge::: (Mock)	<Edge: int getWeight()>/this#_0
Edge::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/this#_0
Edge::: (Mock)	<Edge: Vertex getStart()>/this#_0
Edge::: (Mock)	<Edge: Vertex getEnd()>/this#_0
Edge::: (Mock)	<Edge: void display()>/this#_0
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: EdgeIfc next()>/this#_0
Graph$EdgeIter1::: (Mock)	<Graph$EdgeIter1: boolean hasNext()>/this#_0
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0
Vertex$EdgeIter1::: (Mock)	<Vertex$EdgeIter1: boolean hasNext()>/this#_0
Neighbor::: (Mock)	<Neighbor: void <init>()>/this#_0
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,int)>/this#_0
Neighbor::: (Mock)	<Neighbor: void display()>/this#_0
Neighbor::: (Mock)	<Neighbor: Vertex getStart()>/this#_0
Neighbor::: (Mock)	<Neighbor: Vertex getEnd()>/this#_0
Neighbor::: (Mock)	<Neighbor: void setWeight(int)>/this#_0
Neighbor::: (Mock)	<Neighbor: int getWeight()>/this#_0
Neighbor::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/this#_0
Neighbor::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/this#_0
Neighbor::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/this#_0
Vertex::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/this#_0
Vertex::: (Mock)	<Vertex: java.lang.String getName()>/this#_0
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/this#_0
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/this#_0
Vertex::: (Mock)	<Vertex: VertexIter getNeighbors()>/this#_0
Vertex::: (Mock)	<Vertex: Vertex getStart()>/this#_0
Vertex::: (Mock)	<Vertex: Vertex getEnd()>/this#_0
Vertex::: (Mock)	<Vertex: int getWeight()>/this#_0
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/this#_0
Vertex::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
Vertex::: (Mock)	<Vertex: void addEdge(Neighbor)>/this#_0
Vertex::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/this#_0
Vertex::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/this#_0
Vertex::: (Mock)	<Vertex: EdgeIter getEdges()>/this#_0
Vertex::: (Mock)	<Vertex: java.util.LinkedList getNeighborsObj()>/this#_0
Vertex::: (Mock)	<Vertex: void addWeight(int)>/this#_0
Vertex::: (Mock)	<Vertex: void setWeight(int)>/this#_0
Vertex::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/this#_0
Vertex::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/this#_0
Vertex::: (Mock)	<Vertex: void display()>/this#_0
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void <init>()>/this#_0
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/this#_0
WorkSpaceTranspose::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: void main(java.lang.String[])>/$r6
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: void main(java.lang.String[])>/$r11
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: EdgeIfc addEdge(Graph,int)>/$r1
<Main: void main(java.lang.String[])>/new Vertex[]/0	<Main: EdgeIfc addEdge(Graph,int)>/$r3
<Main: void main(java.lang.String[])>/new int[]/0	<Main: EdgeIfc addEdge(Graph,int)>/$r0
<Main: void main(java.lang.String[])>/new int[]/1	<Main: EdgeIfc addEdge(Graph,int)>/$r2
Graph$Comparator3::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/@parameter0
Graph$Comparator3::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/@parameter0
Neighbor::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/@parameter1
Vertex::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/@parameter0
java.lang.String::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/@parameter0
Vertex::: (Mock)	<Graph: void run(Vertex)>/@parameter0
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter1
WorkSpace::: (Mock)	<Graph: void graphSearch(WorkSpace)>/@parameter0
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/@parameter0
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1
Vertex::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@parameter0
Edge::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter0
Edge::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter1
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter0
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter1
Vertex::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/@parameter0
Vertex::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/@parameter0
Vertex::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter0
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter1
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter0
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter1
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter0
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter1
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter0
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter1
Vertex::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/@parameter0
Vertex::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/@parameter0
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/@parameter1
Edge::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/@parameter0
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/@parameter0
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,int)>/@parameter0
Vertex::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/@parameter0
Edge::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/@parameter0
Edge::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/@parameter1
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/@parameter0
java.lang.String::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/@parameter0
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/@parameter0
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/@parameter0
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/@parameter0
Edge::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0
Neighbor::: (Mock)	<Vertex: void addEdge(Neighbor)>/@parameter0
Neighbor::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/@parameter0
Neighbor::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/@parameter0
WorkSpace::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/@parameter0
WorkSpace::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/@parameter0
Vertex::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@parameter0
Vertex::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@parameter0
<Graph: int readNumber()>/new java.lang.String/0	<Graph: int readNumber()>/theString#_224
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: Graph strongComponents()>/FTWS#_324
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: Graph strongComponents()>/WST#_337
<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<Graph: Graph computeTranspose(Graph)>/newVertices#_347
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/newGraph#_350
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: boolean cycleCheck()>/c#_393
<Graph: Graph kruskal()>/new java.util.LinkedList/0	<Graph: Graph kruskal()>/A#_401
<Graph: Graph kruskal()>/new java.util.LinkedList/2	<Graph: Graph kruskal()>/vxiter_$$A_1#_415
<Graph: Graph kruskal()>/new Graph/0	<Graph: Graph kruskal()>/e1_$$A_1#_481
<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539
<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<Graph: Graph prim(Vertex)>/indx#_540
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630
Graph$Comparator3::: (Mock)	<Graph: void sortVertices(java.util.Comparator)>/c#_0
Graph$Comparator3::: (Mock)	<Graph: void sortEdges(java.util.Comparator)>/c#_0
Neighbor::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0
Vertex::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/start#_0
java.lang.String::: (Mock)	<Graph: void runBenchmark(java.lang.String)>/FileName#_0
Vertex::: (Mock)	<Graph: void run(Vertex)>/v#_0
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0
WorkSpace::: (Mock)	<Graph: void graphSearch(WorkSpace)>/w#_0
Graph::: (Mock)	<Graph: Graph computeTranspose(Graph)>/the_graph#_0
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/r#_0
Vertex::: (Mock)	<WorkSpace: void init_vertex(Vertex)>/v#_0
Vertex::: (Mock)	<WorkSpace: void preVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<WorkSpace: void postVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<WorkSpace: void nextRegionAction(Vertex)>/v#_0
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0
Vertex::: (Mock)	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0
Vertex::: (Mock)	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/v#_0
Edge::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0
Edge::: (Mock)	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l1#_0
java.lang.Object::: (Mock)	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l2#_0
Vertex::: (Mock)	<RegionWorkSpace: void init_vertex(Vertex)>/v#_0
Vertex::: (Mock)	<RegionWorkSpace: void postVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<RegionWorkSpace: void nextRegionAction(Vertex)>/v#_0
Vertex::: (Mock)	<NumberWorkSpace: void preVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0
Vertex::: (Mock)	<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l1#_0
java.lang.Object::: (Mock)	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l2#_0
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0
Vertex::: (Mock)	<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l1#_0
java.lang.Object::: (Mock)	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l2#_0
Vertex::: (Mock)	<CycleWorkSpace: void init_vertex(Vertex)>/v#_0
Vertex::: (Mock)	<CycleWorkSpace: void preVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<CycleWorkSpace: void postVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0
Vertex::: (Mock)	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/the_start#_0
Vertex::: (Mock)	<Edge: void <init>(Vertex,Vertex,int)>/the_end#_0
Edge::: (Mock)	<Edge: void adjustAdorns(EdgeIfc)>/the_edge#_0
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/vertex#_0
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,int)>/theNeighbor#_0
Vertex::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/vertex#_0
Edge::: (Mock)	<Neighbor: void adjustAdorns(EdgeIfc)>/the_edge#_0
Edge::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/e#_0
Vertex::: (Mock)	<Neighbor: void <init>(Vertex,Edge)>/v#_0
java.lang.String::: (Mock)	<Vertex: Vertex assignName(java.lang.String)>/name#_0
Vertex::: (Mock)	<Vertex: void addAdjacent(Vertex)>/n#_0
Vertex::: (Mock)	<Vertex: void adjustAdorns(Vertex,int)>/the_vertex#_0
Vertex::: (Mock)	<Vertex: Vertex getOtherVertex(Vertex)>/vertex#_0
Edge::: (Mock)	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0
Neighbor::: (Mock)	<Vertex: void addEdge(Neighbor)>/n#_0
Neighbor::: (Mock)	<Vertex: void adjustAdorns(Neighbor)>/sourceNeighbor#_0
Neighbor::: (Mock)	<Vertex: void addNeighbor(Neighbor)>/n#_0
WorkSpace::: (Mock)	<Vertex: void init_vertex(WorkSpace)>/w#_0
WorkSpace::: (Mock)	<Vertex: void nodeSearch(WorkSpace)>/w#_0
Vertex::: (Mock)	<WorkSpaceTranspose: void preVisitAction(Vertex)>/v#_0
Vertex::: (Mock)	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/v#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Main: EdgeIfc addEdge(Graph,int)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void readWeights(Graph,int)>/@parameter0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void <init>()>/@this
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void <init>()>/@this
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<GlobalVarsWrapper: void <clinit>()>/$r0
Vertex::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/root#_522
<Main: void main(java.lang.String[])>/new Graph/0	<Main: EdgeIfc addEdge(Graph,int)>/g#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Main: void readWeights(Graph,int)>/g#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void <init>()>/this#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void <init>()>/this#_0
java.lang.String::: (Mock)	<Main: void main(java.lang.String[])>/$r1
java.lang.String::: (Mock)	<Main: void main(java.lang.String[])>/$r16
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void runBenchmark(java.lang.String)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: int readNumber()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void addVertex(Vertex)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void stopBenchmark()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void run(Vertex)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void display()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void runBenchmark(java.lang.String)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: int readNumber()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void stopBenchmark()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void run(Vertex)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void display()>/this#_0
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: void stopBenchmark()>/$r0
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: int readNumber()>/$r0
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: int readNumber()>/$r1
<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<Graph: int readNumber()>/$r2
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r0
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r2
Vertex::: (Mock)	<Edge: Vertex getStart()>/$r0
Vertex::: (Mock)	<Edge: void display()>/$r6
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r1
Vertex::: (Mock)	<Edge: Vertex getOtherVertex(Vertex)>/$r3
Vertex::: (Mock)	<Edge: Vertex getEnd()>/$r0
Vertex::: (Mock)	<Edge: void display()>/$r10
<<null pseudo heap>>	<Neighbor: void display()>/$r1
<<null pseudo heap>>	<Neighbor: Vertex getEnd()>/$r0
<<null pseudo heap>>	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0
Vertex::: (Mock)	<Neighbor: void display()>/$r1
Vertex::: (Mock)	<Neighbor: Vertex getEnd()>/$r0
Vertex::: (Mock)	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0
java.lang.String::: (Mock)	<Vertex: java.lang.String getName()>/$r0
java.lang.String::: (Mock)	<Vertex: void display()>/$r12
<<null pseudo heap>>	<Graph: void addEdge(Vertex,Neighbor)>/end#_148
Vertex::: (Mock)	<Graph: void addEdge(Vertex,Neighbor)>/end#_148
Vertex::: (Mock)	<Main: void main(java.lang.String[])>/$r10
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/@this
Graph::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/@this
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: void <init>(Graph)>/@this
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@this
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Neighbor: void <init>(Vertex,int)>/@this
<Graph: void numberVertices()>/new NumberWorkSpace/0	<NumberWorkSpace: void <init>()>/@this
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void <init>()>/@this
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<FinishTimeWorkSpace: void <init>()>/@this
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@this
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void <init>()>/@this
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void <init>()>/@this
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void <init>()>/@this
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<CycleWorkSpace: void <init>()>/@this
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@this
<Graph: Graph kruskal()>/new Graph/0	<Graph: void <init>()>/@this
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void <init>()>/@this
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@this
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void <init>()>/@this
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void <init>()>/@this
FinishTimeWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this
RegionWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this
NumberWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this
CycleWorkSpace::: (Mock)	<WorkSpace: void <init>()>/@this
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@this
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@this
WorkSpaceTranspose::: (Mock)	<WorkSpace: void <init>()>/@this
<<null pseudo heap>>	<Vertex: void <init>()>/$null0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: Vertex assignName(java.lang.String)>/this#_0
Graph::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: void <init>(Graph)>/this#_0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l0#_0
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Neighbor: void <init>(Vertex,int)>/this#_0
<Graph: void numberVertices()>/new NumberWorkSpace/0	<NumberWorkSpace: void <init>()>/this#_0
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void <init>()>/this#_0
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<FinishTimeWorkSpace: void <init>()>/this#_0
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l0#_0
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void <init>()>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void <init>()>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void <init>()>/this#_0
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<CycleWorkSpace: void <init>()>/this#_0
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l0#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: void <init>()>/this#_0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void <init>()>/this#_0
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l0#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void <init>()>/this#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void <init>()>/this#_0
FinishTimeWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0
RegionWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0
NumberWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0
CycleWorkSpace::: (Mock)	<WorkSpace: void <init>()>/this#_0
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l0#_0
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l0#_0
WorkSpaceTranspose::: (Mock)	<WorkSpace: void <init>()>/this#_0
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r0
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r1
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r2
<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<Vertex: void nodeSearch(WorkSpace)>/$r4
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10
java.lang.String::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void addVertex(Vertex)>/@this
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: VertexIter getVertices()>/@this
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<Graph: Graph kruskal()>/new Graph/0	<Graph: void addVertex(Vertex)>/@this
<Graph: Graph kruskal()>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/@this
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void addVertex(Vertex)>/@this
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/@this
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void <init>()>/$r0
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph: void <init>()>/$r1
<Vertex: void <init>()>/new java.util.LinkedList/0	<Vertex: void <init>()>/$r0
<Vertex: void <init>()>/new java.util.LinkedList/1	<Vertex: void <init>()>/$r1
<Vertex: void <init>()>/new java.util.LinkedList/2	<Vertex: void <init>()>/$r2
<Vertex: void <init>()>/new java.util.LinkedList/3	<Vertex: void <init>()>/$r3
<<string-constant>>	<Graph: void display()>/$stringconstant0
<<string-constant>>	<Graph: void display()>/$stringconstant1
<<string-constant>>	<Graph: void display()>/$stringconstant2
<<string-constant>>	<Graph: void display()>/$stringconstant3
<<string-constant>>	<Graph: void display()>/$stringconstant4
<<null pseudo heap>>	<Graph: Vertex findsVertex(java.lang.String)>/$null0
<<null pseudo heap>>	<Graph: Vertex findsVertex(java.lang.String)>/$null1
java.lang.String::: (Mock)	<Graph: Vertex findsVertex(java.lang.String)>/name#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void addVertex(Vertex)>/this#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<<null pseudo heap>>	<Vertex: void display()>/$r54
java.lang.String::: (Mock)	<Neighbor: void display()>/$r2
<Graph: Graph kruskal()>/new Graph/0	<Graph: void run(Vertex)>/gaux#_259
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void run(Vertex)>/gaux1#_264
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: void graphSearch(WorkSpace)>/vxiter#_293
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: Graph strongComponents()>/gaux#_334
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph computeTranspose(Graph)>/vxiter#_353
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph kruskal()>/vxiter#_406
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph: Graph kruskal()>/edgeiter#_428
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph kruskal()>/$r27
Vertex::: (Mock)	<Graph: Graph kruskal()>/$r27
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter#_526
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/$r15
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/e#_664
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex: void display()>/vxiter_$$A_1#_265
<Graph: void numberVertices()>/new NumberWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph: void sortVertices(java.util.Comparator)>/@parameter0
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/@parameter0
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph: void sortEdges(java.util.Comparator)>/@parameter0
Graph::: (Mock)	<VertexIter: void <init>(Graph)>/@parameter0
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<<null pseudo heap>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter1
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0
<<null pseudo heap>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter1
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0
<<null pseudo heap>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter1
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0
<<null pseudo heap>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter1
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter0
<<null pseudo heap>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter1
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter0
<<null pseudo heap>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter1
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v#_358
<Graph: void numberVertices()>/new NumberWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph: void sortVertices(java.util.Comparator)>/c#_0
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<Graph: void graphSearch(WorkSpace)>/w#_0
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph: void sortEdges(java.util.Comparator)>/c#_0
Graph::: (Mock)	<VertexIter: void <init>(Graph)>/g#_0
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<<null pseudo heap>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l2#_0
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0
<<null pseudo heap>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l2#_0
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0
<<null pseudo heap>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l2#_0
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0
<<null pseudo heap>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l2#_0
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l1#_0
<<null pseudo heap>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l2#_0
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l1#_0
<<null pseudo heap>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l2#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void display()>/$r2
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void display()>/$r3
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void addVertex(Vertex)>/$r0
Vertex::: (Mock)	<Main: void main(java.lang.String[])>/$r12
Vertex::: (Mock)	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
Vertex::: (Mock)	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph kruskal()>/$r27
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph kruskal()>/$r27
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15
<Graph: Graph kruskal()>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph kruskal()>/$r27
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph prim(Vertex)>/$r15
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r10
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r1
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r7
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r3
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r5
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Graph computeTranspose(Graph)>/newvxiter#_366
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void connectedComponents()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: boolean cycleCheck()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph kruskal()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph prim(Vertex)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void numberVertices()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph strongComponents()>/@this
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v#_358
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void connectedComponents()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: boolean cycleCheck()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph kruskal()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph prim(Vertex)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void numberVertices()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph strongComponents()>/this#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<<null pseudo heap>>	<Graph: Graph kruskal()>/theNewEnd#_505
<<null pseudo heap>>	<Graph: Graph kruskal()>/j_$$A_1#_504
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/theNewVertex#_658
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/theNewPred#_659
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/vtx_$$A_3#_650
<<null pseudo heap>>	<Main: void main(java.lang.String[])>/$r17
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void run(Vertex)>/gaux2#_271
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r0
java.lang.String::: (Mock)	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r2
java.lang.String::: (Mock)	<Graph: Graph prim(Vertex)>/$r2
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0
Vertex::: (Mock)	<Graph: void addVertex(Vertex)>/@parameter0
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void <init>()>/@this
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<WorkSpace: void <init>()>/@this
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void <init>()>/@this
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void <init>()>/@this
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpace: void <init>()>/@this
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
Vertex::: (Mock)	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/vtx_$$A_2#_666
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0
Vertex::: (Mock)	<Graph: void addVertex(Vertex)>/v#_0
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void <init>()>/this#_0
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<WorkSpace: void <init>()>/this#_0
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void <init>()>/this#_0
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void <init>()>/this#_0
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpace: void <init>()>/this#_0
java.lang.String::: (Mock)	<Edge: void display()>/$r7
java.lang.String::: (Mock)	<Edge: void display()>/$r11
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0
<Graph: Graph kruskal()>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: void addVertex(Vertex)>/@parameter0
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Vertex: void addEdge(Neighbor)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: VertexIter getVertices()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIter getEdges()>/@this
<Graph: Graph kruskal()>/new Graph/0	<Graph: void display()>/@this
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void display()>/@this
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: boolean hasNext()>/@this
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: Vertex next()>/@this
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/@this
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: EdgeIfc next()>/@this
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: boolean hasNext()>/@this
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: Vertex next()>/@this
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: boolean hasNext()>/@this
<Graph: Graph kruskal()>/new Graph/0	<Graph: VertexIter getVertices()>/@this
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: VertexIter getVertices()>/@this
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
Vertex::: (Mock)	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0
<Graph: Graph kruskal()>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: void addVertex(Vertex)>/v#_0
<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<Vertex: void addEdge(Neighbor)>/n#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: void display()>/this#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: void display()>/this#_0
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: boolean hasNext()>/this#_0
<Graph: VertexIter getVertices()>/new VertexIter/0	<VertexIter: Vertex next()>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/this#_0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: EdgeIfc next()>/this#_0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: boolean hasNext()>/this#_0
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: Vertex next()>/this#_0
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: boolean hasNext()>/this#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: VertexIter getVertices()>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12
<Graph: Graph kruskal()>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: void main(java.lang.String[])>/$r12
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<Graph: Graph kruskal()>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<Graph: Graph kruskal()>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0
<<null pseudo heap>>	<Graph: void run(Vertex)>/@parameter0
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/@this
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/@this
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/@this
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph)>/@this
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph)>/@this
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph)>/@this
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph)>/@this
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex)>/@this
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/the_graph#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<null pseudo heap>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0
<<null pseudo heap>>	<Graph: void run(Vertex)>/v#_0
<Graph: void numberVertices()>/new NumberWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
<Graph: void connectedComponents()>/new RegionWorkSpace/0	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0
<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph$EdgeIter1: void <init>(Graph)>/this#_0
<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<Graph$Comparator1: void <init>(Graph)>/this#_0
<Graph: Graph kruskal()>/new Graph$Comparator3/0	<Graph$Comparator3: void <init>(Graph)>/this#_0
<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<Graph$Comparator2: void <init>(Graph)>/this#_0
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<Vertex$VertexIter1: void <init>(Vertex)>/this#_0
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: void <init>(Vertex)>/this#_0
<Graph: void <init>()>/new java.util.LinkedList/0	<VertexIter: void <init>(Graph)>/$r0
<Graph: VertexIter getVertices()>/new VertexIter/0	<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<Graph: void display()>/edgeiter_$$A_1#_177
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: void graphSearch(WorkSpace)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void display()>/@this
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: EdgeIfc next()>/@this
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: boolean hasNext()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortVertices(java.util.Comparator)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortEdges(java.util.Comparator)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this
<<null pseudo heap>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<Graph: void graphSearch(WorkSpace)>/w#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: void display()>/this#_0
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<Vertex$EdgeIter1: boolean hasNext()>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void graphSearch(WorkSpace)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortVertices(java.util.Comparator)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: Graph computeTranspose(Graph)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: void sortEdges(java.util.Comparator)>/this#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0
Vertex::: (Mock)	<Graph: Graph kruskal()>/theNewEdge#_511
Vertex::: (Mock)	<Graph: Graph prim(Vertex)>/theNewEdge#_663
Vertex::: (Mock)	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<Main: void main(java.lang.String[])>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<Graph: Graph kruskal()>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0
<Graph: Graph prim(Vertex)>/new Graph/0	<VertexIter: void <init>(Graph)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph)>/@parameter0
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph)>/@parameter0
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph)>/@parameter0
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex)>/@parameter0
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<Graph: Graph kruskal()>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<VertexIter: void <init>(Graph)>/g#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<Graph: Graph kruskal()>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
Graph::: (Mock)	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
Graph::: (Mock)	<Graph$Comparator1: void <init>(Graph)>/l1#_0
Graph::: (Mock)	<Graph$Comparator3: void <init>(Graph)>/l1#_0
Graph::: (Mock)	<Graph$Comparator2: void <init>(Graph)>/l1#_0
Vertex::: (Mock)	<Vertex$VertexIter1: void <init>(Vertex)>/l1#_0
Vertex::: (Mock)	<Vertex$EdgeIter1: void <init>(Vertex)>/l1#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511
<Main: void main(java.lang.String[])>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<Main: void main(java.lang.String[])>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<<null pseudo heap>>	<Graph: Graph kruskal()>/theNewEdge#_511
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<<null pseudo heap>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph)>/@parameter0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph)>/@parameter0
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/@parameter0
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIter getEdges()>/@this
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIter getEdges()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator3: void <init>(Graph)>/l1#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator2: void <init>(Graph)>/l1#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$Comparator1: void <init>(Graph)>/l1#_0
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/r#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0
<Graph: void <init>()>/new java.util.LinkedList/0	<Graph: void sortVertices(java.util.Comparator)>/$r0
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph: void sortEdges(java.util.Comparator)>/$r0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void setWeight(int)>/@this
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addWeight(int)>/@this
<<null pseudo heap>>	<Graph: Graph prim(Vertex)>/root#_522
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511
<Graph: Graph kruskal()>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<Graph: Graph kruskal()>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph kruskal()>/theNewEdge#_511
<Graph: Graph prim(Vertex)>/new Vertex/0	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<Graph: Graph prim(Vertex)>/new Vertex/0	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<<null pseudo heap>>	<Vertex: void addAdjacent(Vertex)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@parameter0
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIter getEdges()>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<<null pseudo heap>>	<Vertex: void addAdjacent(Vertex)>/n#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/n#_0
<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: EdgeIter getEdges()>/this#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
Graph::: (Mock)	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/@this
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void setWeight(int)>/@this
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void setWeight(int)>/@this
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void setWeight(int)>/@this
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addWeight(int)>/@this
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addWeight(int)>/@this
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addWeight(int)>/@this
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<EdgeIter: void <init>()>/@this
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<VertexIter: void <init>()>/@this
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<EdgeIter: void <init>()>/@this
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
Graph::: (Mock)	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<Main: void main(java.lang.String[])>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addAdjacent(Vertex)>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void setWeight(int)>/this#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void addWeight(int)>/this#_0
<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<EdgeIter: void <init>()>/this#_0
<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<VertexIter: void <init>()>/this#_0
<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<EdgeIter: void <init>()>/this#_0
<Vertex: void <init>()>/new java.util.LinkedList/0	<Vertex: void addAdjacent(Vertex)>/$r0
<Vertex: void <init>()>/new java.util.LinkedList/3	<Vertex: void addWeight(int)>/$r1
<Vertex: void <init>()>/new java.util.LinkedList/1	<Vertex: void addWeight(int)>/$r2
<Vertex: void <init>()>/new java.util.LinkedList/0	<Vertex: void setWeight(int)>/$r0
<<null pseudo heap>>	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0
<<null pseudo heap>>	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<Main: void main(java.lang.String[])>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<Graph: Graph kruskal()>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<Graph: Graph prim(Vertex)>/new Vertex/0	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<Graph: Graph kruskal()>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph: java.util.LinkedList access$0(Graph)>/$r0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<Graph: Graph kruskal()>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<Graph: Graph kruskal()>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<Graph: Graph prim(Vertex)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<Graph: void <init>()>/new java.util.LinkedList/1	<Graph$EdgeIter1: void <init>(Graph)>/$r0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<Graph: Graph computeTranspose(Graph)>/new Graph/0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
