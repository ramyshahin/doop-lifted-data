<<unique-hcontext>>	java.lang.String[]::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/@parameter0
<<unique-hcontext>>	java.lang.String[]::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/args#_0
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$stringconstant0
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$stringconstant1
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$r7
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$r18
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r3
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/1	<<unique-context>>	<Main: void main(java.lang.String[])>/$r4
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void endProfile()>/$stringconstant0
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Graph: void endProfile()>/$r0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r2
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r5
<<unique-hcontext>>	GlobalVarsWrapper::: (Mock)	<<unique-context>>	<GlobalVarsWrapper: void <init>()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: VertexIter getVertices()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void stopBenchmark()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: int readNumber()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void numberVertices()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void connectedComponents()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph strongComponents()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: boolean cycleCheck()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: Vertex next()>/@this
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: boolean hasNext()>/@this
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: void <init>()>/@this
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: boolean hasNext()>/@this
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: EdgeIfc next()>/@this
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: Vertex next()>/@this
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: boolean hasNext()>/@this
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: EdgeIfc next()>/@this
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: boolean hasNext()>/@this
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/@this
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@this
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@this
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@this
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@this
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: Vertex next()>/@this
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: boolean hasNext()>/@this
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void <init>()>/@this
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/@this
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/@this
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	Main::: (Mock)	<<unique-context>>	<Main: void <init>()>/@this
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void <init>()>/@this
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/@this
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/@this
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@this
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/@this
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@this
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/@this
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void <init>()>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: EdgeIfc next()>/@this
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: boolean hasNext()>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void setWeight(int)>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: int getWeight()>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getStart()>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getEnd()>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void display()>/@this
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/@this
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/@this
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/@this
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>()>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void display()>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getStart()>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getEnd()>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void setWeight(int)>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: int getWeight()>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.lang.String getName()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getStart()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getEnd()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: int getWeight()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: EdgeIter getEdges()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.util.LinkedList getNeighborsObj()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addWeight(int)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void setWeight(int)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void display()>/@this
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/@this
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@this
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/$stringconstant0
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/$r2
<<unique-hcontext>>	<Graph: int readNumber()>/new char[]/0	<<unique-context>>	<Graph: int readNumber()>/word#_208
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void run(Vertex)>/$stringconstant0
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Graph: void run(Vertex)>/$r0
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Edge: void display()>/$stringconstant0
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Edge: void display()>/$stringconstant1
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Edge: void display()>/$r0
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Edge: void display()>/$r4
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Neighbor: void display()>/$r0
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant0
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant1
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant2
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant3
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant4
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant5
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant6
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant7
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant8
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant9
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant10
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r2
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r10
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r16
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r23
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r28
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r33
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r39
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r45
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r52
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIter getEdges()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph strongComponents()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/$null1
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/$null2
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<EdgeIter: EdgeIfc next()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void <init>()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void <init>()>/$null1
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void <init>()>/$null2
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: Vertex getStart()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: Vertex getEnd()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: EdgeIter getEdges()>/$null0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void main(java.lang.String[])>/g#_16
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r13
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/1	<<unique-context>>	<Main: void main(java.lang.String[])>/$r14
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: VertexIter getVertices()>/$r0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/$r0
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/$r0
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/$r0
<<unique-hcontext>>	<Graph: int readNumber()>/new java.lang.String/0	<<unique-context>>	<Graph: int readNumber()>/$r3
<<unique-hcontext>>	<Graph: int readNumber()>/new java.lang.String/1	<<unique-context>>	<Graph: int readNumber()>/$r4
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<Graph: void numberVertices()>/$r0
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<Graph: void connectedComponents()>/$r0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: Graph strongComponents()>/$r0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph: Graph strongComponents()>/$r1
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: Graph strongComponents()>/$r2
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/$r0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/$r1
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/$r3
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: boolean cycleCheck()>/$r0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph kruskal()>/$r0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: Graph kruskal()>/$r1
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/2	<<unique-context>>	<Graph: Graph kruskal()>/$r2
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph: Graph kruskal()>/$r3
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/$r24
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r26
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r1
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r11
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r13
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r14
<<unique-hcontext>>	<Vertex: void adjustAdorns(Vertex,int)>/new java.lang.Integer/0	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/$r3
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/$r0
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex: EdgeIter getEdges()>/$r0
<<unique-hcontext>>	<Vertex: void addWeight(int)>/new java.lang.Integer/0	<<unique-context>>	<Vertex: void addWeight(int)>/$r0
<<unique-hcontext>>	GlobalVarsWrapper::: (Mock)	<<unique-context>>	<GlobalVarsWrapper: void <init>()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void stopBenchmark()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: int readNumber()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void numberVertices()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void connectedComponents()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph strongComponents()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: boolean cycleCheck()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: Vertex next()>/this#_0
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: boolean hasNext()>/this#_0
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: void <init>()>/this#_0
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: boolean hasNext()>/this#_0
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: EdgeIfc next()>/this#_0
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: Vertex next()>/this#_0
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: boolean hasNext()>/this#_0
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: EdgeIfc next()>/this#_0
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: boolean hasNext()>/this#_0
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/this#_0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l0#_0
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: Vertex next()>/this#_0
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: boolean hasNext()>/this#_0
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/this#_0
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	Main::: (Mock)	<<unique-context>>	<Main: void <init>()>/this#_0
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/this#_0
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l0#_0
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/this#_0
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l0#_0
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/this#_0
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: EdgeIfc next()>/this#_0
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: boolean hasNext()>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void setWeight(int)>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: int getWeight()>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getStart()>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getEnd()>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void display()>/this#_0
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/this#_0
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/this#_0
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>()>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void display()>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getStart()>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getEnd()>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void setWeight(int)>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: int getWeight()>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.lang.String getName()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getStart()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getEnd()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: int getWeight()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: EdgeIter getEdges()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.util.LinkedList getNeighborsObj()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void display()>/this#_0
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/this#_0
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r6
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r11
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r1
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r3
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/1	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r2
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@parameter0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@parameter0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/@parameter0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter1
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter1
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter1
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter1
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/@parameter0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/@parameter0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/@parameter0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/@parameter0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/@parameter0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/@parameter0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/@parameter0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/@parameter0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: int readNumber()>/new java.lang.String/0	<<unique-context>>	<Graph: int readNumber()>/theString#_224
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: Graph strongComponents()>/FTWS#_324
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: Graph strongComponents()>/WST#_337
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/newVertices#_347
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/newGraph#_350
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: boolean cycleCheck()>/c#_393
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph kruskal()>/A#_401
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/2	<<unique-context>>	<Graph: Graph kruskal()>/vxiter_$$A_1#_415
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/e1_$$A_1#_481
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/indx#_540
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/c#_0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/c#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/start#_0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/FileName#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/the_graph#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/r#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l1#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l1#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l1#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/the_start#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/the_end#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/the_edge#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/vertex#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/theNeighbor#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/vertex#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/the_edge#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/e#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/v#_0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/name#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/the_vertex#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/vertex#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/n#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/sourceNeighbor#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/n#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/w#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/v#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void readWeights(Graph,int)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<GlobalVarsWrapper: void <clinit>()>/$r0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/root#_522
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/g#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void readWeights(Graph,int)>/g#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r1
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r16
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: int readNumber()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void stopBenchmark()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: int readNumber()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void stopBenchmark()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: void stopBenchmark()>/$r0
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: int readNumber()>/$r0
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: int readNumber()>/$r1
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: int readNumber()>/$r2
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r2
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getStart()>/$r0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void display()>/$r6
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r3
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getEnd()>/$r0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void display()>/$r10
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void display()>/$r1
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: Vertex getEnd()>/$r0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void display()>/$r1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getEnd()>/$r0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: java.lang.String getName()>/$r0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: void display()>/$r12
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/end#_148
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/end#_148
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@this
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@this
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/@this
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<NumberWorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@this
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<CycleWorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@this
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@this
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void <init>()>/$null0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/this#_0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l0#_0
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/this#_0
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<NumberWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l0#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<CycleWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l0#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l0#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l0#_0
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l0#_0
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r0
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r1
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r2
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r4
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void <init>()>/$r0
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: void <init>()>/$r1
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void <init>()>/$r0
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Vertex: void <init>()>/$r1
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/2	<<unique-context>>	<Vertex: void <init>()>/$r2
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/3	<<unique-context>>	<Vertex: void <init>()>/$r3
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant0
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant1
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant2
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant3
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant4
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/$null1
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/name#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void display()>/$r54
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Neighbor: void display()>/$r2
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/gaux#_259
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/gaux1#_264
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/vxiter#_293
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: Graph strongComponents()>/gaux#_334
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/vxiter#_353
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph kruskal()>/vxiter#_406
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph: Graph kruskal()>/edgeiter#_428
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/$r27
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter#_526
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/e#_664
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: void display()>/vxiter_$$A_1#_265
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@parameter0
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter1
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter1
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter1
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter1
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/c#_0
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/c#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l2#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l2#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l2#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l2#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void display()>/$r2
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void display()>/$r3
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/$r0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r1
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r7
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r3
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r5
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/newvxiter#_366
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void connectedComponents()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: boolean cycleCheck()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void numberVertices()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph strongComponents()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void connectedComponents()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: boolean cycleCheck()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void numberVertices()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph strongComponents()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/theNewEnd#_505
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/j_$$A_1#_504
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewVertex#_658
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewPred#_659
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/vtx_$$A_3#_650
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$r17
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/gaux2#_271
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r2
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r2
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/vtx_$$A_2#_666
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Edge: void display()>/$r7
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Edge: void display()>/$r11
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: boolean hasNext()>/@this
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: Vertex next()>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@this
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/@this
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/@this
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/@this
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/n#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: boolean hasNext()>/this#_0
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: Vertex next()>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/this#_0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/this#_0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/this#_0
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/this#_0
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: void run(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@this
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/@this
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/@this
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/the_graph#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: void run(Vertex)>/v#_0
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/this#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/this#_0
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/this#_0
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/$r0
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph: void display()>/edgeiter_$$A_1#_177
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/@this
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/l1#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/l1#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/r#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/$r0
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/$r0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/root#_522
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/@this
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<VertexIter: void <init>()>/@this
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/this#_0
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<VertexIter: void <init>()>/this#_0
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/this#_0
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/$r0
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/3	<<unique-context>>	<Vertex: void addWeight(int)>/$r1
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Vertex: void addWeight(int)>/$r2
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void setWeight(int)>/$r0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/$r0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/$r0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0
