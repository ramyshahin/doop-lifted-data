<com.sleepycat.je.txn.SyncedLockManager: boolean isLocked(java.lang.Long)>
<com.sleepycat.je.evictor.Evictor$ScanIterator: void remove()>
<com.sleepycat.je.txn.SyncedLockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>
<com.sleepycat.je.txn.SyncedLockManager: boolean isWaiter(java.lang.Long,com.sleepycat.je.txn.Locker)>
<com.sleepycat.je.txn.SyncedLockManager: int nWaiters(java.lang.Long)>
<com.sleepycat.je.txn.SyncedLockManager: int nOwners(java.lang.Long)>
<com.sleepycat.je.log.SearchFileReader: boolean isTargetEntry(byte,byte)>
<com.sleepycat.je.log.SearchFileReader: boolean processEntry(java.nio.ByteBuffer)>
<com.sleepycat.je.config.IntConfigParam: void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer,boolean,java.lang.String)>
<com.sleepycat.je.tree.BIN: boolean isEvictionProhibited()>
<com.sleepycat.je.tree.BIN: boolean hasNonLNChildren()>
<com.sleepycat.je.tree.BIN: int getChildEvictionType()>
<com.sleepycat.je.tree.BIN: void splitSpecial(com.sleepycat.je.tree.IN,int,int,byte[],boolean)>
<com.sleepycat.je.config.ConfigParam: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String)>
<com.sleepycat.je.tree.DBIN: com.sleepycat.je.tree.IN createNewInstance(byte[],int,int)>
<com.sleepycat.je.tree.DBIN: boolean hasNonLNChildren()>
<com.sleepycat.je.tree.DBIN: void setCursorBIN(com.sleepycat.je.dbi.CursorImpl,com.sleepycat.je.tree.BIN)>
<com.sleepycat.je.Environment: long getMemoryUsage()>
<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.Lock getWaitingFor()>
<com.sleepycat.je.tree.IN: long[] getEntryLsnLongArray()>
<com.sleepycat.je.tree.IN: byte[] getEntryLsnByteArray()>
<com.sleepycat.je.tree.IN: void initEntryLsn(int)>
<com.sleepycat.je.utilint.DaemonThread: int nDeadlockRetries()>
<com.sleepycat.je.Environment: void upgrade()>
<com.sleepycat.je.tree.IN: int getMaxEntries()>
<com.sleepycat.je.txn.Locker: void rememberHandleWriteLock(java.lang.Long)>
<com.sleepycat.je.latch.Java5LatchImpl$JEReentrantLock: void <init>(boolean)>
<com.sleepycat.je.latch.Java5LatchImpl$JEReentrantLock: java.lang.Thread getOwner()>
<com.sleepycat.je.config.LongConfigParam: void <init>(java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,boolean,java.lang.String)>
<com.sleepycat.je.txn.Txn: long getLastLsn()>
<com.sleepycat.je.tree.IN: boolean deleteEntry(byte[],boolean)>
<com.sleepycat.je.tree.IN: void splitSpecial(com.sleepycat.je.tree.IN,int,int,byte[],boolean)>
<com.sleepycat.je.txn.Txn: long getFirstActiveLsn()>
<com.sleepycat.je.DatabaseUtil: void <init>()>
<com.sleepycat.je.tree.DeltaInfo: byte[] getKey()>
<com.sleepycat.je.tree.DeltaInfo: byte getState()>
<com.sleepycat.je.tree.DeltaInfo: boolean isKnownDeleted()>
<com.sleepycat.je.tree.DeltaInfo: long getLsn()>
<com.sleepycat.je.txn.LatchedLockManager: boolean isLocked(java.lang.Long)>
<com.sleepycat.je.txn.LatchedLockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>
<com.sleepycat.je.txn.LatchedLockManager: boolean isWaiter(java.lang.Long,com.sleepycat.je.txn.Locker)>
<com.sleepycat.je.txn.LatchedLockManager: int nWaiters(java.lang.Long)>
<com.sleepycat.je.txn.LatchedLockManager: int nOwners(java.lang.Long)>
<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.TreeStats getTreeStats()>
<com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig cloneConfig()>
<com.sleepycat.je.SecondaryTrigger: com.sleepycat.je.SecondaryDatabase getDb()>
<com.sleepycat.je.tree.IN: void dumpKeys()>
<com.sleepycat.je.SecondaryDatabase: void clearPrimary()>
<com.sleepycat.je.SecondaryDatabase: void clearForeignKeyTrigger()>
<com.sleepycat.je.cleaner.OffsetList$Segment: void setNext(com.sleepycat.je.cleaner.OffsetList$Segment)>
<com.sleepycat.je.log.FileHeader: boolean validate(java.lang.String,long)>
<com.sleepycat.je.log.FileHeader: long getLastEntryInPrevFileOffset()>
<com.sleepycat.je.SecondaryDatabase: void onForeignKeyDelete(com.sleepycat.je.txn.Locker,com.sleepycat.je.DatabaseEntry)>
<com.sleepycat.je.util.DbRunAction: void doEvict(com.sleepycat.je.Environment)>
<com.sleepycat.je.cleaner.TrackedFileSummary: int getMemorySize()>
<com.sleepycat.je.cleaner.TrackedFileSummary: boolean containsObsoleteOffset(long)>
<com.sleepycat.je.tree.Tree: void forceSplit(com.sleepycat.je.tree.IN,byte[])>
<com.sleepycat.je.log.FileManager$FileCache: java.util.Set getCacheKeys()>
<com.sleepycat.je.Database: void removeTrigger(com.sleepycat.je.DatabaseTrigger)>
<com.sleepycat.je.log.FileManager$FileCache: java.util.Set access$3(com.sleepycat.je.log.FileManager$FileCache)>
<com.sleepycat.je.latch.Java5LatchImpl: void <init>()>
<com.sleepycat.je.tree.Node: void <init>()>
<com.sleepycat.je.tree.Node: void setNodeId(long)>
<com.sleepycat.je.tree.Node: int getLevel()>
<com.sleepycat.je.tree.Tree: boolean validateDelete(int)>
<com.sleepycat.je.config.ShortConfigParam: void <init>(java.lang.String,java.lang.Short,java.lang.Short,java.lang.Short,boolean,java.lang.String)>
<com.sleepycat.je.txn.TxnCommit: java.lang.String getTagName()>
<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: void <init>(int)>
<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: boolean isEmpty()>
<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: boolean isFull()>
<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: java.lang.Long nextOffset()>
<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: void add(java.lang.Long,com.sleepycat.je.cleaner.LNInfo)>
<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: com.sleepycat.je.cleaner.LNInfo remove(java.lang.Long)>
<com.sleepycat.je.txn.LockManager: boolean isLockedInternal(java.lang.Long,int)>
<com.sleepycat.je.txn.LockManager: boolean isWaiterInternal(java.lang.Long,com.sleepycat.je.txn.Locker,int)>
<com.sleepycat.je.txn.LockManager: int nWaitersInternal(java.lang.Long,int)>
<com.sleepycat.je.txn.LockManager: int nOwnersInternal(java.lang.Long,int)>
<com.sleepycat.je.txn.Lock: void flushWaiter(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.MemoryBudget,int)>
<com.sleepycat.je.recovery.Checkpointer: int nDeadlockRetries()>
<com.sleepycat.je.recovery.Checkpointer: void onWakeup()>
<com.sleepycat.je.txn.Lock: boolean flushOwner(com.sleepycat.je.txn.LockInfo,com.sleepycat.je.dbi.MemoryBudget,int)>
<com.sleepycat.je.txn.Lock: boolean isOwner(com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>
<com.sleepycat.je.txn.Lock: boolean isWaiter(com.sleepycat.je.txn.Locker)>
<com.sleepycat.je.txn.Lock: void demote(com.sleepycat.je.txn.Locker)>
<com.sleepycat.je.txn.Lock: com.sleepycat.je.txn.LockType transfer(com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.MemoryBudget,int)>
<com.sleepycat.je.txn.Lock: com.sleepycat.je.txn.LockType setNewLocker(com.sleepycat.je.txn.LockInfo,com.sleepycat.je.txn.Locker)>
<com.sleepycat.je.txn.Lock: com.sleepycat.je.txn.LockType transferMultiple(com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.Locker[],com.sleepycat.je.dbi.MemoryBudget,int)>
<com.sleepycat.je.txn.Lock: com.sleepycat.je.txn.LockInfo cloneLockInfo(com.sleepycat.je.txn.LockInfo,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.Locker[],com.sleepycat.je.dbi.MemoryBudget,int)>
<com.sleepycat.je.txn.Lock: com.sleepycat.je.txn.Locker getWriteOwnerLocker()>
<com.sleepycat.je.tree.Tree$RootChildReference: void <init>(com.sleepycat.je.tree.Tree,com.sleepycat.je.tree.Node,byte[],long,byte)>
<com.sleepycat.je.log.CleanerFileReader: boolean isTargetEntry(byte,byte)>
<com.sleepycat.je.log.CleanerFileReader: boolean processEntry(java.nio.ByteBuffer)>
<com.sleepycat.je.recovery.CheckpointEnd: long getCheckpointStartLsn()>
<com.sleepycat.je.recovery.CheckpointEnd: long getRootLsn()>
<com.sleepycat.je.recovery.CheckpointEnd: long getFirstActiveLsn()>
<com.sleepycat.je.recovery.CheckpointEnd: long getLastNodeId()>
<com.sleepycat.je.recovery.CheckpointEnd: int getLastDbId()>
<com.sleepycat.je.recovery.CheckpointEnd: long getLastTxnId()>
<com.sleepycat.je.recovery.CheckpointEnd: long getId()>
<com.sleepycat.je.dbi.CursorImpl: void verifyCursor(com.sleepycat.je.tree.BIN)>
<com.sleepycat.je.cleaner.LNInfo: com.sleepycat.je.tree.LN getLN()>
<com.sleepycat.je.cleaner.LNInfo: com.sleepycat.je.dbi.DatabaseId getDbId()>
<com.sleepycat.je.cleaner.LNInfo: byte[] getKey()>
<com.sleepycat.je.cleaner.LNInfo: byte[] getDupKey()>
<com.sleepycat.je.cleaner.LNInfo: int getMemorySize()>
<com.sleepycat.je.config.BooleanConfigParam: void <init>(java.lang.String,boolean,boolean,java.lang.String)>
<com.sleepycat.je.cleaner.FileProcessor$RootDoWork: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.tree.IN,long)>
<com.sleepycat.je.txn.TxnAbort: java.lang.String getTagName()>
<com.sleepycat.je.log.LastFileReader: java.lang.Long attemptToMoveBadFile(com.sleepycat.je.DatabaseException)>
<com.sleepycat.je.dbi.DatabaseImpl$HaltPreloadException: com.sleepycat.je.PreloadStatus getStatus()>
<com.sleepycat.je.log.FileManager: java.util.Set getCacheKeys()>
<com.sleepycat.je.utilint.DbLsn: void <init>()>
<com.sleepycat.je.SecondaryConfig: void validate(com.sleepycat.je.DatabaseConfig)>
<com.sleepycat.je.SecondaryConfig: boolean equalOrBothNull(java.lang.Object,java.lang.Object)>
<com.sleepycat.je.SecondaryConfig: java.lang.String genSecondaryConfigMismatchMessage(com.sleepycat.je.DatabaseConfig,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>
<com.sleepycat.je.config.EnvironmentParams: void addSupportedParam(com.sleepycat.je.config.ConfigParam)>
<com.sleepycat.je.log.FileHandle: boolean latchNoWait()>
<com.sleepycat.je.log.FileHandle: void close()>
<com.sleepycat.je.txn.DummyLockManager: boolean isLocked(java.lang.Long)>
<com.sleepycat.je.txn.DummyLockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>
<com.sleepycat.je.txn.DummyLockManager: boolean isWaiter(java.lang.Long,com.sleepycat.je.txn.Locker)>
<com.sleepycat.je.txn.DummyLockManager: int nWaiters(java.lang.Long)>
<com.sleepycat.je.txn.DummyLockManager: int nOwners(java.lang.Long)>
<com.sleepycat.je.evictor.Evictor: int nDeadlockRetries()>
<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.tree.IN getNextNode()>
<com.sleepycat.je.txn.LockInfo: void setLocker(com.sleepycat.je.txn.Locker)>
<com.sleepycat.je.latch.Java5SharedLatchImpl: void <init>()>
<com.sleepycat.je.dbi.DatabaseImpl: void setTree(com.sleepycat.je.tree.Tree)>
<com.sleepycat.je.dbi.DatabaseImpl: void setId(com.sleepycat.je.dbi.DatabaseId)>
<com.sleepycat.je.dbi.DatabaseImpl: void printErrorRecord(java.io.PrintStream,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>
<com.sleepycat.je.tree.LN: void addToDirtyMap(java.util.Map)>
<com.sleepycat.je.PreloadConfig: com.sleepycat.je.DatabaseConfig cloneConfig()>
<com.sleepycat.je.EnvironmentMutableConfig: void fillInEnvironmentGeneratedProps(com.sleepycat.je.dbi.EnvironmentImpl)>
<com.sleepycat.je.EnvironmentMutableConfig: void clearImmutableProps()>
<com.sleepycat.je.EnvironmentMutableConfig: boolean getLoadPropertyFile()>
<com.sleepycat.je.EnvironmentMutableConfig: int getNumExplicitlySetParams()>
<com.sleepycat.je.utilint.BitMap: int getNumSegments()>
<com.sleepycat.je.utilint.BitMap: int cardinality()>
<com.sleepycat.je.log.FSyncManager$FSyncGroup: boolean getLeader()>
<com.sleepycat.je.cleaner.FileProcessor: int nDeadlockRetries()>
<com.sleepycat.je.cleaner.FileProcessor: void processLN(java.lang.Long,com.sleepycat.je.tree.TreeLocation,java.lang.Long,com.sleepycat.je.cleaner.LNInfo,com.sleepycat.je.cleaner.FileProcessor$LookAheadCache,java.util.Map)>
<com.sleepycat.je.cleaner.FileProcessor: void processFoundLN(com.sleepycat.je.cleaner.LNInfo,long,long,com.sleepycat.je.tree.BIN,int,com.sleepycat.je.tree.DIN)>
<com.sleepycat.je.cleaner.FileProcessor: void processIN(com.sleepycat.je.tree.IN,com.sleepycat.je.dbi.DatabaseImpl,long)>
<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.tree.IN findINInTree(com.sleepycat.je.tree.Tree,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.tree.IN,long)>
<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.tree.IN isRoot(com.sleepycat.je.tree.Tree,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.tree.IN,long)>
<com.sleepycat.je.txn.TxnEnd: long getLastLsn()>
<com.sleepycat.je.log.LogBuffer: int getCapacity()>
