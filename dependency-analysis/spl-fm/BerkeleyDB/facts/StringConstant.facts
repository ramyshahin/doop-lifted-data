\\"<fileSummaryLN>\\"
\\"</fileSummaryLN>\\"
UTF-8	@Cleaner
\n
activeTxns=[	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
<fileSummaryLN>	@(Cleaner) /\ (Cleaner)
</fileSummaryLN>	@(Cleaner) /\ (Cleaner)
]\n	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
\\"CleanIN:\\"
\\"CleanLN:\\"
\\"CleanMigrateLN:\\"
\\"CleanPendingLN:\\"
<<\\"<LatchWaiter: \\">>	@(Latches) /\ (Latches)
Txnl access to UP db not allowed	@(Cleaner) /\ (Cleaner)
<<\\"Both \\">>	@Cleaner
\n
<<\\"\\">>	@Cleaner
<<\\"Cleaner has \\">>	@Cleaner /\ Environment_Locking /\ Logging_Severe
.del	@Cleaner /\ Environment_Locking
Cleaner deleted file 0x	@Cleaner /\ Environment_Locking /\ Logging_Severe
copy.remaining=
Log file 0x	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
deleted	@Cleaner /\ Logging_Severe
renamed	@Cleaner /\ Logging_Severe
Cleaner	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
deleteSafeToDeleteFiles	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
<<\\"Error in \\">>	@Cleaner
,-	@Cleaner
,	@Cleaner
-	@Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner
CleanPendingLN:	@Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
<<\\"Wrong filenum in header for file \\">>
CleanMigrateLN:	@Cleaner
CleanMigrateLN:	@Cleaner
Cannot write file summary in a read-only environment	@Cleaner
.jdb	@Cleaner
CleanMigrateLN:	@Cleaner
<<\\"Expected log version 3 or earlier but found \\">>
<FileHeader num=\\\"0x
\\\" lastEntryInPrevFileOffset=\\\"0x
\\\" logVersion=\\\"0x
\\\"/>
READ
WRITE
RANGE_READ
RANGE_WRITE
RANGE_INSERT
NONE
RESTART
_jeUtilization	@Transactions /\ Cleaner
_jeUtilization	@Transactions /\ Cleaner
Cleaner duplicate key sequence file=0x	@Cleaner /\ Logging_Base /\ Logging_Severe
\\\"/>
<<\\"Shutting down \\">>
Exiting
Continuing
<<\\"lsn \\">>	@Cleaner /\ Latches
<<\\"null buffer given to checksum validation, probably  result of 0\'s in log file. \\">>	@Checksum
<<\\"Location \\">>	@Checksum
<<\\"Location \\">>	@Checksum
\\\">
>
OPEN
CLOSED
.
INVALID
\\"<node>\\"
\\"</node>\\"
DatabaseConfig.setReadOnly() must be set to false when creating a Database
<<\\"CleanAddPendingDB \\">>	@(Cleaner /\ DeleteOp) /\ (DeleteOp /\ Cleaner /\ Logging_Cleaner)
matchLNByNodeId called on non DIN/DBIN
<<\\" node=\\">>	@Cleaner /\ Logging_Cleaner /\ Logging_Base
<<\\" logLsn=\\">>	@Cleaner /\ Logging_Cleaner /\ Logging_Base
true	@Logging_ConsoleHandler
false	@Logging_DbLogHandler
false	@Evictor
<<\\"You can\'t open a Database with a duplicatesAllowed configuration of \\">>
1000	@Evictor
\\".jdb\\"
\\".cif\\"
\\".del\\"
\\".bad\\"
\\".lck\\"
<<\\"Files cleaned: \\">>	@Cleaner
<<\\"You can\'t open a Database with a transactional configuration of \\">>	@Transactions
<node>
</node>
.del
<<\\"\nrecovery time = \\">>
Can\'t close Database:
.jdb
<<\\"Database.close: \\">>	@Logging_Finest
.jdb
.del
<<\\"action time = \\">>
<
There are open cursors against the database.\n
<<\\"\nrecovery time = \\">>
They will be closed.\n
<<\\"action time = \\">>
key
<<\\"\nrecovery time = \\">>
Can\'t call Database.openSequence:
openSequence
Database.openSequence	@Logging_Finest
Can\'t open a cursor
Only one may be specified: ReadCommitted or ReadUncommitted
Database.openCursor	@Logging_Finest
<<\\"action time = \\">>
<node>
</node>
<<\\"Environment home \\">>
cleanedCount=	@Cleaner /\ DeleteOp
key
Can\'t call Database.delete:
delete
Database.delete	@Logging_Finest
<<\\"Remove of \\">>	@DeleteOp
Preload starting
.jdb
<<\\"Preloaded \\">>
evict time=	@Evictor
<<\\"Usage: \n \\">>
<<\\"  -h <environment home> \\">>
<<\\"  -a <clean|compress|evict|checkpoint|removedb>\\">>
<<\\"  -ro (read-only - defaults to read-write)\\">>
.jdb
<<\\"Logged item entrySize= \\">>
key
data
Can\'t call Database.get:
Database.get	@Logging_Finest
<<\\"  -s <dbName> (for preloading of evict or db remove)\\">>
\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\"
key
data
Can\'t call Database.getSearchBoth:
Database.getSearchBoth	@Logging_Finest
key
data
Can\'t call Database.put
put
Database.put	@Logging_Finest
<<\\"\\">>
.
key
data
Can\'t call Database.putNoOverWrite
putNoOverwrite
Database.putNoOverwrite	@Logging_Finest
<<\\"Couldn\'t rename \\">>
<<\\"Couldn\'t delete \\">>
key
data
No value after -records	@(Memory_Budget) /\ (Memory_Budget)
Can\'t call Database.putNoDupData
No value after -key	@(Memory_Budget) /\ (Memory_Budget)
putNoDupData
Database.putNoDupData	@Logging_Finest
No value after -data	@(Memory_Budget) /\ (Memory_Budget)
<<\\"Read non-valid log entry type: \\">>
No value after -nodemax	@(Memory_Budget) /\ (Memory_Budget)
Channel closed, may be due to thread interrupt
No value after -density	@(Memory_Budget) /\ (Memory_Budget)
Can\'t call Database.join
cursors
No value after -overhead	@(Memory_Budget) /\ (Memory_Budget)
At least one cursor is required.
All cursors must use the same transaction.	@Transactions
All cursors must use the same environment.	@Transactions
All cursors must use the same transaction.	@Transactions
No value after -measure	@(Memory_Budget) /\ (Memory_Budget)
<<\\"Unknown arg: \\">>	@(Memory_Budget) /\ (Memory_Budget)
-records not specified	@(Memory_Budget) /\ (Memory_Budget)
-key not specified	@(Memory_Budget) /\ (Memory_Budget)
<<\\"Couldn\'t open file \\">>
Can\'t call Database.truncate	@TruncateOp
truncate	@TruncateOp
Database.truncate: txnId=	@Logging_Finest /\ TruncateOp
null	@Latches /\ TruncateOp
LN_TX
<<\\"Couldn\'t open file \\">>
LN
MapLN_TX
MapLN
NameLN_TX
couldn\'t find database - truncate	@TruncateOp
NameLN
truncate	@DeleteOp /\ TruncateOp
DelDupLN_TX
DelDupLN
<<\\"usage:\njava \\">>	@Memory_Budget
DupCountLN_TX
DupCountLN
FileSummaryLN	@Cleaner
IN
BIN
DIN
DBIN
Root
Commit
Abort
CkptStart
CkptEnd
INDelete
Channel closed, may be due to thread interrupt
BINDelta
<<\\"IOException caught: \\">>
DupBINDelta
Trace
<<\\"File \\">>
FileHeader
INDupDelete
Prepare
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.preload
preload	@DeleteOp
Inputs: records=	@Memory_Budget
Can\'t call Database.stat	@Statistics
stat	@DeleteOp /\ Statistics
<<\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\">>	@Memory_Budget
Minimum, internal nodes only	@Memory_Budget
Maximum, internal nodes only	@Memory_Budget
Minimum, internal nodes and leaf nodes	@Memory_Budget
Maximum, internal nodes and leaf nodes	@Memory_Budget
\nTo get leaf node sizing specify -data	@Memory_Budget
<<\\"\nBtree levels: \\">>	@Memory_Budget
Can\'t call Database.verify	@Statistics /\ Verifier
verify	@DeleteOp /\ Verifier /\ Statistics
FileManager would overwrite non-empty file 0x
generated for testing
<<\\"Directory is not empty: \\">>	@Memory_Budget
File closed, may be due to thread interrupt
<<\\"\nMeasuring with cache size: \\">>	@Memory_Budget
generated for testing	@DiskFullErro
Stats for internal and leaf nodes (after insert)	@Memory_Budget /\ Statistics
<<\\"\nPreloading with cache size: \\">>	@Memory_Budget
Stats for internal nodes only (after preload)	@Memory_Budget /\ Statistics
<<\\"During close: \\">>	@Memory_Budget
<<\\"During close: \\">>	@Memory_Budget
foo	@Memory_Budget
<<\\"Database is Read Only: \\">>
*** Key doesn\'t fit value=	@Memory_Budget
Random key already exists -- retrying	@Memory_Budget
<<\\"*** \\">>	@Memory_Budget
<<\\"*** Ran out of cache memory at record \\">>	@Memory_Budget /\ Statistics
.	@Memory_Budget
CacheSize=	@Memory_Budget /\ Statistics
*** All records did not fit in the cache ***	@Memory_Budget /\ Statistics
<<\\"\\">>
<<\\"usage: \\">>	@Statistics /\ Verifier
<<\\"usage: \\">>	@(Statistics /\ Verifier) /\ (Statistics /\ Verifier)
<<\\" name=\\">>	@Logging_Finest /\ Logging_Base
\\\"/>
\\"<in>\\"
\\"</in>\\"
\\"Split:\\"
\\"Delete:\\"
-h requires an argument	@Statistics /\ Verifier
-s requires an argument	@Statistics /\ Verifier
-v requires a positive argument	@Statistics /\ Verifier
-v requires an argument	@Statistics /\ Verifier
-h is a required argument	@Statistics /\ Verifier
-s is a required argument	@Statistics /\ Verifier
<<\\"DbStat.stats of \\">>	@(Statistics /\ Verifier) /\ (Logging_Info /\ Verifier /\ Statistics)
<<\\"DbStat.stats of \\">>	@(Statistics /\ Verifier) /\ (Logging_Info /\ Verifier /\ Statistics)
\\"LatchImpl\\"
LatchImpl	@Latches
waitTarget.active but not owner	@(Latches) /\ (Latches)
je.lck	@(Environment_Locking) /\ (Environment_Locking)
rw	@(Environment_Locking) /\ (Environment_Locking)
<<\\"A je.lckfile exists in \\">>	@(Environment_Locking) /\ (Environment_Locking)
shared	@(Environment_Locking) /\ (Environment_Locking)
single writer	@(Environment_Locking) /\ (Environment_Locking)
<<\\"The Environment directory \\">>
Write after RunRecoveryException
Randomly generated for testing
idKey=
exactParentFound=
null
\\\" gTxnId=\\\"
null
\\\" bqual=\\\"
null
\\\"/>
lsn=
SUCCESS
KEYEXIST
KEYEMPTY
NOTFOUND
OperationStatus.
<DbPrintLog>
</DbPrintLog>
NULL_LSN without KnownDeleted
<<\\"fetchTarget of \\">>
null lsn
.
\\";\\"
<<\\" A configuration parameter name can\'t be null or 0 length\\">>
<<\\"Usage: \\">>
<<\\" -h  <envHomeDir>\\">>
<<\\" -e  <end file number, in hex>\\">>
<<\\"-Warning: Out of sync. Should be \\">>	@Memory_Budget
<<\\" -k  <binary|text> (format for dumping the key)\\">>
<<\\" -s  <start file number, in hex>\\">>
<<\\" -tx <targetted txn ids, comma separated>\\">>
<<\\" -ty <targetted entry types, comma separated>\\">>
<<\\" -S  show Summary of log entries\\">>
<<\\" -q  if specified, concise version is printed\\">>
<<\\"     Default is verbose version.)\\">>
All arguments are optional
\\"RootSplit:\\"
\\"DupRootSplit:\\"
\\"Mut:\\"
\\"Ins:\\"
\\"InsD:\\"
RootLatch	@(Latches) /\ (Latches)
<<\\"Node \\">>
<<\\"usage: \\">>
-f requires an argument
-h requires an argument
-s requires an argument
<<\\"-c: \\">>
-c requires an argument
idkey is null
<<\\"locker \\">>
-h is a required argument
-v requires -f
<<\\"locker \\">>
<<\\" Owners:\\">>
<<\\" (none)\\">>
getFirstNode passed null root
<<\\" Waiters:\\">>
<<\\" (none)\\">>
getLastNode passed null root
<<\\"DbLoad.load of \\">>	@Logging_Info
<<\\"Load start: \\">>
Must supply a database name if -l not supplied.
<<\\"DbLoad.load of \\">>	@Logging_Info
<<\\"Load end: \\">>
getParentNode passed null
<<\\"IN \\">>
<<\\"Invalid header parameter: \\">>
<<\\"Version \\">>
<<\\"IN \\">>
\'
<<\\"Found non-deletable IN \\">>
<<\\"No data to match key \\">>
<<\\"Key exists: \\">>
<<\\"loaded \\">>
No \\\"DATA=END\\\"
<<\\"Invalid value of searchType: \\">>
Corrupted file
Corrupted file
This statement would have triggered an Exception: virtualinvoke searchResult#1.<com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>()
initialized
open
closed
invalid
<<\\"Can\'t go from environment state \\">>
<key v=\\\"
<null>
<null>
<<\\"\\">>
\\\"/>
key=
NULL_LSN without KnownDeleted
Btree
Duplicate
\\\">
</ref>
<lsn/>
<key/>
<target/>
<knownDeleted val=\\\"
\\\"/>
<pendingDeleted val=\\\"
\\\"/>
The following DatabaseConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
\\\"/>
<isRoot val=\\\"
<<\\" Transactional\n\\">>	@Transactions
<<\\" Read-Only\n\\">>
\\\"/>
<level val=\\\"
<<\\" Sorted Duplicates\n\\">>
<<\\" Btree Comparator\n\\">>
\\\"/>
<<\\" Duplicate Comparator\n\\">>
<entries numEntries=\\\"
\\\" length=\\\"
\\\" baseFileNumber=\\\"
\\\">
subtree did not have a BIN for leaf	@Latches
\\\">
</ref>
</entries>
\\"usage: java <utility> [options...]\\"
\\"com.sleepycat.je.util.\\"
<in>
</in>
Missing utility name
com.sleepycat.je.util.
\\\">
RootSplit:	@Logging_Fine
</INDupDeleteEntry>
usage: java <utility> [options...]
\\"<bin>\\"
\\"</bin>\\"
<idkey>
<<\\"\\">>
</idkey>
\\\"/>
\\\"/>
<level val=\\\"
\\\"/>
\\\"/>
<entries nEntries=\\\"
\\\">
<entry id=\\\"
<lsn/>
,
<key/>
,	@Transactions
<target/>
\\\"/>
</entry>
</entries>
<knownDeleted val=\\\"
\\\"/>
searchSubTree passed key and left/right search
<pendingDeleted val=\\\"
\\\"/>
IN
<<\\"Invalid value of searchType: \\">>
Split:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" parent=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" child=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<DbLsn val=\\\"0x
<<\\" newSibling=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" parentLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" childLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newSiblingLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
0x
<<\\" splitIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" idKeyIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" childIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
Delete:	@(Logging_Finest) /\ (Logging_Finest /\ Logging_Base)
<<\\" index=\\">>	@(Logging_Finest) /\ (Logging_Finest /\ Logging_Base)
nodeId=
<TreeLocation bin=\\\"
null
\\\" index=\\\"
\\\" lnKey=\\\"
\\\" childLsn=\\\"
\\\">
\\"  File    Size (KB)  % Used\n--------  ---------  ------\\"
<<\\" TOTALS \\">>	@(Cleaner) /\ (Cleaner)
<<\\"  \\">>	@(Cleaner) /\ (Cleaner)
<<\\"     \\">>	@(Cleaner) /\ (Cleaner)
BIN must be latched before evicting LNs	@Evictor /\ Latches
DEFAULT
READ_UNCOMMITTED
READ_COMMITTED
RMW
LockMode.
<bin>
</bin>
BIN
<dbId id=\\\"
\\\"/>
Bad value for timeout:
Bad value for timeout:
<<\\"prepare() has already been called for Transaction \\">>	@Transactions
<<\\"Transaction \\">>	@Transactions
Usage: EnvironmentParams <samplePropertyFile>
allowCreate=
####################################################\n# Example Berkeley DB, Java Edition property file\n# Each parameter is set to its default value\n####################################################\n\n
#
<<\\"Transaction \\">>	@(Transactions) /\ (Transactions)
<<\\"Commit of transaction \\">>	@(Transactions) /\ (Transactions /\ Logging_Severe)
Txn	@(Transactions) /\ (Transactions /\ Logging_Severe)
commit	@(Transactions) /\ (Transactions /\ Logging_Severe)
<<\\"Failed while attempting to commit transaction \\">>	@(Transactions) /\ (Transactions)
<<\\"Failed while attempting to commit transaction \\">>	@(Transactions) /\ (Transactions)
Already closed
key
<<\\"JoinCursor.getNext(key): \\">>	@Logging_Finest
key
data
\\"INCompress:\\"
<<\\"JoinCursor.getNext(key,data): \\">>	@Logging_Finest
<<\\"Abort:id = \\">>	@Transactions /\ Logging_Fine
<<\\"Transaction \\">>	@Transactions
\\\"/>	@(INCompressor) /\ (INCompressor)
INCompressor.addToQueue should never be called.	@INCompressor
Secondary corrupt
Txn undo for node=	@Transactions
This statement would have triggered an Exception: virtualinvoke dupRoot#4.<com.sleepycat.je.tree.DIN: void releaseLatch()>()
neither LN or DIN found in BIN
DupRootSplit:	@Logging_Fine
<<\\"InCompress.doCompress called, queue size: \\">>	@INCompressor /\ Logging_Fine
<<\\"Couldn\'t find lock for Node \\">>	@Transactions
allowDuplicates passed to insert but database doesn\'t have allow duplicates set.
<
<<\\" exists = \\\"\\">>
\\\">
\\\"/>
<<\\"Can\'t find \\">>	@Transactions
<<\\"Can\'t find \\">>	@Transactions
SET
BOTH
SET_RANGE
BOTH_RANGE
SearchMode.
fsyncLatch	@FSync /\ Latches
<<\\"SubtreeRemoval: subtreeRoot = \\">>	@Logging_Fine
<<\\"Transaction \\">>	@Transactions
<root>
</root>
<<\\"Transaction \\">>	@Transactions
<tree>
<in/>
<txn id=\\\"	@(Transactions) /\ (Transactions)
</tree>
\\\">	@(Transactions) /\ (Transactions)
</txn>	@(Transactions) /\ (Transactions)
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"IN \\">>
<<\\"IN \\">>
<<\\"IN \\">>
<<\\"Environment invalid because of previous exception: \\">>
Mut:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" existingLn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newLn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newLnLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dupCountLN=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dupRootLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" rootdin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" ddinLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dbin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dbinLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" bin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
\n	@(Statistics) /\ (Statistics)
Ins:	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
\\\">
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
numBottomInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
</INDeleteEntry>
<<\\" lnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
numInternalNodes=	@(Statistics) /\ (Statistics)
<<\\" index=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
\n	@(Statistics) /\ (Statistics)
numDuplicateInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
numDuplicateBottomInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
<<\\"Attempt to \\">>	@DeleteOp
InsD:	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
\\"je.info\\"
<<\\" dbin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" lnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
\\"<din>\\"
\\"</din>\\"
<<\\"Problem parsing parameter \\">>
<Dbg time=\\\"	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
\\\">	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
<msg val=\\\"	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
\\\"/>	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
</Dbg>	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
<LockInfo locker=\\\"
\\\" type=\\\"
\\\"/>
<<\\" lock taken at: \\">>
<<\\"Error Key \\">>
UNKNOWN
<<\\"Error Data \\">>
UNKNOWN
<<\\"maxBytes parameter to Database.preload() was specified as \\">>	@Memory_Budget
delete
<<\\"SecondaryCursor.delete: \\">>	@Logging_Finest
<din>
</din>
<database id=\\\"
\\\"
<<\\" btc=\\\"\\">>
\\\"
<<\\" dupc=\\\"\\">>
\\\"
/>
<dupkey>
<<\\"\\">>
</dupkey>
<dupCountLN/>
<<\\"SecondaryCursor.getCurrent: \\">>	@Logging_Finest
DIN
\\"<dbin>\\"
\\"</dbin>\\"
Btree
<<\\"SecondaryCursor.getFirst: \\">>	@Logging_Finest
Duplicate
couldn\'t instantiate class comparator
<database>
<<\\"SecondaryCursor.getLast: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getNext: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getNextDup: \\">>	@Logging_Finest
<dbin>
</dbin>
<dupkey>
<<\\"\\">>
</dupkey>
<<\\"SecondaryCursor.getNextNoDup: \\">>	@Logging_Finest
DBIN
<<\\"SecondaryCursor.getPrev: \\">>	@Logging_Finest
\\\"/>
<btcf name=\\\"
\\\"/>
<<\\"SecondaryCursor.getPrevDup: \\">>	@Logging_Finest
<<\\"usage: \\">>	@(Statistics /\ Verifier) /\ (Statistics /\ Verifier)
<<\\"failed adding in \\">>	@Memory_Budget
<<\\"Exit status = \\">>	@Statistics /\ Verifier
<<\\"Exit status = \\">>	@Statistics /\ Verifier
<<\\"Exit status = \\">>	@Statistics /\ Verifier
<dupcf name=\\\"
\\\"/>
</database>
<<\\"\\">>
<<\\"SecondaryCursor.getPrevNoDup: \\">>	@Logging_Finest
<<\\"Exception while trying to load \\">>
<<\\"Exception while trying to load \\">>
-h requires an argument	@Statistics /\ Verifier
-s requires an argument	@Statistics /\ Verifier
-v requires a positive argument	@Statistics /\ Verifier
-v requires an argument	@Statistics /\ Verifier
-h is a required argument	@Statistics /\ Verifier
-s is a required argument	@Statistics /\ Verifier
key
pKey
data
<<\\"SecondaryCursor.getSearchKey: \\">>	@Logging_Finest
key
pKey
data
<<\\"SecondaryCursor.getSearchKeyRange: \\">>	@Logging_Finest
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
key
pKey
size=
data
<<\\"SecondaryCursor.getSearchBoth: \\">>	@Logging_Finest
db=
Checking obsolete offsets ...	@Statistics /\ Verifier
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
key
pKey
data
<<\\"SecondaryCursor.getSearchBothRange: \\">>	@Logging_Finest
primaryDatabase
Can\'t use as primary:
<<\\"Duplicates must not be allowed for a primary database: \\">>
Primary and secondary databases must be in the same environment
secConfig.getKeyCreator() and getMultiKeyCreator() may not both be non-null
secConfig and getKeyCreator()/getMultiKeyCreator() may be null only if the primary database is read-only
secConfig.getForeignKeyNullifier() and getForeignMultiKeyNullifier() may not both be non-null
ForeignKeyNullifier or ForeignMultiKeyNullifier must be non-null when ForeignKeyDeleteAction is NULLIFY
ForeignKeyNullifier may not be used with SecondaryMultiKeyCreator -- use ForeignMultiKeyNullifier instead
<<\\"Duplicates must not be allowed for a foreign key  database: \\">>
Channel closed, may be due to thread interrupt
<<\\"Secondary is already associated with a different primary: \\">>
DbState.
SecondaryDatabase open	@Logging_Finest
key
Can\'t call SecondaryDatabase.delete:
SecondaryDatabase.delete	@Logging_Finest
)	@Latches
<<\\"<LATCH \\">>	@Latches
<<\\"] \\">>	@Latches
]	@Latches
<<\\" [waiters: \\">>	@Latches
<<\\" \\">>	@Latches
]	@Latches
key
pKey
>	@Latches
data
key
pKey
data
Can\'t call SecondaryDatabase.get:
SecondaryDatabase.get	@Logging_Finest
\\"_jeIdMap\\"
\\"_jeNameMap\\"
\\"_jeUtilization\\"
_jeIdMap
_jeNameMap
_jeUtilization
_jeIdMap
_jeNameMap
_jeIdMap
key
_jeNameMap
pKey
\n
data
Can\'t call SecondaryDatabase.getSearchBoth:
SecondaryDatabase.getSearchBoth	@Logging_Finest
ABORT
CASCADE
NULLIFY
ForeignKeyDeleteAction.
<<\\"Pass 1: \\">>
<<\\"Pass 2: \\">>
<<\\"End: \\">>
<<\\"processing file \\">>
<<\\".jdb  \\">>
<<\\"can\'t find database \\">>
<<\\"Cache percent is not a valid integer: \\">>
<<\\"Attempted to \\">>
<<\\"Can\'t \\">>
<<\\"Already name mapped for dbId: \\">>
<<\\"Already saw dupSort entry for dbId: \\">>
rename	@RenameOp
remove	@DeleteOp
<<\\"Secondary \\">>
<DatabaseEntry
<<\\"Secondary \\">>
truncate	@TruncateOp
>
db
<<\\"Could not insert secondary key in \\">>
DATA=END
<<\\"Secondary \\">>
<<\\"Lock Table \\">>	@Latches
<<\\"Secondary \\">>
Operation not allowed on a secondary
<<\\"Database \\">>	@TruncateOp
<<\\"Can\'t truncate database \\">>	@TruncateOp
----- Event Dump -----
NEXT
PREV
NEXT_DUP
PREV_DUP
NEXT_NODUP
PREV_NODUP
<<\\"\\">>
Transaction
<<\\"DatabaseEntry \\">>
<<\\"Data field for DatabaseEntry \\">>
A partial key DatabaseEntry is not allowed
Lock
Transaction
.
.
\\\">
<ckptStart>
</ckptStart>
<root>
</root>
<firstActive>
</firstActive>
</CkptEnd>
r
rw
Nested transactions are not supported yet.	@Transactions
_jeIdMap
<<\\"XA Transaction \\">>	@Transactions
_jeNameMap
.bad
UTF-8
++++++++++ begin lock table dump ++++++++++
++++++++++ end lock table dump ++++++++++
: waited for lock
UTF-8
\n
<Transaction id=\\\"	@(Transactions) /\ (Transactions)
\\\"	@(Transactions) /\ (Transactions)
<<\\" name=\\\"\\">>	@(Transactions) /\ (Transactions)
\\\"	@(Transactions) /\ (Transactions)
>	@(Transactions) /\ (Transactions)
<<\\"Transaction \\">>	@Transactions
<dbtree lastId = \\\"
\\\">
<idDb>
</idDb><nameDb>
</nameDb>
</dbtree>
<dbTree lastDbId =\\\"
\\\">
.	@(Memory_Budget) /\ (Memory_Budget)
</dbtree>
<<\\"environmentImpl is null for target db \\">>
<<\\"Transfer, lock \\">>
nGets=	@(Statistics) /\ (Statistics)
<<\\"Transfer, lock \\">>
<<\\"No transaction found for \\">>	@Transactions
<<\\"No transaction found for \\">>	@(Transactions) /\ (Transactions)
<<\\"No transaction found for \\">>	@(Transactions) /\ (Transactions)
<<\\"Cursor.count: \\">>	@Logging_Finest
\\"<dupCountLN>\\"
\\"</dupCountLN>\\"
delete
<<\\"Cursor.delete: \\">>	@Logging_Finest
key
data
put
----\n
<<\\"Cursor.put: \\">>	@Logging_Finest
txnId=
key
data
putNoOverwrite
<<\\"Cursor.putNoOverwrite: \\">>	@Logging_Finest
key
data
putNoDupData
<<\\"Cursor.putNoDupData: \\">>	@Logging_Finest
<dupCountLN>
</dupCountLN>
\n
data
putCurrent
<<\\"Cursor.putCurrent: \\">>	@Logging_Finest
<<\\" waits for \\">>
<<\\" nothing\\">>
<<\\" node \\">>
\n
<<\\"Cursor.getCurrent: \\">>	@Logging_Finest
<<\\"Transaction \\">>
<<\\"Cursor.getFirst: \\">>	@Logging_Finest
<<\\"Cursor.getLast: \\">>	@Logging_Finest
\\\"/>
<<\\"Cursor.getNext: \\">>	@Logging_Finest
.
.
<<\\"Cursor.getNextDup: \\">>	@Logging_Finest
.
.
<<\\" (\\">>
)
<<\\"Cursor.getNextNoDup: \\">>	@Logging_Finest
\\"DupRootRecover:\\"
\\"LNRedo:\\"
\\"LNUndo\\"
\\"INRecover:\\"
\\"RootRecover:\\"
\\"INDelReplay:\\"
\\"INDupDelReplay:\\"
\\"RootDelete:\\"
<<\\"Cursor.getPrev: \\">>	@Logging_Finest
<<\\"Cursor.getPrevDup: \\">>	@Logging_Finest
Cleaner.addToQueue should never be called.	@Cleaner
<<\\"Cursor.getPrevNoDup: \\">>	@Logging_Finest
<offsets size=\\\"
\\\">
0x
key
</offsets>
data
<offsets size=\\\"0\\\"/>
<<\\"Cursor.getSearchKey: \\">>	@Logging_Finest
key
data
<<\\"Cursor.getSearchKeyRange: \\">>	@Logging_Finest
Recovery underway, found end of log	@Logging_Config
<<\\"Recovery checkpoint search, \\">>	@Logging_Config
<<\\"Cursor.getSearchBoth: \\">>	@Logging_Finest
Recovery w/no files.	@Logging_Config
<<\\"There are \\">>	@Transactions /\ Logging_Info
<<\\"Cursor.getSearchBothRange: \\">>	@Logging_Finest
recovery
RecoveryManager	@Logging_Severe
recover	@Logging_Severe
Couldn\'t recover	@Logging_Severe
<<\\"Couldn\'t recover: \\">>
<<\\"Recovery finished: \\">>
<<\\"Recovery finished: \\">>
<<\\"CleanerRun \\">>	@Cleaner
Cleaner	@Cleaner /\ Logging_Severe
doClean	@Cleaner /\ Logging_Severe
<<\\"\\">>	@Cleaner /\ Logging_Severe
<<\\"CleanerRun \\">>	@Cleaner
<<\\"CleanerRun \\">>	@Cleaner
lastUsed=
<<\\"Dup Offset \\">>
<<HASH:-870535562>>
put passed a null DatabaseEntry arg
CleanLN:	@Cleaner /\ Logging_Cleaner
put passed a null DatabaseEntry arg
unknown PutMode
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
All nodes should have been loaded	@Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
\\"!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\"
!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
false	@Logging_DbLogHandler
CleanLN:	@Cleaner /\ Logging_Cleaner
true	@Logging_ConsoleHandler
SEVERE	@Logging_Base
readMapIns
false
CleanLN:	@Cleaner /\ Logging_Cleaner
<<\\"java { \\">>
TxnAbort
\\"                                                                                                                                \\"
<<\\"                                                                                                                                \\">>
CleanIN:	@Cleaner /\ Logging_Cleaner
CleanIN:	@Cleaner /\ Logging_Cleaner
CleanIN:	@Cleaner /\ Logging_Cleaner
readNonMapIns
<<\\" \\">>
null
This statement would have triggered an Exception: $stack45 = result#4.<com.sleepycat.je.dbi.CursorImpl$KeyChangeStatus: com.sleepycat.je.OperationStatus status>
<<\\"Found unfinished prepare record: id: \\">>	@Transactions /\ Logging_Info
undoLNs
remaining=
\\\"/>	@(Cleaner) /\ (Cleaner)
\\"sun.arch.data.model\\"
\\"je.forceJVMArch\\"
1.4 based 64 bit JVM not supported	@Memory_Budget
redoLns
<<\\"txnId = \\">>	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
A checksum error was found in the log.
<<\\"Corruption begins at LSN:\n   \\">>
Mac OS X
<<\\"Last known good record before corruption is at LSN:\n   \\">>
<<\\"Next known good record after corruption is at LSN:\n   \\">>
<<\\" lsnFromLog:\\">>	@Logging_Severe
RecoveryManager	@Logging_Severe
replaceOrInsert	@Logging_Severe
lsnFromLog=
<<\\"A per-thread transaction was created in \\">>
\\"Delete\\"
\\"Mod:\\"
Trace list:
Unexpected interrupt while waiting for fsync	@FSync
lsnFromLog=
RootRecover:	@Logging_Recovery
RootRecover:	@Logging_Recovery
unknown GetMode
DupRootRecover:	@Logging_Recovery
DupRootRecover:	@Logging_Recovery
A Transaction cannot be used because the environment was opened non-transactionally	@Transactions
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
INRecover:	@Logging_Recovery
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
INRecover:	@Logging_Recovery
INRecover:	@Logging_Recovery
SUCCESS
LNRedo:	@Logging_Recovery
FILLED_CACHE
EXCEEDED_TIME
PreloadStatus.
0000000000000000
0x
<<\\"\\">>
<<\\"A transaction was not supplied when opening this cursor: \\">>
key
data
LNRedo:	@Logging_Recovery
key
data
LNRedo:	@Logging_Recovery
Delete	@Logging_Finer /\ Latches
\\"<mapLN>\\"
\\"</mapLN>\\"
<mapLN>
</mapLN>
\\\">
foreignKeyDeleteAction
NEW
WAIT_NEW
PROMOTION
WAIT_PROMOTION
EXISTING
DENIED
WAIT_RESTART
NONE_NEEDED
je.disable.java5.latches	@Latches
java.util.concurrent.locks.ReentrantLock	@Latches
java.util.concurrent.locks.ReentrantReadWriteLock	@Latches
LatchImpl	@Latches
The SecondaryConfig argument is null.
LNUndo	@Logging_Recovery /\ Logging_Base
LNUndo	@Logging_Recovery /\ Logging_Base
putNoDupData() called, but database is not configured for duplicate data.
The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
<<\\" SecondaryKeyCreator\n\\">>
<<\\" SecondaryMultiKeyCreator\n\\">>
<<\\" ForeignKeyDelete\n\\">>
<<\\" ForeignKeyDeleteAction\n\\">>
<<\\" ForeignKeyNullifier\n\\">>
<<\\" ForeignMultiKeyNullifier\n\\">>
<<\\" ImmutableSecondaryKey\n\\">>
<<\\"Not Exception or Error: \\">>
Log statistics:
type
<<\\"Recovery Pass \\">>
total
provisional
total
min
max
<<\\"Recovery Pass \\">>
avg
entries
<<\\"\\">>
count
count
bytes
bytes
bytes
bytes
as % of log
Can\'t replace a duplicate with different data.	@Latches
Mod:	@Logging_Finer /\ Latches
key/data
<<\\"\\">>
<<\\"\\">>
<<\\" node=\\">>	@Logging_Base
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\" lsn=\\">>	@Logging_Base
(
<<\\" found=\\">>	@Logging_Base
<<\\"\nTotal bytes in portion of log read: \\">>
<<\\" replaced=\\">>	@Logging_Base
<<\\"Total number of entries: \\">>
<<\\" inserted=\\">>	@Logging_Base
<<\\" replacedLsn=\\">>	@Logging_Base
<<\\" abortLsn=\\">>	@Logging_Base
<<\\" \\">>
INDupDelReplay:	@(Logging_Recovery) /\ (Logging_Recovery /\ Logging_Base)
INDelReplay:	@(Logging_Recovery) /\ (Logging_Recovery /\ Logging_Base)
<<\\"last LSN = \\">>	@Logging_Severe
RecoveryManager	@Logging_Severe
last LSN=
<lastFullLsn>
</lastFullLsn>
\\\"/>
RootDelete:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
\nPer checkpoint interval info:
lnTxn
ln
mapLNTxn
mapLN
end-end
end-start
start-end
maxLNReplay
ckptEnd
<<\\"Obsolete lsns contains valid lsn \\">>	@Verifier
<<\\"Tree contains obsolete lsn \\">>	@Verifier
Lsn mismatch	@Verifier
non LogEntryType passed to LogEntryType.compare
Sequences not supported in databases configured for duplicates
Minimum sequence value must be less than the maximum
Initial sequence value is out of range
The cache size is larger than the sequence range
ExclusiveCreate=true and the sequence record already exists.
Sequence record removed during openSequence.
AllowCreate=false and the sequence record does not exist.
Sequence delta must be greater than zero
Sequence delta is larger than the range
\\\" isProvisional=\\\"true
\\\" prev=\\\"0x
<<\\"Sequence overflow \\">>
\\\">
</entry>
Sequence.get value=	@Logging_Finest /\ Logging_Base
The sequence record has been deleted while it is open.
\\"<nameLN>\\"
\\"</nameLN>\\"
<<\\"Cannot read backward over cleaned file from \\">>
<nameLN>
</nameLN>
\\\">
\\\">
<<\\"FileReader read invalid log entry type: \\">>
\\"je.properties\\"
envHome
je.properties
<<\\"An error occurred when reading \\">>
<<\\"There \\">>
is 1 open Database in the Environment.\n
<<\\"are \\">>
<<\\" open Database in the Environment.\n\\">>
Closing the following databases:\n
<<\\" \\">>
<<\\"Problem in fillReadBuffer, readBufferFileNum = \\">>	@Latches
<<\\"There \\">>	@Transactions
is 1 existing transaction opened against	@Transactions
<<\\" the Environment.\n\\">>	@Transactions
<<\\"are \\">>	@Transactions
<<\\" existing transactions opened against\\">>	@Transactions
<<\\" the Environment.\n\\">>	@Transactions
Aborting open transactions ...\n	@Transactions
databaseName
Environment.open:  name=	@Logging_Finest
<knownDeleted val=\\\"
<<\\"Database \\">>
true
false
\\\"/>
<<\\"Database \\">>
<<\\"Attempted to open Database \\">>	@Transactions
<<\\"Attempted to open Database \\">>
databaseName	@DeleteOp
databaseName	@RenameOp
newName	@RenameOp
databaseName	@TruncateOp
Transactions can not be used in a non-transactional environment	@Transactions
Only one may be specified: SerializableIsolation, ReadCommitted or ReadUncommitted	@Transactions
<<\\"usage: \\">>	@Cleaner
api
sync
BIN cursorSet is inconsistent.	@Verifier
Cursor Not Initialized.
mutableConfig
Cursor has been closed.
<<\\"Unknown cursor status: \\">>
-h requires an argument	@Cleaner
-h is a required argument	@Cleaner
CURSOR_NOT_INITIALIZED
CURSOR_INITIALIZED
CURSOR_CLOSED
UNKNOWN (
File 0x	@Cleaner
\\\"
\\\"
<<\\"  File    Size (KB)  % Used\n--------  ---------  ------\\">>	@Cleaner
\\\"
>\n
<<\\"\\">>
<<\\"\\">>
Attempt to use non-open Environment object().
\n</Cursor>
\\"je.disable.java.adler32\\"
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" lnIdx=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" oldLnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" newLnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
MapTreeRoot	@Latches
TxnCommit
Can\'t set \'je.env.isNoLocking\' and \'je.env.isTransactional\';	@Transactions
<<\\"Enviroment creation isn\'t allowed,  but there is no pre-existing  environment in \\">>
TriggerLatch	@Latches
<summary totalCount=\\\"	@Cleaner
\\\" totalSize=\\\"	@Cleaner
\\\" totalINCount=\\\"	@Cleaner
\\\" totalINSize=\\\"	@Cleaner
\\\" totalLNCount=\\\"	@Cleaner
\\\" totalLNSize=\\\"	@Cleaner
\\\" obsoleteINCount=\\\"	@Cleaner
\\\" obsoleteLNCount=\\\"	@Cleaner
\\\"/>	@Cleaner
Evictor	@Evictor
Checkpointer	@Checkpointer_Daemon
INCompressor	@INCompressor
Cleaner	@Cleaner
Non-blocking lock was denied.
<<\\"usage: \\">>
<<\\"\\">>
\\"<ln>\\"
\\"</ln>\\"
Attempt to use a Environment that has been closed.
<<\\"Close of environment \\">>	@Logging_Fine
close
<<\\"\nException shutting down daemon threads: \\">>
\n
<<\\"Env \\">>	@Logging_Fine
<<\\"\nException clearing file manager: \\">>
\n
<<\\"\nException clearing file manager: \\">>
\n
-f requires an argument
-h requires an argument
-d requires an argument
-s requires an argument
-h is a required argument
Must supply a database name if -l not supplied.
true
false
<<\\"Problem: \\">>	@Statistics /\ CheckLeaks
<<\\"Problem: \\">>	@Transactions /\ CheckLeaks /\ Statistics
Some latches held at env close.	@CheckLeaks /\ Latches
Lock, transaction, or latch left behind at environment close
<<\\"DbDump.dump of \\">>	@Logging_Info
DATA=END
File Flip	@Logging_FileHandler /\ Logging_Base
<<\\"DbDump.dump of \\">>	@Logging_Info
<ln>
</ln>
manual	@Evictor
VERSION=3
format=print
format=bytevalue
type=btree
dupsort=
1
0
HEADER=END
<data>
</data>
<data>
</data>
\\"daemon\\"
\\"manual\\"
\\"critical\\"
beginTransaction called,  but Environment was not opened with transactional cpabilities	@Transactions
\\\"/>	@(Evictor) /\ (Evictor)
Evictor.addToQueue should never be called.	@Evictor /\ EvictorDaemon
daemon	@Evictor /\ EvictorDaemon
critical	@Evictor /\ Memory_Budget /\ Critical_Eviction
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
TxnPrepare
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
<<\\"latches held = \\">>	@Evictor
\\\">
>
<<\\" IN type=\\">>	@Evictor
<<\\"Database \\">>	@Evictor
.
<<\\"Usage: \\">>
<<\\"                 -h <environment home>\\">>
(optional)
<<\\"                 -f <file number, in hex>\\">>
<<\\"                 -o <offset, in hex>\\">>
Log file is truncated at position starting at and inclusive of the offset. Beware, not  for general purpose use yet!
\\\"/>	@(Checkpointer_Daemon) /\ (Checkpointer_Daemon)
daemon	@Checkpointer_Daemon
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
Recovery Info
<<\\" lastUsed=\\">>
<<\\" nextAvail=\\">>
<<\\" ckptStart=\\">>
<<\\" firstActive=\\">>
<<\\" ckptEnd=\\">>
<<\\" useRoot=\\">>
>
