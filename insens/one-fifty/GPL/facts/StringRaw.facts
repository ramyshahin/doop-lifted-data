<Vertex$VertexIter3: boolean hasNext()>	<Vertex$VertexIter3: boolean hasNext()>
<Graph$EdgeIter1: void <init>(Graph)>	<Graph$EdgeIter1: void <init>(Graph)>
<Graph: Graph kruskal()>	<Graph: Graph kruskal()>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>	<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.LinkedList: java.lang.Object remove(int)>	<java.util.LinkedList: java.lang.Object remove(int)>
<Neighbor: void adjustAdorns(EdgeIfc)>	<Neighbor: void adjustAdorns(EdgeIfc)>
<GlobalVarsWrapper: void <clinit>()>	<GlobalVarsWrapper: void <clinit>()>
<<\\" # \\">>	<<\\" # \\">>
<java.util.Map: java.lang.Object get(java.lang.Object)>	<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.util.Iterator: boolean hasNext()>	<java.util.Iterator: boolean hasNext()>
<<\\" Pred \\">>	<<\\" Pred \\">>
<Vertex: void setWeight(int)>	<Vertex: void setWeight(int)>
<EdgeIfc: void setWeight(int)>	<EdgeIfc: void setWeight(int)>
<java.lang.Integer: int parseInt(java.lang.String,int)>	<java.lang.Integer: int parseInt(java.lang.String,int)>
<Edge: Vertex getStart()>	<Edge: Vertex getStart()>
<<\\"Total Time: \\">>	<<\\"Total Time: \\">>
<RegionWorkSpace: void init_vertex(Vertex)>	<RegionWorkSpace: void init_vertex(Vertex)>
<Vertex: void init_vertex(WorkSpace)>	<Vertex: void init_vertex(WorkSpace)>
<Neighbor: void setWeight(int)>	<Neighbor: void setWeight(int)>
<Vertex: void adjustAdorns(Vertex,int)>	<Vertex: void adjustAdorns(Vertex,int)>
<EdgeIter: boolean hasNext()>	<EdgeIter: boolean hasNext()>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>	<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
<Graph: void sortVertices(java.util.Comparator)>	<Graph: void sortVertices(java.util.Comparator)>
<java.util.LinkedList: boolean remove(java.lang.Object)>	<java.util.LinkedList: boolean remove(java.lang.Object)>
<Vertex$EdgeIter1: EdgeIfc next()>	<Vertex$EdgeIter1: EdgeIfc next()>
<java.util.Iterator: java.lang.Object next()>	<java.util.Iterator: java.lang.Object next()>
<java.lang.String: void <init>(java.lang.String)>	<java.lang.String: void <init>(java.lang.String)>
<Edge: Vertex getEnd()>	<Edge: Vertex getEnd()>
<java.io.FileReader: void <init>(java.lang.String)>	<java.io.FileReader: void <init>(java.lang.String)>
<java.lang.StringBuilder: java.lang.String toString()>	<java.lang.StringBuilder: java.lang.String toString()>
<Main: void main(java.lang.String[])>	<Main: void main(java.lang.String[])>
<Vertex: java.util.LinkedList getNeighborsObj()>	<Vertex: java.util.LinkedList getNeighborsObj()>
<<\\"Edges \\">>	<<\\"Edges \\">>
<Vertex$VertexIter1: boolean hasNext()>	<Vertex$VertexIter1: boolean hasNext()>
<Graph: Graph prim(Vertex)>	<Graph: Graph prim(Vertex)>
<FinishTimeWorkSpace: void <init>()>	<FinishTimeWorkSpace: void <init>()>
<Graph: EdgeIter getEdges()>	<Graph: EdgeIter getEdges()>
<VertexIter: boolean hasNext()>	<VertexIter: boolean hasNext()>
<<\\"Your file \\">>	<<\\"Your file \\">>
<java.lang.String: java.lang.String trim()>	<java.lang.String: java.lang.String trim()>
<Vertex$EdgeIter2: void <init>(Vertex)>	<Vertex$EdgeIter2: void <init>(Vertex)>
<<\\"Rep null \\">>	<<\\"Rep null \\">>
<java.io.PrintStream: void println(java.lang.String)>	<java.io.PrintStream: void println(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>	<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<Graph: void addVertex(Vertex)>	<Graph: void addVertex(Vertex)>
<java.util.LinkedList: void clear()>	<java.util.LinkedList: void clear()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<EdgeIter: EdgeIfc next()>	<EdgeIter: EdgeIfc next()>
<Graph: void run(Vertex)>	<Graph: void run(Vertex)>
<Neighbor: Vertex getEnd()>	<Neighbor: Vertex getEnd()>
<Graph$Comparator2: void <init>(Graph)>	<Graph$Comparator2: void <init>(Graph)>
<Graph: boolean cycleCheck()>	<Graph: boolean cycleCheck()>
<Vertex: EdgeIter getEdges()>	<Vertex: EdgeIter getEdges()>
<java.io.PrintStream: void println()>	<java.io.PrintStream: void println()>
<java.util.LinkedList: void <init>()>	<java.util.LinkedList: void <init>()>
<GlobalVarsWrapper: void <init>()>	<GlobalVarsWrapper: void <init>()>
<WorkSpace: void init_vertex(Vertex)>	<WorkSpace: void init_vertex(Vertex)>
<Neighbor: Vertex getStart()>	<Neighbor: Vertex getStart()>
<<\\"Vertex \\">>	<<\\"Vertex \\">>
<Vertex: void adjustAdorns(Neighbor)>	<Vertex: void adjustAdorns(Neighbor)>
<Vertex$EdgeIter3: boolean hasNext()>	<Vertex$EdgeIter3: boolean hasNext()>
<Main: void <init>()>	<Main: void <init>()>
<java.lang.Integer: int intValue()>	<java.lang.Integer: int intValue()>
<Vertex: void addWeight(int)>	<Vertex: void addWeight(int)>
<Graph: void addEdge(Vertex,Neighbor)>	<Graph: void addEdge(Vertex,Neighbor)>
<EdgeIfc: void adjustAdorns(EdgeIfc)>	<EdgeIfc: void adjustAdorns(EdgeIfc)>
<WorkSpaceTranspose: void nextRegionAction(Vertex)>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>
<<\\" Rep \\">>	<<\\" Rep \\">>
<Vertex$VertexIter2: void <init>(Vertex)>	<Vertex$VertexIter2: void <init>(Vertex)>
<VertexIter: void <init>()>	<VertexIter: void <init>()>
<Main: EdgeIfc addEdge(Graph,int)>	<Main: EdgeIfc addEdge(Graph,int)>
<java.io.Reader: void close()>	<java.io.Reader: void close()>
<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>	<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
<Vertex: void addEdge(Neighbor)>	<Vertex: void addEdge(Neighbor)>
<Neighbor: void <init>(Vertex,int)>	<Neighbor: void <init>(Vertex,int)>
<Graph: void sortEdges(java.util.Comparator)>	<Graph: void sortEdges(java.util.Comparator)>
<Vertex: Vertex assignName(java.lang.String)>	<Vertex: Vertex assignName(java.lang.String)>
<java.lang.Object: boolean equals(java.lang.Object)>	<java.lang.Object: boolean equals(java.lang.Object)>
<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>	<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>
<java.util.LinkedList: java.lang.Object getLast()>	<java.util.LinkedList: java.lang.Object getLast()>
<Neighbor: Vertex getOtherVertex(Vertex)>	<Neighbor: Vertex getOtherVertex(Vertex)>
<Graph$Comparator1: int compare(Vertex,Vertex)>	<Graph$Comparator1: int compare(Vertex,Vertex)>
<<\\" comp# \\">>	<<\\" comp# \\">>
<Graph: void startProfile()>	<Graph: void startProfile()>
<Vertex$EdgeIter1: boolean hasNext()>	<Vertex$EdgeIter1: boolean hasNext()>
<CycleWorkSpace: void init_vertex(Vertex)>	<CycleWorkSpace: void init_vertex(Vertex)>
<Neighbor: void <init>(Vertex,Edge)>	<Neighbor: void <init>(Vertex,Edge)>
<CycleWorkSpace: void <init>()>	<CycleWorkSpace: void <init>()>
******************************************	******************************************
<Graph$Comparator1: void <init>(Graph)>	<Graph$Comparator1: void <init>(Graph)>
<Edge: void display()>	<Edge: void display()>
<Vertex$EdgeIter2: boolean hasNext()>	<Vertex$EdgeIter2: boolean hasNext()>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Vertex$VertexIter2: boolean hasNext()>	<Vertex$VertexIter2: boolean hasNext()>
<<\\"Time elapsed: \\">>	<<\\"Time elapsed: \\">>
<java.lang.String: boolean equals(java.lang.Object)>	<java.lang.String: boolean equals(java.lang.Object)>
<Vertex: Vertex getEnd()>	<Vertex: Vertex getEnd()>
<Vertex$EdgeIter2: EdgeIfc next()>	<Vertex$EdgeIter2: EdgeIfc next()>
<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Vertex findsVertex(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<Vertex: Vertex getOtherVertex(Vertex)>	<Vertex: Vertex getOtherVertex(Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>	<Edge: Vertex getOtherVertex(Vertex)>
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
<Vertex$EdgeIter1: void <init>(Vertex)>	<Vertex$EdgeIter1: void <init>(Vertex)>
<CycleWorkSpace: void preVisitAction(Vertex)>	<CycleWorkSpace: void preVisitAction(Vertex)>
<WorkSpaceTranspose: void <init>()>	<WorkSpaceTranspose: void <init>()>
<Graph: void stopProfile()>	<Graph: void stopProfile()>
<java.util.LinkedList: int size()>	<java.util.LinkedList: int size()>
<RegionWorkSpace: void postVisitAction(Vertex)>	<RegionWorkSpace: void postVisitAction(Vertex)>
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Graph: void numberVertices()>	<Graph: void numberVertices()>
<NumberWorkSpace: void <init>()>	<NumberWorkSpace: void <init>()>
<Graph: Graph strongComponents()>	<Graph: Graph strongComponents()>
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
<EdgeIfc: Vertex getEnd()>	<EdgeIfc: Vertex getEnd()>
<Graph: VertexIter getVertices()>	<Graph: VertexIter getVertices()>
<<\\" FinishTime -> \\">>	<<\\" FinishTime -> \\">>
<Graph: void graphSearch(WorkSpace)>	<Graph: void graphSearch(WorkSpace)>
<<\\"Vertices \\">>	<<\\"Vertices \\">>
<Vertex$VertexIter3: Vertex next()>	<Vertex$VertexIter3: Vertex next()>
<EdgeIfc: void display()>	<EdgeIfc: void display()>
<<\\" Cycle? \\">>	<<\\" Cycle? \\">>
<EdgeIter: void <init>()>	<EdgeIter: void <init>()>
<Vertex: void nodeSearch(WorkSpace)>	<Vertex: void nodeSearch(WorkSpace)>
<Graph: void endProfile()>	<Graph: void endProfile()>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
<java.lang.String: java.lang.String substring(int,int)>	<java.lang.String: java.lang.String substring(int,int)>
<Graph: int readNumber()>	<Graph: int readNumber()>
<java.util.LinkedList: void add(int,java.lang.Object)>	<java.util.LinkedList: void add(int,java.lang.Object)>
<Graph: Graph computeTranspose(Graph)>	<Graph: Graph computeTranspose(Graph)>
<WorkSpaceTranspose: void preVisitAction(Vertex)>	<WorkSpaceTranspose: void preVisitAction(Vertex)>
<Vertex: void <init>()>	<Vertex: void <init>()>
<Neighbor: int getWeight()>	<Neighbor: int getWeight()>
<Vertex$VertexIter2: Vertex next()>	<Vertex$VertexIter2: Vertex next()>
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
<Vertex: Vertex getStart()>	<Vertex: Vertex getStart()>
<Edge: int getWeight()>	<Edge: int getWeight()>
<Main: void readWeights(Graph,int)>	<Main: void readWeights(Graph,int)>
<<\\" VertexCycle# \\">>	<<\\" VertexCycle# \\">>
<<\\" start=\\">>	<<\\" start=\\">>
<WorkSpace: void nextRegionAction(Vertex)>	<WorkSpace: void nextRegionAction(Vertex)>
<java.util.LinkedList: java.lang.Object removeFirst()>	<java.util.LinkedList: java.lang.Object removeFirst()>
<Graph: void <init>()>	<Graph: void <init>()>
<Neighbor: void <init>()>	<Neighbor: void <init>()>
<Vertex: int getWeight()>	<Vertex: int getWeight()>
<Graph: void connectedComponents()>	<Graph: void connectedComponents()>
<java.io.Reader: int read()>	<java.io.Reader: int read()>
<NumberWorkSpace: void preVisitAction(Vertex)>	<NumberWorkSpace: void preVisitAction(Vertex)>
<java.lang.Integer: void <init>(int)>	<java.lang.Integer: void <init>(int)>
<java.lang.System: long currentTimeMillis()>	<java.lang.System: long currentTimeMillis()>
<Vertex$EdgeIter3: EdgeIfc next()>	<Vertex$EdgeIter3: EdgeIfc next()>
<java.util.HashSet: void <init>()>	<java.util.HashSet: void <init>()>
<EdgeIfc: Vertex getStart()>	<EdgeIfc: Vertex getStart()>
<Vertex: void display()>	<Vertex: void display()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<Graph$EdgeIter1: EdgeIfc next()>	<Graph$EdgeIter1: EdgeIfc next()>
<java.util.LinkedList: java.util.Iterator iterator()>	<java.util.LinkedList: java.util.Iterator iterator()>
<VertexIter: Vertex next()>	<VertexIter: Vertex next()>
<java.util.Set: boolean remove(java.lang.Object)>	<java.util.Set: boolean remove(java.lang.Object)>
<Edge: void adjustAdorns(EdgeIfc)>	<Edge: void adjustAdorns(EdgeIfc)>
<java.util.LinkedList: java.lang.Object get(int)>	<java.util.LinkedList: java.lang.Object get(int)>
<java.lang.Object: void <init>()>	<java.lang.Object: void <init>()>
<FinishTimeWorkSpace: void postVisitAction(Vertex)>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>
<WorkSpace: void postVisitAction(Vertex)>	<WorkSpace: void postVisitAction(Vertex)>
<java.util.Set: boolean contains(java.lang.Object)>	<java.util.Set: boolean contains(java.lang.Object)>
<Graph: java.util.LinkedList access$0(Graph)>	<Graph: java.util.LinkedList access$0(Graph)>
<java.io.PrintStream: void print(java.lang.String)>	<java.io.PrintStream: void print(java.lang.String)>
<Vertex$VertexIter3: void <init>(Vertex)>	<Vertex$VertexIter3: void <init>(Vertex)>
v	v
<Vertex: void addAdjacent(Vertex)>	<Vertex: void addAdjacent(Vertex)>
<Graph$Comparator3: void <init>(Graph)>	<Graph$Comparator3: void <init>(Graph)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>	<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<Graph$EdgeIter1: boolean hasNext()>	<Graph$EdgeIter1: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(int)>	<java.lang.String: java.lang.String valueOf(int)>
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
<WorkSpace: void <init>()>	<WorkSpace: void <init>()>
<Graph: void display()>	<Graph: void display()>
<Neighbor: void display()>	<Neighbor: void display()>
<<\\" !visited\\">>	<<\\" !visited\\">>
<WorkSpace: void preVisitAction(Vertex)>	<WorkSpace: void preVisitAction(Vertex)>
<<\\"  visited\\">>	<<\\"  visited\\">>
<RegionWorkSpace: void <init>()>	<RegionWorkSpace: void <init>()>
<java.lang.StringBuilder: void <init>(java.lang.String)>	<java.lang.StringBuilder: void <init>(java.lang.String)>
<java.util.HashMap: void <init>()>	<java.util.HashMap: void <init>()>
<Graph: void resumeProfile()>	<Graph: void resumeProfile()>
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
<Vertex: java.lang.String getName()>	<Vertex: java.lang.String getName()>
<EdgeIfc: Vertex getOtherVertex(Vertex)>	<EdgeIfc: Vertex getOtherVertex(Vertex)>
<Vertex$EdgeIter3: void <init>(Vertex)>	<Vertex$EdgeIter3: void <init>(Vertex)>
<RegionWorkSpace: void nextRegionAction(Vertex)>	<RegionWorkSpace: void nextRegionAction(Vertex)>
<Vertex: void adjustAdorns(EdgeIfc)>	<Vertex: void adjustAdorns(EdgeIfc)>
<Graph: void stopBenchmark()>	<Graph: void stopBenchmark()>
<Vertex$VertexIter1: void <init>(Vertex)>	<Vertex$VertexIter1: void <init>(Vertex)>
<VertexIter: void <init>(Graph)>	<VertexIter: void <init>(Graph)>
<EdgeIfc: int getWeight()>	<EdgeIfc: int getWeight()>
<Edge: void setWeight(int)>	<Edge: void setWeight(int)>
<<\\" Weight=\\">>	<<\\" Weight=\\">>
<Graph: void runBenchmark(java.lang.String)>	<Graph: void runBenchmark(java.lang.String)>
<<\\" Weights : \\">>	<<\\" Weights : \\">>
<Vertex$VertexIter1: Vertex next()>	<Vertex$VertexIter1: Vertex next()>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>
<java.util.LinkedList: boolean add(java.lang.Object)>	<java.util.LinkedList: boolean add(java.lang.Object)>
<Graph: void <clinit>()>	<Graph: void <clinit>()>
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>	<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<java.util.Set: boolean add(java.lang.Object)>	<java.util.Set: boolean add(java.lang.Object)>
<CycleWorkSpace: void postVisitAction(Vertex)>	<CycleWorkSpace: void postVisitAction(Vertex)>
<Vertex: VertexIter getNeighbors()>	<Vertex: VertexIter getNeighbors()>
<java.lang.String: void <init>(char[])>	<java.lang.String: void <init>(char[])>
<Graph$Comparator2: int compare(Vertex,Vertex)>	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Vertex: void addNeighbor(Neighbor)>	<Vertex: void addNeighbor(Neighbor)>
<Edge: void <init>(Vertex,Vertex,int)>	<Edge: void <init>(Vertex,Vertex,int)>
