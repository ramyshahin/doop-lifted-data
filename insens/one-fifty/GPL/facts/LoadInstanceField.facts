<Vertex: java.lang.String getName()>/assign/instruction2	2	<Vertex: java.lang.String getName()>/$r0	<Vertex: java.lang.String getName()>/this#_0	<Vertex: java.lang.String name>	<Vertex: java.lang.String getName()>
<Vertex$VertexIter1: void <init>(Vertex)>/assign/instruction5	5	<Vertex$VertexIter1: void <init>(Vertex)>/$r0	<Vertex$VertexIter1: void <init>(Vertex)>/l1#_0	<Vertex: java.util.LinkedList adjacentVertices>	<Vertex$VertexIter1: void <init>(Vertex)>
<Graph: void sortVertices(java.util.Comparator)>/assign/instruction3	3	<Graph: void sortVertices(java.util.Comparator)>/$r0	<Graph: void sortVertices(java.util.Comparator)>/this#_0	<Graph: java.util.LinkedList vertices>	<Graph: void sortVertices(java.util.Comparator)>
<Vertex: void display()>/assign/instruction88	88	<Vertex: void display()>/$i6	<Vertex: void display()>/this#_0	<Vertex: int VertexCycle>	<Vertex: void display()>
<Edge: Vertex getStart()>/assign/instruction2	2	<Edge: Vertex getStart()>/$r0	<Edge: Vertex getStart()>/this#_0	<Edge: Vertex start>	<Edge: Vertex getStart()>
<Vertex: void display()>/assign/instruction59	59	<Vertex: void display()>/$i2	<Vertex: void display()>/this#_0	<Vertex: int vertexNumber>	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/assign/instruction123	123	<Graph: Graph prim(Vertex)>/$r18	<Graph: Graph prim(Vertex)>/vtx_$$A_3#_650	<Vertex: java.lang.String name>	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/assign/instruction4	4	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	<Vertex: int VertexColor>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex: void display()>/assign/instruction68	68	<Vertex: void display()>/$i3	<Vertex: void display()>/this#_0	<Vertex: int componentNumber>	<Vertex: void display()>
<Graph: Graph kruskal()>/assign/instruction36	36	<Graph: Graph kruskal()>/urep#_440	<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_1#_431	<Vertex: Vertex representative>	<Graph: Graph kruskal()>
<VertexIter: Vertex next()>/assign/instruction2	2	<VertexIter: Vertex next()>/$r0	<VertexIter: Vertex next()>/this#_0	<VertexIter: java.util.Iterator iter>	<VertexIter: Vertex next()>
<Graph: Graph prim(Vertex)>/assign/instruction117	117	<Graph: Graph prim(Vertex)>/$r16	<Graph: Graph prim(Vertex)>/vxiter_$$A_4#_648	<Vertex: java.lang.String pred>	<Graph: Graph prim(Vertex)>
<CycleWorkSpace: void preVisitAction(Vertex)>/assign/instruction3	3	<CycleWorkSpace: void preVisitAction(Vertex)>/$z0	<CycleWorkSpace: void preVisitAction(Vertex)>/v#_0	<Vertex: boolean visited>	<CycleWorkSpace: void preVisitAction(Vertex)>
<Neighbor: void display()>/assign/instruction5	5	<Neighbor: void display()>/$r2	<Neighbor: void display()>/$r1	<Vertex: java.lang.String name>	<Neighbor: void display()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/assign/instruction4	4	<Graph$Comparator1: int compare(Vertex,Vertex)>/$i1	<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0	<Vertex: int finishTime>	<Graph$Comparator1: int compare(Vertex,Vertex)>
<Graph$Comparator1: int compare(Vertex,Vertex)>/assign/instruction10	10	<Graph$Comparator1: int compare(Vertex,Vertex)>/$i2	<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0	<Vertex: int finishTime>	<Graph$Comparator1: int compare(Vertex,Vertex)>
<Graph: Graph kruskal()>/assign/instruction29	29	<Graph: Graph kruskal()>/$r4	<Graph: Graph kruskal()>/v_$$A_3#_432	<Vertex: Vertex representative>	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/assign/instruction94	94	<Graph: Graph kruskal()>/$r15	<Graph: Graph kruskal()>/urep#_440	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Edge: void display()>/assign/instruction14	14	<Edge: void display()>/$r6	<Edge: void display()>/this#_0	<Edge: Vertex start>	<Edge: void display()>
<Neighbor: Vertex getOtherVertex(Vertex)>/assign/instruction3	3	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	<Neighbor: Vertex getOtherVertex(Vertex)>/this#_0	<Neighbor: Vertex neighbor>	<Neighbor: Vertex getOtherVertex(Vertex)>
<Graph: Graph kruskal()>/assign/instruction65	65	<Graph: Graph kruskal()>/$r23	<Graph: Graph kruskal()>/urep#_440	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex$VertexIter2: void <init>(Vertex)>/assign/instruction5	5	<Vertex$VertexIter2: void <init>(Vertex)>/$r0	<Vertex$VertexIter2: void <init>(Vertex)>/l1#_0	<Vertex: java.util.LinkedList adjacentNeighbors>	<Vertex$VertexIter2: void <init>(Vertex)>
<Vertex: void display()>/assign/instruction77	77	<Vertex: void display()>/$i4	<Vertex: void display()>/this#_0	<Vertex: int finishTime>	<Vertex: void display()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/assign/instruction9	9	<Graph$Comparator2: int compare(Vertex,Vertex)>/$i3	<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0	<Vertex: int key>	<Graph$Comparator2: int compare(Vertex,Vertex)>
<VertexIter: void <init>(Graph)>/assign/instruction4	4	<VertexIter: void <init>(Graph)>/$r0	<VertexIter: void <init>(Graph)>/g#_0	<Graph: java.util.LinkedList vertices>	<VertexIter: void <init>(Graph)>
<Graph: Graph kruskal()>/assign/instruction38	38	<Graph: Graph kruskal()>/$r8	<Graph: Graph kruskal()>/urep#_440	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/assign/instruction10	10	<Graph$Comparator2: int compare(Vertex,Vertex)>/$i2	<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0	<Vertex: int key>	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Graph: Graph prim(Vertex)>/assign/instruction31	31	<Graph: Graph prim(Vertex)>/$i0	<Graph: Graph prim(Vertex)>/x_$$A_3#_546	<Vertex: int key>	<Graph: Graph prim(Vertex)>
<Vertex$EdgeIter3: boolean hasNext()>/assign/instruction2	2	<Vertex$EdgeIter3: boolean hasNext()>/$r0	<Vertex$EdgeIter3: boolean hasNext()>/this#_0	<Vertex$EdgeIter3: java.util.Iterator iter>	<Vertex$EdgeIter3: boolean hasNext()>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/assign/instruction3	3	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$z0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/v#_0	<Vertex: boolean visited>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>
<Graph: void display()>/assign/instruction17	17	<Graph: void display()>/$r2	<Graph: void display()>/this#_0	<Graph: java.util.LinkedList vertices>	<Graph: void display()>
<Edge: int getWeight()>/assign/instruction2	2	<Edge: int getWeight()>/$i0	<Edge: int getWeight()>/this#_0	<Edge: int weight>	<Edge: int getWeight()>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/assign/instruction14	14	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i4	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	<Vertex: int VertexCycle>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<NumberWorkSpace: void preVisitAction(Vertex)>/assign/instruction5	5	<NumberWorkSpace: void preVisitAction(Vertex)>/$i0	<NumberWorkSpace: void preVisitAction(Vertex)>/this#_0	<NumberWorkSpace: int vertexCounter>	<NumberWorkSpace: void preVisitAction(Vertex)>
<Neighbor: Vertex getEnd()>/assign/instruction2	2	<Neighbor: Vertex getEnd()>/$r0	<Neighbor: Vertex getEnd()>/this#_0	<Neighbor: Vertex neighbor>	<Neighbor: Vertex getEnd()>
<Vertex$VertexIter1: Vertex next()>/assign/instruction2	2	<Vertex$VertexIter1: Vertex next()>/$r0	<Vertex$VertexIter1: Vertex next()>/this#_0	<Vertex$VertexIter1: java.util.Iterator iter>	<Vertex$VertexIter1: Vertex next()>
<Vertex: void display()>/assign/instruction113	113	<Vertex: void display()>/$r54	<Vertex: void display()>/this#_0	<Vertex: java.lang.String pred>	<Vertex: void display()>
<Graph: void display()>/assign/instruction10	10	<Graph: void display()>/$r3	<Graph: void display()>/this#_0	<Graph: java.util.LinkedList vertices>	<Graph: void display()>
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/assign/instruction3	3	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/$i0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0	<WorkSpaceTranspose: int SCCCounter>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>/assign/instruction3	3	<Edge: Vertex getOtherVertex(Vertex)>/$r0	<Edge: Vertex getOtherVertex(Vertex)>/this#_0	<Edge: Vertex start>	<Edge: Vertex getOtherVertex(Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>/assign/instruction7	7	<Edge: Vertex getOtherVertex(Vertex)>/$r1	<Edge: Vertex getOtherVertex(Vertex)>/this#_0	<Edge: Vertex end>	<Edge: Vertex getOtherVertex(Vertex)>
<Vertex$EdgeIter1: boolean hasNext()>/assign/instruction2	2	<Vertex$EdgeIter1: boolean hasNext()>/$r0	<Vertex$EdgeIter1: boolean hasNext()>/this#_0	<Vertex$EdgeIter1: java.util.Iterator iter>	<Vertex$EdgeIter1: boolean hasNext()>
<WorkSpaceTranspose: void preVisitAction(Vertex)>/assign/instruction5	5	<WorkSpaceTranspose: void preVisitAction(Vertex)>/$i0	<WorkSpaceTranspose: void preVisitAction(Vertex)>/this#_0	<WorkSpaceTranspose: int SCCCounter>	<WorkSpaceTranspose: void preVisitAction(Vertex)>
<Vertex$EdgeIter3: EdgeIfc next()>/assign/instruction5	5	<Vertex$EdgeIter3: EdgeIfc next()>/$r3	<Vertex$EdgeIter3: EdgeIfc next()>/$r2	<Neighbor: Edge edge>	<Vertex$EdgeIter3: EdgeIfc next()>
<Vertex$EdgeIter3: EdgeIfc next()>/assign/instruction2	2	<Vertex$EdgeIter3: EdgeIfc next()>/$r0	<Vertex$EdgeIter3: EdgeIfc next()>/this#_0	<Vertex$EdgeIter3: java.util.Iterator iter>	<Vertex$EdgeIter3: EdgeIfc next()>
<Graph: void addEdge(Vertex,Neighbor)>/assign/instruction7	7	<Graph: void addEdge(Vertex,Neighbor)>/$i0	<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0	<Neighbor: int weight>	<Graph: void addEdge(Vertex,Neighbor)>
<Vertex$VertexIter3: void <init>(Vertex)>/assign/instruction5	5	<Vertex$VertexIter3: void <init>(Vertex)>/$r0	<Vertex$VertexIter3: void <init>(Vertex)>/l1#_0	<Vertex: java.util.LinkedList neighbors>	<Vertex$VertexIter3: void <init>(Vertex)>
<Vertex: void display()>/assign/instruction93	93	<Vertex: void display()>/$r44	<Vertex: void display()>/this#_0	<Vertex: Vertex representative>	<Vertex: void display()>
<Graph: int readNumber()>/assign/instruction5	5	<Graph: int readNumber()>/$r0	<Graph: int readNumber()>/this#_0	<Graph: java.io.Reader inFile>	<Graph: int readNumber()>
<Vertex: void display()>/assign/instruction28	28	<Vertex: void display()>/$r12	<Vertex: void display()>/this#_0	<Vertex: java.lang.String name>	<Vertex: void display()>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/assign/instruction5	5	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/$i0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/this#_0	<FinishTimeWorkSpace: int FinishCounter>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>
<Graph: Graph kruskal()>/assign/instruction76	76	<Graph: Graph kruskal()>/$r13	<Graph: Graph kruskal()>/vrep#_441	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex: void display()>/assign/instruction80	80	<Vertex: void display()>/$i5	<Vertex: void display()>/this#_0	<Vertex: int strongComponentNumber>	<Vertex: void display()>
<Graph: Graph kruskal()>/assign/instruction88	88	<Graph: Graph kruskal()>/$r14	<Graph: Graph kruskal()>/vrep#_441	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex: void addWeight(int)>/assign/instruction3	3	<Vertex: void addWeight(int)>/$r1	<Vertex: void addWeight(int)>/this#_0	<Vertex: java.util.LinkedList weightsList>	<Vertex: void addWeight(int)>
<Vertex: void adjustAdorns(Vertex,int)>/assign/instruction8	8	<Vertex: void adjustAdorns(Vertex,int)>/$r4	<Vertex: void adjustAdorns(Vertex,int)>/this#_0	<Vertex: java.util.LinkedList weightsList>	<Vertex: void adjustAdorns(Vertex,int)>
<Neighbor: int getWeight()>/assign/instruction2	2	<Neighbor: int getWeight()>/$i0	<Neighbor: int getWeight()>/this#_0	<Neighbor: int weight>	<Neighbor: int getWeight()>
<Graph: void sortEdges(java.util.Comparator)>/assign/instruction3	3	<Graph: void sortEdges(java.util.Comparator)>/$r0	<Graph: void sortEdges(java.util.Comparator)>/this#_0	<Graph: java.util.LinkedList edges>	<Graph: void sortEdges(java.util.Comparator)>
<Graph: Graph kruskal()>/assign/instruction31	31	<Graph: Graph kruskal()>/$r6	<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_1#_431	<Vertex: Vertex representative>	<Graph: Graph kruskal()>
<CycleWorkSpace: void postVisitAction(Vertex)>/assign/instruction5	5	<CycleWorkSpace: void postVisitAction(Vertex)>/$i0	<CycleWorkSpace: void postVisitAction(Vertex)>/this#_0	<CycleWorkSpace: int counter>	<CycleWorkSpace: void postVisitAction(Vertex)>
<Vertex: void adjustAdorns(Neighbor)>/assign/instruction3	3	<Vertex: void adjustAdorns(Neighbor)>/$r0	<Vertex: void adjustAdorns(Neighbor)>/this#_0	<Vertex: java.util.LinkedList adjacentNeighbors>	<Vertex: void adjustAdorns(Neighbor)>
<Graph$EdgeIter1: EdgeIfc next()>/assign/instruction2	2	<Graph$EdgeIter1: EdgeIfc next()>/$r0	<Graph$EdgeIter1: EdgeIfc next()>/this#_0	<Graph$EdgeIter1: java.util.Iterator iter>	<Graph$EdgeIter1: EdgeIfc next()>
<Vertex$VertexIter2: Vertex next()>/assign/instruction2	2	<Vertex$VertexIter2: Vertex next()>/$r0	<Vertex$VertexIter2: Vertex next()>/this#_0	<Vertex$VertexIter2: java.util.Iterator iter>	<Vertex$VertexIter2: Vertex next()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/assign/instruction5	5	<Graph$Comparator2: int compare(Vertex,Vertex)>/$i0	<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0	<Vertex: int key>	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Graph: Graph kruskal()>/assign/instruction56	56	<Graph: Graph kruskal()>/$r17	<Graph: Graph kruskal()>/vrep#_441	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Graph$Comparator2: int compare(Vertex,Vertex)>/assign/instruction4	4	<Graph$Comparator2: int compare(Vertex,Vertex)>/$i1	<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0	<Vertex: int key>	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Neighbor: void display()>/assign/instruction4	4	<Neighbor: void display()>/$r1	<Neighbor: void display()>/this#_0	<Neighbor: Vertex neighbor>	<Neighbor: void display()>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/assign/instruction15	15	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i2	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	<Vertex: int VertexCycle>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex$VertexIter2: Vertex next()>/assign/instruction5	5	<Vertex$VertexIter2: Vertex next()>/$r3	<Vertex$VertexIter2: Vertex next()>/$r2	<Neighbor: Vertex neighbor>	<Vertex$VertexIter2: Vertex next()>
<Graph: void addEdge(Vertex,Neighbor)>/assign/instruction5	5	<Graph: void addEdge(Vertex,Neighbor)>/end#_148	<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0	<Neighbor: Vertex neighbor>	<Graph: void addEdge(Vertex,Neighbor)>
<Edge: Vertex getOtherVertex(Vertex)>/assign/instruction5	5	<Edge: Vertex getOtherVertex(Vertex)>/$r3	<Edge: Vertex getOtherVertex(Vertex)>/this#_0	<Edge: Vertex end>	<Edge: Vertex getOtherVertex(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/assign/instruction12	12	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i1	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	<Vertex: int VertexColor>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/assign/instruction3	3	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/$i0	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/this#_0	<FinishTimeWorkSpace: int FinishCounter>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/assign/instruction6	6	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i5	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	<Vertex: int VertexColor>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<RegionWorkSpace: void postVisitAction(Vertex)>/assign/instruction3	3	<RegionWorkSpace: void postVisitAction(Vertex)>/$i0	<RegionWorkSpace: void postVisitAction(Vertex)>/this#_0	<RegionWorkSpace: int counter>	<RegionWorkSpace: void postVisitAction(Vertex)>
<Vertex$EdgeIter1: EdgeIfc next()>/assign/instruction2	2	<Vertex$EdgeIter1: EdgeIfc next()>/$r0	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0	<Vertex$EdgeIter1: java.util.Iterator iter>	<Vertex$EdgeIter1: EdgeIfc next()>
<Graph$Comparator1: int compare(Vertex,Vertex)>/assign/instruction9	9	<Graph$Comparator1: int compare(Vertex,Vertex)>/$i3	<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0	<Vertex: int finishTime>	<Graph$Comparator1: int compare(Vertex,Vertex)>
<VertexIter: boolean hasNext()>/assign/instruction2	2	<VertexIter: boolean hasNext()>/$r0	<VertexIter: boolean hasNext()>/this#_0	<VertexIter: java.util.Iterator iter>	<VertexIter: boolean hasNext()>
<Vertex$VertexIter1: boolean hasNext()>/assign/instruction2	2	<Vertex$VertexIter1: boolean hasNext()>/$r0	<Vertex$VertexIter1: boolean hasNext()>/this#_0	<Vertex$VertexIter1: java.util.Iterator iter>	<Vertex$VertexIter1: boolean hasNext()>
<Graph: boolean cycleCheck()>/assign/instruction6	6	<Graph: boolean cycleCheck()>/$z0	<Graph: boolean cycleCheck()>/c#_393	<CycleWorkSpace: boolean AnyCycles>	<Graph: boolean cycleCheck()>
<Edge: Vertex getOtherVertex(Vertex)>/assign/instruction9	9	<Edge: Vertex getOtherVertex(Vertex)>/$r2	<Edge: Vertex getOtherVertex(Vertex)>/this#_0	<Edge: Vertex start>	<Edge: Vertex getOtherVertex(Vertex)>
<Vertex: void addEdge(Neighbor)>/assign/instruction3	3	<Vertex: void addEdge(Neighbor)>/$r0	<Vertex: void addEdge(Neighbor)>/this#_0	<Vertex: java.util.LinkedList adjacentNeighbors>	<Vertex: void addEdge(Neighbor)>
<Vertex: void addAdjacent(Vertex)>/assign/instruction3	3	<Vertex: void addAdjacent(Vertex)>/$r0	<Vertex: void addAdjacent(Vertex)>/this#_0	<Vertex: java.util.LinkedList adjacentVertices>	<Vertex: void addAdjacent(Vertex)>
<Graph: int readNumber()>/assign/instruction18	18	<Graph: int readNumber()>/$r2	<Graph: int readNumber()>/this#_0	<Graph: java.io.Reader inFile>	<Graph: int readNumber()>
<Graph: Graph kruskal()>/assign/instruction49	49	<Graph: Graph kruskal()>/$r20	<Graph: Graph kruskal()>/urep#_440	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Graph: void addVertex(Vertex)>/assign/instruction3	3	<Graph: void addVertex(Vertex)>/$r0	<Graph: void addVertex(Vertex)>/this#_0	<Graph: java.util.LinkedList vertices>	<Graph: void addVertex(Vertex)>
<Graph: Graph prim(Vertex)>/assign/instruction105	105	<Graph: Graph prim(Vertex)>/edgeiter_$$A_1#_635	<Graph: Graph prim(Vertex)>/vtx_$$A_1#_634	<Vertex: java.lang.String name>	<Graph: Graph prim(Vertex)>
<Edge: Vertex getEnd()>/assign/instruction2	2	<Edge: Vertex getEnd()>/$r0	<Edge: Vertex getEnd()>/this#_0	<Edge: Vertex end>	<Edge: Vertex getEnd()>
<CycleWorkSpace: void preVisitAction(Vertex)>/assign/instruction5	5	<CycleWorkSpace: void preVisitAction(Vertex)>/$i0	<CycleWorkSpace: void preVisitAction(Vertex)>/this#_0	<CycleWorkSpace: int counter>	<CycleWorkSpace: void preVisitAction(Vertex)>
<Vertex: void adjustAdorns(Neighbor)>/assign/instruction6	6	<Vertex: void adjustAdorns(Neighbor)>/$i0	<Vertex: void adjustAdorns(Neighbor)>/sourceNeighbor#_0	<Neighbor: int weight>	<Vertex: void adjustAdorns(Neighbor)>
<Graph: java.util.LinkedList access$0(Graph)>/assign/instruction2	2	<Graph: java.util.LinkedList access$0(Graph)>/$r0	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	<Graph: java.util.LinkedList edges>	<Graph: java.util.LinkedList access$0(Graph)>
<Graph$Comparator1: int compare(Vertex,Vertex)>/assign/instruction5	5	<Graph$Comparator1: int compare(Vertex,Vertex)>/$i0	<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0	<Vertex: int finishTime>	<Graph$Comparator1: int compare(Vertex,Vertex)>
<WorkSpaceTranspose: void preVisitAction(Vertex)>/assign/instruction3	3	<WorkSpaceTranspose: void preVisitAction(Vertex)>/$z0	<WorkSpaceTranspose: void preVisitAction(Vertex)>/v#_0	<Vertex: boolean visited>	<WorkSpaceTranspose: void preVisitAction(Vertex)>
<Graph: Graph kruskal()>/assign/instruction40	40	<Graph: Graph kruskal()>/$r9	<Graph: Graph kruskal()>/vrep#_441	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex$VertexIter2: boolean hasNext()>/assign/instruction2	2	<Vertex$VertexIter2: boolean hasNext()>/$r0	<Vertex$VertexIter2: boolean hasNext()>/this#_0	<Vertex$VertexIter2: java.util.Iterator iter>	<Vertex$VertexIter2: boolean hasNext()>
<Graph: int readNumber()>/assign/instruction8	8	<Graph: int readNumber()>/$r1	<Graph: int readNumber()>/this#_0	<Graph: java.io.Reader inFile>	<Graph: int readNumber()>
<Vertex: void display()>/assign/instruction21	21	<Vertex: void display()>/$r1	<Vertex: void display()>/this#_0	<Vertex: java.util.LinkedList weightsList>	<Vertex: void display()>
<Vertex: void display()>/assign/instruction116	116	<Vertex: void display()>/$i7	<Vertex: void display()>/this#_0	<Vertex: int key>	<Vertex: void display()>
<Graph: Graph kruskal()>/assign/instruction61	61	<Graph: Graph kruskal()>/$r21	<Graph: Graph kruskal()>/urep#_440	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex: void display()>/assign/instruction103	103	<Vertex: void display()>/$r47	<Vertex: void display()>/this#_0	<Vertex: Vertex representative>	<Vertex: void display()>
<Vertex: void setWeight(int)>/assign/instruction4	4	<Vertex: void setWeight(int)>/$r0	<Vertex: void setWeight(int)>/this#_0	<Vertex: java.util.LinkedList adjacentVertices>	<Vertex: void setWeight(int)>
<Graph$EdgeIter1: boolean hasNext()>/assign/instruction2	2	<Graph$EdgeIter1: boolean hasNext()>/$r0	<Graph$EdgeIter1: boolean hasNext()>/this#_0	<Graph$EdgeIter1: java.util.Iterator iter>	<Graph$EdgeIter1: boolean hasNext()>
<Graph: void stopBenchmark()>/assign/instruction2	2	<Graph: void stopBenchmark()>/$r0	<Graph: void stopBenchmark()>/this#_0	<Graph: java.io.Reader inFile>	<Graph: void stopBenchmark()>
<Edge: void display()>/assign/instruction6	6	<Edge: void display()>/$i0	<Edge: void display()>/this#_0	<Edge: int weight>	<Edge: void display()>
<Graph: Graph kruskal()>/assign/instruction72	72	<Graph: Graph kruskal()>/$r11	<Graph: Graph kruskal()>/urep#_440	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<NumberWorkSpace: void preVisitAction(Vertex)>/assign/instruction3	3	<NumberWorkSpace: void preVisitAction(Vertex)>/$z0	<NumberWorkSpace: void preVisitAction(Vertex)>/v#_0	<Vertex: boolean visited>	<NumberWorkSpace: void preVisitAction(Vertex)>
<Graph: Graph kruskal()>/assign/instruction83	83	<Graph: Graph kruskal()>/$r10	<Graph: Graph kruskal()>/urep#_440	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex: void nodeSearch(WorkSpace)>/assign/instruction4	4	<Vertex: void nodeSearch(WorkSpace)>/$z0	<Vertex: void nodeSearch(WorkSpace)>/this#_0	<Vertex: boolean visited>	<Vertex: void nodeSearch(WorkSpace)>
<Vertex$EdgeIter1: void <init>(Vertex)>/assign/instruction5	5	<Vertex$EdgeIter1: void <init>(Vertex)>/$r0	<Vertex$EdgeIter1: void <init>(Vertex)>/l1#_0	<Vertex: java.util.LinkedList adjacentVertices>	<Vertex$EdgeIter1: void <init>(Vertex)>
<Vertex$EdgeIter2: boolean hasNext()>/assign/instruction2	2	<Vertex$EdgeIter2: boolean hasNext()>/$r0	<Vertex$EdgeIter2: boolean hasNext()>/this#_0	<Vertex$EdgeIter2: java.util.Iterator iter>	<Vertex$EdgeIter2: boolean hasNext()>
<Graph: Graph prim(Vertex)>/assign/instruction121	121	<Graph: Graph prim(Vertex)>/$r17	<Graph: Graph prim(Vertex)>/vxiter_$$A_4#_648	<Vertex: java.lang.String name>	<Graph: Graph prim(Vertex)>
<Vertex: void addWeight(int)>/assign/instruction7	7	<Vertex: void addWeight(int)>/$r2	<Vertex: void addWeight(int)>/this#_0	<Vertex: java.util.LinkedList adjacentNeighbors>	<Vertex: void addWeight(int)>
<Graph: Graph prim(Vertex)>/assign/instruction64	64	<Graph: Graph prim(Vertex)>/$i2	<Graph: Graph prim(Vertex)>/v#_584	<Vertex: int key>	<Graph: Graph prim(Vertex)>
<Vertex$VertexIter3: boolean hasNext()>/assign/instruction2	2	<Vertex$VertexIter3: boolean hasNext()>/$r0	<Vertex$VertexIter3: boolean hasNext()>/this#_0	<Vertex$VertexIter3: java.util.Iterator iter>	<Vertex$VertexIter3: boolean hasNext()>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/assign/instruction10	10	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/$i6	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	<Vertex: int VertexColor>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Edge: void display()>/assign/instruction18	18	<Edge: void display()>/$r10	<Edge: void display()>/this#_0	<Edge: Vertex end>	<Edge: void display()>
<Vertex: void addNeighbor(Neighbor)>/assign/instruction3	3	<Vertex: void addNeighbor(Neighbor)>/$r0	<Vertex: void addNeighbor(Neighbor)>/this#_0	<Vertex: java.util.LinkedList neighbors>	<Vertex: void addNeighbor(Neighbor)>
<Vertex$VertexIter3: Vertex next()>/assign/instruction2	2	<Vertex$VertexIter3: Vertex next()>/$r0	<Vertex$VertexIter3: Vertex next()>/this#_0	<Vertex$VertexIter3: java.util.Iterator iter>	<Vertex$VertexIter3: Vertex next()>
<Vertex: void nodeSearch(WorkSpace)>/assign/instruction22	22	<Vertex: void nodeSearch(WorkSpace)>/$z2	<Vertex: void nodeSearch(WorkSpace)>/v_$$A_3#_219	<Vertex: boolean visited>	<Vertex: void nodeSearch(WorkSpace)>
<Graph: Graph kruskal()>/assign/instruction67	67	<Graph: Graph kruskal()>/$r22	<Graph: Graph kruskal()>/vrep#_441	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex: java.util.LinkedList getNeighborsObj()>/assign/instruction2	2	<Vertex: java.util.LinkedList getNeighborsObj()>/$r0	<Vertex: java.util.LinkedList getNeighborsObj()>/this#_0	<Vertex: java.util.LinkedList adjacentNeighbors>	<Vertex: java.util.LinkedList getNeighborsObj()>
<Vertex$EdgeIter2: void <init>(Vertex)>/assign/instruction5	5	<Vertex$EdgeIter2: void <init>(Vertex)>/$r0	<Vertex$EdgeIter2: void <init>(Vertex)>/l1#_0	<Vertex: java.util.LinkedList adjacentNeighbors>	<Vertex$EdgeIter2: void <init>(Vertex)>
<Graph: Graph kruskal()>/assign/instruction37	37	<Graph: Graph kruskal()>/vrep#_441	<Graph: Graph kruskal()>/v_$$A_3#_432	<Vertex: Vertex representative>	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/assign/instruction45	45	<Graph: Graph kruskal()>/$r18	<Graph: Graph kruskal()>/vrep#_441	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex: void adjustAdorns(Vertex,int)>/assign/instruction4	4	<Vertex: void adjustAdorns(Vertex,int)>/$r0	<Vertex: void adjustAdorns(Vertex,int)>/the_vertex#_0	<Vertex: java.util.LinkedList weightsList>	<Vertex: void adjustAdorns(Vertex,int)>
<Graph: void graphSearch(WorkSpace)>/assign/instruction16	16	<Graph: void graphSearch(WorkSpace)>/$z2	<Graph: void graphSearch(WorkSpace)>/v_$$A_3#_306	<Vertex: boolean visited>	<Graph: void graphSearch(WorkSpace)>
<Vertex: void display()>/assign/instruction9	9	<Vertex: void display()>/$r3	<Vertex: void display()>/this#_0	<Vertex: java.util.LinkedList weightsList>	<Vertex: void display()>
<RegionWorkSpace: void nextRegionAction(Vertex)>/assign/instruction3	3	<RegionWorkSpace: void nextRegionAction(Vertex)>/$i0	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0	<RegionWorkSpace: int counter>	<RegionWorkSpace: void nextRegionAction(Vertex)>
<Graph: Graph kruskal()>/assign/instruction92	92	<Graph: Graph kruskal()>/$r16	<Graph: Graph kruskal()>/vrep#_441	<Vertex: java.util.LinkedList members>	<Graph: Graph kruskal()>
<Vertex$VertexIter3: Vertex next()>/assign/instruction5	5	<Vertex$VertexIter3: Vertex next()>/$r3	<Vertex$VertexIter3: Vertex next()>/$r2	<Neighbor: Vertex end>	<Vertex$VertexIter3: Vertex next()>
<Vertex$EdgeIter2: EdgeIfc next()>/assign/instruction2	2	<Vertex$EdgeIter2: EdgeIfc next()>/$r0	<Vertex$EdgeIter2: EdgeIfc next()>/this#_0	<Vertex$EdgeIter2: java.util.Iterator iter>	<Vertex$EdgeIter2: EdgeIfc next()>
<Vertex: void display()>/assign/instruction46	46	<Vertex: void display()>/$z1	<Vertex: void display()>/this#_0	<Vertex: boolean visited>	<Vertex: void display()>
<Vertex$EdgeIter3: void <init>(Vertex)>/assign/instruction5	5	<Vertex$EdgeIter3: void <init>(Vertex)>/$r0	<Vertex$EdgeIter3: void <init>(Vertex)>/l1#_0	<Vertex: java.util.LinkedList neighbors>	<Vertex$EdgeIter3: void <init>(Vertex)>
