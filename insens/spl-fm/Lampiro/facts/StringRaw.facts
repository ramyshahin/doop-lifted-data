<com.jcraft.jzlib.InfTree: void initWorkArea(int)>	<com.jcraft.jzlib.InfTree: void initWorkArea(int)>
<javax.microedition.lcdui.StringItem: void setItemCommandListener(javax.microedition.lcdui.ItemCommandListener)>	<javax.microedition.lcdui.StringItem: void setItemCommandListener(javax.microedition.lcdui.ItemCommandListener)>
<it.yup.ui.UIGauge: boolean isInteractive()>	<it.yup.ui.UIGauge: boolean isInteractive()>
<it.yup.xmpp.SimpleDataFormExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>	<it.yup.xmpp.SimpleDataFormExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>
<it.yup.xmpp.Contact: boolean setGroups(java.lang.String[])>	<it.yup.xmpp.Contact: boolean setGroups(java.lang.String[])>
/icons/lab.png	/icons/lab.png
<javax.microedition.lcdui.List: void <init>(java.lang.String,int)>	<javax.microedition.lcdui.List: void <init>(java.lang.String,int)>
<it.yup.ui.UIPanel: boolean isListMode()>	<it.yup.ui.UIPanel: boolean isListMode()>
gineprando	gineprando
<javax.microedition.media.control.VideoControl: byte[] getSnapshot(java.lang.String)>	<javax.microedition.media.control.VideoControl: byte[] getSnapshot(java.lang.String)>
<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void packetReceived(it.yup.xml.Element)>
<it.yup.xmlstream.KXmlParser: int nextToken()>	<it.yup.xmlstream.KXmlParser: int nextToken()>
<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String,it.yup.xmpp.Roster$IQResultListener3)>	<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String,it.yup.xmpp.Roster$IQResultListener3)>
<com.jcraft.jzlib.ZStream: void <init>()>	<com.jcraft.jzlib.ZStream: void <init>()>
Contact Info	Contact Info
initiator	initiator
<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster)>	<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster)>
<it.yup.screens.RosterScreen: void filter_contacts(boolean)>	<it.yup.screens.RosterScreen: void filter_contacts(boolean)>
<it.yup.xml.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>	<it.yup.xml.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>
/icons/message.png	/icons/message.png
<it.yup.tests.UITestMidlet$TestScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<it.yup.tests.UITestMidlet$TestScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int)>
<lampiro.screens.ChatScreen: void askTopic()>	<lampiro.screens.ChatScreen: void askTopic()>
sid	sid
<<\\"unsupported feature: \\">>	<<\\"unsupported feature: \\">>
<it.yup.util.Utils: void <clinit>()>	<it.yup.util.Utils: void <clinit>()>
<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener1)>	<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener1)>
<com.jcraft.jzlib.ZStream: void free()>	<com.jcraft.jzlib.ZStream: void free()>
<it.yup.util.Utils: java.util.Vector find_urls(java.lang.String)>	<it.yup.util.Utils: java.util.Vector find_urls(java.lang.String)>
<it.yup.xmpp.FTSender$IQResultListener2: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener2: void handleError(it.yup.xml.Element)>
<it.yup.xmpp.Roster: void recreateRoster(it.yup.xml.Element,boolean)>	<it.yup.xmpp.Roster: void recreateRoster(it.yup.xml.Element,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean,it.yup.xmpp.Roster$IQResultListener1)>	<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean,it.yup.xmpp.Roster$IQResultListener1)>
<lampiro.screens.RosterScreen: javax.microedition.lcdui.Image access$14(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: javax.microedition.lcdui.Image access$14(lampiro.screens.RosterScreen)>
<it.yup.xmpp.Contact: void removeTask(it.yup.xmpp.Task)>	<it.yup.xmpp.Contact: void removeTask(it.yup.xmpp.Task)>
<lampiro.screens.RosterScreen$UIGroup: void loadGroups()>	<lampiro.screens.RosterScreen$UIGroup: void loadGroups()>
<it.yup.xmpp.FTSender: void <init>(java.lang.String,byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTSender$FTSEventHandler)>	<it.yup.xmpp.FTSender: void <init>(java.lang.String,byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTSender$FTSEventHandler)>
<lampiro.screens.RosterScreen: void cutPattern()>	<lampiro.screens.RosterScreen: void cutPattern()>
<it.yup.ui.UIScreen: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>
<it.yup.xmpp.BluendoXMLRPC: void write(it.yup.xml.Element)>	<it.yup.xmpp.BluendoXMLRPC: void write(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: boolean filterContacts(boolean)>	<lampiro.screens.RosterScreen: boolean filterContacts(boolean)>
<java.lang.StringBuffer: void setLength(int)>	<java.lang.StringBuffer: void setLength(int)>
<lampiro.screens.ShowMMScreen: void init()>	<lampiro.screens.ShowMMScreen: void init()>
<java.lang.Integer: void <init>(int)>	<java.lang.Integer: void <init>(int)>
<lampiro.screens.RosterScreen: void openContactMenu()>	<lampiro.screens.RosterScreen: void openContactMenu()>
<lampiro.screens.RosterScreen: boolean makeRoll(int,it.yup.ui.UIScreen)>	<lampiro.screens.RosterScreen: boolean makeRoll(int,it.yup.ui.UIScreen)>
\\"query\\"	\\"query\\"
<it.yup.ui.UILabel: int getImgAnchorPoint()>	<it.yup.ui.UILabel: int getImgAnchorPoint()>
value	value
<it.yup.transport.SocketChannel: void <init>(java.lang.String,it.yup.transport.TransportListener)>	<it.yup.transport.SocketChannel: void <init>(java.lang.String,it.yup.transport.TransportListener)>
ricsson	ricsson
\\"iq\\"	\\"iq\\"
<it.yup.ui.UIPanel: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: boolean contains(it.yup.ui.UIItem)>
<it.yup.ui.UIGauge: int access$3(it.yup.ui.UIGauge)>	<it.yup.ui.UIGauge: int access$3(it.yup.ui.UIGauge)>
<java.lang.String: int indexOf(java.lang.String)>	<java.lang.String: int indexOf(java.lang.String)>
combo3-3	combo3-3
<java.io.ByteArrayOutputStream: void write(int)>	<java.io.ByteArrayOutputStream: void write(int)>
<java.io.DataInputStream: java.lang.String readUTF()>	<java.io.DataInputStream: java.lang.String readUTF()>
<lampiro.screens.RosterScreen: void startDrag(it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen: void startDrag(it.yup.ui.UIItem)>
<it.yup.util.MetaVector: void addElement(java.lang.Object)>	<it.yup.util.MetaVector: void addElement(java.lang.Object)>
<lampiro.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>	<lampiro.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>
<it.yup.xmlstream.Element: java.lang.String getAttribute(java.lang.String)>	<it.yup.xmlstream.Element: java.lang.String getAttribute(java.lang.String)>
<it.yup.screens.RosterScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paint(javax.microedition.lcdui.Graphics)>
<it.yup.util.Utils: java.util.Vector tokenize(java.lang.String,java.lang.String[],boolean)>	<it.yup.util.Utils: java.util.Vector tokenize(java.lang.String,java.lang.String[],boolean)>
label	label
<lampiro.screens.SimpleComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.SimpleComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>
<java.io.DataInputStream: void readFully(byte[])>	<java.io.DataInputStream: void readFully(byte[])>
<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex)>
offline	offline
/	/	@x_notGlider
<it.yup.xmlstream.KXmlParser: int getNamespaceCount(int)>	<it.yup.xmlstream.KXmlParser: int getNamespaceCount(int)>
/emo/7.png	/emo/7.png
<it.yup.ui.UIAccordion: void updateItemsColor()>	<it.yup.ui.UIAccordion: void updateItemsColor()>
<it.yup.xmpp.packets.Presence: void setShow(java.lang.String)>	<it.yup.xmpp.packets.Presence: void setShow(java.lang.String)>
<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String)>	<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String)>
<it.yup.xml.KXmlSerializer: void <init>()>	<it.yup.xml.KXmlSerializer: void <init>()>
401	401
<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>
wav	wav
<lampiro.screens.FTScreen$FTItem: void <init>(java.lang.Object,int,boolean,int,java.lang.String)>	<lampiro.screens.FTScreen$FTItem: void <init>(java.lang.Object,int,boolean,int,java.lang.String)>
headline	headline
<it.yup.screens.SubscriptionConfirmAlert: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable)>	<it.yup.screens.SubscriptionConfirmAlert: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable)>
<it.yup.xml.KXmlParser: char[] getTextCharacters(int[])>	<it.yup.xml.KXmlParser: char[] getTextCharacters(int[])>
desc	desc
<lampiro.screens.RosterScreen: boolean keyPressed(int)>	<lampiro.screens.RosterScreen: boolean keyPressed(int)>
<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge,it.yup.ui.UIGauge$Ticker)>	<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge,it.yup.ui.UIGauge$Ticker)>
<it.yup.screens.SimpleComposerScreen: void <clinit>()>	<it.yup.screens.SimpleComposerScreen: void <clinit>()>
\\"jabber:x:data\\"	\\"jabber:x:data\\"
<it.yup.xml.KXmlParser: void <init>()>	<it.yup.xml.KXmlParser: void <init>()>
<it.yup.xmlstream.KXmlParser: java.lang.String readName()>	<it.yup.xmlstream.KXmlParser: java.lang.String readName()>
<it.yup.xmpp.CommandExecutor: java.lang.String getFrom()>	<it.yup.xmpp.CommandExecutor: java.lang.String getFrom()>
<lampiro.screens.KeyScreen: void <init>()>	<lampiro.screens.KeyScreen: void <init>()>
response	response
\\"list-single\\"	\\"list-single\\"
<it.yup.xmlstream.KXmlParser: void error(java.lang.String)>	<it.yup.xmlstream.KXmlParser: void error(java.lang.String)>
<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void <init>(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void <init>(it.yup.xmlstream.BasicXmlStream)>
<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,int)>	<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,int)>
<lampiro.screens.SimpleComposerScreen: void <clinit>()>	<lampiro.screens.SimpleComposerScreen: void <clinit>()>
<it.yup.xml.KXmlProcessor: it.yup.xml.Element _parse(org.xmlpull.v1.XmlPullParser)>	<it.yup.xml.KXmlProcessor: it.yup.xml.Element _parse(org.xmlpull.v1.XmlPullParser)>
<it.yup.xml.KXmlParser: void error(java.lang.String)>	<it.yup.xml.KXmlParser: void error(java.lang.String)>
<javax.microedition.lcdui.game.GameCanvas: void flushGraphics()>	<javax.microedition.lcdui.game.GameCanvas: void flushGraphics()>
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(int,int)>	<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(int,int)>
<it.yup.ui.UITextPanel: java.util.Vector getTextLines()>	<it.yup.ui.UITextPanel: java.util.Vector getTextLines()>
<it.yup.xmlstream.Initializer: boolean matchFeatures(java.util.Hashtable)>	<it.yup.xmlstream.Initializer: boolean matchFeatures(java.util.Hashtable)>
<it.yup.ui.UIEmoLabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>	<it.yup.ui.UIEmoLabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>
<it.yup.ui.UIEmoLabel: void initialize()>	<it.yup.ui.UIEmoLabel: void initialize()>
:)	:)
<it.yup.ui.UIPanel: void updateChildren()>	<it.yup.ui.UIPanel: void updateChildren()>
<java.util.Vector: int indexOf(java.lang.Object)>	<java.util.Vector: int indexOf(java.lang.Object)>
<it.yup.xmlstream.SocketStream: void connectionEstablished(it.yup.transport.BaseChannel)>	<it.yup.xmlstream.SocketStream: void connectionEstablished(it.yup.transport.BaseChannel)>
o:)	o:)
<it.yup.ui.UIScreen: void setDirty(boolean)>	<it.yup.ui.UIScreen: void setDirty(boolean)>
<it.yup.ui.UIVLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIVLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmlstream.KXmlParser: int read()>	<it.yup.xmlstream.KXmlParser: int read()>
<it.yup.xmpp.XMPPClient$XmppListener: void rosterXsubscription(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$XmppListener: void rosterXsubscription(it.yup.xml.Element)>
<<\\"Attr.value missing f. \\">>	<<\\"Attr.value missing f. \\">>
<java.lang.Short: short parseShort(java.lang.String)>	<java.lang.Short: short parseShort(java.lang.String)>
http://xmlpull.org/v1/doc/features.html#indent-output	http://xmlpull.org/v1/doc/features.html#indent-output
ulaw	ulaw
<javax.microedition.lcdui.Canvas: boolean isShown()>	<javax.microedition.lcdui.Canvas: boolean isShown()>
<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener1)>	<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener1)>
\\"completed\\"	\\"completed\\"
<lampiro.screens.ChatScreen$UICutLabel: java.lang.String access$0(lampiro.screens.ChatScreen$UICutLabel)>	<lampiro.screens.ChatScreen$UICutLabel: java.lang.String access$0(lampiro.screens.ChatScreen$UICutLabel)>
<it.yup.xmpp.packets.Message: java.lang.String getErrorText()>	<it.yup.xmpp.packets.Message: java.lang.String getErrorText()>
<lampiro.screens.RosterScreen: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>
<it.yup.util.MetaVector: int size()>	<it.yup.util.MetaVector: int size()>
<it.yup.screens.RegisterScreen: javax.microedition.lcdui.ChoiceGroup access$6(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: javax.microedition.lcdui.ChoiceGroup access$6(it.yup.screens.RegisterScreen)>
<it.yup.util.RMSIndex: java.util.Vector access$1(it.yup.util.RMSIndex,int)>	<it.yup.util.RMSIndex: java.util.Vector access$1(it.yup.util.RMSIndex,int)>
<it.yup.util.NetworkConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.NetworkConsumer: void gotMessage(java.lang.String,int)>
<com.jcraft.jzlib.Deflate: int deflateInit2(com.jcraft.jzlib.ZStream,int,int,int,int,int)>	<com.jcraft.jzlib.Deflate: int deflateInit2(com.jcraft.jzlib.ZStream,int,int,int,int,int)>
<lampiro.screens.KeyScreen: void checkKeys()>	<lampiro.screens.KeyScreen: void checkKeys()>
<it.yup.xml.KXmlSerializer: java.lang.String getName()>	<it.yup.xml.KXmlSerializer: java.lang.String getName()>
<it.yup.xmpp.Roster$IQResultListener3: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener3: void handleResult(it.yup.xml.Element)>
<lampiro.screens.SendMMScreen$UploadHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>
<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image,java.lang.String)>
?>	?>
<lampiro.screens.CommandListScreen: void <clinit>()>	<lampiro.screens.CommandListScreen: void <clinit>()>
<it.yup.screens.DeleteContactAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DeleteContactAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
longBytes	longBytes
automatic	automatic
<it.yup.xmpp.Contact: java.util.Vector getAllConvs()>	<it.yup.xmpp.Contact: java.util.Vector getAllConvs()>
403	403
<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>
<it.yup.ui.UIVLayout: void <init>(int,int)>	<it.yup.ui.UIVLayout: void <init>(int,int)>
<com.jcraft.jzlib.Deflate: int deflate(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Deflate: int deflate(com.jcraft.jzlib.ZStream,int)>
http://jabber.org/protocol/muc#owner	http://jabber.org/protocol/muc#owner
<it.yup.util.MetaVector: java.lang.String toString()>	<it.yup.util.MetaVector: java.lang.String toString()>
<it.yup.xmpp.Contact: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>	<it.yup.xmpp.Contact: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>
socket://jabber.bluendo.com:5222	socket://jabber.bluendo.com:5222
emo:):(eheh:Obene	emo:):(eheh:Obene
<lampiro.screens.AlbumScreen: void loadFiles()>	<lampiro.screens.AlbumScreen: void loadFiles()>
<it.yup.ui.UILayout: void setBg_color(int)>	<it.yup.ui.UILayout: void setBg_color(int)>
<lampiro.screens.RosterScreen$UIGroup: it.yup.ui.UILabel access$2()>	<lampiro.screens.RosterScreen$UIGroup: it.yup.ui.UILabel access$2()>
<it.yup.xmlstream.Element: it.yup.xmlstream.Element parseDocument(org.xmlpull.v1.XmlPullParser)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element parseDocument(org.xmlpull.v1.XmlPullParser)>
<lampiro.screens.AddContactScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>
<java.util.Hashtable: void <init>()>	<java.util.Hashtable: void <init>()>
<it.yup.xmpp.IqManager: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.IqManager: void handleError(it.yup.xml.Element)>
<it.yup.ui.UIItem: void setSubmenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIItem: void setSubmenu(it.yup.ui.UIMenu)>
resource	resource
<org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)>	<org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)>
<it.yup.screens.RosterScreen: void connectionLost()>	<it.yup.screens.RosterScreen: void connectionLost()>
This statement would have triggered an Exception: virtualinvoke tempRs#1.<javax.microedition.rms.RecordStore: void closeRecordStore()>()	This statement would have triggered an Exception: virtualinvoke tempRs#1.<javax.microedition.rms.RecordStore: void closeRecordStore()>()
<it.yup.ui.UIPanel: int getSelectedIndex()>	<it.yup.ui.UIPanel: int getSelectedIndex()>
<java.io.InputStream: long skip(long)>	<java.io.InputStream: long skip(long)>
POST	POST
<it.yup.ui.UIMenu: void setParentMenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIMenu: void setParentMenu(it.yup.ui.UIMenu)>
<it.yup.screens.RosterScreen: void authenticated()>	<it.yup.screens.RosterScreen: void authenticated()>
<it.yup.ui.UICombobox$UIComboScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<it.yup.ui.UICombobox$UIComboScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<lampiro.screens.StatusScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.StatusScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
Loading Lampiro...	Loading Lampiro...
<com.jcraft.jzlib.ZOutputStream: void finish()>	<com.jcraft.jzlib.ZOutputStream: void finish()>
<it.yup.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.ui.UIScreen: java.util.Vector getPopupList()>	<it.yup.ui.UIScreen: java.util.Vector getPopupList()>
<it.yup.util.XMPPConsumer: void <clinit>()>	<it.yup.util.XMPPConsumer: void <clinit>()>
/emo/4.png	/emo/4.png
<java.lang.String: void <init>()>	<java.lang.String: void <init>()>
<it.yup.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>	<it.yup.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>
<it.yup.xmpp.FTSender: void sendChunk()>	<it.yup.xmpp.FTSender: void sendChunk()>
<it.yup.ui.UIAccordion: it.yup.ui.UIItem getOpenedLabel()>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem getOpenedLabel()>
snd	snd
<it.yup.ui.UILayout: it.yup.ui.UIItem getItem(int)>	<it.yup.ui.UILayout: it.yup.ui.UIItem getItem(int)>
<lampiro.screens.RosterScreen$UIGroup: void swapGroups(it.yup.ui.UIAccordion,int,int)>	<lampiro.screens.RosterScreen$UIGroup: void swapGroups(it.yup.ui.UIAccordion,int,int)>
<<\\"Menu Item Img \\">>	<<\\"Menu Item Img \\">>
digest-uri	digest-uri
bind	bind
<it.yup.ui.UICanvas: void display(javax.microedition.lcdui.Displayable)>	<it.yup.ui.UICanvas: void display(javax.microedition.lcdui.Displayable)>
Data submitted: awaiting a response from the server	Data submitted: awaiting a response from the server
incomplete dynamic bit lengths tree	incomplete dynamic bit lengths tree
<com.jcraft.jzlib.FilterInputStream: void close()>	<com.jcraft.jzlib.FilterInputStream: void close()>
<it.yup.util.RMSIndex: void <init>(java.lang.String,int)>	<it.yup.util.RMSIndex: void <init>(java.lang.String,int)>
<lampiro.screens.InnerMMScreen: void <clinit>()>	<lampiro.screens.InnerMMScreen: void <clinit>()>
\\"probe\\"	\\"probe\\"
<it.yup.xmpp.XMPPClient$XmppListener: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>	<it.yup.xmpp.XMPPClient$XmppListener: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>
<it.yup.ui.UITextPanel: void setMaxHeight(int)>	<it.yup.ui.UITextPanel: void setMaxHeight(int)>
<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream)>	<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream)>
<it.yup.xmlstream.BasicXmlStream$SessionOpener: void <init>(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$SessionOpener: void <init>(it.yup.xmlstream.BasicXmlStream)>
<it.yup.xmpp.Contact: int mapAvailability(java.lang.String)>	<it.yup.xmpp.Contact: int mapAvailability(java.lang.String)>
<it.yup.xmpp.XMPPClient$1: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient$1: void gotStreamEvent(java.lang.String,java.lang.Object)>
<it.yup.util.RMSIndex: java.util.Enumeration keys()>	<it.yup.util.RMSIndex: java.util.Enumeration keys()>
<it.yup.ui.UICanvas: boolean hasQwerty()>	<it.yup.ui.UICanvas: boolean hasQwerty()>
<lampiro.screens.MUCScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>	<lampiro.screens.MUCScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>
<com.jcraft.jzlib.JZlib: java.lang.String version()>	<com.jcraft.jzlib.JZlib: java.lang.String version()>
<lampiro.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>
<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$5(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$5(it.yup.screens.RegisterScreen)>
<lampiro.screens.RosterScreen: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>
<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient)>
<it.yup.util.MemoryLogConsumer: void <clinit>()>	<it.yup.util.MemoryLogConsumer: void <clinit>()>
<it.yup.transport.BaseChannel: void close()>	<it.yup.transport.BaseChannel: void close()>
check1	check1
<it.yup.xml.KXmlParser: void nextImpl()>	<it.yup.xml.KXmlParser: void nextImpl()>
00000001	00000001
<it.yup.screens.DataFormScreen: void fillForm()>	<it.yup.screens.DataFormScreen: void fillForm()>
<it.yup.xmlstream.BasicXmlStream: void initialize(java.lang.String,java.lang.String)>	<it.yup.xmlstream.BasicXmlStream: void initialize(java.lang.String,java.lang.String)>
<java.util.TimerTask: boolean cancel()>	<java.util.TimerTask: boolean cancel()>
<it.yup.xmpp.FTSender$FTSEventHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>	<it.yup.xmpp.FTSender$FTSEventHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>
<it.yup.ui.UICanvas: javax.microedition.lcdui.Image getUIImage(java.lang.String)>	<it.yup.ui.UICanvas: javax.microedition.lcdui.Image getUIImage(java.lang.String)>
<com.jcraft.jzlib.Adler32: void <init>()>	<com.jcraft.jzlib.Adler32: void <init>()>
<it.yup.screens.AddContactScreen: void <clinit>()>	<it.yup.screens.AddContactScreen: void <clinit>()>
seq	seq
<it.yup.screens.ChatScreen: void showNotify()>	<it.yup.screens.ChatScreen: void showNotify()>
<java.util.Vector: void setSize(int)>	<java.util.Vector: void setSize(int)>
<it.yup.xmpp.IQResultListener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.IQResultListener: void packetReceived(it.yup.xml.Element)>
decline	decline
<lampiro.screens.InnerMMScreen: void keyPressed(int)>	<lampiro.screens.InnerMMScreen: void keyPressed(int)>
<it.yup.screens.ScreenSaver: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ScreenSaver: void paint(javax.microedition.lcdui.Graphics)>
<javax.microedition.io.StreamConnection: java.io.InputStream openInputStream()>	<javax.microedition.io.StreamConnection: java.io.InputStream openInputStream()>
<javax.microedition.lcdui.Graphics: void fillTriangle(int,int,int,int,int,int)>	<javax.microedition.lcdui.Graphics: void fillTriangle(int,int,int,int,int,int)>
PI must not start with xml	PI must not start with xml
<lampiro.screens.GroupsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.GroupsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
au	au
md5	md5
/emo/3.png	/emo/3.png
missing end tag /	missing end tag /
<lampiro.screens.ShowMMScreen: java.lang.String access$0(lampiro.screens.ShowMMScreen)>	<lampiro.screens.ShowMMScreen: java.lang.String access$0(lampiro.screens.ShowMMScreen)>
<lampiro.screens.ChatScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>	<lampiro.screens.ChatScreen: java.lang.String getLabelHeader(lampiro.screens.ChatScreen$ConversationEntry)>
<it.yup.xmpp.Roster$IQResultListener1: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener1: void handleResult(it.yup.xml.Element)>
<it.yup.xml.Element: java.lang.String writeEscaped(java.lang.String,int)>	<it.yup.xml.Element: java.lang.String writeEscaped(java.lang.String,int)>
<lampiro.screens.RosterScreen$UIGroup: boolean keyPressed(int)>	<lampiro.screens.RosterScreen$UIGroup: boolean keyPressed(int)>
<com.jcraft.jzlib.InfCodes: void free(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfCodes: void free(com.jcraft.jzlib.ZStream)>
Bytes	Bytes
<it.yup.ui.UIAccordion: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIAccordion: int getHeight(javax.microedition.lcdui.Graphics)>
<javax.microedition.io.SocketConnection: void close()>	<javax.microedition.io.SocketConnection: void close()>
<it.yup.xmpp.FTReceiver$FTREventHandler: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$FTREventHandler: void dataReceived(byte[],java.lang.String,java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>
amp	amp
<<\\" />\\">>	<<\\" />\\">>
EXPAND	EXPAND
<lampiro.screens.AlbumScreen: void <init>()>	<lampiro.screens.AlbumScreen: void <init>()>
Connected using Lampiro: http://lampiro.bluendo.com	Connected using Lampiro: http://lampiro.bluendo.com
<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>	<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>
<<\\"veryShortLabel \\">>	<<\\"veryShortLabel \\">>
<javax.microedition.media.control.VideoControl: void setDisplayLocation(int,int)>	<javax.microedition.media.control.VideoControl: void setDisplayLocation(int,int)>
<it.yup.xmpp.XMPPClient: it.yup.xmpp.Roster getRoster()>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.Roster getRoster()>
\\"/httpb\\"	\\"/httpb\\"
<it.yup.ui.UIAccordion: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem getSelectedItem()>
<it.yup.ui.UICanvas: void show(int)>	<it.yup.ui.UICanvas: void show(int)>
<it.yup.ui.UIPanel: void setSelected(boolean)>	<it.yup.ui.UIPanel: void setSelected(boolean)>
Error while loading config:\n	Error while loading config:\n
<it.yup.xmlstream.KXmlParser: int getLineNumber()>	<it.yup.xmlstream.KXmlParser: int getLineNumber()>
form	form
muc#roomconfig_roomsecret	muc#roomconfig_roomsecret
<java.lang.String: java.lang.String substring(int)>	<java.lang.String: java.lang.String substring(int)>
<it.yup.util.XMPPConsumer: void setExiting()>	<it.yup.util.XMPPConsumer: void setExiting()>
Type	Type
<com.jcraft.jzlib.ZInputStream: void close()>	<com.jcraft.jzlib.ZInputStream: void close()>
<it.yup.screens.DebugScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DebugScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<lampiro.screens.MMScreen: void showCamera()>	<lampiro.screens.MMScreen: void showCamera()>
<lampiro.screens.AlbumScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.AlbumScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.ui.UITextField: void handleScreen()>	<it.yup.ui.UITextField: void handleScreen()>
<java.io.PrintStream: void <init>(java.io.OutputStream)>	<java.io.PrintStream: void <init>(java.io.OutputStream)>
authzid	authzid
<it.yup.tests.RMSTestMidlet: void testNull(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testNull(it.yup.util.RMSIndex)>
<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$TimerTask1)>	<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$TimerTask1)>
file	file
<it.yup.ui.UIGauge: void access$2(it.yup.ui.UIGauge,int)>	<it.yup.ui.UIGauge: void access$2(it.yup.ui.UIGauge,int)>
config	config
<it.yup.screens.SimpleComposerScreen: void <init>(javax.microedition.lcdui.Displayable,it.yup.xmpp.Contact)>	<it.yup.screens.SimpleComposerScreen: void <init>(javax.microedition.lcdui.Displayable,it.yup.xmpp.Contact)>
\\"show\\"	\\"show\\"
<it.yup.ui.UIMenu: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIMenu: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmpp.Task: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>	<it.yup.xmpp.Task: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>
<it.yup.ui.UITextPanel: boolean keyPressed(int)>	<it.yup.ui.UITextPanel: boolean keyPressed(int)>
<it.yup.ui.UIItem: void setFg_color(int)>	<it.yup.ui.UIItem: void setFg_color(int)>
<it.yup.ui.UIAccordion: void <init>()>	<it.yup.ui.UIAccordion: void <init>()>
<it.yup.screens.AboutScreen: void <init>()>	<it.yup.screens.AboutScreen: void <init>()>
<it.yup.ui.UICanvas: boolean isMotorola()>	<it.yup.ui.UICanvas: boolean isMotorola()>
<it.yup.util.MetaVector: void <init>(int,int)>	<it.yup.util.MetaVector: void <init>(int,int)>
<com.jcraft.jzlib.ZInputStream: void setFlushMode(int)>	<com.jcraft.jzlib.ZInputStream: void setFlushMode(int)>
<it.yup.ui.UIScreen: void setTitle(java.lang.String)>	<it.yup.ui.UIScreen: void setTitle(java.lang.String)>
<it.yup.ui.UIIContainer: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UIIContainer: boolean contains(it.yup.ui.UIItem)>
<it.yup.ui.UILayout: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UILayout: it.yup.ui.UIItem getSelectedItem()>
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>
Note	Note
vCard	vCard
preprocess.symbols	preprocess.symbols
<it.yup.xmlstream.KXmlParser: void pushEntity()>	<it.yup.xmlstream.KXmlParser: void pushEntity()>
<lampiro.screens.ChatScreen$UICutLabel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.ChatScreen$UICutLabel: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmpp.Roster: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.Roster: void <init>(it.yup.xmpp.XMPPClient)>
<it.yup.util.MetaVector: int indexOf(java.lang.Object,int)>	<it.yup.util.MetaVector: int indexOf(java.lang.Object,int)>
<it.yup.ui.UICanvas: void <clinit>()>	<it.yup.ui.UICanvas: void <clinit>()>
<lampiro.screens.RosterScreen$UIGroup: void <init>(java.lang.String,it.yup.ui.UIAccordion)>	<lampiro.screens.RosterScreen$UIGroup: void <init>(java.lang.String,it.yup.ui.UIAccordion)>
<it.yup.xml.KXmlProcessor: it.yup.xml.Element pullDocumentStart(org.xmlpull.v1.XmlPullParser)>	<it.yup.xml.KXmlProcessor: it.yup.xml.Element pullDocumentStart(org.xmlpull.v1.XmlPullParser)>
<it.yup.ui.UIEmoLabel: void <clinit>()>	<it.yup.ui.UIEmoLabel: void <clinit>()>
common	common
<lampiro.screens.ShowMMScreen: void playAudio()>	<lampiro.screens.ShowMMScreen: void playAudio()>
<it.yup.ui.UIPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>
true	true
<it.yup.screens.RegisterScreen$1: void <init>(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen$1: void <init>(it.yup.screens.RegisterScreen)>
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleError(it.yup.xml.Element)>
<com.jcraft.jzlib.Deflate: int deflate_fast(int)>	<com.jcraft.jzlib.Deflate: int deflate_fast(int)>
thread	thread
<com.jcraft.jzlib.Deflate: void init_block()>	<com.jcraft.jzlib.Deflate: void init_block()>
<it.yup.screens.RegisterScreen: it.yup.xmpp.Config access$3(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: it.yup.xmpp.Config access$3(it.yup.screens.RegisterScreen)>
gt	gt
<it.yup.tests.XMLTestMidlet: void exit()>	<it.yup.tests.XMLTestMidlet: void exit()>
<it.yup.xmpp.FTReceiver$OpenListener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver$OpenListener: void packetReceived(it.yup.xml.Element)>
combo1	combo1
<it.yup.transport.SocketChannel$Runnable1: void run()>	<it.yup.transport.SocketChannel$Runnable1: void run()>
E-mail:	E-mail:
<<\\"Menu Item \\">>	<<\\"Menu Item \\">>
<it.yup.ui.UITextField: void setLabel(java.lang.String)>	<it.yup.ui.UITextField: void setLabel(java.lang.String)>
/emo/2.png	/emo/2.png
<it.yup.xmlstream.KXmlParser: void push(int)>	<it.yup.xmlstream.KXmlParser: void push(int)>
<it.yup.ui.UICheckbox: boolean isChecked()>	<it.yup.ui.UICheckbox: boolean isChecked()>
\\"to\\"	\\"to\\"
<it.yup.screens.DataFormScreen: void setShowAction(javax.microedition.lcdui.Command)>	<it.yup.screens.DataFormScreen: void setShowAction(javax.microedition.lcdui.Command)>
need dictionary	need dictionary
Forbidden	Forbidden
attr value delimiter missing!	attr value delimiter missing!
Phone hold on, please don\'t send messages	Phone hold on, please don\'t send messages
<it.yup.ui.UIScreen: void showNotify()>	<it.yup.ui.UIScreen: void showNotify()>
<it.yup.transport.BaseChannel$Sender: void run()>	<it.yup.transport.BaseChannel$Sender: void run()>
<<\\"Invalid menu pos: \\">>	<<\\"Invalid menu pos: \\">>
<lampiro.screens.InnerMMScreen: void paint(javax.microedition.lcdui.Graphics)>	<lampiro.screens.InnerMMScreen: void paint(javax.microedition.lcdui.Graphics)>
SunMicrosystems_wtk	SunMicrosystems_wtk
<it.yup.ui.UIAccordion: void clearPanel(it.yup.ui.UILabel)>	<it.yup.ui.UIAccordion: void clearPanel(it.yup.ui.UILabel)>
<it.yup.ui.UIAccordion$AccordionItem: void access$0(it.yup.ui.UIAccordion$AccordionItem,java.util.Vector)>	<it.yup.ui.UIAccordion$AccordionItem: void access$0(it.yup.ui.UIAccordion$AccordionItem,java.util.Vector)>
<it.yup.xmpp.XMPPClient$XmppListener: void updateContact(it.yup.xmpp.Contact,int)>	<it.yup.xmpp.XMPPClient$XmppListener: void updateContact(it.yup.xmpp.Contact,int)>
<it.yup.xmpp.XMPPClient: void access$3(it.yup.xmpp.XMPPClient,long)>	<it.yup.xmpp.XMPPClient: void access$3(it.yup.xmpp.XMPPClient,long)>
:p	:p
<javax.microedition.lcdui.ChoiceGroup: void setLayout(int)>	<javax.microedition.lcdui.ChoiceGroup: void setLayout(int)>
<it.yup.xmpp.FTSender: java.lang.String access$4(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: java.lang.String access$4(it.yup.xmpp.FTSender)>
:D	:D
500	500
<java.lang.String: void <init>(char[],int,int)>	<java.lang.String: void <init>(char[],int,int)>
<java.lang.String: boolean startsWith(java.lang.String)>	<java.lang.String: boolean startsWith(java.lang.String)>
<it.yup.util.Utils: java.util.Vector tokenize(java.lang.String,char)>	<it.yup.util.Utils: java.util.Vector tokenize(java.lang.String,char)>
<lampiro.screens.ShowMMScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.ShowMMScreen: void itemAction(it.yup.ui.UIItem)>
<javax.microedition.rms.RecordStore: int getNumRecords()>	<javax.microedition.rms.RecordStore: int getNumRecords()>
<it.yup.util.GoogleToken: java.lang.String encode(java.lang.String)>	<it.yup.util.GoogleToken: java.lang.String encode(java.lang.String)>
temp	temp
-->	-->
option	option
<javax.microedition.media.control.RecordControl: void commit()>	<javax.microedition.media.control.RecordControl: void commit()>
Unsupported property	Unsupported property
<it.yup.ui.UIPanel: boolean isDirty()>	<it.yup.ui.UIPanel: boolean isDirty()>
<javax.microedition.lcdui.Graphics: void translate(int,int)>	<javax.microedition.lcdui.Graphics: void translate(int,int)>
http://jabber.org/protocol/rosterx	http://jabber.org/protocol/rosterx
test	test
<it.yup.xmpp.FTReceiver$FTREventHandler: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$FTREventHandler: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>
_01	_01
test_ff@jabber.bluendo.com/pippa	test_ff@jabber.bluendo.com/pippa
<lampiro.screens.GatewayRegisterScreen: void <init>(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen: void <init>(it.yup.xml.Element)>
<it.yup.xmpp.IQResultListener: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.IQResultListener: void handleResult(it.yup.xml.Element)>
<it.yup.util.RMSIndex: byte[] load(byte[])>	<it.yup.util.RMSIndex: byte[] load(byte[])>
<it.yup.screens.RegisterScreen: void checkLogin()>	<it.yup.screens.RegisterScreen: void checkLogin()>
<it.yup.ui.UIMenu: boolean isDirty()>	<it.yup.ui.UIMenu: boolean isDirty()>
rino	rino
<it.yup.ui.UIItem: int getWidth()>	<it.yup.ui.UIItem: int getWidth()>
<it.yup.xmpp.CommandExecutor: java.lang.String getLabel()>	<it.yup.xmpp.CommandExecutor: java.lang.String getLabel()>
Resources	Resources
CDATA	CDATA
urn:ietf:params:xml:ns:xmpp-stanzas	urn:ietf:params:xml:ns:xmpp-stanzas
<it.yup.screens.ChatScreen: void <init>(it.yup.xmpp.Contact)>	<it.yup.screens.ChatScreen: void <init>(it.yup.xmpp.Contact)>
<it.yup.tests.UITestMidlet$TestScreen: boolean access$0(it.yup.tests.UITestMidlet$TestScreen)>	<it.yup.tests.UITestMidlet$TestScreen: boolean access$0(it.yup.tests.UITestMidlet$TestScreen)>
<it.yup.ui.UICombobox: void <init>(java.lang.String,boolean)>	<it.yup.ui.UICombobox: void <init>(java.lang.String,boolean)>
incomplete distance tree	incomplete distance tree
<lampiro.screens.RosterScreen$UIGroup: it.yup.ui.UILabel access$3()>	<lampiro.screens.RosterScreen$UIGroup: it.yup.ui.UILabel access$3()>
<it.yup.xmpp.FTReceiver$OpenListener: byte[] access$3(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener: byte[] access$3(it.yup.xmpp.FTReceiver$OpenListener)>
<it.yup.xmpp.XMPPClient: void stream_authenticated()>	<it.yup.xmpp.XMPPClient: void stream_authenticated()>
<it.yup.ui.UIMenu: boolean getNeedScrollbar()>	<it.yup.ui.UIMenu: boolean getNeedScrollbar()>
/emo/15.png	/emo/15.png
<it.yup.ui.UIItem: void setStatus(java.lang.Object)>	<it.yup.ui.UIItem: void setStatus(java.lang.Object)>
<java.util.Vector: void <init>(int)>	<java.util.Vector: void <init>(int)>
<lampiro.screens.RosterScreen$UIGroup: void startMoving()>	<lampiro.screens.RosterScreen$UIGroup: void startMoving()>
<com.jcraft.jzlib.Inflate: int inflateInit(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Inflate: int inflateInit(com.jcraft.jzlib.ZStream,int)>
<lampiro.screens.RosterScreen$RegisterHandler: it.yup.xmpp.packets.DataForm access$1(lampiro.screens.RosterScreen$RegisterHandler)>	<lampiro.screens.RosterScreen$RegisterHandler: it.yup.xmpp.packets.DataForm access$1(lampiro.screens.RosterScreen$RegisterHandler)>
<lampiro.screens.InnerMMScreen: void closeScreen()>	<lampiro.screens.InnerMMScreen: void closeScreen()>
<it.yup.xmpp.Roster: void retrieveRoster(boolean,boolean)>	<it.yup.xmpp.Roster: void retrieveRoster(boolean,boolean)>
<it.yup.util.RMSIndex$KeyEnumeration: boolean hasMoreElements()>	<it.yup.util.RMSIndex$KeyEnumeration: boolean hasMoreElements()>
<it.yup.xmlstream.KXmlParser: void <init>()>	<it.yup.xmlstream.KXmlParser: void <init>()>
challenge	challenge
<lampiro.screens.RegisterScreen: void showNotify()>	<lampiro.screens.RegisterScreen: void showNotify()>
<it.yup.ui.UIItem: it.yup.ui.UIIContainer getContainer()>	<it.yup.ui.UIItem: it.yup.ui.UIIContainer getContainer()>
Lampiro	Lampiro	@x_notGlider
<it.yup.ui.UILabel: javax.microedition.lcdui.Image getImg()>	<it.yup.ui.UILabel: javax.microedition.lcdui.Image getImg()>
<com.jcraft.jzlib.Deflate: void pqdownheap(short[],int)>	<com.jcraft.jzlib.Deflate: void pqdownheap(short[],int)>
<it.yup.tests.UITestMidlet$KeysScreen: void <init>(it.yup.tests.UITestMidlet)>	<it.yup.tests.UITestMidlet$KeysScreen: void <init>(it.yup.tests.UITestMidlet)>
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>
lampiro@golem.jabber.bluendo.com	lampiro@golem.jabber.bluendo.com
<lampiro.screens.AddContactScreen: void <clinit>()>	<lampiro.screens.AddContactScreen: void <clinit>()>
<it.yup.ui.UITextField: java.lang.String getLabel()>	<it.yup.ui.UITextField: java.lang.String getLabel()>
<it.yup.xmlstream.KXmlParser: void skipSubTree()>	<it.yup.xmlstream.KXmlParser: void skipSubTree()>
<it.yup.util.XMPPConsumer: it.yup.util.XMPPConsumer getConsumer()>	<it.yup.util.XMPPConsumer: it.yup.util.XMPPConsumer getConsumer()>
Nick	Nick
<it.yup.ui.UIAccordion: void close(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void close(it.yup.ui.UIItem)>
<lampiro.screens.InnerMMScreen$1: void <init>(lampiro.screens.InnerMMScreen)>	<lampiro.screens.InnerMMScreen$1: void <init>(lampiro.screens.InnerMMScreen)>
<lampiro.screens.AlbumScreen: void setupScreen()>	<lampiro.screens.AlbumScreen: void setupScreen()>
<it.yup.ui.UIScreen: void itemAction(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.ui.UICanvas: void keyRepeated(int)>	<it.yup.ui.UICanvas: void keyRepeated(int)>
<it.yup.xmlstream.KXmlSerializer: void comment(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void comment(java.lang.String)>
Mobile test, don\'t send me messages!	Mobile test, don\'t send me messages!
Subject	Subject
<java.lang.Thread: void sleep(long)>	<java.lang.Thread: void sleep(long)>
<lampiro.screens.RosterScreen: void queryCmd(java.lang.String)>	<lampiro.screens.RosterScreen: void queryCmd(java.lang.String)>
<it.yup.ui.UIMenu: java.util.Vector getItemList()>	<it.yup.ui.UIMenu: java.util.Vector getItemList()>
<it.yup.xmlstream.KXmlParser: void parseEndTag()>	<it.yup.xmlstream.KXmlParser: void parseEndTag()>
amr	amr
<lampiro.screens.MUCScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>	<lampiro.screens.MUCScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>
submit	submit
<com.jcraft.jzlib.Deflate: boolean smaller(short[],int,int,byte[])>	<com.jcraft.jzlib.Deflate: boolean smaller(short[],int,int,byte[])>
<lampiro.screens.RosterScreen: boolean isCameraOn()>	<lampiro.screens.RosterScreen: boolean isCameraOn()>
reported	reported
<com.jcraft.jzlib.Inflate: int inflateSyncPoint(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateSyncPoint(com.jcraft.jzlib.ZStream)>
<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient$XmppListener getXmppListener()>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient$XmppListener getXmppListener()>
\\"resource\\"	\\"resource\\"
<lampiro.screens.AlbumScreen: lampiro.screens.AlbumScreen getInstance(java.lang.String)>	<lampiro.screens.AlbumScreen: lampiro.screens.AlbumScreen getInstance(java.lang.String)>
<<\\"\' \\">>	<<\\"\' \\">>
<it.yup.screens.RegisterScreen$1: void run()>	<it.yup.screens.RegisterScreen$1: void run()>
\\"dnd\\"	\\"dnd\\"
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: boolean execute(int)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: boolean execute(int)>
<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen)>	<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen)>
<it.yup.tests.XMLTestMidlet: void <init>()>	<it.yup.tests.XMLTestMidlet: void <init>()>
<it.yup.xmpp.packets.DataForm: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm: void <init>(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: java.util.Hashtable access$2(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: java.util.Hashtable access$2(lampiro.screens.RosterScreen)>
<it.yup.xmpp.Contact: java.lang.String getPrintableName()>	<it.yup.xmpp.Contact: java.lang.String getPrintableName()>
nick	nick
<lampiro.screens.SplashScreen$1: void <init>(lampiro.screens.SplashScreen)>	<lampiro.screens.SplashScreen$1: void <init>(lampiro.screens.SplashScreen)>
<java.lang.Object: boolean equals(java.lang.Object)>	<java.lang.Object: boolean equals(java.lang.Object)>
<it.yup.transport.BaseChannel: void <init>()>	<it.yup.transport.BaseChannel: void <init>()>
<it.yup.xmpp.XMPPClient: long access$0(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient: long access$0(it.yup.xmpp.XMPPClient)>
<it.yup.ui.UILabel: void setText(java.lang.String)>	<it.yup.ui.UILabel: void setText(java.lang.String)>
<it.yup.xml.KXmlSerializer: void comment(java.lang.String)>	<it.yup.xml.KXmlSerializer: void comment(java.lang.String)>
<lampiro.screens.RosterScreen$WaitScreen: void stopWaiting()>	<lampiro.screens.RosterScreen$WaitScreen: void stopWaiting()>
unsupported	unsupported
<it.yup.ui.UIGauge: java.lang.String getLabel()>	<it.yup.ui.UIGauge: java.lang.String getLabel()>
<it.yup.ui.UIMenu: it.yup.ui.UIItem keyPressed(int,int)>	<it.yup.ui.UIMenu: it.yup.ui.UIItem keyPressed(int,int)>
407	407
<lampiro.screens.RosterScreen$UIGroup: void removeContact(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen$UIGroup: void removeContact(it.yup.xmpp.Contact)>
<it.yup.tests.UITestMidlet$TestScreen: void buildScreen2()>	<it.yup.tests.UITestMidlet$TestScreen: void buildScreen2()>
<lampiro.screens.RosterScreen$RegisterHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterHandler: void handleResult(it.yup.xml.Element)>
<it.yup.xmpp.packets.Presence: java.lang.String getResource()>	<it.yup.xmpp.packets.Presence: java.lang.String getResource()>
<it.yup.ui.UIMenu: void clear()>	<it.yup.ui.UIMenu: void clear()>
<javax.microedition.lcdui.Form: void addCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.Form: void addCommand(javax.microedition.lcdui.Command)>
<it.yup.xmpp.XMPPClient: void handleClientCommands(it.yup.xml.Element,boolean)>	<it.yup.xmpp.XMPPClient: void handleClientCommands(it.yup.xml.Element,boolean)>
<it.yup.screens.StatusScreen: void <init>()>	<it.yup.screens.StatusScreen: void <init>()>
<it.yup.screens.ScreenSaver: void <clinit>()>	<it.yup.screens.ScreenSaver: void <clinit>()>
<it.yup.xmpp.Contact: java.lang.String domain(java.lang.String)>	<it.yup.xmpp.Contact: java.lang.String domain(java.lang.String)>
%	%
/transport/	/transport/
cnonce	cnonce
prova2	prova2
Logging in...	Logging in...
<lampiro.screens.MUCScreen: void sendInvite(java.lang.String)>	<lampiro.screens.MUCScreen: void sendInvite(java.lang.String)>
\\"2\\"	\\"2\\"
<it.yup.xmpp.IQResultListener: void <init>()>	<it.yup.xmpp.IQResultListener: void <init>()>
<it.yup.xmpp.Contact: void addTask(it.yup.xmpp.Task)>	<it.yup.xmpp.Contact: void addTask(it.yup.xmpp.Task)>
<it.yup.util.Utils: java.lang.String flags2str(boolean[],int)>	<it.yup.util.Utils: java.lang.String flags2str(boolean[],int)>
<it.yup.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<it.yup.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>
<it.yup.xmpp.Group: void addElement(java.lang.String)>	<it.yup.xmpp.Group: void addElement(java.lang.String)>
<it.yup.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>	<it.yup.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>
<it.yup.xmpp.Roster: void readFromStorage()>	<it.yup.xmpp.Roster: void readFromStorage()>
<lampiro.screens.AddContactScreen: void registerContact(java.lang.String,java.lang.String,java.lang.String)>	<lampiro.screens.AddContactScreen: void registerContact(java.lang.String,java.lang.String,java.lang.String)>
<javax.microedition.io.StreamConnection: void close()>	<javax.microedition.io.StreamConnection: void close()>
&	&
<it.yup.xmpp.packets.Presence: void setPriority(int)>	<it.yup.xmpp.packets.Presence: void setPriority(int)>
Second	Second
<it.yup.xmpp.FTSender$IQResultListener1: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener1: void handleError(it.yup.xml.Element)>
:*	:*
<javax.microedition.lcdui.Canvas: int getWidth()>	<javax.microedition.lcdui.Canvas: int getWidth()>
vcard-temp:x:update	vcard-temp:x:update
<it.yup.ui.UIScreen: void removePopup(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: void removePopup(it.yup.ui.UIMenu)>
<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$Runnable1)>	<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel,it.yup.transport.SocketChannel$Runnable1)>
<it.yup.xmpp.FTSender$FTSEventHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>
<lampiro.screens.OptionsScreen: void <init>()>	<lampiro.screens.OptionsScreen: void <init>()>
<it.yup.util.MemoryLogConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.MemoryLogConsumer: void gotMessage(java.lang.String,int)>
<javax.microedition.media.Player: void start()>	<javax.microedition.media.Player: void start()>
\\"title\\"	\\"title\\"
<lampiro.screens.RosterScreen$RegisterWaitScreen: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$RegisterWaitScreen: void <init>(lampiro.screens.RosterScreen)>
<lampiro.screens.RosterScreen: void access$15(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: void access$15(lampiro.screens.RosterScreen)>
<javax.microedition.rms.RecordStore: int getRecordSize(int)>	<javax.microedition.rms.RecordStore: int getRecordSize(int)>
<it.yup.ui.UIUtils: void <init>()>	<it.yup.ui.UIUtils: void <init>()>
<it.yup.xmpp.XMPPClient: void buildSocketConnection()>	<it.yup.xmpp.XMPPClient: void buildSocketConnection()>
<lampiro.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<lampiro.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>
<lampiro.screens.RosterScreen: void showCommand(java.lang.Object)>	<lampiro.screens.RosterScreen: void showCommand(java.lang.Object)>
<it.yup.tests.RMSTestMidlet: void testDeletion(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testDeletion(it.yup.util.RMSIndex)>
<it.yup.xmlstream.KXmlParser: void setFeature(java.lang.String,boolean)>	<it.yup.xmlstream.KXmlParser: void setFeature(java.lang.String,boolean)>
<lampiro.screens.FTScreen$FTItem: int access$5(lampiro.screens.FTScreen$FTItem)>	<lampiro.screens.FTScreen$FTItem: int access$5(lampiro.screens.FTScreen$FTItem)>
<it.yup.xmlstream.KXmlParser: java.lang.String getPositionDescription()>	<it.yup.xmlstream.KXmlParser: java.lang.String getPositionDescription()>
<lampiro.screens.MUCScreen: void <clinit>()>	<lampiro.screens.MUCScreen: void <clinit>()>
<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getLabel()>	<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getLabel()>
<javax.microedition.media.control.VideoControl: void setVisible(boolean)>	<javax.microedition.media.control.VideoControl: void setVisible(boolean)>
<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator)>
<com.jcraft.jzlib.Deflate: void _tr_stored_block(int,int,boolean)>	<com.jcraft.jzlib.Deflate: void _tr_stored_block(int,int,boolean)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>	<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>
ABOUT	ABOUT
<javax.microedition.lcdui.StringItem: void addCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.StringItem: void addCommand(javax.microedition.lcdui.Command)>
<it.yup.transport.TransportListener: void connectionFailed(it.yup.transport.BaseChannel)>	<it.yup.transport.TransportListener: void connectionFailed(it.yup.transport.BaseChannel)>
<it.yup.ui.UIButton: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIButton: int getHeight(javax.microedition.lcdui.Graphics)>
<it.yup.ui.UILabel: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UILabel: int getHeight(javax.microedition.lcdui.Graphics)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>	<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener2)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener2)>
<it.yup.ui.UICombobox: void removeAt(int)>	<it.yup.ui.UICombobox: void removeAt(int)>
\\"hidden\\"	\\"hidden\\"
<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>
<it.yup.ui.UILayout: boolean keyPressed(int)>	<it.yup.ui.UILayout: boolean keyPressed(int)>
<it.yup.xml.BProcessor: it.yup.xml.Element parse(byte[])>	<it.yup.xml.BProcessor: it.yup.xml.Element parse(byte[])>
<it.yup.ui.UITextField: boolean isWrappable()>	<it.yup.ui.UITextField: boolean isWrappable()>
*	*
<javax.microedition.lcdui.Graphics: void setColor(int)>	<javax.microedition.lcdui.Graphics: void setColor(int)>
/icons/presence_	/icons/presence_
note	note
password	password
<lampiro.screens.RosterScreen: void closeAndOpenRoster(it.yup.ui.UIScreen)>	<lampiro.screens.RosterScreen: void closeAndOpenRoster(it.yup.ui.UIScreen)>
<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PresenceHandler)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PresenceHandler)>
<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIContact getSelectedUIContact()>	<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIContact getSelectedUIContact()>
<it.yup.xmpp.IqManager: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.IqManager: void handleResult(it.yup.xml.Element)>
insufficient memory	insufficient memory
<it.yup.transport.SocketChannel$TimerTask1: void run()>	<it.yup.transport.SocketChannel$TimerTask1: void run()>
<lampiro.screens.RosterScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>
<it.yup.ui.UIRadioButtons$UIRadioButton: void <init>(it.yup.ui.UIRadioButtons,javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UIRadioButtons$UIRadioButton: void <init>(it.yup.ui.UIRadioButtons,javax.microedition.lcdui.Image,java.lang.String)>
nonce	nonce
http://jabber.org/protocol/disco#items	http://jabber.org/protocol/disco#items
<it.yup.xmpp.FTSender: void <clinit>()>	<it.yup.xmpp.FTSender: void <clinit>()>
<java.lang.Runtime: java.lang.Runtime getRuntime()>	<java.lang.Runtime: java.lang.Runtime getRuntime()>
<it.yup.ui.UIEmoLabel: void <init>(java.lang.String)>	<it.yup.ui.UIEmoLabel: void <init>(java.lang.String)>
<it.yup.screens.CommandListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.CommandListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.ui.UIItem: boolean isDirty()>	<it.yup.ui.UIItem: boolean isDirty()>
<it.yup.screens.RegisterScreen: void <init>()>	<it.yup.screens.RegisterScreen: void <init>()>
,	,
<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>	<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>
Combo1	Combo1
<it.yup.util.RMSIndex: it.yup.util.RMSIndex$Item get_item(java.util.Vector,byte[],boolean)>	<it.yup.util.RMSIndex: it.yup.util.RMSIndex$Item get_item(java.util.Vector,byte[],boolean)>
DIRECT_SOCKET	DIRECT_SOCKET
<it.yup.ui.UIScreen: boolean popupIsPresent(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: boolean popupIsPresent(it.yup.ui.UIMenu)>
Service unavailable	Service unavailable
-	-
<it.yup.util.MetaVector: void setElementAt(java.lang.Object,int)>	<it.yup.util.MetaVector: void setElementAt(java.lang.Object,int)>
30	30
<it.yup.ui.UIItem: void setBg_color(int)>	<it.yup.ui.UIItem: void setBg_color(int)>
<lampiro.screens.RosterScreen: void chunkSent(int,int,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void chunkSent(int,int,it.yup.xmpp.FTSender)>
<it.yup.xmlstream.SocketStream: void connectionLost(it.yup.transport.BaseChannel)>	<it.yup.xmlstream.SocketStream: void connectionLost(it.yup.transport.BaseChannel)>
<it.yup.xmpp.Config: void setDefault(short,java.lang.String)>	<it.yup.xmpp.Config: void setDefault(short,java.lang.String)>
<java.lang.String: byte[] getBytes()>	<java.lang.String: byte[] getBytes()>
both	both
<it.yup.ui.UIScreen: void endDrag()>	<it.yup.ui.UIScreen: void endDrag()>
<it.yup.screens.RosterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.RosterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout access$6(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout access$6(lampiro.screens.ContactInfoScreen)>
<java.lang.StringBuffer: java.lang.String toString()>	<java.lang.StringBuffer: java.lang.String toString()>
<it.yup.ui.UIAccordion: void setBg_color(int)>	<it.yup.ui.UIAccordion: void setBg_color(int)>
<it.yup.screens.RegisterScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>	<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>
peristalsi	peristalsi
<com.jcraft.jzlib.ZStream: int deflateInit(int,int,boolean)>	<com.jcraft.jzlib.ZStream: int deflateInit(int,int,boolean)>
JID:	JID:
<it.yup.ui.UIMenu: void <clinit>()>	<it.yup.ui.UIMenu: void <clinit>()>
<it.yup.xmpp.Config: void saveToStorage()>	<it.yup.xmpp.Config: void saveToStorage()>
<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PacketListener1)>	<it.yup.xmpp.XMPPClient$PacketListener1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$PacketListener1)>
<it.yup.ui.UITextPanel: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UITextPanel: void setScreen(it.yup.ui.UIScreen)>
remove	remove
<lampiro.screens.RegisterScreen: java.lang.String access$1(lampiro.screens.RegisterScreen,java.lang.String)>	<lampiro.screens.RegisterScreen: java.lang.String access$1(lampiro.screens.RegisterScreen,java.lang.String)>
http://www.w3.org/XML/1998/namespace	http://www.w3.org/XML/1998/namespace
<it.yup.screens.RosterScreen: void playSmartTone()>	<it.yup.screens.RosterScreen: void playSmartTone()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
/	/
<lampiro.screens.SendMMScreen$UploadHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>	<lampiro.screens.SendMMScreen$UploadHandler: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>
Debug	Debug
<it.yup.ui.UICanvas: void setQwerty(boolean)>	<it.yup.ui.UICanvas: void setQwerty(boolean)>
<it.yup.ui.UIEmoLabel: java.lang.Object[] findEmoTuple(java.lang.String)>	<it.yup.ui.UIEmoLabel: java.lang.Object[] findEmoTuple(java.lang.String)>
button2	button2
\\"unsubscribe\\"	\\"unsubscribe\\"
<it.yup.ui.UIUtils: it.yup.ui.UIHLayout easyCenterLayout(it.yup.ui.UIItem,int)>	<it.yup.ui.UIUtils: it.yup.ui.UIHLayout easyCenterLayout(it.yup.ui.UIItem,int)>
<it.yup.ui.UIGauge: int access$1(it.yup.ui.UIGauge)>	<it.yup.ui.UIGauge: int access$1(it.yup.ui.UIGauge)>
audio/	audio/
<it.yup.ui.UIItem: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIItem: it.yup.ui.UIItem getSelectedItem()>
feature	feature
0	0
jabber:iq:register	jabber:iq:register
<javax.microedition.lcdui.StringItem: void setText(java.lang.String)>	<javax.microedition.lcdui.StringItem: void setText(java.lang.String)>
<lampiro.screens.SendMMScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.SendMMScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.xmpp.FTSender$IQResultListener3: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener3: void handleError(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: it.yup.xmpp.XMPPClient access$0(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: it.yup.xmpp.XMPPClient access$0(lampiro.screens.RosterScreen)>
<username>	<username>
<it.yup.xmpp.XMPPClient: void startClient()>	<it.yup.xmpp.XMPPClient: void startClient()>
<com.jcraft.jzlib.Inflate: int inflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>	<com.jcraft.jzlib.Inflate: int inflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>
<java.lang.String: int length()>	<java.lang.String: int length()>
<org.xmlpull.v1.XmlPullParser: int nextToken()>	<org.xmlpull.v1.XmlPullParser: int nextToken()>
no	no
<it.yup.util.XMPPConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.XMPPConsumer: void gotMessage(java.lang.String,int)>
<it.yup.ui.UIUtils: it.yup.ui.UIMenu easyMenu(java.lang.String,int,int,int,it.yup.ui.UIItem)>	<it.yup.ui.UIUtils: it.yup.ui.UIMenu easyMenu(java.lang.String,int,int,int,it.yup.ui.UIItem)>
1	1
<lampiro.screens.MUCScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.MUCScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.xml.KXmlParser: boolean isWhitespace()>	<it.yup.xml.KXmlParser: boolean isWhitespace()>
<it.yup.ui.UIPanel: java.util.Vector getItems()>	<it.yup.ui.UIPanel: java.util.Vector getItems()>
Connection with the server lost	Connection with the server lost
text	text
<lampiro.screens.CommandListScreen: void stopWaiting()>	<lampiro.screens.CommandListScreen: void stopWaiting()>
priority	priority
<it.yup.ui.UIItem: void paint0(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIItem: void paint0(javax.microedition.lcdui.Graphics,int,int)>
/icons/menuarrow.png	/icons/menuarrow.png
unavailable	unavailable
<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>	<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>
<it.yup.xmpp.Config: void setDefaults()>	<it.yup.xmpp.Config: void setDefaults()>
<it.yup.xmpp.packets.DataForm$Field: java.lang.String[] getOption(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm$Field: java.lang.String[] getOption(it.yup.xml.Element)>
<it.yup.xmpp.Roster: void purge()>	<it.yup.xmpp.Roster: void purge()>
<lampiro.screens.AddContactScreen$IQResultListener1: void handleError(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener1: void handleError(it.yup.xml.Element)>
<java.util.Date: long getTime()>	<java.util.Date: long getTime()>
<com.jcraft.jzlib.Deflate: void tr_init()>	<com.jcraft.jzlib.Deflate: void tr_init()>
<it.yup.tests.UITestMidlet$TestScreen: void buildScreen()>	<it.yup.tests.UITestMidlet$TestScreen: void buildScreen()>
<it.yup.xml.KXmlSerializer: int getDepth()>	<it.yup.xml.KXmlSerializer: int getDepth()>
<it.yup.ui.UIAccordion: void swap(int,int)>	<it.yup.ui.UIAccordion: void swap(int,int)>
<it.yup.ui.UICanvas: void pointerReleased(int,int)>	<it.yup.ui.UICanvas: void pointerReleased(int,int)>
<lampiro.screens.ChatScreen: boolean updateConversation()>	<lampiro.screens.ChatScreen: boolean updateConversation()>
<lampiro.screens.DebugScreen: void <clinit>()>	<lampiro.screens.DebugScreen: void <clinit>()>
\\"jabber:client\\"	\\"jabber:client\\"
group	group
<com.jcraft.jzlib.FilterInputStream: int read(byte[])>	<com.jcraft.jzlib.FilterInputStream: int read(byte[])>
B-)	B-)
<<\\"The task \\">>	<<\\"The task \\">>
gsm	gsm
stream end	stream end
<it.yup.ui.UIScreen: int append(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: int append(it.yup.ui.UIItem)>
Error:	Error:
<java.io.IOException: void printStackTrace()>	<java.io.IOException: void printStackTrace()>
X-GOOGLE-TOKEN	X-GOOGLE-TOKEN
<it.yup.xmpp.Config: java.lang.String getProperty(short,java.lang.String)>	<it.yup.xmpp.Config: java.lang.String getProperty(short,java.lang.String)>
<it.yup.ui.UICanvas: java.util.TimerTask initLongPress(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: java.util.TimerTask initLongPress(it.yup.ui.UIScreen)>
\\\"	\\\"
<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.Writer)>	<it.yup.xmlstream.KXmlSerializer: void setOutput(java.io.Writer)>
\\"prompt\\"	\\"prompt\\"
<lampiro.screens.SplashScreen: void <init>()>	<lampiro.screens.SplashScreen: void <init>()>
execute	execute
<it.yup.xmpp.FTSender$FTSEventHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>
start	start
<it.yup.xmpp.packets.Message: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.Message: void <init>(it.yup.xml.Element)>
<lampiro.screens.InnerMMScreen: void handleMMFile(byte[],java.lang.String,int)>	<lampiro.screens.InnerMMScreen: void handleMMFile(byte[],java.lang.String,int)>
<lampiro.screens.FTScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.FTScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<javax.microedition.lcdui.Form: void setCommandListener(javax.microedition.lcdui.CommandListener)>	<javax.microedition.lcdui.Form: void setCommandListener(javax.microedition.lcdui.CommandListener)>
bad jid	bad jid
<it.yup.xmlstream.KXmlParser: void parseStartTag(boolean)>	<it.yup.xmlstream.KXmlParser: void parseStartTag(boolean)>
<java.io.InputStream: void close()>	<java.io.InputStream: void close()>
<com.jcraft.jzlib.ZOutputStream: void close()>	<com.jcraft.jzlib.ZOutputStream: void close()>
<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int,lampiro.screens.RosterScreen$Thread1)>	<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int,lampiro.screens.RosterScreen$Thread1)>
<it.yup.xml.KXmlSerializer: void setOutput(java.io.Writer)>	<it.yup.xml.KXmlSerializer: void setOutput(java.io.Writer)>
<it.yup.xmpp.Config: void resetStorage(boolean)>	<it.yup.xmpp.Config: void resetStorage(boolean)>
@jabber.bluendo.com	@jabber.bluendo.com
<lampiro.screens.SplashScreen: boolean keyPressed(int)>	<lampiro.screens.SplashScreen: boolean keyPressed(int)>
<it.yup.ui.UITextField: void computeRealHeight()>	<it.yup.ui.UITextField: void computeRealHeight()>
\\"yuprms\\"	\\"yuprms\\"
<it.yup.ui.UIScreen: boolean keyPressed(int)>	<it.yup.ui.UIScreen: boolean keyPressed(int)>
<it.yup.xmpp.Roster: it.yup.xmpp.Contact getContactByJid(java.lang.String)>	<it.yup.xmpp.Roster: it.yup.xmpp.Contact getContactByJid(java.lang.String)>
<it.yup.xml.KXmlParser: boolean isEmptyElementTag()>	<it.yup.xml.KXmlParser: boolean isEmptyElementTag()>
<it.yup.ui.UILabel: void setImg(javax.microedition.lcdui.Image)>	<it.yup.ui.UILabel: void setImg(javax.microedition.lcdui.Image)>
<it.yup.util.RMSIndex: void sorted_insert(java.util.Vector,it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: void sorted_insert(java.util.Vector,it.yup.util.RMSIndex$Item)>
Test midlet	Test midlet
http://www.bluendo.com	http://www.bluendo.com	@Glider
<javax.microedition.lcdui.Font: int substringWidth(java.lang.String,int,int)>	<javax.microedition.lcdui.Font: int substringWidth(java.lang.String,int,int)>
<lampiro.screens.InnerMMScreen: void captureVideo()>	<lampiro.screens.InnerMMScreen: void captureVideo()>
<<\\"Multivector: \\">>	<<\\"Multivector: \\">>
\\"Unexpected EOF\\"	\\"Unexpected EOF\\"
<it.yup.screens.MessageComposerScreen: javax.microedition.lcdui.TextField access$1(it.yup.screens.MessageComposerScreen)>	<it.yup.screens.MessageComposerScreen: javax.microedition.lcdui.TextField access$1(it.yup.screens.MessageComposerScreen)>
features	features
<it.yup.xmpp.packets.Message: java.lang.String getBody()>	<it.yup.xmpp.packets.Message: java.lang.String getBody()>
<lampiro.screens.RosterScreen$MUCStateHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$MUCStateHandler: void handleResult(it.yup.xml.Element)>
<lampiro.screens.RegisterScreen: void placeWizard()>	<lampiro.screens.RegisterScreen: void placeWizard()>
<lampiro.screens.OptionsScreen: void <clinit>()>	<lampiro.screens.OptionsScreen: void <clinit>()>
<java.lang.System: java.lang.String getProperty(java.lang.String)>	<java.lang.System: java.lang.String getProperty(java.lang.String)>
<it.yup.xmlstream.BasicXmlStream: void send(it.yup.xml.Element,int)>	<it.yup.xmlstream.BasicXmlStream: void send(it.yup.xml.Element,int)>
7	7
<javax.microedition.media.Player: javax.microedition.media.Control getControl(java.lang.String)>	<javax.microedition.media.Player: javax.microedition.media.Control getControl(java.lang.String)>
<it.yup.ui.UIAccordion: void removeAllItems()>	<it.yup.ui.UIAccordion: void removeAllItems()>
normal	normal
<lampiro.screens.RosterScreen$UIGroup: boolean checkRemoval(lampiro.screens.RosterScreen$UIContact)>	<lampiro.screens.RosterScreen$UIGroup: boolean checkRemoval(lampiro.screens.RosterScreen$UIContact)>
<it.yup.util.RMSIndex$RecordType: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$RecordType: void <init>(it.yup.util.RMSIndex)>
<it.yup.xmpp.FTSender: void access$9(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: void access$9(it.yup.xmpp.FTSender)>
<java.lang.StringBuilder: java.lang.String toString()>	<java.lang.StringBuilder: java.lang.String toString()>
\\"option\\"	\\"option\\"
<it.yup.screens.DebugScreen: void <init>()>	<it.yup.screens.DebugScreen: void <init>()>
illegal: <	illegal: <
cannot start session	cannot start session
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeNamespace(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeNamespace(int)>
<java.util.Hashtable: void clear()>	<java.util.Hashtable: void clear()>
<javax.microedition.midlet.MIDlet: void notifyDestroyed()>	<javax.microedition.midlet.MIDlet: void notifyDestroyed()>
<it.yup.xmlstream.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>	<it.yup.xmlstream.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>
\\"jabber:iq:register\\"	\\"jabber:iq:register\\"
<it.yup.ui.UITextPanel: void setEnableEmoticons(boolean)>	<it.yup.ui.UITextPanel: void setEnableEmoticons(boolean)>
50	50
<it.yup.xmlstream.Element: it.yup.xmlstream.Element load(java.io.DataInputStream)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element load(java.io.DataInputStream)>
<com.jcraft.jzlib.Deflate: void _tr_flush_block(int,int,boolean)>	<com.jcraft.jzlib.Deflate: void _tr_flush_block(int,int,boolean)>
<java.lang.Long: long parseLong(java.lang.String)>	<java.lang.Long: long parseLong(java.lang.String)>
<it.yup.xmpp.Roster: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.Roster: void packetReceived(it.yup.xml.Element)>
<it.yup.screens.RosterScreen: void showCommand(java.lang.Object)>	<it.yup.screens.RosterScreen: void showCommand(java.lang.Object)>
<it.yup.util.MetaVector: void <init>()>	<it.yup.util.MetaVector: void <init>()>
<it.yup.xmpp.FTSender$IQResultListener2: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener2: void handleResult(it.yup.xml.Element)>
<it.yup.screens.AddContactScreen: void <init>()>	<it.yup.screens.AddContactScreen: void <init>()>
<it.yup.xmlstream.SocketStream: void <init>()>	<it.yup.xmlstream.SocketStream: void <init>()>
<it.yup.ui.UICanvas: void <init>()>	<it.yup.ui.UICanvas: void <init>()>
incorrect data check	incorrect data check
<it.yup.screens.RegisterScreen: void access$0(it.yup.screens.RegisterScreen,javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen: void access$0(it.yup.screens.RegisterScreen,javax.microedition.lcdui.Item)>
<javax.microedition.lcdui.Graphics: void drawLine(int,int,int,int)>	<javax.microedition.lcdui.Graphics: void drawLine(int,int,int,int)>
png	png
\\"normal\\"	\\"normal\\"
jabber:x:data	jabber:x:data
<javax.microedition.lcdui.List: void setCommandListener(javax.microedition.lcdui.CommandListener)>	<javax.microedition.lcdui.List: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<it.yup.ui.UICombobox: boolean isMultiChoice()>	<it.yup.ui.UICombobox: boolean isMultiChoice()>
<javax.microedition.lcdui.game.GameCanvas: int getGameAction(int)>	<javax.microedition.lcdui.game.GameCanvas: int getGameAction(int)>
<<\\"<?xml version=\'1.0\' \\">>	<<\\"<?xml version=\'1.0\' \\">>
<javax.microedition.lcdui.game.GameCanvas: void <init>(boolean)>	<javax.microedition.lcdui.game.GameCanvas: void <init>(boolean)>
gws	gws
<lampiro.screens.RosterScreen: it.yup.util.ResourceManager access$4()>	<lampiro.screens.RosterScreen: it.yup.util.ResourceManager access$4()>
:	:
<it.yup.xmpp.packets.Presence: int getPriority()>	<it.yup.xmpp.packets.Presence: int getPriority()>
<lampiro.screens.ShowMMScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ShowMMScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.util.NetworkConsumer: void run()>	<it.yup.util.NetworkConsumer: void run()>
<java.util.Vector: java.util.Enumeration elements()>	<java.util.Vector: java.util.Enumeration elements()>
<javax.microedition.midlet.MIDlet: void <init>()>	<javax.microedition.midlet.MIDlet: void <init>()>
subscribe	subscribe
<javax.microedition.lcdui.Spacer: void setLayout(int)>	<javax.microedition.lcdui.Spacer: void setLayout(int)>
<it.yup.xml.KXmlParser: java.lang.String getAttributeType(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeType(int)>
<it.yup.ui.UILayout: int traverseFocusable(int,boolean)>	<it.yup.ui.UILayout: int traverseFocusable(int,boolean)>
<it.yup.ui.UIPanel: void setItems(java.util.Vector)>	<it.yup.ui.UIPanel: void setItems(java.util.Vector)>
About	About
<lampiro.screens.ContactInfoScreen: boolean access$2(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen: boolean access$2(lampiro.screens.ContactInfoScreen)>
O:)	O:)
my String	my String
<it.yup.util.ResourceManager: void <clinit>()>	<it.yup.util.ResourceManager: void <clinit>()>
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>
<it.yup.xmpp.Group: void <clinit>()>	<it.yup.xmpp.Group: void <clinit>()>
Popup Ac	Popup Ac
<com.jcraft.jzlib.Deflate: void send_code(int,short[])>	<com.jcraft.jzlib.Deflate: void send_code(int,short[])>
<	<
jid	jid
entity replacement text must be defined after setInput!	entity replacement text must be defined after setInput!
<lampiro.screens.RegisterScreen: void placeItems()>	<lampiro.screens.RegisterScreen: void placeItems()>
<<\\"undefined prefix: \\">>	<<\\"undefined prefix: \\">>
bluendo:bxmlrpc:0	bluendo:bxmlrpc:0
<lampiro.screens.DataResultScreen: void showCurrent()>	<lampiro.screens.DataResultScreen: void showCurrent()>
<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener)>
<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout)>	<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout)>
<it.yup.xml.KXmlParser: void push(int)>	<it.yup.xml.KXmlParser: void push(int)>
<it.yup.xmpp.XMPPClient$XmppListener: void handleTask(it.yup.xmpp.Task,boolean)>	<it.yup.xmpp.XMPPClient$XmppListener: void handleTask(it.yup.xmpp.Task,boolean)>
<lampiro.screens.RosterScreen: void access$1(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: void access$1(lampiro.screens.RosterScreen)>
<javax.microedition.lcdui.Graphics: int getTranslateY()>	<javax.microedition.lcdui.Graphics: int getTranslateY()>
<it.yup.ui.Semaphore: void <init>(long)>	<it.yup.ui.Semaphore: void <init>(long)>
<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender)>
<<\\"Last index of d: \\">>	<<\\"Last index of d: \\">>
<it.yup.ui.UIScreen: void swap(int,int)>	<it.yup.ui.UIScreen: void swap(int,int)>
Can\'t read resources:\n	Can\'t read resources:\n
data	data
application/x-www-form-urlencoded	application/x-www-form-urlencoded
<lampiro.screens.ChatScreen: void checkSize(it.yup.ui.UIEmoLabel)>	<lampiro.screens.ChatScreen: void checkSize(it.yup.ui.UIEmoLabel)>
>	>
<it.yup.xmpp.XMPPClient: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>
<it.yup.util.RMSIndex: boolean open()>	<it.yup.util.RMSIndex: boolean open()>
<it.yup.screens.DataResultScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DataResultScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<lampiro.screens.ChatScreen$1: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen$1: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
invalid maxValue for non interactive mode	invalid maxValue for non interactive mode
<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean)>	<it.yup.xmpp.Roster$IQResultListener1: void <init>(it.yup.xmpp.Roster,boolean)>
<javax.microedition.lcdui.game.GameCanvas: int getKeyCode(int)>	<javax.microedition.lcdui.game.GameCanvas: int getKeyCode(int)>
<javax.microedition.lcdui.Command: java.lang.String getLongLabel()>	<javax.microedition.lcdui.Command: java.lang.String getLongLabel()>
<<\\"sel: \\">>	<<\\"sel: \\">>
<it.yup.ui.UITextField: void unExpand()>	<it.yup.ui.UITextField: void unExpand()>
online	online
<lampiro.screens.RosterScreen: void ftNotification(boolean,java.lang.String,java.lang.String)>	<lampiro.screens.RosterScreen: void ftNotification(boolean,java.lang.String,java.lang.String)>
<it.yup.xmpp.packets.IQResultListener: void <init>()>	<it.yup.xmpp.packets.IQResultListener: void <init>()>
<java.lang.StringBuffer: int length()>	<java.lang.StringBuffer: int length()>
<it.yup.ui.UIAccordion: void openLabel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void openLabel(it.yup.ui.UIItem)>
<it.yup.xmpp.FTSender$IQResultListener1: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener1: void handleResult(it.yup.xml.Element)>
<javax.microedition.lcdui.Form: int size()>	<javax.microedition.lcdui.Form: int size()>
muc#roomconfig_persistentroom	muc#roomconfig_persistentroom
<com.jcraft.jzlib.Deflate: void send_bits(int,int)>	<com.jcraft.jzlib.Deflate: void send_bits(int,int)>
<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>	<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>
Vertical	Vertical
@	@
<it.yup.ui.UIMenu: int traverseFocusable(int,boolean)>	<it.yup.ui.UIMenu: int traverseFocusable(int,boolean)>
Error while saving config:\n	Error while saving config:\n
<it.yup.ui.UITextField: boolean isAutoUnexpand()>	<it.yup.ui.UITextField: boolean isAutoUnexpand()>
<it.yup.util.StderrConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.StderrConsumer: void gotMessage(java.lang.String,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>	<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<it.yup.ui.UITextPanel: void setSelected(boolean)>	<it.yup.ui.UITextPanel: void setSelected(boolean)>
<it.yup.xmlstream.KXmlParser: void require(int,java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlParser: void require(int,java.lang.String,java.lang.String)>
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributePrefix(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributePrefix(int)>
<it.yup.util.RMSIndex: int[] getSizes()>	<it.yup.util.RMSIndex: int[] getSizes()>
quot	quot
<com.jcraft.jzlib.ZStream: int deflateInit(int,boolean)>	<com.jcraft.jzlib.ZStream: int deflateInit(int,boolean)>
<it.yup.ui.UICombobox: int[] getSelectedIndeces()>	<it.yup.ui.UICombobox: int[] getSelectedIndeces()>
<lampiro.screens.ChatScreen: boolean isPrintable(int)>	<lampiro.screens.ChatScreen: boolean isPrintable(int)>
:\'(	:\'(
<lampiro.screens.AboutScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.AboutScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.screens.ChatScreen: void checkUrls(java.lang.String)>	<it.yup.screens.ChatScreen: void checkUrls(java.lang.String)>
<it.yup.util.Logger: void removeConsumer(it.yup.util.LogConsumer)>	<it.yup.util.Logger: void removeConsumer(it.yup.util.LogConsumer)>
<javax.microedition.lcdui.ImageItem: void setLayout(int)>	<javax.microedition.lcdui.ImageItem: void setLayout(int)>
name	name
<it.yup.xmpp.Group: void removeElement(java.lang.String)>	<it.yup.xmpp.Group: void removeElement(java.lang.String)>
invalid literal/length code	invalid literal/length code
<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>	<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>
<it.yup.ui.UIItem: void drawInput(javax.microedition.lcdui.Graphics,int,int,int,int)>	<it.yup.ui.UIItem: void drawInput(javax.microedition.lcdui.Graphics,int,int,int,int)>
<it.yup.tests.XMPPTestClient: void <init>()>	<it.yup.tests.XMPPTestClient: void <init>()>
<it.yup.xmpp.XMPPClient$PresenceHandler: void handleSubscribe(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void handleSubscribe(it.yup.xmpp.packets.Presence)>
lampirorms	lampirorms
<lampiro.screens.RosterScreen: java.lang.String access$5()>	<lampiro.screens.RosterScreen: java.lang.String access$5()>
Cannot find suitable mechanism for authentication	Cannot find suitable mechanism for authentication
<it.yup.xml.KXmlParser: java.lang.String getNamespace()>	<it.yup.xml.KXmlParser: java.lang.String getNamespace()>
<it.yup.xmlstream.KXmlSerializer: void <init>()>	<it.yup.xmlstream.KXmlSerializer: void <init>()>
<java.lang.Object: void wait(long)>	<java.lang.Object: void wait(long)>
<it.yup.ui.UICheckbox: void <init>(java.lang.String)>	<it.yup.ui.UICheckbox: void <init>(java.lang.String)>
<it.yup.xmpp.Config: void <init>()>	<it.yup.xmpp.Config: void <init>()>
;-)	;-)
<<\\" in \\">>	<<\\" in \\">>
<java.util.Enumeration: boolean hasMoreElements()>	<java.util.Enumeration: boolean hasMoreElements()>
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	<java.util.Timer: void schedule(java.util.TimerTask,long,long)>
<it.yup.xmpp.Contact: void updateExistingPresence(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: void updateExistingPresence(it.yup.xmpp.packets.Presence)>
<lampiro.screens.RosterScreen: it.yup.xmpp.Contact getSelectedContact()>	<lampiro.screens.RosterScreen: it.yup.xmpp.Contact getSelectedContact()>
<lampiro.screens.RosterScreen: void showPreviousScreen(it.yup.ui.UIScreen)>	<lampiro.screens.RosterScreen: void showPreviousScreen(it.yup.ui.UIScreen)>
actions	actions
<javax.microedition.lcdui.Canvas: void removeCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.Canvas: void removeCommand(javax.microedition.lcdui.Command)>
<it.yup.screens.OptionsScreen: void <clinit>()>	<it.yup.screens.OptionsScreen: void <clinit>()>
jabber:iq:roster	jabber:iq:roster
<it.yup.xml.KXmlParser: java.lang.String getText()>	<it.yup.xml.KXmlParser: java.lang.String getText()>
<javax.microedition.lcdui.Alert: void setString(java.lang.String)>	<javax.microedition.lcdui.Alert: void setString(java.lang.String)>
<javax.microedition.lcdui.Graphics: void drawRect(int,int,int,int)>	<javax.microedition.lcdui.Graphics: void drawRect(int,int,int,int)>
<it.yup.util.RMSIndex: int saveChunk(int,java.util.Vector)>	<it.yup.util.RMSIndex: int saveChunk(int,java.util.Vector)>
<it.yup.ui.UILabel: boolean isWrappable()>	<it.yup.ui.UILabel: boolean isWrappable()>
jid-single	jid-single
<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener4)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener4)>
<it.yup.ui.UILabel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UILabel: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.tests.RMSTestMidlet: void testMultiple(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testMultiple(it.yup.util.RMSIndex)>
<java.util.Calendar: java.util.Calendar getInstance()>	<java.util.Calendar: java.util.Calendar getInstance()>
<it.yup.xmlstream.BasicXmlStream: void removeEventListener(it.yup.xmlstream.EventQueryRegistration)>	<it.yup.xmlstream.BasicXmlStream: void removeEventListener(it.yup.xmlstream.EventQueryRegistration)>
<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender)>
<java.util.Vector: void <init>(int,int)>	<java.util.Vector: void <init>(int,int)>
Bad request	Bad request
<it.yup.xmlstream.BasicXmlStream: it.yup.xmlstream.EventQueryRegistration addOnetimeEventListener(it.yup.xmlstream.EventQuery,java.lang.Object)>	<it.yup.xmlstream.BasicXmlStream: it.yup.xmlstream.EventQueryRegistration addOnetimeEventListener(it.yup.xmlstream.EventQuery,java.lang.Object)>
<it.yup.xmpp.DataFormListener: boolean execute(int)>	<it.yup.xmpp.DataFormListener: boolean execute(int)>
<javax.microedition.lcdui.Graphics: int getClipWidth()>	<javax.microedition.lcdui.Graphics: int getClipWidth()>
<it.yup.xmpp.XMPPClient: void sendPacket(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient: void sendPacket(it.yup.xml.Element)>
Error creating account	Error creating account
<it.yup.screens.RosterScreen: void paintSelection(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paintSelection(javax.microedition.lcdui.Graphics)>
<it.yup.xmlstream.BasicXmlStream: void addInitializer(it.yup.xmlstream.Initializer,int)>	<it.yup.xmlstream.BasicXmlStream: void addInitializer(it.yup.xmlstream.Initializer,int)>
<lampiro.screens.RosterScreen$UIGroup: java.util.Hashtable access$0()>	<lampiro.screens.RosterScreen$UIGroup: java.util.Hashtable access$0()>
<it.yup.xml.BProcessor: byte[] toBinary(it.yup.xml.Element)>	<it.yup.xml.BProcessor: byte[] toBinary(it.yup.xml.Element)>
<lampiro.screens.AlbumScreen: void addAlbum(byte[],java.lang.String,java.lang.String,int)>	<lampiro.screens.AlbumScreen: void addAlbum(byte[],java.lang.String,java.lang.String,int)>
<it.yup.ui.UICombobox: void openMenu()>	<it.yup.ui.UICombobox: void openMenu()>
<it.yup.ui.UILabel: int[] divideAP()>	<it.yup.ui.UILabel: int[] divideAP()>
prova	prova
<it.yup.xmlstream.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>
combo2	combo2
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>
<it.yup.util.Logger: void <init>()>	<it.yup.util.Logger: void <init>()>
<it.yup.xmpp.packets.Iq: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmpp.packets.Iq: void <init>(java.lang.String,java.lang.String)>
<javax.microedition.io.HttpConnection: java.io.InputStream openInputStream()>	<javax.microedition.io.HttpConnection: java.io.InputStream openInputStream()>
<it.yup.screens.AddContactScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.AddContactScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<it.yup.ui.UICanvas: java.util.Vector getScreenList()>	<it.yup.ui.UICanvas: java.util.Vector getScreenList()>
<it.yup.xmlstream.BasicXmlStream$ListenerRegistration: void <init>(it.yup.xmlstream.EventQuery,java.lang.Object,boolean)>	<it.yup.xmlstream.BasicXmlStream$ListenerRegistration: void <init>(it.yup.xmlstream.EventQuery,java.lang.Object,boolean)>
<it.yup.xmpp.XMPPClient$DataFormHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$DataFormHandler: void packetReceived(it.yup.xml.Element)>
ver	ver
offer	offer
\\"cancel\\"	\\"cancel\\"
<it.yup.xmpp.FTReceiver: void <init>(it.yup.xmpp.FTReceiver$FTREventHandler)>	<it.yup.xmpp.FTReceiver: void <init>(it.yup.xmpp.FTReceiver$FTREventHandler)>
\\"submit\\"	\\"submit\\"
<it.yup.xmpp.FTSender: boolean supportFT(java.lang.String)>	<it.yup.xmpp.FTSender: boolean supportFT(java.lang.String)>
<javax.microedition.lcdui.Form: int append(java.lang.String)>	<javax.microedition.lcdui.Form: int append(java.lang.String)>
<lampiro.screens.RosterScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener1: void handleResult(it.yup.xml.Element)>
<lampiro.screens.RosterScreen$UIGroup: it.yup.ui.UILabel access$4()>	<lampiro.screens.RosterScreen$UIGroup: it.yup.ui.UILabel access$4()>
<lampiro.screens.SendMMScreen$UploadHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>
from	from
<it.yup.xmpp.XMPPClient$PresenceHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void packetReceived(it.yup.xml.Element)>
<it.yup.ui.UICombobox: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UICombobox: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmpp.FTSender: void sessionInitiate()>	<it.yup.xmpp.FTSender: void sessionInitiate()>
<it.yup.ui.UITextField: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UITextField: void setScreen(it.yup.ui.UIScreen)>
(whitespace)	(whitespace)
<it.yup.ui.UIItem: void setSelectedColor(int)>	<it.yup.ui.UIItem: void setSelectedColor(int)>
/icons/task.png	/icons/task.png
Added label	Added label
<it.yup.tests.RMSTestMidlet$TestForm: void <init>(it.yup.tests.RMSTestMidlet,java.lang.String)>	<it.yup.tests.RMSTestMidlet$TestForm: void <init>(it.yup.tests.RMSTestMidlet,java.lang.String)>
<it.yup.transport.BaseChannel: boolean isOpen()>	<it.yup.transport.BaseChannel: boolean isOpen()>
<<\\"(empty) \\">>	<<\\"(empty) \\">>
jingle	jingle
<it.yup.transport.BaseChannel: void <clinit>()>	<it.yup.transport.BaseChannel: void <clinit>()>
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
<it.yup.ui.UIPanel: void setMaxHeight(int)>	<it.yup.ui.UIPanel: void setMaxHeight(int)>
<it.yup.ui.UIPanel: void paintIthItem(javax.microedition.lcdui.Graphics,int,it.yup.ui.UIItem,int,int)>	<it.yup.ui.UIPanel: void paintIthItem(javax.microedition.lcdui.Graphics,int,it.yup.ui.UIItem,int,int)>
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(int)>
<it.yup.ui.UIHLayout: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIHLayout: int getHeight(javax.microedition.lcdui.Graphics)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<lampiro.screens.SubscribeScreen: void <clinit>()>	<lampiro.screens.SubscribeScreen: void <clinit>()>
combo3-1	combo3-1
<javax.microedition.lcdui.game.GameCanvas: int getHeight()>	<javax.microedition.lcdui.game.GameCanvas: int getHeight()>
<lampiro.screens.RosterScreen$RegisterWaitScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen$RegisterWaitScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<com.jcraft.jzlib.Inflate: int inflateSync(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateSync(com.jcraft.jzlib.ZStream)>
>>:	>>:
combo2-2	combo2-2
microedition.platform	microedition.platform
hidden	hidden
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener2: void packetReceived(it.yup.xml.Element)>
No title	No title
<it.yup.xml.Element: void <clinit>()>	<it.yup.xml.Element: void <clinit>()>
<it.yup.xmpp.XMPPClient: javax.microedition.lcdui.Image getPresenceIcon(it.yup.xmpp.Contact,java.lang.String,int)>	<it.yup.xmpp.XMPPClient: javax.microedition.lcdui.Image getPresenceIcon(it.yup.xmpp.Contact,java.lang.String,int)>
<it.yup.ui.UILayout: void setGroup(boolean)>	<it.yup.ui.UILayout: void setGroup(boolean)>
<it.yup.xmpp.Config: void <clinit>()>	<it.yup.xmpp.Config: void <clinit>()>
<it.yup.xmpp.FTSender: it.yup.xmpp.XMPPClient access$0(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: it.yup.xmpp.XMPPClient access$0(it.yup.xmpp.FTSender)>
<it.yup.xmlstream.SASLAuthenticator: java.util.Hashtable parse(java.lang.String)>	<it.yup.xmlstream.SASLAuthenticator: java.util.Hashtable parse(java.lang.String)>
<it.yup.xml.BProcessor: void <clinit>()>	<it.yup.xml.BProcessor: void <clinit>()>
Popup img	Popup img
<javax.microedition.media.Manager: javax.microedition.media.Player createPlayer(java.io.InputStream,java.lang.String)>	<javax.microedition.media.Manager: javax.microedition.media.Player createPlayer(java.io.InputStream,java.lang.String)>
utf-8	utf-8
<java.io.InputStream: int read(byte[],int,int)>	<java.io.InputStream: int read(byte[],int,int)>
<it.yup.ui.UICombobox: boolean keyPressed(int)>	<it.yup.ui.UICombobox: boolean keyPressed(int)>
\\"headline\\"	\\"headline\\"
content	content
<com.jcraft.jzlib.Deflate: void <init>()>	<com.jcraft.jzlib.Deflate: void <init>()>
<it.yup.xml.KXmlParser: java.lang.String get(int)>	<it.yup.xml.KXmlParser: java.lang.String get(int)>
<it.yup.util.RMSIndex: int get_offset(java.util.Vector,byte[],boolean)>	<it.yup.util.RMSIndex: int get_offset(java.util.Vector,byte[],boolean)>
-lunga-senza-sensostringa-lunga-senza-sensostringa-lunga-senza-senso	-lunga-senza-sensostringa-lunga-senza-sensostringa-lunga-senza-senso
<it.yup.xmlstream.BasicXmlStream: void nextInitializer()>	<it.yup.xmlstream.BasicXmlStream: void nextInitializer()>
result	result
<it.yup.screens.SubscriptionConfirmAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.SubscriptionConfirmAlert: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<lampiro.screens.InnerMMScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.InnerMMScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
connection failed	connection failed
<it.yup.util.GoogleToken: void run()>	<it.yup.util.GoogleToken: void run()>
<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String)>	<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String)>
<it.yup.util.MetaVector: boolean contains(java.lang.Object)>	<it.yup.util.MetaVector: boolean contains(java.lang.Object)>
false	false
_15	_15
<lampiro.screens.GatewayRegisterScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.GatewayRegisterScreen: void itemAction(it.yup.ui.UIItem)>
Not acceptable	Not acceptable
<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void packetReceived(it.yup.xml.Element)>
<lampiro.screens.RosterScreen$UIContact: int getHeight(javax.microedition.lcdui.Graphics)>	<lampiro.screens.RosterScreen$UIContact: int getHeight(javax.microedition.lcdui.Graphics)>
<lampiro.screens.MessageComposerScreen: void <clinit>()>	<lampiro.screens.MessageComposerScreen: void <clinit>()>
<it.yup.ui.UIButton: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIButton: void paint(javax.microedition.lcdui.Graphics,int,int)>
<java.lang.Object: void wait()>	<java.lang.Object: void wait()>
<it.yup.ui.UIScreen: boolean remove(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: boolean remove(it.yup.ui.UIItem)>
http://jabber.org/protocol/nick	http://jabber.org/protocol/nick
<it.yup.xmpp.XMPPClient: java.lang.String getCapVer()>	<it.yup.xmpp.XMPPClient: java.lang.String getCapVer()>
<it.yup.ui.UIGauge: void setOffset(int)>	<it.yup.ui.UIGauge: void setOffset(int)>
http://jabber.org/protocol/muc#roomconfig	http://jabber.org/protocol/muc#roomconfig
Email=	Email=
<lampiro.screens.RosterScreen: java.util.Hashtable getChatScreenList()>	<lampiro.screens.RosterScreen: java.util.Hashtable getChatScreenList()>
<it.yup.ui.UICanvas: it.yup.ui.UICanvas getInstance()>	<it.yup.ui.UICanvas: it.yup.ui.UICanvas getInstance()>
<it.yup.xmlstream.KXmlSerializer: java.lang.String getName()>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getName()>
<it.yup.xml.BSerializer: void <init>()>	<it.yup.xml.BSerializer: void <init>()>
away	away
<it.yup.screens.RosterScreen: void removeAllContacts()>	<it.yup.screens.RosterScreen: void removeAllContacts()>
/transport/aim.png	/transport/aim.png
<javax.microedition.lcdui.ChoiceGroup: int append(java.lang.String,javax.microedition.lcdui.Image)>	<javax.microedition.lcdui.ChoiceGroup: int append(java.lang.String,javax.microedition.lcdui.Image)>
<it.yup.xmpp.IqManager: void addRegistration(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>	<it.yup.xmpp.IqManager: void addRegistration(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>
<it.yup.transport.SocketChannel: void sendContent(byte[])>	<it.yup.transport.SocketChannel: void sendContent(byte[])>
<lampiro.screens.RosterScreen$RegisterWaitScreen: void stopWaiting()>	<lampiro.screens.RosterScreen$RegisterWaitScreen: void stopWaiting()>
<it.yup.xmlstream.KXmlParser: void skip()>	<it.yup.xmlstream.KXmlParser: void skip()>
<lampiro.screens.TaskListScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.TaskListScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster,it.yup.xmpp.Roster$IQResultListener2)>	<it.yup.xmpp.Roster$IQResultListener2: void <init>(it.yup.xmpp.Roster,it.yup.xmpp.Roster$IQResultListener2)>
<it.yup.xmpp.Contact: it.yup.xmpp.Task[] getTasks()>	<it.yup.xmpp.Contact: it.yup.xmpp.Task[] getTasks()>
<it.yup.util.RMSIndex$Comparator: int compare(byte[],byte[])>	<it.yup.util.RMSIndex$Comparator: int compare(byte[],byte[])>
<it.yup.ui.UIMenu: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UIMenu: void setScreen(it.yup.ui.UIScreen)>
Combo2	Combo2
<it.yup.xmlstream.SASLAuthenticator: void gotChallenge(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator: void gotChallenge(it.yup.xml.Element)>
<it.yup.ui.UIScreen: void <init>()>	<it.yup.ui.UIScreen: void <init>()>
<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(int)>
<it.yup.xmlstream.Element: void write(org.xmlpull.v1.XmlSerializer)>	<it.yup.xmlstream.Element: void write(org.xmlpull.v1.XmlSerializer)>
\\"desc\\"	\\"desc\\"
<it.yup.xmpp.XMPPClient$XmppListener: void connectionLost()>	<it.yup.xmpp.XMPPClient$XmppListener: void connectionLost()>
<javax.microedition.media.Manager: void playTone(int,int,int)>	<javax.microedition.media.Manager: void playTone(int,int,int)>
<it.yup.xmpp.FTSender: void initiateInteraction()>	<it.yup.xmpp.FTSender: void initiateInteraction()>
<it.yup.util.RMSIndex: boolean rmExist(java.lang.String)>	<it.yup.util.RMSIndex: boolean rmExist(java.lang.String)>
<lampiro.screens.KeyScreen: void <clinit>()>	<lampiro.screens.KeyScreen: void <clinit>()>
<java.lang.String: void <init>(java.lang.String)>	<java.lang.String: void <init>(java.lang.String)>
<it.yup.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>	<it.yup.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>
urn:xmpp:delay	urn:xmpp:delay
Press any key to continue	Press any key to continue
<it.yup.xml.KXmlSerializer: void processingInstruction(java.lang.String)>	<it.yup.xml.KXmlSerializer: void processingInstruction(java.lang.String)>
<it.yup.screens.TaskListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.TaskListScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.ui.UILayout: void setDirty(boolean)>	<it.yup.ui.UILayout: void setDirty(boolean)>
<lampiro.screens.ChatScreen$ForwardScreen: void closeMe()>	<lampiro.screens.ChatScreen$ForwardScreen: void closeMe()>
<it.yup.xml.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>	<it.yup.xml.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createRGBImage(int[],int,int,boolean)>	<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createRGBImage(int[],int,int,boolean)>
muc#roomconfig_roomdesc	muc#roomconfig_roomdesc
<lampiro.screens.AddContactScreen: void <init>()>	<lampiro.screens.AddContactScreen: void <init>()>
<it.yup.screens.SplashScreen: void keyPressed(int)>	<it.yup.screens.SplashScreen: void keyPressed(int)>
session-terminate	session-terminate
<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIContact getUIContact(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIContact getUIContact(it.yup.xmpp.Contact)>
<lampiro.screens.SplashScreen$UISplashTextField: boolean keyPressed(int)>	<lampiro.screens.SplashScreen$UISplashTextField: boolean keyPressed(int)>
<lampiro.screens.DebugScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.DebugScreen: void itemAction(it.yup.ui.UIItem)>
<lampiro.screens.FTScreen$FTItem: boolean access$4(lampiro.screens.FTScreen$FTItem)>	<lampiro.screens.FTScreen$FTItem: boolean access$4(lampiro.screens.FTScreen$FTItem)>
<java.util.Enumeration: java.lang.Object nextElement()>	<java.util.Enumeration: java.lang.Object nextElement()>
<com.jcraft.jzlib.InfTree: int huft_build(int[],int,int,int,int[],int[],int[],int[],int[],int[],int[])>	<com.jcraft.jzlib.InfTree: int huft_build(int[],int,int,int,int[],int[],int[],int[],int[],int[],int[])>
<it.yup.xmlstream.Element: it.yup.xmlstream.Element addElement(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element addElement(java.lang.String,java.lang.String)>
<<\\"sel: \\">>	<<\\"sel: \\">>	@x_notTiming
<it.yup.ui.UITextPanel: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UITextPanel: it.yup.ui.UIItem getSelectedItem()>
Content-Length	Content-Length
<lampiro.screens.ContactInfoScreen: it.yup.ui.UILabel access$1(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UILabel access$1(lampiro.screens.ContactInfoScreen)>
<lampiro.screens.RosterScreen: void connectionLost()>	<lampiro.screens.RosterScreen: void connectionLost()>
<it.yup.xml.Element: void delAttribute(java.lang.String)>	<it.yup.xml.Element: void delAttribute(java.lang.String)>
<lampiro.screens.FTScreen: void chunkTransferred(int,int,java.lang.Object)>	<lampiro.screens.FTScreen: void chunkTransferred(int,int,java.lang.Object)>
<it.yup.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>	<it.yup.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>
<it.yup.ui.UIScreen: void removePaintedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void removePaintedItem(it.yup.ui.UIItem)>
<com.jcraft.jzlib.ZOutputStream: void flush()>	<com.jcraft.jzlib.ZOutputStream: void flush()>
<com.jcraft.jzlib.StaticTree: void <clinit>()>	<com.jcraft.jzlib.StaticTree: void <clinit>()>
<javax.microedition.lcdui.ChoiceGroup: void <init>(java.lang.String,int,java.lang.String[],javax.microedition.lcdui.Image[])>	<javax.microedition.lcdui.ChoiceGroup: void <init>(java.lang.String,int,java.lang.String[],javax.microedition.lcdui.Image[])>
<javax.microedition.rms.RecordStore: int addRecord(byte[],int,int)>	<javax.microedition.rms.RecordStore: int addRecord(byte[],int,int)>
<it.yup.ui.UIAccordion: void addSpareItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void addSpareItem(it.yup.ui.UIItem)>
<it.yup.xml.Element: it.yup.xml.Element addElementAndContent(java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element addElementAndContent(java.lang.String,java.lang.String,java.lang.String)>
<it.yup.ui.UITextPanel: boolean isEnableEmoticons()>	<it.yup.ui.UITextPanel: boolean isEnableEmoticons()>
<java.io.InputStream: int available()>	<java.io.InputStream: int available()>
\\"type\\"	\\"type\\"
\\"executing\\"	\\"executing\\"
<it.yup.screens.StatusScreen: void <clinit>()>	<it.yup.screens.StatusScreen: void <clinit>()>
http://jabber.org/protocol/muc	http://jabber.org/protocol/muc
<it.yup.xmpp.Group: it.yup.xml.Element store()>	<it.yup.xmpp.Group: it.yup.xml.Element store()>
<it.yup.xmpp.Contact: int compareTo(it.yup.xmpp.Contact)>	<it.yup.xmpp.Contact: int compareTo(it.yup.xmpp.Contact)>
Horizontal	Horizontal
<lampiro.screens.RosterScreen$UIContact: void <init>(lampiro.screens.RosterScreen,it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen$UIContact: void <init>(lampiro.screens.RosterScreen,it.yup.xmpp.Contact)>
<it.yup.xmpp.XMPPClient$XmppListener: void removeAllContacts()>	<it.yup.xmpp.XMPPClient$XmppListener: void removeAllContacts()>
<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String,int)>	<it.yup.xmpp.XMPPClient: void setPresence(int,java.lang.String,int)>
<it.yup.ui.UIScreen: javax.microedition.lcdui.Graphics getGraphics()>	<it.yup.ui.UIScreen: javax.microedition.lcdui.Graphics getGraphics()>
client/	client/
<it.yup.xmpp.SimpleDataFormExecutor: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.SimpleDataFormExecutor: void <init>(it.yup.xml.Element)>
<it.yup.xmlstream.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>
<javax.microedition.lcdui.Gauge: void <init>(java.lang.String,boolean,int,int)>	<javax.microedition.lcdui.Gauge: void <init>(java.lang.String,boolean,int,int)>
capture://audio?encoding=	capture://audio?encoding=
<it.yup.ui.UILabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>	<it.yup.ui.UILabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>
<it.yup.xml.Element: void removeAllElements()>	<it.yup.xml.Element: void removeAllElements()>
id	id
yes	yes
<com.jcraft.jzlib.FilterInputStream: void mark(int)>	<com.jcraft.jzlib.FilterInputStream: void mark(int)>
<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener2)>	<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$IQResultListener2)>
<lampiro.screens.RosterScreen: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>
<it.yup.xmlstream.KXmlParser: java.lang.String getText()>	<it.yup.xmlstream.KXmlParser: java.lang.String getText()>
<it.yup.xml.KXmlParser: java.lang.String getNamespacePrefix(int)>	<it.yup.xml.KXmlParser: java.lang.String getNamespacePrefix(int)>
<it.yup.util.Utils: byte[] digest(byte[],java.lang.String)>	<it.yup.util.Utils: byte[] digest(byte[],java.lang.String)>
<javax.microedition.lcdui.Command: void <init>(java.lang.String,java.lang.String,int,int)>	<javax.microedition.lcdui.Command: void <init>(java.lang.String,java.lang.String,int,int)>
<com.jcraft.jzlib.ZInputStream: long skip(long)>	<com.jcraft.jzlib.ZInputStream: long skip(long)>
<lampiro.screens.RosterScreen$FileReceiveScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.xmlstream.BasicXmlStream: void <clinit>()>	<it.yup.xmlstream.BasicXmlStream: void <clinit>()>
<com.jcraft.jzlib.ZInputStream: int getFlushMode()>	<com.jcraft.jzlib.ZInputStream: int getFlushMode()>
<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemCommandListener1)>	<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemCommandListener1)>
<lampiro.screens.DebugScreen: void setupLogging()>	<lampiro.screens.DebugScreen: void setupLogging()>
<com.jcraft.jzlib.ZStream: int inflateInit(boolean)>	<com.jcraft.jzlib.ZStream: int inflateInit(boolean)>
<java.io.Writer: void write(java.lang.String)>	<java.io.Writer: void write(java.lang.String)>
<com.jcraft.jzlib.Deflate: void compress_block(short[],short[])>	<com.jcraft.jzlib.Deflate: void compress_block(short[],short[])>
<com.jcraft.jzlib.InfTree: int inflate_trees_dynamic(int,int,int[],int[],int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfTree: int inflate_trees_dynamic(int,int,int[],int[],int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>
http://jabber.org/features/iq-register	http://jabber.org/features/iq-register
<java.io.DataInputStream: int read(byte[],int,int)>	<java.io.DataInputStream: int read(byte[],int,int)>
<it.yup.xml.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xml.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>
<it.yup.xmpp.XMPPClient: void sendIQ(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>	<it.yup.xmpp.XMPPClient: void sendIQ(it.yup.xmpp.packets.Iq,it.yup.xmpp.IQResultListener)>
<it.yup.xmlstream.KXmlSerializer: void entityRef(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void entityRef(java.lang.String)>
<it.yup.ui.UIScreen: void setSelectedIndex(int)>	<it.yup.ui.UIScreen: void setSelectedIndex(int)>
muc#roomconfig_roomname	muc#roomconfig_roomname
<com.jcraft.jzlib.ZOutputStream: long getTotalIn()>	<com.jcraft.jzlib.ZOutputStream: long getTotalIn()>
<it.yup.ui.UIItem: int getBg_color()>	<it.yup.ui.UIItem: int getBg_color()>
&amp;	&amp;
<java.io.DataInputStream: void close()>	<java.io.DataInputStream: void close()>
<it.yup.ui.UILabel: java.util.Vector getTextLines()>	<it.yup.ui.UILabel: java.util.Vector getTextLines()>
<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen)>	<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen)>
<java.io.ByteArrayOutputStream: byte[] toByteArray()>	<java.io.ByteArrayOutputStream: byte[] toByteArray()>
to	to
<javax.microedition.io.SocketConnection: java.io.OutputStream openOutputStream()>	<javax.microedition.io.SocketConnection: java.io.OutputStream openOutputStream()>
<it.yup.ui.UIPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>
<lampiro.screens.MMScreen: void <clinit>()>	<lampiro.screens.MMScreen: void <clinit>()>
<lampiro.screens.StatusScreen: void <clinit>()>	<lampiro.screens.StatusScreen: void <clinit>()>
<it.yup.ui.UILabel: void setImgAnchorPoint(int)>	<it.yup.ui.UILabel: void setImgAnchorPoint(int)>
<lampiro.screens.RosterScreen$UIGroup: void orderGroups()>	<lampiro.screens.RosterScreen$UIGroup: void orderGroups()>
<it.yup.tests.XMPPTestClient$Echoer: void packetReceived(it.yup.xml.Element)>	<it.yup.tests.XMPPTestClient$Echoer: void packetReceived(it.yup.xml.Element)>
<lampiro.screens.SplashScreen: void checkKeys()>	<lampiro.screens.SplashScreen: void checkKeys()>
Registration required	Registration required
<it.yup.util.MetaVector: void removeAllElements()>	<it.yup.util.MetaVector: void removeAllElements()>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>	<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<it.yup.ui.UIScreen: void insert(int,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void insert(int,it.yup.ui.UIItem)>
<it.yup.ui.UICanvas: void sizeChanged(int,int)>	<it.yup.ui.UICanvas: void sizeChanged(int,int)>
/transport/icq.png	/transport/icq.png
<lampiro.screens.RosterScreen: java.util.Hashtable access$7()>	<lampiro.screens.RosterScreen: java.util.Hashtable access$7()>
<javax.microedition.lcdui.Form: void delete(int)>	<javax.microedition.lcdui.Form: void delete(int)>
<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen)>	<it.yup.screens.MessageComposerScreen$ItemCommandListener1: void <init>(it.yup.screens.MessageComposerScreen)>
muc#roomconfig_moderatedroom	muc#roomconfig_moderatedroom
canceled	canceled
<it.yup.xmpp.Contact: int getAvailability()>	<it.yup.xmpp.Contact: int getAvailability()>
<it.yup.ui.UIAccordion: void setLabelSelectedColor(int)>	<it.yup.ui.UIAccordion: void setLabelSelectedColor(int)>
<lampiro.screens.ChatScreen: void closeMe()>	<lampiro.screens.ChatScreen: void closeMe()>
<it.yup.xmpp.FTSender: void sendFile()>	<it.yup.xmpp.FTSender: void sendFile()>
<javax.microedition.lcdui.StringItem: void setLayout(int)>	<javax.microedition.lcdui.StringItem: void setLayout(int)>
<javax.microedition.lcdui.Graphics: void clipRect(int,int,int,int)>	<javax.microedition.lcdui.Graphics: void clipRect(int,int,int,int)>
_13	_13
node	node
<it.yup.screens.DataResultScreen: void showCurrent()>	<it.yup.screens.DataResultScreen: void showCurrent()>
<lampiro.LampiroMidlet: void exit()>	<lampiro.LampiroMidlet: void exit()>
<lampiro.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>
<javax.microedition.lcdui.StringItem: void <init>(java.lang.String,java.lang.String,int)>	<javax.microedition.lcdui.StringItem: void <init>(java.lang.String,java.lang.String,int)>
<it.yup.util.MetaVector$MultiVectorEnumeration: java.lang.Object nextElement()>	<it.yup.util.MetaVector$MultiVectorEnumeration: java.lang.Object nextElement()>
<it.yup.transport.BaseChannel: void sendContent(byte[])>	<it.yup.transport.BaseChannel: void sendContent(byte[])>
<it.yup.ui.UITextField: void setText(java.lang.String)>	<it.yup.ui.UITextField: void setText(java.lang.String)>
<it.yup.ui.UITextPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UITextPanel: int computeRealHeight(javax.microedition.lcdui.Graphics)>
layout	layout
<lampiro.screens.ChatScreen$ForwardScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen$ForwardScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
[	[
<it.yup.xmpp.Config: void setData(byte[],byte[])>	<it.yup.xmpp.Config: void setData(byte[],byte[])>
<lampiro.screens.RosterScreen$FileReceiveScreen: void updateFT()>	<lampiro.screens.RosterScreen$FileReceiveScreen: void updateFT()>
Cannot registrate	Cannot registrate
<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator)>
<lampiro.screens.RosterScreen: java.util.Vector getOrderedContacts()>	<lampiro.screens.RosterScreen: java.util.Vector getOrderedContacts()>
<it.yup.xmpp.FTReceiver$OpenListener: void access$2(it.yup.xmpp.FTReceiver$OpenListener,byte[])>	<it.yup.xmpp.FTReceiver$OpenListener: void access$2(it.yup.xmpp.FTReceiver$OpenListener,byte[])>
<it.yup.xmpp.XMPPClient$XmppListener: void askSubscription(it.yup.xmpp.Contact)>	<it.yup.xmpp.XMPPClient$XmppListener: void askSubscription(it.yup.xmpp.Contact)>
UTF-8	UTF-8
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$AdHocCommandsHandler)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$AdHocCommandsHandler)>
\\"body\\"	\\"body\\"
<lampiro.LampiroMidlet: void <init>()>	<lampiro.LampiroMidlet: void <init>()>
<it.yup.screens.RegisterScreen: java.lang.String get_server(java.lang.String)>	<it.yup.screens.RegisterScreen: java.lang.String get_server(java.lang.String)>
<it.yup.tests.UITestMidlet$TestScreen$Changer: void <init>(it.yup.tests.UITestMidlet$TestScreen)>	<it.yup.tests.UITestMidlet$TestScreen$Changer: void <init>(it.yup.tests.UITestMidlet$TestScreen)>
<javax.microedition.lcdui.ChoiceGroup: java.lang.String getString(int)>	<javax.microedition.lcdui.ChoiceGroup: java.lang.String getString(int)>
<it.yup.xmlstream.KXmlParser: int getDepth()>	<it.yup.xmlstream.KXmlParser: int getDepth()>
<it.yup.xmpp.XMPPClient$XmppListener: void commandExecuted(java.lang.Object)>	<it.yup.xmpp.XMPPClient$XmppListener: void commandExecuted(java.lang.Object)>
Unexpected EOF	Unexpected EOF
<!--	<!--
debug	debug
<java.io.InputStreamReader: void <init>(java.io.InputStream)>	<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<com.jcraft.jzlib.InfTree: void <clinit>()>	<com.jcraft.jzlib.InfTree: void <clinit>()>
<java.util.Vector: void setElementAt(java.lang.Object,int)>	<java.util.Vector: void setElementAt(java.lang.Object,int)>
<it.yup.xmlstream.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>
<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void start(it.yup.xmlstream.BasicXmlStream)>
<it.yup.util.LogConsumer: void setExiting()>	<it.yup.util.LogConsumer: void setExiting()>
<it.yup.util.XMPPConsumer: void run()>	<it.yup.util.XMPPConsumer: void run()>
<lampiro.screens.RosterScreen: void chatWithSelected(java.lang.String)>	<lampiro.screens.RosterScreen: void chatWithSelected(java.lang.String)>
<javax.microedition.lcdui.Graphics: void setStrokeStyle(int)>	<javax.microedition.lcdui.Graphics: void setStrokeStyle(int)>
<com.jcraft.jzlib.JZlib: void <init>()>	<com.jcraft.jzlib.JZlib: void <init>()>
Exception	Exception
type	type
<lampiro.screens.ChatScreen: void checkUrls(java.lang.String)>	<lampiro.screens.ChatScreen: void checkUrls(java.lang.String)>
<it.yup.ui.UIMenu: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: void setSelectedItem(it.yup.ui.UIItem)>
<javax.microedition.lcdui.Canvas: void addCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.Canvas: void addCommand(javax.microedition.lcdui.Command)>
<lampiro.screens.KeyScreen: boolean isValid(int)>	<lampiro.screens.KeyScreen: boolean isValid(int)>
\t	\t
\\"unavailable\\"	\\"unavailable\\"
<it.yup.ui.UICombobox: void removeAll()>	<it.yup.ui.UICombobox: void removeAll()>
<javax.microedition.lcdui.Graphics: int getClipY()>	<javax.microedition.lcdui.Graphics: int getClipY()>
<it.yup.ui.UILabel: void setAnchorPoint(int)>	<it.yup.ui.UILabel: void setAnchorPoint(int)>
<lampiro.screens.InnerMMScreen$1: void run()>	<lampiro.screens.InnerMMScreen$1: void run()>
<lampiro.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>	<lampiro.screens.ChatScreen: void packetReceived(it.yup.xml.Element)>
<lampiro.screens.RosterScreen$UIGroup: void initGroupData()>	<lampiro.screens.RosterScreen$UIGroup: void initGroupData()>
<com.jcraft.jzlib.InfCodes: void init(int,int,int[],int,int[],int,com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfCodes: void init(int,int,int[],int,int[],int,com.jcraft.jzlib.ZStream)>
<<\\" \\">>	<<\\" \\">>
<lampiro.screens.RosterScreen: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.RosterScreen: void reqFT(java.lang.String,it.yup.xmpp.FTReceiver$OpenListener)>
<lampiro.screens.SendMMScreen$UploadHandler: void <init>(lampiro.screens.SendMMScreen,java.lang.String,java.lang.String)>	<lampiro.screens.SendMMScreen$UploadHandler: void <init>(lampiro.screens.SendMMScreen,java.lang.String,java.lang.String)>
<it.yup.xmlstream.KXmlSerializer: boolean getFeature(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: boolean getFeature(java.lang.String)>
<it.yup.ui.UIRadioButtons: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIRadioButtons: int getHeight(javax.microedition.lcdui.Graphics)>
<java.util.Date: java.lang.String toString()>	<java.util.Date: java.lang.String toString()>
<it.yup.ui.UIPanel: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIPanel: it.yup.ui.UIItem getSelectedItem()>
<it.yup.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable,int)>	<it.yup.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,javax.microedition.lcdui.Displayable,int)>
<lampiro.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<lampiro.screens.DataResultScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>
Wrong event type	Wrong event type
<it.yup.xmpp.FTSender$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$PacketListener1: void packetReceived(it.yup.xml.Element)>
socket://	socket://	@not_plain_socket
_	_
open	open
:O	:O
<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>	<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen,lampiro.screens.RosterScreen$RegisterHandler)>
<it.yup.xmlstream.BasicXmlStream: void removeInitializer(it.yup.xmlstream.Initializer)>	<it.yup.xmlstream.BasicXmlStream: void removeInitializer(it.yup.xmlstream.Initializer)>
<it.yup.util.RMSIndex: boolean close()>	<it.yup.util.RMSIndex: boolean close()>
<lampiro.screens.AddContactScreen$IQResultListener2: void handleError(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener2: void handleError(it.yup.xml.Element)>
<lampiro.screens.ChatScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.xmlstream.SASLAuthenticator: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.SASLAuthenticator: void start(it.yup.xmlstream.BasicXmlStream)>
Negative argument	Negative argument
<it.yup.ui.UIPanel: void setDirty(boolean)>	<it.yup.ui.UIPanel: void setDirty(boolean)>
<it.yup.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>	<it.yup.screens.RosterScreen: void removeContact(it.yup.xmpp.Contact)>
<it.yup.screens.ChatScreen: it.yup.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[],int)>	<it.yup.screens.ChatScreen: it.yup.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[],int)>
<it.yup.xmlstream.KXmlSerializer: void cdsect(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void cdsect(java.lang.String)>
=\\\"	=\\\"
category	category
<lampiro.screens.ShowMMScreen: void setMmType(int)>	<lampiro.screens.ShowMMScreen: void setMmType(int)>
<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener1)>	<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener1)>
a	a
<it.yup.ui.UICanvas: void askRepaint(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void askRepaint(it.yup.ui.UIScreen)>
<lampiro.screens.RegisterScreen: void <init>()>	<lampiro.screens.RegisterScreen: void <init>()>
<it.yup.xmpp.CommandExecutor: void display_internal()>	<it.yup.xmpp.CommandExecutor: void display_internal()>
prova button	prova button
<java.util.Timer: void schedule(java.util.TimerTask,long)>	<java.util.Timer: void schedule(java.util.TimerTask,long)>
<lampiro.screens.ChatScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>	<lampiro.screens.ChatScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>
invalid window size	invalid window size
Login	Login
<it.yup.xmpp.Contact: void <clinit>()>	<it.yup.xmpp.Contact: void <clinit>()>
status	status
/icons/contact_add_all.png	/icons/contact_add_all.png
<it.yup.xml.KXmlParser: int nextToken()>	<it.yup.xml.KXmlParser: int nextToken()>
en	en
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void <init>(lampiro.screens.RosterScreen)>
chat	chat
b	b
\\"text-single\\"	\\"text-single\\"
<java.io.OutputStream: void write(byte[])>	<java.io.OutputStream: void write(byte[])>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>	<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>
<<\\"online, bytes: \\">>	<<\\"online, bytes: \\">>
<it.yup.ui.UIAccordion: int getPanelIndex(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: int getPanelIndex(it.yup.ui.UIItem,it.yup.ui.UIItem)>
<it.yup.xml.KXmlParser: void skipSubTree()>	<it.yup.xml.KXmlParser: void skipSubTree()>
<it.yup.xmlstream.KXmlParser: void parseDoctype(boolean)>	<it.yup.xmlstream.KXmlParser: void parseDoctype(boolean)>
<it.yup.xmpp.FTReceiver$OpenListener: void <init>(it.yup.xmpp.FTReceiver)>	<it.yup.xmpp.FTReceiver$OpenListener: void <init>(it.yup.xmpp.FTReceiver)>
<java.util.Vector: boolean contains(java.lang.Object)>	<java.util.Vector: boolean contains(java.lang.Object)>
<lampiro.screens.AlbumScreen: void saveAlbum()>	<lampiro.screens.AlbumScreen: void saveAlbum()>
<javax.microedition.rms.RecordStore: java.lang.String[] listRecordStores()>	<javax.microedition.rms.RecordStore: java.lang.String[] listRecordStores()>
<it.yup.ui.UIItem: void drawPixel(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIItem: void drawPixel(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge)>	<it.yup.ui.UIGauge$Ticker: void <init>(it.yup.ui.UIGauge)>
<java.lang.String: java.lang.String toLowerCase()>	<java.lang.String: java.lang.String toLowerCase()>
c	c
<it.yup.ui.UIAccordion: int getPanelSize(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: int getPanelSize(it.yup.ui.UIItem)>
<com.jcraft.jzlib.Deflate: int deflateEnd()>	<com.jcraft.jzlib.Deflate: int deflateEnd()>
<it.yup.xmpp.Contact: java.util.Vector getMessageHistory(java.lang.String)>	<it.yup.xmpp.Contact: java.util.Vector getMessageHistory(java.lang.String)>
<it.yup.util.MemoryLogConsumer: it.yup.util.MemoryLogConsumer getConsumer()>	<it.yup.util.MemoryLogConsumer: it.yup.util.MemoryLogConsumer getConsumer()>
Status	Status
<it.yup.xmpp.Config: byte[] getData(byte[])>	<it.yup.xmpp.Config: byte[] getData(byte[])>
<it.yup.ui.UILabel: javax.microedition.lcdui.Font getFont()>	<it.yup.ui.UILabel: javax.microedition.lcdui.Font getFont()>
<it.yup.xmpp.XMPPClient$XmppListener: void playSmartTone()>	<it.yup.xmpp.XMPPClient$XmppListener: void playSmartTone()>
<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.BasicXmlStream$ResourceBinding: void packetReceived(it.yup.xml.Element)>
<it.yup.xml.KXmlSerializer: void writeEscaped(java.lang.String,int)>	<it.yup.xml.KXmlSerializer: void writeEscaped(java.lang.String,int)>
d	d
<com.jcraft.jzlib.Inflate: int inflateReset(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateReset(com.jcraft.jzlib.ZStream)>
<java.lang.String: java.lang.String substring(int,int)>	<java.lang.String: java.lang.String substring(int,int)>
<it.yup.ui.UILabel: boolean isFlip()>	<it.yup.ui.UILabel: boolean isFlip()>
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>
\\"http://services.bluendo.com/srv/?domain=\\"	\\"http://services.bluendo.com/srv/?domain=\\"
<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>	<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>
<com.jcraft.jzlib.InfBlocks: int sync_point()>	<com.jcraft.jzlib.InfBlocks: int sync_point()>
<it.yup.util.RMSIndex: byte[] physicalRead(it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: byte[] physicalRead(it.yup.util.RMSIndex$Item)>
<javax.microedition.rms.RecordStore: byte[] getRecord(int)>	<javax.microedition.rms.RecordStore: byte[] getRecord(int)>
<it.yup.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>	<it.yup.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>
<lampiro.screens.AddContactScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>	<lampiro.screens.AddContactScreen$IQResultListener2: void handleResult(it.yup.xml.Element)>
<it.yup.ui.UIMenu: void setSubmenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIMenu: void setSubmenu(it.yup.ui.UIMenu)>
HEADER	HEADER
e	e
<com.jcraft.jzlib.InfBlocks: void <init>(com.jcraft.jzlib.ZStream,java.lang.Object,int)>	<com.jcraft.jzlib.InfBlocks: void <init>(com.jcraft.jzlib.ZStream,java.lang.Object,int)>
<it.yup.screens.RosterScreen: void <clinit>()>	<it.yup.screens.RosterScreen: void <clinit>()>
<it.yup.xmpp.XMPPClient: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient: void gotStreamEvent(java.lang.String,java.lang.Object)>
Press left key	Press left key
urn:xmpp:jingle:apps:file-transfer:1	urn:xmpp:jingle:apps:file-transfer:1
<lampiro.screens.RegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<lampiro.screens.SendMMScreen: void <init>(byte[],java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>	<lampiro.screens.SendMMScreen: void <init>(byte[],java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
f	f
<lampiro.screens.RosterScreen: void closeWaitingScreen()>	<lampiro.screens.RosterScreen: void closeWaitingScreen()>
phone/	phone/
\\"Wrong event type\\"	\\"Wrong event type\\"
<javax.microedition.lcdui.Font: int getHeight()>	<javax.microedition.lcdui.Font: int getHeight()>
<it.yup.screens.MessageComposerScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.MessageComposerScreen$ItemStateListener1: void itemStateChanged(javax.microedition.lcdui.Item)>
<it.yup.xmlstream.Element: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: void <init>(java.lang.String,java.lang.String)>
_11	_11
<lampiro.screens.ContactInfoScreen: void addToPanel(it.yup.ui.UIItem)>	<lampiro.screens.ContactInfoScreen: void addToPanel(it.yup.ui.UIItem)>
<java.util.Date: void <init>(long)>	<java.util.Date: void <init>(long)>
\\"boolean\\"	\\"boolean\\"
<it.yup.ui.UICanvas: int getViewedIndex()>	<it.yup.ui.UICanvas: int getViewedIndex()>
<javax.microedition.lcdui.Graphics: javax.microedition.lcdui.Font getFont()>	<javax.microedition.lcdui.Graphics: javax.microedition.lcdui.Font getFont()>
<lampiro.screens.CommandListScreen: boolean keyPressed(int)>	<lampiro.screens.CommandListScreen: boolean keyPressed(int)>
g	g
<it.yup.xmpp.XMPPClient: void access$7(it.yup.xmpp.XMPPClient,boolean)>	<it.yup.xmpp.XMPPClient: void access$7(it.yup.xmpp.XMPPClient,boolean)>
<it.yup.ui.UIMenu: int getAbsoluteX()>	<it.yup.ui.UIMenu: int getAbsoluteX()>
<it.yup.xmpp.BluendoXMLRPC: it.yup.xml.Element read()>	<it.yup.xmpp.BluendoXMLRPC: it.yup.xml.Element read()>
\\"thread\\"	\\"thread\\"
<it.yup.ui.UIPanel: void setListMode(boolean)>	<it.yup.ui.UIPanel: void setListMode(boolean)>
<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DataFormHandler)>	<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DataFormHandler)>
<javax.microedition.lcdui.Form: void insert(int,javax.microedition.lcdui.Item)>	<javax.microedition.lcdui.Form: void insert(int,javax.microedition.lcdui.Item)>
<java.io.PrintStream: void println(java.lang.Object)>	<java.io.PrintStream: void println(java.lang.Object)>
<it.yup.screens.RosterScreen: void paintRoster(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paintRoster(javax.microedition.lcdui.Graphics)>
h	h
<it.yup.xmlstream.BasicXmlStream: void restart()>	<it.yup.xmlstream.BasicXmlStream: void restart()>
<java.io.IOException: java.lang.String getMessage()>	<java.io.IOException: java.lang.String getMessage()>
<lampiro.screens.RosterScreen: void packetReceived(it.yup.xml.Element)>	<lampiro.screens.RosterScreen: void packetReceived(it.yup.xml.Element)>
<javax.microedition.lcdui.Font: int getFace()>	<javax.microedition.lcdui.Font: int getFace()>
<it.yup.screens.RosterScreen: void chatWithSelected(boolean)>	<it.yup.screens.RosterScreen: void chatWithSelected(boolean)>
<it.yup.xmpp.Group: void <init>(java.lang.String)>	<it.yup.xmpp.Group: void <init>(java.lang.String)>
<it.yup.xmpp.Contact: java.lang.String getFullJid()>	<it.yup.xmpp.Contact: java.lang.String getFullJid()>
<it.yup.ui.UIAccordion$AccordionItem: it.yup.ui.UIVLayout access$1(it.yup.ui.UIAccordion$AccordionItem)>	<it.yup.ui.UIAccordion$AccordionItem: it.yup.ui.UIVLayout access$1(it.yup.ui.UIAccordion$AccordionItem)>
<it.yup.ui.UIPanel: int getMaxHeight()>	<it.yup.ui.UIPanel: int getMaxHeight()>
i	i
<javax.microedition.lcdui.StringItem: void setDefaultCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.StringItem: void setDefaultCommand(javax.microedition.lcdui.Command)>
(c) 2007-2009 Bluendo srl	(c) 2007-2009 Bluendo srl	@Glider
<it.yup.xmlstream.KXmlParser: int peekType()>	<it.yup.xmlstream.KXmlParser: int peekType()>
buttonb	buttonb
Server type	Server type
<it.yup.ui.UIRadioButtons: int getSelectedIndex()>	<it.yup.ui.UIRadioButtons: int getSelectedIndex()>
/icons/downimage.png	/icons/downimage.png
<it.yup.ui.UIGauge$Ticker: void run()>	<it.yup.ui.UIGauge$Ticker: void run()>
<lampiro.screens.DataFormScreen: void createControls()>	<lampiro.screens.DataFormScreen: void createControls()>
<lampiro.screens.MUCScreen: boolean isMyPacket(it.yup.xml.Element)>	<lampiro.screens.MUCScreen: boolean isMyPacket(it.yup.xml.Element)>
<it.yup.xml.Element: it.yup.xml.Element[] getChildren()>	<it.yup.xml.Element: it.yup.xml.Element[] getChildren()>
<com.jcraft.jzlib.Deflate: void copy_block(int,int,boolean)>	<com.jcraft.jzlib.Deflate: void copy_block(int,int,boolean)>
phone	phone
<com.jcraft.jzlib.StaticTree: void <init>(short[],int[],int,int,int)>	<com.jcraft.jzlib.StaticTree: void <init>(short[],int[],int,int,int)>
complete	complete
<it.yup.ui.UIItem: boolean isSelected()>	<it.yup.ui.UIItem: boolean isSelected()>
<it.yup.util.LogConsumer: void gotMessage(java.lang.String,int)>	<it.yup.util.LogConsumer: void gotMessage(java.lang.String,int)>
<javax.microedition.lcdui.game.GameCanvas: javax.microedition.lcdui.Graphics getGraphics()>	<javax.microedition.lcdui.game.GameCanvas: javax.microedition.lcdui.Graphics getGraphics()>
<it.yup.xmpp.packets.Stanza: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xmpp.packets.Stanza: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
check2	check2
<it.yup.screens.DataFormScreen: void createControls()>	<it.yup.screens.DataFormScreen: void createControls()>
<it.yup.ui.UIMenu: it.yup.ui.UIMenu getParentMenu()>	<it.yup.ui.UIMenu: it.yup.ui.UIMenu getParentMenu()>
Config Error	Config Error
<java.lang.String: void <init>(byte[],java.lang.String)>	<java.lang.String: void <init>(byte[],java.lang.String)>
<org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>	<org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>
<javax.microedition.media.Player: void realize()>	<javax.microedition.media.Player: void realize()>
<it.yup.xmpp.FTSender: void sendFooter()>	<it.yup.xmpp.FTSender: void sendFooter()>
<lampiro.screens.RosterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
Unsupported method	Unsupported method
<java.util.Vector: java.lang.Object lastElement()>	<java.util.Vector: java.lang.Object lastElement()>
<it.yup.util.Utils: byte[] getBytesUtf8(java.lang.String)>	<it.yup.util.Utils: byte[] getBytesUtf8(java.lang.String)>
<lampiro.screens.FTScreen$FTItem: void access$2(lampiro.screens.FTScreen$FTItem,int)>	<lampiro.screens.FTScreen$FTItem: void access$2(lampiro.screens.FTScreen$FTItem,int)>
<it.yup.xmpp.XMPPClient$XmppListener: void removeContact(it.yup.xmpp.Contact)>	<it.yup.xmpp.XMPPClient$XmppListener: void removeContact(it.yup.xmpp.Contact)>
<lampiro.screens.FTScreen$FTItem: void access$8(lampiro.screens.FTScreen$FTItem,int)>	<lampiro.screens.FTScreen$FTItem: void access$8(lampiro.screens.FTScreen$FTItem,int)>
<it.yup.screens.RosterScreen: void sizeChanged(int,int)>	<it.yup.screens.RosterScreen: void sizeChanged(int,int)>
jabber:client	jabber:client
<it.yup.xmlstream.KXmlParser: void nextImpl()>	<it.yup.xmlstream.KXmlParser: void nextImpl()>
<it.yup.ui.UIAccordion: void setLabelGradientSelectedColor(int)>	<it.yup.ui.UIAccordion: void setLabelGradientSelectedColor(int)>
<stream:stream xmlns:stream=\\\"http://etherx.jabber.org/streams\\\" version=\\\"1.0\\\" xmlns=\\\"jabber:client\\\" xml:lang=\\\"en\\\" xmlns:xml=\\\"http://www.w3.org/XML/1998/namespace\\\"	<stream:stream xmlns:stream=\\\"http://etherx.jabber.org/streams\\\" version=\\\"1.0\\\" xmlns=\\\"jabber:client\\\" xml:lang=\\\"en\\\" xmlns:xml=\\\"http://www.w3.org/XML/1998/namespace\\\"
<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<javax.microedition.lcdui.Image: int getHeight()>	<javax.microedition.lcdui.Image: int getHeight()>
<org.bouncycastle.crypto.digests.GeneralDigest: int doFinal(byte[],int)>	<org.bouncycastle.crypto.digests.GeneralDigest: int doFinal(byte[],int)>
<lampiro.screens.FTScreen$FTItem: void <clinit>()>	<lampiro.screens.FTScreen$FTItem: void <clinit>()>
<javax.microedition.lcdui.Graphics: void setFont(javax.microedition.lcdui.Font)>	<javax.microedition.lcdui.Graphics: void setFont(javax.microedition.lcdui.Font)>
http://jabber.org/protocol/caps	http://jabber.org/protocol/caps
<it.yup.xml.Element: java.lang.String getText()>	<it.yup.xml.Element: java.lang.String getText()>
<it.yup.ui.UIScreen: it.yup.ui.UIItem remove(int)>	<it.yup.ui.UIScreen: it.yup.ui.UIItem remove(int)>
<lampiro.screens.RosterScreen: void toggleMenus()>	<lampiro.screens.RosterScreen: void toggleMenus()>
<it.yup.xml.Element: it.yup.xml.Element clone()>	<it.yup.xml.Element: it.yup.xml.Element clone()>
<it.yup.xml.KXmlParser: java.lang.String getAttributeNamespace(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeNamespace(int)>
<lampiro.screens.RegisterScreen: void setStatusLabel()>	<lampiro.screens.RegisterScreen: void setStatusLabel()>
<lampiro.screens.RosterScreen: javax.microedition.lcdui.Image access$12(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: javax.microedition.lcdui.Image access$12(lampiro.screens.RosterScreen)>
<javax.microedition.lcdui.TextBox: void removeCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.TextBox: void removeCommand(javax.microedition.lcdui.Command)>
<com.jcraft.jzlib.Deflate: void bi_windup()>	<com.jcraft.jzlib.Deflate: void bi_windup()>
<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DataFormScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<lampiro.screens.RegisterScreen: boolean access$2(lampiro.screens.RegisterScreen)>	<lampiro.screens.RegisterScreen: boolean access$2(lampiro.screens.RegisterScreen)>
helpMePlease@jabber.bluendo.com	helpMePlease@jabber.bluendo.com
<it.yup.util.RMSIndex: void join(it.yup.util.RMSIndex$Item,it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: void join(it.yup.util.RMSIndex$Item,it.yup.util.RMSIndex$Item)>
USERID	USERID
<javax.microedition.io.ConnectionNotFoundException: java.lang.String getMessage()>	<javax.microedition.io.ConnectionNotFoundException: java.lang.String getMessage()>
<lampiro.screens.SubscribeScreen: lampiro.screens.SubscribeScreen getUserSubscription()>	<lampiro.screens.SubscribeScreen: lampiro.screens.SubscribeScreen getUserSubscription()>
n	n
SECOND	SECOND
<it.yup.ui.UILabel: void setTextLines(java.util.Vector)>	<it.yup.ui.UILabel: void setTextLines(java.util.Vector)>
\\"1.0.2\\"	\\"1.0.2\\"
<it.yup.ui.UIAccordion: it.yup.ui.UIVLayout wrapItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: it.yup.ui.UIVLayout wrapItem(it.yup.ui.UIItem)>
<it.yup.ui.UIPanel: void setModal(boolean)>	<it.yup.ui.UIPanel: void setModal(boolean)>
<lampiro.screens.RegisterScreen: void <clinit>()>	<lampiro.screens.RegisterScreen: void <clinit>()>
<java.lang.String: java.lang.String toUpperCase()>	<java.lang.String: java.lang.String toUpperCase()>
<it.yup.xmpp.packets.Presence: void <init>()>	<it.yup.xmpp.packets.Presence: void <init>()>
error	error
<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient$XmppListener access$2(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient$XmppListener access$2(it.yup.xmpp.XMPPClient)>
<lampiro.screens.MMScreen: void showAudio()>	<lampiro.screens.MMScreen: void showAudio()>
show	show
<it.yup.ui.UIMenu: int getSelectedIndex()>	<it.yup.ui.UIMenu: int getSelectedIndex()>
<it.yup.screens.DebugScreen: void setReturnScreen(javax.microedition.lcdui.Displayable)>	<it.yup.screens.DebugScreen: void setReturnScreen(javax.microedition.lcdui.Displayable)>
http://xmlpull.org/v1/doc/features.html#process-namespaces	http://xmlpull.org/v1/doc/features.html#process-namespaces
<javax.microedition.lcdui.Graphics: void drawString(java.lang.String,int,int,int)>	<javax.microedition.lcdui.Graphics: void drawString(java.lang.String,int,int,int)>
<it.yup.xmpp.Config: void saveCapabilities(java.lang.String,java.lang.String,it.yup.xml.Element)>	<it.yup.xmpp.Config: void saveCapabilities(java.lang.String,java.lang.String,it.yup.xml.Element)>
\\"var\\"	\\"var\\"
<it.yup.xmpp.IqManager: it.yup.xmpp.IqManager getInstance()>	<it.yup.xmpp.IqManager: it.yup.xmpp.IqManager getInstance()>
<it.yup.ui.UIItem: void setLayoutHeight(int)>	<it.yup.ui.UIItem: void setLayoutHeight(int)>
Normal button	Normal button
<java.lang.Thread: void <init>()>	<java.lang.Thread: void <init>()>
<com.jcraft.jzlib.Tree: int bi_reverse(int,int)>	<com.jcraft.jzlib.Tree: int bi_reverse(int,int)>
Group chat name	Group chat name
<it.yup.xmpp.packets.Message: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmpp.packets.Message: void <init>(java.lang.String,java.lang.String)>
<it.yup.xml.KXmlParser: void setFeature(java.lang.String,boolean)>	<it.yup.xml.KXmlParser: void setFeature(java.lang.String,boolean)>
<it.yup.screens.OptionsScreen$1: void <init>(it.yup.screens.OptionsScreen)>	<it.yup.screens.OptionsScreen$1: void <init>(it.yup.screens.OptionsScreen)>
<it.yup.xml.Element: it.yup.xml.Element addElement(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element addElement(java.lang.String,java.lang.String)>
<it.yup.xmpp.FTSender: boolean access$7(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: boolean access$7(it.yup.xmpp.FTSender)>
<java.io.DataOutputStream: void write(byte[])>	<java.io.DataOutputStream: void write(byte[])>
<javax.microedition.lcdui.game.GameCanvas: boolean hasRepeatEvents()>	<javax.microedition.lcdui.game.GameCanvas: boolean hasRepeatEvents()>
<it.yup.ui.UITextPanel: java.lang.String getText()>	<it.yup.ui.UITextPanel: java.lang.String getText()>
Lampiro (http://lampiro.bluendo.com)	Lampiro (http://lampiro.bluendo.com)
<it.yup.xmpp.XMPPClient$XmppListener: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.xmpp.XMPPClient$XmppListener: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>
<it.yup.xml.Element: void writeXml(it.yup.xml.Element,java.lang.String,java.io.OutputStream)>	<it.yup.xml.Element: void writeXml(it.yup.xml.Element,java.lang.String,java.io.OutputStream)>
<it.yup.xmlstream.KXmlParser: boolean isAttributeDefault(int)>	<it.yup.xmlstream.KXmlParser: boolean isAttributeDefault(int)>
<java.lang.StringBuffer: void <init>(java.lang.String)>	<java.lang.StringBuffer: void <init>(java.lang.String)>
<com.jcraft.jzlib.Deflate: int deflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>	<com.jcraft.jzlib.Deflate: int deflateSetDictionary(com.jcraft.jzlib.ZStream,byte[],int)>
combobig1	combobig1
<java.lang.String: boolean startsWith(java.lang.String,int)>	<java.lang.String: boolean startsWith(java.lang.String,int)>
buttona	buttona
<it.yup.tests.UITestMidlet: void destroyApp(boolean)>	<it.yup.tests.UITestMidlet: void destroyApp(boolean)>
<it.yup.xmlstream.KXmlParser: char[] getTextCharacters(int[])>	<it.yup.xmlstream.KXmlParser: char[] getTextCharacters(int[])>
<it.yup.ui.UICheckbox: void setChecked(boolean)>	<it.yup.ui.UICheckbox: void setChecked(boolean)>
<com.jcraft.jzlib.Deflate: void put_short(int)>	<com.jcraft.jzlib.Deflate: void put_short(int)>
<javax.microedition.lcdui.game.GameCanvas: boolean isShown()>	<javax.microedition.lcdui.game.GameCanvas: boolean isShown()>
<it.yup.ui.UIPanel: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: void setSelectedItem(it.yup.ui.UIItem)>
<lampiro.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<lampiro.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>
\\"instructions\\"	\\"instructions\\"
<it.yup.xmlstream.KXmlSerializer: void flush()>	<it.yup.xmlstream.KXmlSerializer: void flush()>
<it.yup.ui.UIGauge: void cancel()>	<it.yup.ui.UIGauge: void cancel()>
<it.yup.ui.UITextPanel: void setTextLines(java.util.Vector)>	<it.yup.ui.UITextPanel: void setTextLines(java.util.Vector)>
<java.io.OutputStream: void write(int)>	<java.io.OutputStream: void write(int)>
_09	_09
PHOTO	PHOTO
<com.jcraft.jzlib.Deflate: int longest_match(int)>	<com.jcraft.jzlib.Deflate: int longest_match(int)>
<it.yup.ui.UITextField: boolean isExpandable()>	<it.yup.ui.UITextField: boolean isExpandable()>
<it.yup.transport.SocketChannel$UTFReader: int read()>	<it.yup.transport.SocketChannel$UTFReader: int read()>
<lampiro.screens.ChatScreen$ConversationEntry: void <init>(java.lang.String,byte)>	<lampiro.screens.ChatScreen$ConversationEntry: void <init>(java.lang.String,byte)>
<it.yup.screens.ChatScreen$ConversationEntry: void <init>(java.util.Vector,byte)>	<it.yup.screens.ChatScreen$ConversationEntry: void <init>(java.util.Vector,byte)>
<it.yup.ui.UICombobox: boolean isSelected(int)>	<it.yup.ui.UICombobox: boolean isSelected(int)>
<it.yup.tests.TestMidlet: void pauseApp()>	<it.yup.tests.TestMidlet: void pauseApp()>
]]>	]]>
<lampiro.screens.RosterScreen: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>
<lampiro.screens.FTScreen$FTItem: java.lang.String access$7(lampiro.screens.FTScreen$FTItem)>	<lampiro.screens.FTScreen$FTItem: java.lang.String access$7(lampiro.screens.FTScreen$FTItem)>
<it.yup.screens.RegisterScreen: void access$1(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: void access$1(it.yup.screens.RegisterScreen)>
<it.yup.xmpp.Task: java.lang.String getFrom()>	<it.yup.xmpp.Task: java.lang.String getFrom()>
<it.yup.xmpp.Roster: it.yup.xmpp.XMPPClient access$0(it.yup.xmpp.Roster)>	<it.yup.xmpp.Roster: it.yup.xmpp.XMPPClient access$0(it.yup.xmpp.Roster)>
<it.yup.ui.UICanvas: void keyReleased(int)>	<it.yup.ui.UICanvas: void keyReleased(int)>
<it.yup.xmlstream.Element: java.lang.String createUniqueId()>	<it.yup.xmlstream.Element: java.lang.String createUniqueId()>
<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem)>
<it.yup.util.RMSIndex: java.util.Vector loadChunk(int)>	<it.yup.util.RMSIndex: java.util.Vector loadChunk(int)>
<java.lang.Math: int abs(int)>	<java.lang.Math: int abs(int)>
<it.yup.util.StderrConsumer: void setExiting()>	<it.yup.util.StderrConsumer: void setExiting()>
<it.yup.tests.RMSTestMidlet: void testLong(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testLong(it.yup.util.RMSIndex)>
<it.yup.ui.UIAccordion: void setItemsColor(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void setItemsColor(it.yup.ui.UIItem,it.yup.ui.UIItem)>
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace(java.lang.String)>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace(java.lang.String)>
<it.yup.ui.UITextField: boolean isDirty()>	<it.yup.ui.UITextField: boolean isDirty()>
<it.yup.ui.UIItem: boolean keyPressed(int)>	<it.yup.ui.UIItem: boolean keyPressed(int)>
<lampiro.screens.OptionsScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.OptionsScreen: void itemAction(it.yup.ui.UIItem)>
t	t
<it.yup.util.RMSIndex: void delete(byte[])>	<it.yup.util.RMSIndex: void delete(byte[])>
<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener,lampiro.screens.RosterScreen$FileReceiveScreen)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void <init>(it.yup.xmpp.Contact,it.yup.xmpp.FTReceiver$OpenListener,lampiro.screens.RosterScreen$FileReceiveScreen)>
<it.yup.screens.SubscriptionConfirmAlert: void <clinit>()>	<it.yup.screens.SubscriptionConfirmAlert: void <clinit>()>
<it.yup.xmlstream.Element: void <init>(it.yup.xmlstream.Element)>	<it.yup.xmlstream.Element: void <init>(it.yup.xmlstream.Element)>
<lampiro.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>	<lampiro.screens.RosterScreen: void updateContact(it.yup.xmpp.Contact,int)>
Subscription	Subscription
<javax.microedition.lcdui.Alert: java.lang.String getString()>	<javax.microedition.lcdui.Alert: java.lang.String getString()>
muc#roomconfig_enablelogging	muc#roomconfig_enablelogging
var	var
standalone=\'	standalone=\'
<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void <init>(lampiro.screens.GatewayRegisterScreen)>	<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void <init>(lampiro.screens.GatewayRegisterScreen)>
<it.yup.xmlstream.KXmlParser: void exception(java.lang.String)>	<it.yup.xmlstream.KXmlParser: void exception(java.lang.String)>
<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>
<<\\"ContMenu has been pressed: \\">>	<<\\"ContMenu has been pressed: \\">>
<it.yup.xmpp.Roster: void updateGateways(it.yup.xmpp.Contact)>	<it.yup.xmpp.Roster: void updateGateways(it.yup.xmpp.Contact)>
action	action
<it.yup.xmpp.XMPPClient$XmppListener: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>	<it.yup.xmpp.XMPPClient$XmppListener: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>
http://jabber.org/protocol/commands	http://jabber.org/protocol/commands
<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator)>
<javax.microedition.lcdui.Display: void setCurrent(javax.microedition.lcdui.Alert,javax.microedition.lcdui.Displayable)>	<javax.microedition.lcdui.Display: void setCurrent(javax.microedition.lcdui.Alert,javax.microedition.lcdui.Displayable)>
<it.yup.xmpp.XMPPClient$XmppListener: void rosterRetrieved()>	<it.yup.xmpp.XMPPClient$XmppListener: void rosterRetrieved()>
Select	Select
<lampiro.screens.RosterScreen$IQResultListener2: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener2: void handleError(it.yup.xml.Element)>
<it.yup.screens.ChatScreen: void keyPressed(int)>	<it.yup.screens.ChatScreen: void keyPressed(int)>
<it.yup.ui.UIButton: void <init>(javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UIButton: void <init>(javax.microedition.lcdui.Image,java.lang.String)>
<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int,java.util.Vector)>	<it.yup.ui.UIAccordion: void insertItem(it.yup.ui.UIItem,int,java.util.Vector)>
<java.io.InputStream: int read()>	<java.io.InputStream: int read()>
<it.yup.ui.UIHLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIHLayout: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmpp.XMPPClient$1: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$1: void <init>(it.yup.xmpp.XMPPClient)>
http://	http://
<javax.microedition.lcdui.Canvas: int getHeight()>	<javax.microedition.lcdui.Canvas: int getHeight()>
<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$8(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$8(it.yup.screens.RegisterScreen)>
<it.yup.util.Utils: void hexDigit(java.io.PrintStream,byte)>	<it.yup.util.Utils: void hexDigit(java.io.PrintStream,byte)>
Configuration	Configuration
<it.yup.ui.UICanvas$1: void <init>(it.yup.ui.UICanvas,it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas$1: void <init>(it.yup.ui.UICanvas,it.yup.ui.UIScreen)>
gw	gw
presence	presence
<java.lang.String: java.lang.String valueOf(long)>	<java.lang.String: java.lang.String valueOf(long)>
<it.yup.xmlstream.Element: byte[] toXml()>	<it.yup.xmlstream.Element: byte[] toXml()>
Cannot set default namespace for elements in no namespace	Cannot set default namespace for elements in no namespace
<it.yup.xml.KXmlSerializer: java.lang.String getNamespace()>	<it.yup.xml.KXmlSerializer: java.lang.String getNamespace()>
<it.yup.xmpp.IqManager: void <clinit>()>	<it.yup.xmpp.IqManager: void <clinit>()>
<java.util.Timer: void <init>()>	<java.util.Timer: void <init>()>
<it.yup.ui.UIScreen: void setGraphics(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIScreen: void setGraphics(javax.microedition.lcdui.Graphics)>
<it.yup.ui.UIPanel: void addItem(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: void addItem(it.yup.ui.UIItem)>
<it.yup.ui.UICombobox: void setDirty(boolean)>	<it.yup.ui.UICombobox: void setDirty(boolean)>
<it.yup.ui.UIPanel: int removeItem(it.yup.ui.UIItem)>	<it.yup.ui.UIPanel: int removeItem(it.yup.ui.UIItem)>
list-single	list-single
NICKNAME	NICKNAME
<it.yup.xmpp.SimpleDataFormExecutor: byte getStatus()>	<it.yup.xmpp.SimpleDataFormExecutor: byte getStatus()>
<javax.microedition.media.Player: void close()>	<javax.microedition.media.Player: void close()>
Command canceled: awaiting a response from the server	Command canceled: awaiting a response from the server
<javax.microedition.lcdui.List: int getSelectedIndex()>	<javax.microedition.lcdui.List: int getSelectedIndex()>
x	x
<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener1)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener1)>
<lampiro.screens.ChatScreen: void showNotify()>	<lampiro.screens.ChatScreen: void showNotify()>
<java.util.Hashtable: java.util.Enumeration elements()>	<java.util.Hashtable: java.util.Enumeration elements()>
<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$PresenceHandler: void <init>(it.yup.xmpp.XMPPClient)>
<it.yup.xmpp.XMPPClient$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$PacketListener1: void packetReceived(it.yup.xml.Element)>
<it.yup.tests.XMLTestMidlet: void testEnDecode()>	<it.yup.tests.XMLTestMidlet: void testEnDecode()>
y	y
AUTHENTICATE:	AUTHENTICATE:
<it.yup.util.XMPPConsumer: void <init>()>	<it.yup.util.XMPPConsumer: void <init>()>
<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener2)>	<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener2)>
<lampiro.screens.AddContactScreen: void access$1(lampiro.screens.AddContactScreen,java.lang.String,java.lang.String,java.lang.String)>	<lampiro.screens.AddContactScreen: void access$1(lampiro.screens.AddContactScreen,java.lang.String,java.lang.String,java.lang.String)>
<it.yup.ui.UIItem: boolean askRepaint()>	<it.yup.ui.UIItem: boolean askRepaint()>
<it.yup.xmpp.FTSender: int access$3(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: int access$3(it.yup.xmpp.FTSender)>
<it.yup.ui.UIItem: int getGradientSelectedColor()>	<it.yup.ui.UIItem: int getGradientSelectedColor()>
<it.yup.ui.UILayout: void setSelectedIndex(int)>	<it.yup.ui.UILayout: void setSelectedIndex(int)>
<javax.microedition.media.Player: void prefetch()>	<javax.microedition.media.Player: void prefetch()>
muc#roomconfig_changesubject	muc#roomconfig_changesubject
<lampiro.screens.MUCScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>	<lampiro.screens.MUCScreen: lampiro.screens.ChatScreen$ConversationEntry wrapMessage(java.lang.String[])>
<it.yup.xmlstream.SocketStream: void run()>	<it.yup.xmlstream.SocketStream: void run()>
{	{
<it.yup.xmpp.Config: java.lang.String getProperty(short)>	<it.yup.xmpp.Config: java.lang.String getProperty(short)>
<javax.microedition.lcdui.Alert: void setTimeout(int)>	<javax.microedition.lcdui.Alert: void setTimeout(int)>
<it.yup.xml.BProcessor: int unlen(java.io.InputStream)>	<it.yup.xml.BProcessor: int unlen(java.io.InputStream)>
\\"error\\"	\\"error\\"
<lampiro.screens.AlbumScreen: void loadAlbum()>	<lampiro.screens.AlbumScreen: void loadAlbum()>
<lampiro.screens.RosterScreen: it.yup.ui.UIItem getSeparator()>	<lampiro.screens.RosterScreen: it.yup.ui.UIItem getSeparator()>
<it.yup.ui.UIPanel: void removeItemAt(int)>	<it.yup.ui.UIPanel: void removeItemAt(int)>
<it.yup.xmpp.IqManager: void <init>()>	<it.yup.xmpp.IqManager: void <init>()>
required	required
<lampiro.screens.ChatScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.ChatScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>
<lampiro.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>
<it.yup.xml.BProcessor: void <init>()>	<it.yup.xml.BProcessor: void <init>()>
<java.util.Hashtable: int size()>	<java.util.Hashtable: int size()>
<lampiro.screens.RegisterScreen: void xmppLogin(boolean)>	<lampiro.screens.RegisterScreen: void xmppLogin(boolean)>
<lampiro.screens.KeyScreen: boolean keyPressed(int)>	<lampiro.screens.KeyScreen: boolean keyPressed(int)>
<com.jcraft.jzlib.ZStreamException: void <init>(java.lang.String)>	<com.jcraft.jzlib.ZStreamException: void <init>(java.lang.String)>
gineprando2	gineprando2
<it.yup.ui.UIUtils: int medColor(int,int)>	<it.yup.ui.UIUtils: int medColor(int,int)>
oversubscribed distance tree	oversubscribed distance tree
<java.lang.Runtime: long freeMemory()>	<java.lang.Runtime: long freeMemory()>
<lampiro.screens.MessageComposerScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.MessageComposerScreen: void itemAction(it.yup.ui.UIItem)>
in	in
<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient)>
j2me	j2me
<it.yup.ui.UICanvas: void hide(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void hide(it.yup.ui.UIScreen)>
oversubscribed dynamic bit lengths tree	oversubscribed dynamic bit lengths tree
<it.yup.ui.UIUtils: javax.microedition.lcdui.Image imageResize(javax.microedition.lcdui.Image,int,int)>	<it.yup.ui.UIUtils: javax.microedition.lcdui.Image imageResize(javax.microedition.lcdui.Image,int,int)>
<it.yup.ui.UICanvas$1: void run()>	<it.yup.ui.UICanvas$1: void run()>
<it.yup.ui.UICanvas: void show(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void show(it.yup.ui.UIScreen)>
<java.util.Vector: void insertElementAt(java.lang.Object,int)>	<java.util.Vector: void insertElementAt(java.lang.Object,int)>
&lt;	&lt;
<lampiro.screens.DataFormScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.DataFormScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
:P	:P
<it.yup.xml.Element: void <init>(it.yup.xml.Element)>	<it.yup.xml.Element: void <init>(it.yup.xml.Element)>
<it.yup.xml.KXmlParser: int peek(int)>	<it.yup.xml.KXmlParser: int peek(int)>
<javax.microedition.lcdui.Form: int append(javax.microedition.lcdui.Item)>	<javax.microedition.lcdui.Form: int append(javax.microedition.lcdui.Item)>
<it.yup.xmpp.IQResultListener: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.IQResultListener: void handleError(it.yup.xml.Element)>
BINVAL	BINVAL
Big:	Big:
<lampiro.screens.RosterScreen: boolean isMicOn()>	<lampiro.screens.RosterScreen: boolean isMicOn()>
&quot;	&quot;
<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$RegisterHandler: void <init>(lampiro.screens.RosterScreen)>
<lampiro.screens.AlbumScreen: lampiro.screens.AlbumScreen getInstance()>	<lampiro.screens.AlbumScreen: lampiro.screens.AlbumScreen getInstance()>
<java.lang.IndexOutOfBoundsException: void <init>()>	<java.lang.IndexOutOfBoundsException: void <init>()>
<it.yup.xmpp.FTSender: void access$5(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: void access$5(it.yup.xmpp.FTSender)>
<it.yup.ui.UICombobox$UIComboScreen: boolean keyPressed(int)>	<it.yup.ui.UICombobox$UIComboScreen: boolean keyPressed(int)>
/icons/unchecked.png	/icons/unchecked.png
<it.yup.xml.KXmlSerializer: void docdecl(java.lang.String)>	<it.yup.xml.KXmlSerializer: void docdecl(java.lang.String)>
<lampiro.screens.SplashScreen$UISplashTextField: void <init>(lampiro.screens.SplashScreen,java.lang.String,java.lang.String,int,int)>	<lampiro.screens.SplashScreen$UISplashTextField: void <init>(lampiro.screens.SplashScreen,java.lang.String,java.lang.String,int,int)>
charset	charset
<it.yup.xmpp.packets.Presence: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.Presence: void <init>(it.yup.xml.Element)>
<it.yup.screens.RegisterScreen: it.yup.screens.RegisterScreen getInstance()>	<it.yup.screens.RegisterScreen: it.yup.screens.RegisterScreen getInstance()>
_07	_07
<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterDataFormExecutor: void handleResult(it.yup.xml.Element)>
<java.util.Hashtable: java.util.Enumeration keys()>	<java.util.Hashtable: java.util.Enumeration keys()>
subject	subject
sessionid	sessionid
<it.yup.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>	<it.yup.screens.DataFormScreen: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xmpp.DataFormListener)>
<java.io.DataInputStream: int readInt()>	<java.io.DataInputStream: int readInt()>
<lampiro.screens.ChatScreen$MUCUpdateListener: void handleResult(it.yup.xml.Element)>	<lampiro.screens.ChatScreen$MUCUpdateListener: void handleResult(it.yup.xml.Element)>
<com.jcraft.jzlib.ZInputStream: int read()>	<com.jcraft.jzlib.ZInputStream: int read()>
http://jabber.org/protocol/disco#info	http://jabber.org/protocol/disco#info
failure	failure
<lampiro.screens.ChatScreen: java.lang.String getPrintableStatus()>	<lampiro.screens.ChatScreen: java.lang.String getPrintableStatus()>
/icons/contact_add_always.png	/icons/contact_add_always.png
caps	caps
<lampiro.screens.FTScreen: void ftFinished(java.lang.Object)>	<lampiro.screens.FTScreen: void ftFinished(java.lang.Object)>
<it.yup.xml.KXmlSerializer: void cdsect(java.lang.String)>	<it.yup.xml.KXmlSerializer: void cdsect(java.lang.String)>
<java.lang.String: int indexOf(int,int)>	<java.lang.String: int indexOf(int,int)>
Lampiro.jar	Lampiro.jar
<it.yup.ui.UIScreen: void setMenu(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: void setMenu(it.yup.ui.UIMenu)>
<it.yup.xml.Element: it.yup.xml.Element getChildByName(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element getChildByName(java.lang.String,java.lang.String)>
<javax.microedition.lcdui.Alert: void <init>(java.lang.String)>	<javax.microedition.lcdui.Alert: void <init>(java.lang.String)>
<lampiro.screens.RosterScreen$UIGroup: void <clinit>()>	<lampiro.screens.RosterScreen$UIGroup: void <clinit>()>
<javax.microedition.lcdui.Command: void <init>(java.lang.String,int,int)>	<javax.microedition.lcdui.Command: void <init>(java.lang.String,int,int)>
<lampiro.screens.OptionsScreen: void saveOptions()>	<lampiro.screens.OptionsScreen: void saveOptions()>
<it.yup.ui.UICombobox: void setSelected(boolean)>	<it.yup.ui.UICombobox: void setSelected(boolean)>
<it.yup.ui.UICombobox$UIComboScreen: it.yup.ui.UIPanel access$0(it.yup.ui.UICombobox$UIComboScreen)>	<it.yup.ui.UICombobox$UIComboScreen: it.yup.ui.UIPanel access$0(it.yup.ui.UICombobox$UIComboScreen)>
<it.yup.screens.DataFormScreen: void itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.DataFormScreen: void itemStateChanged(javax.microedition.lcdui.Item)>
<lampiro.screens.RosterScreen: void hideNotify()>	<lampiro.screens.RosterScreen: void hideNotify()>
<it.yup.xmpp.Roster: void loadGateways()>	<it.yup.xmpp.Roster: void loadGateways()>
<lampiro.screens.GrpMessageComposerScreen: void <init>(lampiro.screens.RosterScreen$UIGroup,int)>	<lampiro.screens.GrpMessageComposerScreen: void <init>(lampiro.screens.RosterScreen$UIGroup,int)>
<javax.microedition.io.Connector: javax.microedition.io.Connection open(java.lang.String)>	<javax.microedition.io.Connector: javax.microedition.io.Connection open(java.lang.String)>
<it.yup.ui.UILabel: void paintLine(javax.microedition.lcdui.Graphics,int,int,javax.microedition.lcdui.Image,java.lang.String)>	<it.yup.ui.UILabel: void paintLine(javax.microedition.lcdui.Graphics,int,int,javax.microedition.lcdui.Image,java.lang.String)>
<it.yup.ui.UIScreen: boolean paint(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIScreen: boolean paint(javax.microedition.lcdui.Graphics)>
<lampiro.screens.ChatScreen: boolean updateResConversation(java.lang.String)>	<lampiro.screens.ChatScreen: boolean updateResConversation(java.lang.String)>
<it.yup.ui.UICanvas: it.yup.ui.UIScreen getCurrentScreen()>	<it.yup.ui.UICanvas: it.yup.ui.UIScreen getCurrentScreen()>
Task canceled	Task canceled
<it.yup.transport.SocketChannel: boolean isOpen()>	<it.yup.transport.SocketChannel: boolean isOpen()>
<it.yup.tests.XMPPTestClient$Listener: void <init>(it.yup.tests.XMPPTestClient)>	<it.yup.tests.XMPPTestClient$Listener: void <init>(it.yup.tests.XMPPTestClient)>
<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,int)>	<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,int)>
<it.yup.xmpp.Contact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>	<it.yup.xmpp.Contact: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
<it.yup.xmlstream.SASLAuthenticator: void <init>()>	<it.yup.xmlstream.SASLAuthenticator: void <init>()>
<it.yup.ui.UIPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>	<it.yup.ui.UIPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>
<lampiro.screens.RosterScreen: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.RosterScreen: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>
<javax.microedition.lcdui.ChoiceGroup: int getSelectedIndex()>	<javax.microedition.lcdui.ChoiceGroup: int getSelectedIndex()>
<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen getInstance()>	<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen getInstance()>
CANCEL	CANCEL
connection lost	connection lost
afterC	afterC
<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>	<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>
<it.yup.xmpp.Config: it.yup.xmpp.Config getInstance()>	<it.yup.xmpp.Config: it.yup.xmpp.Config getInstance()>
<it.yup.xml.KXmlParser: int parseLegacy(boolean)>	<it.yup.xml.KXmlParser: int parseLegacy(boolean)>
_*	_*
<it.yup.xml.Element: it.yup.xml.Element[] getChildrenByName(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element[] getChildrenByName(java.lang.String,java.lang.String)>
username	username
<it.yup.ui.UITextField: void setMaxHeight(int)>	<it.yup.ui.UITextField: void setMaxHeight(int)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>	<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<it.yup.ui.UIVLayout: void insert(it.yup.ui.UIItem,int,int,int)>	<it.yup.ui.UIVLayout: void insert(it.yup.ui.UIItem,int,int,int)>
<lampiro.screens.ShowMMScreen$1: void <init>(lampiro.screens.ShowMMScreen)>	<lampiro.screens.ShowMMScreen$1: void <init>(lampiro.screens.ShowMMScreen)>
URL Error	URL Error
<it.yup.xmlstream.KXmlSerializer: java.lang.String getNamespace()>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getNamespace()>
<it.yup.ui.UIMenu: it.yup.ui.UIItem remove(int)>	<it.yup.ui.UIMenu: it.yup.ui.UIItem remove(int)>
<it.yup.xmlstream.KXmlSerializer: void writeEscaped(java.lang.String,int)>	<it.yup.xmlstream.KXmlSerializer: void writeEscaped(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>	<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
400	400
<it.yup.screens.OptionsScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.OptionsScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.ui.UILayout: void <init>(int)>	<it.yup.ui.UILayout: void <init>(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>	<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
rstr_	rstr_
avail_out=	avail_out=
unterminated entity ref	unterminated entity ref
<it.yup.xmpp.Roster$RosterX: void <init>(it.yup.xmpp.Roster)>	<it.yup.xmpp.Roster$RosterX: void <init>(it.yup.xmpp.Roster)>
<com.jcraft.jzlib.ZStream: int deflateEnd()>	<com.jcraft.jzlib.ZStream: int deflateEnd()>
<lampiro.screens.RosterScreen$IQResultListener1: void getBasePath(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener1: void getBasePath(it.yup.xml.Element)>
<it.yup.ui.UITextField: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UITextField: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.util.RMSIndex: void deleteSplittedRecords(int)>	<it.yup.util.RMSIndex: void deleteSplittedRecords(int)>
afterG	afterG
<it.yup.xml.KXmlSerializer: void entityRef(java.lang.String)>	<it.yup.xml.KXmlSerializer: void entityRef(java.lang.String)>
<it.yup.ui.Semaphore: boolean attempt(long)>	<it.yup.ui.Semaphore: boolean attempt(long)>
<it.yup.xml.KXmlParser: void exception(java.lang.String)>	<it.yup.xml.KXmlParser: void exception(java.lang.String)>
<it.yup.xmpp.Config: void loadFromStorage()>	<it.yup.xmpp.Config: void loadFromStorage()>
<com.jcraft.jzlib.ZInputStream: long getTotalOut()>	<com.jcraft.jzlib.ZInputStream: long getTotalOut()>
<javax.microedition.lcdui.Canvas: void repaint()>	<javax.microedition.lcdui.Canvas: void repaint()>
<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender)>
<lampiro.screens.SubscribeScreen: lampiro.screens.SubscribeScreen getComponentSubscription(it.yup.xmpp.Contact)>	<lampiro.screens.SubscribeScreen: lampiro.screens.SubscribeScreen getComponentSubscription(it.yup.xmpp.Contact)>
<it.yup.ui.UIItem: void setGradientSelectedColor(int)>	<it.yup.ui.UIItem: void setGradientSelectedColor(int)>
<it.yup.xmpp.Contact: java.lang.String userhost(java.lang.String)>	<it.yup.xmpp.Contact: java.lang.String userhost(java.lang.String)>
<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int,boolean)>	<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int,boolean)>
\\"jid-single\\"	\\"jid-single\\"
<<\\"Invalid byte received on text stream: \\">>	<<\\"Invalid byte received on text stream: \\">>	@Compression
<it.yup.xmlstream.BasicXmlStream: java.util.Vector getPacketsToSend(boolean)>	<it.yup.xmlstream.BasicXmlStream: java.util.Vector getPacketsToSend(boolean)>
<java.io.PrintStream: void println(java.lang.String)>	<java.io.PrintStream: void println(java.lang.String)>
<it.yup.screens.RegisterScreen: void access$10(it.yup.screens.RegisterScreen,it.yup.xmlstream.EventQueryRegistration)>	<it.yup.screens.RegisterScreen: void access$10(it.yup.screens.RegisterScreen,it.yup.xmlstream.EventQueryRegistration)>
<it.yup.screens.DeleteContactAlert: void <init>(it.yup.xmpp.Contact)>	<it.yup.screens.DeleteContactAlert: void <init>(it.yup.xmpp.Contact)>
<lampiro.screens.GatewayRegisterScreen: void <clinit>()>	<lampiro.screens.GatewayRegisterScreen: void <clinit>()>
<lampiro.screens.RegisterScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.RegisterScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.ui.UIMenu: void setAbsoluteY(int)>	<it.yup.ui.UIMenu: void setAbsoluteY(int)>
jabber:iq:gateway	jabber:iq:gateway
<it.yup.ui.UIPanel: boolean isModal()>	<it.yup.ui.UIPanel: boolean isModal()>
<com.jcraft.jzlib.Deflate: int build_bl_tree()>	<com.jcraft.jzlib.Deflate: int build_bl_tree()>
<com.jcraft.jzlib.Deflate: void <clinit>()>	<com.jcraft.jzlib.Deflate: void <clinit>()>
<com.jcraft.jzlib.Tree: void <clinit>()>	<com.jcraft.jzlib.Tree: void <clinit>()>
<it.yup.ui.UICanvas: boolean handlePointEvent(int,int,it.yup.ui.UIScreen,boolean)>	<it.yup.ui.UICanvas: boolean handlePointEvent(int,int,it.yup.ui.UIScreen,boolean)>
Yes	Yes
<lampiro.screens.TaskListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.TaskListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
logging	logging
file error	file error
<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence(java.lang.String)>	<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence(java.lang.String)>
<it.yup.xmpp.packets.IQResultListener: void packetReceived(it.yup.xmlstream.Element)>	<it.yup.xmpp.packets.IQResultListener: void packetReceived(it.yup.xmlstream.Element)>
gino	gino
<it.yup.screens.SplashScreen: void <init>()>	<it.yup.screens.SplashScreen: void <init>()>
<it.yup.xmpp.FTReceiver$FTREventHandler: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$FTREventHandler: void chunkReceived(int,int,it.yup.xmpp.FTReceiver$OpenListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
item #	item #
<it.yup.xmpp.Contact: it.yup.xml.Element store()>	<it.yup.xmpp.Contact: it.yup.xml.Element store()>
<it.yup.screens.RegisterScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>
<it.yup.screens.DataFormScreen: it.yup.util.ResourceManager access$0()>	<it.yup.screens.DataFormScreen: it.yup.util.ResourceManager access$0()>
<it.yup.xml.KXmlParser: int getColumnNumber()>	<it.yup.xml.KXmlParser: int getColumnNumber()>
<it.yup.xml.KXmlParser: java.lang.String getPrefix()>	<it.yup.xml.KXmlParser: java.lang.String getPrefix()>
>:)	>:)
Jabber Server	Jabber Server
<lampiro.screens.RosterScreen$Thread1: void run()>	<lampiro.screens.RosterScreen$Thread1: void run()>
501	501
<lampiro.screens.ChatScreen$MUCUpdateListener: void handleError(it.yup.xml.Element)>	<lampiro.screens.ChatScreen$MUCUpdateListener: void handleError(it.yup.xml.Element)>
<it.yup.xmpp.XMPPClient: void <clinit>()>	<it.yup.xmpp.XMPPClient: void <clinit>()>
<java.util.Calendar: int get(int)>	<java.util.Calendar: int get(int)>
<javax.microedition.media.Manager: javax.microedition.media.Player createPlayer(java.lang.String)>	<javax.microedition.media.Manager: javax.microedition.media.Player createPlayer(java.lang.String)>
creator	creator
FN	FN
<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener2)>	<it.yup.xmpp.FTSender$IQResultListener2: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener2)>
<javax.microedition.media.control.RecordControl: void setRecordStream(java.io.OutputStream)>	<javax.microedition.media.control.RecordControl: void setRecordStream(java.io.OutputStream)>
<it.yup.xml.KXmlProcessor: void <init>()>	<it.yup.xml.KXmlProcessor: void <init>()>
<it.yup.xmpp.Contact: boolean isVisible()>	<it.yup.xmpp.Contact: boolean isVisible()>
<it.yup.ui.UIScreen: java.util.Vector getPaintedItems()>	<it.yup.ui.UIScreen: java.util.Vector getPaintedItems()>
<it.yup.xmlstream.KXmlParser: void setInput(java.io.Reader)>	<it.yup.xmlstream.KXmlParser: void setInput(java.io.Reader)>
EMAIL	EMAIL
<com.jcraft.jzlib.Deflate: void lm_init()>	<com.jcraft.jzlib.Deflate: void lm_init()>
<java.lang.String: byte[] getBytes(java.lang.String)>	<java.lang.String: byte[] getBytes(java.lang.String)>
<lampiro.screens.FTScreen: boolean keyPressed(int)>	<lampiro.screens.FTScreen: boolean keyPressed(int)>
<com.jcraft.jzlib.Deflate: void bi_flush()>	<com.jcraft.jzlib.Deflate: void bi_flush()>
<java.lang.String: char charAt(int)>	<java.lang.String: char charAt(int)>
<javax.microedition.rms.RecordStore: void setRecord(int,byte[],int,int)>	<javax.microedition.rms.RecordStore: void setRecord(int,byte[],int,int)>
<lampiro.screens.ShowMMScreen: int getFileType(java.lang.String)>	<lampiro.screens.ShowMMScreen: int getFileType(java.lang.String)>
<it.yup.ui.UIPanel: boolean keyPressed(int)>	<it.yup.ui.UIPanel: boolean keyPressed(int)>
<it.yup.tests.XMPPTestClient$Echoer: void <init>(it.yup.tests.XMPPTestClient)>	<it.yup.tests.XMPPTestClient$Echoer: void <init>(it.yup.tests.XMPPTestClient)>
<it.yup.xmlstream.KXmlSerializer: void setFeature(java.lang.String,boolean)>	<it.yup.xmlstream.KXmlSerializer: void setFeature(java.lang.String,boolean)>
_04	_04
<it.yup.util.Utils: java.lang.String getStringUTF8(byte[])>	<it.yup.util.Utils: java.lang.String getStringUTF8(byte[])>
<it.yup.ui.UICheckbox: boolean keyPressed(int)>	<it.yup.ui.UICheckbox: boolean keyPressed(int)>
<com.jcraft.jzlib.ZInputStream: long getTotalIn()>	<com.jcraft.jzlib.ZInputStream: long getTotalIn()>
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeName(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeName(int)>
<it.yup.ui.UIItem: int getType()>	<it.yup.ui.UIItem: int getType()>
<it.yup.ui.UITextField: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UITextField: int getHeight(javax.microedition.lcdui.Graphics)>
<it.yup.xml.BSerializer: void write(it.yup.xml.Element,org.xmlpull.v1.XmlSerializer)>	<it.yup.xml.BSerializer: void write(it.yup.xml.Element,org.xmlpull.v1.XmlSerializer)>
<it.yup.xmpp.IqManager: void handleAnswer(it.yup.xml.Element,boolean)>	<it.yup.xmpp.IqManager: void handleAnswer(it.yup.xml.Element,boolean)>
<it.yup.ui.UILabel: java.lang.String getText()>	<it.yup.ui.UILabel: java.lang.String getText()>
<javax.microedition.media.control.VideoControl: void setDisplayFullScreen(boolean)>	<javax.microedition.media.control.VideoControl: void setDisplayFullScreen(boolean)>
<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemStateListener1)>	<it.yup.screens.MessageComposerScreen$ItemStateListener1: void <init>(it.yup.screens.MessageComposerScreen,it.yup.screens.MessageComposerScreen$ItemStateListener1)>
<it.yup.tests.RMSTestMidlet: void testLength(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testLength(it.yup.util.RMSIndex)>
<it.yup.screens.DataFormScreen: void <clinit>()>	<it.yup.screens.DataFormScreen: void <clinit>()>
too many length or distance symbols	too many length or distance symbols
Combo3	Combo3
:-@	:-@
<it.yup.xml.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>	<it.yup.xml.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>
<lampiro.screens.RosterScreen$UIGroup: void toggleMenus()>	<lampiro.screens.RosterScreen$UIGroup: void toggleMenus()>
<it.yup.util.Utils: boolean compareTo(it.yup.xmpp.Contact,it.yup.xmpp.Contact)>	<it.yup.util.Utils: boolean compareTo(it.yup.xmpp.Contact,it.yup.xmpp.Contact)>
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>
<it.yup.xmpp.XMPPClient: java.lang.String access$4(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient: java.lang.String access$4(it.yup.xmpp.XMPPClient)>
<java.lang.StringBuilder: void <init>(java.lang.String)>	<java.lang.StringBuilder: void <init>(java.lang.String)>
<it.yup.ui.UICombobox: void setSelectedIndex(int)>	<it.yup.ui.UICombobox: void setSelectedIndex(int)>
oversubscribed literal/length tree	oversubscribed literal/length tree
<lampiro.screens.SubscribeScreen: void <init>()>	<lampiro.screens.SubscribeScreen: void <init>()>
<lampiro.screens.ShowMMScreen: void <clinit>()>	<lampiro.screens.ShowMMScreen: void <clinit>()>
<com.jcraft.jzlib.ZStream: int inflateInit(int)>	<com.jcraft.jzlib.ZStream: int inflateInit(int)>
<it.yup.ui.UIItem: it.yup.ui.UIMenu getSubmenu()>	<it.yup.ui.UIItem: it.yup.ui.UIMenu getSubmenu()>
<it.yup.ui.UIUtils: void rescalaArray(int[],int[],int,int,int,int,int,int,int)>	<it.yup.ui.UIUtils: void rescalaArray(int[],int[],int,int,int,int,int,int,int)>
<it.yup.ui.UILabel: int getAnchorPoint()>	<it.yup.ui.UILabel: int getAnchorPoint()>
/emo/	/emo/
urn:ietf:params:xml:ns:xmpp-bind	urn:ietf:params:xml:ns:xmpp-bind
<javax.microedition.lcdui.Image: int getWidth()>	<javax.microedition.lcdui.Image: int getWidth()>
<it.yup.ui.UITextPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UITextPanel: void paint(javax.microedition.lcdui.Graphics,int,int)>
\\"text-private\\"	\\"text-private\\"
<it.yup.xmpp.XMPPClient$MessageHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$MessageHandler: void packetReceived(it.yup.xml.Element)>
<javax.microedition.io.HttpConnection: void setRequestProperty(java.lang.String,java.lang.String)>	<javax.microedition.io.HttpConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<it.yup.transport.SocketChannel: void close()>	<it.yup.transport.SocketChannel: void close()>
\\"online\\"	\\"online\\"
<it.yup.xmpp.Roster: void addGatewayGroup(it.yup.xmpp.Contact,it.yup.xml.Element)>	<it.yup.xmpp.Roster: void addGatewayGroup(it.yup.xmpp.Contact,it.yup.xml.Element)>
<java.io.InputStream: int read(byte[])>	<java.io.InputStream: int read(byte[])>
\\"xa\\"	\\"xa\\"
<it.yup.ui.UIItem: void <init>()>	<it.yup.ui.UIItem: void <init>()>
<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex,it.yup.util.RMSIndex$DefaultUTF8Comparator)>	<it.yup.util.RMSIndex$DefaultUTF8Comparator: void <init>(it.yup.util.RMSIndex,it.yup.util.RMSIndex$DefaultUTF8Comparator)>
<java.io.InputStream: void mark(int)>	<java.io.InputStream: void mark(int)>
<javax.microedition.lcdui.TextBox: java.lang.String getString()>	<javax.microedition.lcdui.TextBox: java.lang.String getString()>
<lampiro.screens.GrpMessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.GrpMessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.xmlstream.KXmlParser: java.lang.String get(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String get(int)>
<it.yup.xml.BProcessor: java.lang.Object parse(java.io.InputStream,java.lang.String)>	<it.yup.xml.BProcessor: java.lang.Object parse(java.io.InputStream,java.lang.String)>
<javax.microedition.lcdui.Alert: void setType(javax.microedition.lcdui.AlertType)>	<javax.microedition.lcdui.Alert: void setType(javax.microedition.lcdui.AlertType)>
<it.yup.ui.UILabel: void computeTextLines(javax.microedition.lcdui.Font,int)>	<it.yup.ui.UILabel: void computeTextLines(javax.microedition.lcdui.Font,int)>
<it.yup.xmpp.CommandExecutor: byte getStatus()>	<it.yup.xmpp.CommandExecutor: byte getStatus()>
<it.yup.xml.KXmlParser: java.lang.String getInputEncoding()>	<it.yup.xml.KXmlParser: java.lang.String getInputEncoding()>
field	field
<it.yup.screens.ChatScreen: void <clinit>()>	<it.yup.screens.ChatScreen: void <clinit>()>
instructions	instructions
<it.yup.ui.UICanvas: void setupdefaultKeyCode()>	<it.yup.ui.UICanvas: void setupdefaultKeyCode()>
<it.yup.ui.UICanvas: void access$0(it.yup.ui.UICanvas,it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void access$0(it.yup.ui.UICanvas,it.yup.ui.UIScreen)>
delay	delay
<it.yup.ui.UIButton: void setPressed(boolean)>	<it.yup.ui.UIButton: void setPressed(boolean)>
<it.yup.transport.SocketChannel$UTFReader: int read(char[],int,int)>	<it.yup.transport.SocketChannel$UTFReader: int read(char[],int,int)>
<it.yup.xmpp.FTSender: void access$6(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: void access$6(it.yup.xmpp.FTSender)>
<it.yup.screens.DataFormScreen: void setActions(int)>	<it.yup.screens.DataFormScreen: void setActions(int)>
<it.yup.xml.KXmlSerializer: void endDocument()>	<it.yup.xml.KXmlSerializer: void endDocument()>
\\"groupchat\\"	\\"groupchat\\"
<lampiro.screens.MMScreen: void paint(javax.microedition.lcdui.Graphics)>	<lampiro.screens.MMScreen: void paint(javax.microedition.lcdui.Graphics)>
xmldecl-standalone	xmldecl-standalone
query	query
<it.yup.tests.RMSTestMidlet: void <init>()>	<it.yup.tests.RMSTestMidlet: void <init>()>
<it.yup.util.Logger: void <clinit>()>	<it.yup.util.Logger: void <clinit>()>
/icons/combo.png	/icons/combo.png
<it.yup.xmpp.XMPPClient: it.yup.xmlstream.EventQueryRegistration access$8(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient: it.yup.xmlstream.EventQueryRegistration access$8(it.yup.xmpp.XMPPClient)>
<it.yup.xml.KXmlParser: int getLineNumber()>	<it.yup.xml.KXmlParser: int getLineNumber()>
<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen)>
<com.jcraft.jzlib.Deflate: int deflate_slow(int)>	<com.jcraft.jzlib.Deflate: int deflate_slow(int)>
Error reading roster fromstorage:\n	Error reading roster fromstorage:\n
buffer error	buffer error
<it.yup.ui.UIMenu: void removeAll()>	<it.yup.ui.UIMenu: void removeAll()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>	<java.util.Hashtable: boolean containsKey(java.lang.Object)>
_:-1	_:-1
Jabber	Jabber
<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel)>	<it.yup.transport.SocketChannel$Runnable1: void <init>(it.yup.transport.SocketChannel)>
<it.yup.ui.UITextField: void setMinLines(int)>	<it.yup.ui.UITextField: void setMinLines(int)>
<it.yup.xmpp.MUC: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>	<it.yup.xmpp.MUC: void addMessageToHistory(java.lang.String,it.yup.xmpp.packets.Message)>
<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIGroup getGroup(java.lang.String,it.yup.ui.UIAccordion,boolean)>	<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIGroup getGroup(java.lang.String,it.yup.ui.UIAccordion,boolean)>
<it.yup.ui.UIAccordion: void setLabelGradientColor(int)>	<it.yup.ui.UIAccordion: void setLabelGradientColor(int)>
;)	;)
<java.lang.Thread: void <init>(java.lang.Runnable)>	<java.lang.Thread: void <init>(java.lang.Runnable)>
<<\\"  \\">>	<<\\"  \\">>
<it.yup.xmpp.XMPPClient: void openStream()>	<it.yup.xmpp.XMPPClient: void openStream()>
<it.yup.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>	<it.yup.screens.RosterScreen: void askSubscription(it.yup.xmpp.Contact)>
<it.yup.xmpp.FTSender$PacketListener2: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$PacketListener2: void packetReceived(it.yup.xml.Element)>
qop	qop
<javax.microedition.lcdui.Form: javax.microedition.lcdui.Item get(int)>	<javax.microedition.lcdui.Form: javax.microedition.lcdui.Item get(int)>
<lampiro.screens.GroupsScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.GroupsScreen: void <init>(it.yup.xmpp.Contact)>
<it.yup.util.RMSIndex$KeyEnumeration: void next_item()>	<it.yup.util.RMSIndex$KeyEnumeration: void next_item()>
<java.io.Writer: void flush()>	<java.io.Writer: void flush()>
<<\\"unsupported property: \\">>	<<\\"unsupported property: \\">>
<javax.microedition.lcdui.List: int append(java.lang.String,javax.microedition.lcdui.Image)>	<javax.microedition.lcdui.List: int append(java.lang.String,javax.microedition.lcdui.Image)>
<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$2(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$2(it.yup.screens.RegisterScreen)>
<it.yup.util.MetaVector$MultiVectorEnumeration: void <init>(it.yup.util.MetaVector)>	<it.yup.util.MetaVector$MultiVectorEnumeration: void <init>(it.yup.util.MetaVector)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>	<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<com.jcraft.jzlib.ZStream: int inflateSync()>	<com.jcraft.jzlib.ZStream: int inflateSync()>
<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.ui.UIItem: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UIItem: void setScreen(it.yup.ui.UIScreen)>
503	503
<com.jcraft.jzlib.InfBlocks: void set_dictionary(byte[],int,int)>	<com.jcraft.jzlib.InfBlocks: void set_dictionary(byte[],int,int)>
<it.yup.xml.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>	<it.yup.xml.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>
<java.io.DataOutputStream: void writeUTF(java.lang.String)>	<java.io.DataOutputStream: void writeUTF(java.lang.String)>
<it.yup.util.MetaVector: void insertElementAt(java.lang.Object,int)>	<it.yup.util.MetaVector: void insertElementAt(java.lang.Object,int)>
<java.io.DataOutputStream: void writeShort(int)>	<java.io.DataOutputStream: void writeShort(int)>
<com.jcraft.jzlib.InfCodes: int proc(com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.InfCodes: int proc(com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream,int)>
<it.yup.xml.KXmlParser: void skip()>	<it.yup.xml.KXmlParser: void skip()>
<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender)>
<it.yup.screens.CommandListScreen: void <clinit>()>	<it.yup.screens.CommandListScreen: void <clinit>()>
<it.yup.ui.UILayout: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UILayout: void setScreen(it.yup.ui.UIScreen)>
<javax.microedition.lcdui.Canvas: void setTitle(java.lang.String)>	<javax.microedition.lcdui.Canvas: void setTitle(java.lang.String)>
<com.jcraft.jzlib.ZStream: int inflateSetDictionary(byte[],int)>	<com.jcraft.jzlib.ZStream: int inflateSetDictionary(byte[],int)>
<javax.microedition.rms.RecordStore: javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean)>	<javax.microedition.rms.RecordStore: javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean)>
<it.yup.screens.RosterScreen: void rosterRetrieved()>	<it.yup.screens.RosterScreen: void rosterRetrieved()>
<com.jcraft.jzlib.ZStream: int inflate(int)>	<com.jcraft.jzlib.ZStream: int inflate(int)>
Cont2	Cont2
<lampiro.screens.DataFormScreen: void addDesc()>	<lampiro.screens.DataFormScreen: void addDesc()>
/icons/mic.png	/icons/mic.png
<java.io.DataInputStream: short readShort()>	<java.io.DataInputStream: short readShort()>
<it.yup.tests.UITestMidlet$TestScreen$Changer: void run()>	<it.yup.tests.UITestMidlet$TestScreen$Changer: void run()>
<lampiro.screens.ContactInfoScreen: void access$4(lampiro.screens.ContactInfoScreen,it.yup.ui.UIVLayout,it.yup.xml.Element)>	<lampiro.screens.ContactInfoScreen: void access$4(lampiro.screens.ContactInfoScreen,it.yup.ui.UIVLayout,it.yup.xml.Element)>
_02	_02
<com.jcraft.jzlib.InfCodes: void <clinit>()>	<com.jcraft.jzlib.InfCodes: void <clinit>()>
<it.yup.xmlstream.KXmlParser: void pushText(int,boolean)>	<it.yup.xmlstream.KXmlParser: void pushText(int,boolean)>
<it.yup.ui.UIGauge: void setLabel(java.lang.String)>	<it.yup.ui.UIGauge: void setLabel(java.lang.String)>
<it.yup.xmlstream.KXmlSerializer: void check(boolean)>	<it.yup.xmlstream.KXmlSerializer: void check(boolean)>
transport	transport
<lampiro.screens.FTScreen: void <clinit>()>	<lampiro.screens.FTScreen: void <clinit>()>
<com.jcraft.jzlib.InfBlocks: void free(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfBlocks: void free(com.jcraft.jzlib.ZStream)>
<com.jcraft.jzlib.ZStream: void flush_pending()>	<com.jcraft.jzlib.ZStream: void flush_pending()>
<javax.microedition.lcdui.Form: void setItemStateListener(javax.microedition.lcdui.ItemStateListener)>	<javax.microedition.lcdui.Form: void setItemStateListener(javax.microedition.lcdui.ItemStateListener)>
<it.yup.util.MetaVector: java.util.Enumeration access$0(it.yup.util.MetaVector)>	<it.yup.util.MetaVector: java.util.Enumeration access$0(it.yup.util.MetaVector)>
<java.util.Vector: void addElement(java.lang.Object)>	<java.util.Vector: void addElement(java.lang.Object)>
<it.yup.xmpp.Roster$IQResultListener3: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener3: void handleError(it.yup.xml.Element)>
session	session
<it.yup.xmpp.Contact: java.lang.String user(java.lang.String)>	<it.yup.xmpp.Contact: java.lang.String user(java.lang.String)>
<lampiro.screens.FTScreen: void <init>()>	<lampiro.screens.FTScreen: void <init>()>
<lampiro.LampiroMidlet: void startApp()>	<lampiro.LampiroMidlet: void startApp()>
<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener4: void packetReceived(it.yup.xml.Element)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>	<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
END_TAG expected	END_TAG expected
<it.yup.screens.RosterScreen: void <init>()>	<it.yup.screens.RosterScreen: void <init>()>
<java.io.InputStream: void <init>()>	<java.io.InputStream: void <init>()>
Unsupported Property:	Unsupported Property:
<java.lang.RuntimeException: void <init>(java.lang.String)>	<java.lang.RuntimeException: void <init>(java.lang.String)>
<it.yup.ui.UIAccordion: it.yup.ui.UIItem getPanelItem(it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem getPanelItem(it.yup.ui.UIItem,int)>
http://jabber.org/protocol/si/profile/file-transfer	http://jabber.org/protocol/si/profile/file-transfer
<it.yup.xmlstream.KXmlParser: int peek(int)>	<it.yup.xmlstream.KXmlParser: int peek(int)>
<it.yup.xmlstream.BasicXmlStream$SessionOpener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.BasicXmlStream$SessionOpener: void packetReceived(it.yup.xml.Element)>
<it.yup.xmpp.Roster: void subscribeContact(it.yup.xmpp.Contact,boolean)>	<it.yup.xmpp.Roster: void subscribeContact(it.yup.xmpp.Contact,boolean)>
<it.yup.xmpp.Contact: it.yup.xml.Element getCapabilities(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: it.yup.xml.Element getCapabilities(it.yup.xmpp.packets.Presence)>
Cont	Cont
<javax.microedition.lcdui.Canvas: void setFullScreenMode(boolean)>	<javax.microedition.lcdui.Canvas: void setFullScreenMode(boolean)>
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener1)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener,it.yup.xmpp.FTReceiver$OpenListener$PacketListener1)>
<?	<?
<it.yup.xmlstream.KXmlParser: java.lang.String getName()>	<it.yup.xmlstream.KXmlParser: java.lang.String getName()>
<javax.microedition.rms.RecordStore: void deleteRecord(int)>	<javax.microedition.rms.RecordStore: void deleteRecord(int)>
<it.yup.ui.UICanvas: void keyPressed(int)>	<it.yup.ui.UICanvas: void keyPressed(int)>
<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object)>	<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object)>
<it.yup.ui.UICombobox: boolean[] getSelectedFlags()>	<it.yup.ui.UICombobox: boolean[] getSelectedFlags()>
<it.yup.ui.UICanvas: void setDisplay(javax.microedition.lcdui.Display)>	<it.yup.ui.UICanvas: void setDisplay(javax.microedition.lcdui.Display)>
cipher	cipher
<it.yup.util.ResourceManager: java.lang.String getString(int)>	<it.yup.util.ResourceManager: java.lang.String getString(int)>
<javax.microedition.lcdui.game.GameCanvas: int getWidth()>	<javax.microedition.lcdui.game.GameCanvas: int getWidth()>
<it.yup.xmpp.FTReceiver$OpenListener: it.yup.xmlstream.EventQueryRegistration access$0(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener: it.yup.xmlstream.EventQueryRegistration access$0(it.yup.xmpp.FTReceiver$OpenListener)>
<it.yup.ui.UITextPanel: void setContainer(it.yup.ui.UIItem)>	<it.yup.ui.UITextPanel: void setContainer(it.yup.ui.UIItem)>
<it.yup.util.RMSIndex$Item: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$Item: void <init>(it.yup.util.RMSIndex)>
<lampiro.screens.SplashScreen$1: void run()>	<lampiro.screens.SplashScreen$1: void run()>
<java.io.IOException: void <init>()>	<java.io.IOException: void <init>()>
Internal server error	Internal server error
<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient getInstance()>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.XMPPClient getInstance()>
muc#roomconfig_allowinvites	muc#roomconfig_allowinvites
<javax.microedition.lcdui.List: int getSelectedFlags(boolean[])>	<javax.microedition.lcdui.List: int getSelectedFlags(boolean[])>
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespaceUri(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespaceUri(int)>
<it.yup.xmpp.FTReceiver$OpenListener: java.lang.StringBuffer access$1(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener: java.lang.StringBuffer access$1(it.yup.xmpp.FTReceiver$OpenListener)>
<<\\" xmlns=\'\\">>	<<\\" xmlns=\'\\">>
<lampiro.screens.InnerMMScreen: void captureAudio()>	<lampiro.screens.InnerMMScreen: void captureAudio()>
<it.yup.screens.MessageComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.MessageComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
known_caps	known_caps
<java.io.IOException: java.lang.String toString()>	<java.io.IOException: java.lang.String toString()>
<it.yup.ui.UILayout: boolean isFocusable()>	<it.yup.ui.UILayout: boolean isFocusable()>
<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemStateListener1)>	<it.yup.screens.RegisterScreen$ItemStateListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemStateListener1)>
<it.yup.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.screens.RosterScreen: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String,java.lang.Object)>
<it.yup.xmpp.FTReceiver$OpenListener: void acceptSession()>	<it.yup.xmpp.FTReceiver$OpenListener: void acceptSession()>
<it.yup.ui.UITextPanel: void setText(java.lang.String)>	<it.yup.ui.UITextPanel: void setText(java.lang.String)>
<it.yup.xmlstream.KXmlSerializer: void docdecl(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void docdecl(java.lang.String)>
<lampiro.screens.RosterScreen: void <init>()>	<lampiro.screens.RosterScreen: void <init>()>
<javax.microedition.io.HttpConnection: void setRequestMethod(java.lang.String)>	<javax.microedition.io.HttpConnection: void setRequestMethod(java.lang.String)>
<it.yup.screens.RosterScreen: it.yup.screens.RosterScreen getInstance()>	<it.yup.screens.RosterScreen: it.yup.screens.RosterScreen getInstance()>
<it.yup.util.MetaVector: boolean isEmpty()>	<it.yup.util.MetaVector: boolean isEmpty()>
<it.yup.xmpp.MUC: void updatePresence(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.MUC: void updatePresence(it.yup.xmpp.packets.Presence)>
<it.yup.ui.UICombobox: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UICombobox: int getHeight(javax.microedition.lcdui.Graphics)>
<it.yup.xmpp.Contact: void resetMessageHistory(java.lang.String)>	<it.yup.xmpp.Contact: void resetMessageHistory(java.lang.String)>
<it.yup.xmlstream.SocketStream: void initialize(java.lang.String,java.lang.String)>	<it.yup.xmlstream.SocketStream: void initialize(java.lang.String,java.lang.String)>
muc#roomconfig_whois	muc#roomconfig_whois
<lampiro.screens.MMScreen: void <init>(java.lang.String)>	<lampiro.screens.MMScreen: void <init>(java.lang.String)>
<lampiro.screens.MUCScreen: boolean keyPressed(int)>	<lampiro.screens.MUCScreen: boolean keyPressed(int)>
<<\\"expected: \\">>	<<\\"expected: \\">>
<lampiro.screens.RosterScreen$FileReceiveScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen$FileReceiveScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.xmpp.XMPPClient: java.lang.String getErrorString(java.lang.String)>	<it.yup.xmpp.XMPPClient: java.lang.String getErrorString(java.lang.String)>
<it.yup.transport.SocketChannel: java.io.InputStream getInputStream()>	<it.yup.transport.SocketChannel: java.io.InputStream getInputStream()>
<lampiro.screens.SplashScreen: void access$0(lampiro.screens.SplashScreen)>	<lampiro.screens.SplashScreen: void access$0(lampiro.screens.SplashScreen)>
<lampiro.screens.AlbumScreen: void deleteAlbum(java.lang.String)>	<lampiro.screens.AlbumScreen: void deleteAlbum(java.lang.String)>
<java.lang.System: long currentTimeMillis()>	<java.lang.System: long currentTimeMillis()>
<it.yup.ui.UITextField: void setExpandable(boolean)>	<it.yup.ui.UITextField: void setExpandable(boolean)>
anyone	anyone
<lampiro.screens.InnerMMScreen: void startCapture()>	<lampiro.screens.InnerMMScreen: void startCapture()>
:-S	:-S
<it.yup.screens.RosterScreen: void keyPressed(int)>	<it.yup.screens.RosterScreen: void keyPressed(int)>
<it.yup.xml.KXmlProcessor: it.yup.xml.Element parseDocument(org.xmlpull.v1.XmlPullParser)>	<it.yup.xml.KXmlProcessor: it.yup.xml.Element parseDocument(org.xmlpull.v1.XmlPullParser)>
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen,it.yup.screens.RosterScreen$AdHocCommandsHandler)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen,it.yup.screens.RosterScreen$AdHocCommandsHandler)>
<it.yup.ui.UICombobox: java.lang.String[] getSelectedStrings()>	<it.yup.ui.UICombobox: java.lang.String[] getSelectedStrings()>
\'	\'
<java.lang.Class: java.lang.String getName()>	<java.lang.Class: java.lang.String getName()>
<it.yup.ui.UICanvas: java.util.Timer getTimer()>	<it.yup.ui.UICanvas: java.util.Timer getTimer()>
pino	pino
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>	<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
404	404
<javax.microedition.lcdui.Graphics: int getClipX()>	<javax.microedition.lcdui.Graphics: int getClipX()>
manual	manual
<javax.microedition.lcdui.ChoiceGroup: int size()>	<javax.microedition.lcdui.ChoiceGroup: int size()>
<java.io.DataInputStream: byte readByte()>	<java.io.DataInputStream: byte readByte()>
<com.jcraft.jzlib.FilterInputStream: int read()>	<com.jcraft.jzlib.FilterInputStream: int read()>
<it.yup.xmlstream.Element: it.yup.xmlstream.Element[] getChildrenByName(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element[] getChildrenByName(java.lang.String,java.lang.String)>
<it.yup.xmpp.Config: void setProperty(short,java.lang.String)>	<it.yup.xmpp.Config: void setProperty(short,java.lang.String)>
title	title
cannot bind resource	cannot bind resource
<it.yup.xmlstream.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>	<it.yup.xmlstream.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>
<it.yup.xml.KXmlParser: java.lang.Object getProperty(java.lang.String)>	<it.yup.xml.KXmlParser: java.lang.Object getProperty(java.lang.String)>
<lampiro.screens.RosterScreen: void sizeChanged(int,int)>	<lampiro.screens.RosterScreen: void sizeChanged(int,int)>
<it.yup.transport.SocketChannel: boolean pollAlive()>	<it.yup.transport.SocketChannel: boolean pollAlive()>
<it.yup.ui.UIButton: void <init>(java.lang.String)>	<it.yup.ui.UIButton: void <init>(java.lang.String)>
<it.yup.ui.UICombobox$UIComboScreen: void <init>(it.yup.ui.UICombobox,java.lang.String)>	<it.yup.ui.UICombobox$UIComboScreen: void <init>(it.yup.ui.UICombobox,java.lang.String)>
<it.yup.ui.UICanvas: void setTabs()>	<it.yup.ui.UICanvas: void setTabs()>
<it.yup.screens.DataFormScreen$ListChoiceHandler: void <init>(it.yup.screens.DataFormScreen,javax.microedition.lcdui.StringItem,it.yup.xmpp.packets.DataForm$Field)>	<it.yup.screens.DataFormScreen$ListChoiceHandler: void <init>(it.yup.screens.DataFormScreen,javax.microedition.lcdui.StringItem,it.yup.xmpp.packets.DataForm$Field)>
<lampiro.screens.FTScreen$FTItem: boolean access$0()>	<lampiro.screens.FTScreen$FTItem: boolean access$0()>
<lampiro.screens.DataFormScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.DataFormScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.tests.TestMidlet: void startApp()>	<it.yup.tests.TestMidlet: void startApp()>
<lampiro.screens.FTScreen$FTItem: java.lang.Object access$1(lampiro.screens.FTScreen$FTItem)>	<lampiro.screens.FTScreen$FTItem: java.lang.Object access$1(lampiro.screens.FTScreen$FTItem)>
<it.yup.ui.UIItem: void setType(int)>	<it.yup.ui.UIItem: void setType(int)>
<it.yup.util.Utils: java.lang.String hexDigest(java.lang.String,java.lang.String)>	<it.yup.util.Utils: java.lang.String hexDigest(java.lang.String,java.lang.String)>
<lampiro.screens.InnerMMScreen: int getTypeIndex()>	<lampiro.screens.InnerMMScreen: int getTypeIndex()>
<lampiro.screens.InnerMMScreen: int access$0(lampiro.screens.InnerMMScreen)>	<lampiro.screens.InnerMMScreen: int access$0(lampiro.screens.InnerMMScreen)>
<it.yup.screens.ScreenSaver: void showNotify()>	<it.yup.screens.ScreenSaver: void showNotify()>
<<\\" to=\\\"\\">>	<<\\" to=\\\"\\">>
boolean	boolean
<it.yup.xmpp.BluendoXMLRPC: void close()>	<it.yup.xmpp.BluendoXMLRPC: void close()>
<it.yup.ui.UIItem: void setSelected(boolean)>	<it.yup.ui.UIItem: void setSelected(boolean)>
<com.jcraft.jzlib.ZOutputStream: void write(byte[],int,int)>	<com.jcraft.jzlib.ZOutputStream: void write(byte[],int,int)>
<it.yup.xmpp.SimpleDataFormExecutor: boolean execute(int)>	<it.yup.xmpp.SimpleDataFormExecutor: boolean execute(int)>
<it.yup.xml.Element: byte[] toXml()>	<it.yup.xml.Element: byte[] toXml()>
<it.yup.util.ResourceManager: void <init>(java.lang.String,java.lang.String)>	<it.yup.util.ResourceManager: void <init>(java.lang.String,java.lang.String)>
<java.lang.String: char[] toCharArray()>	<java.lang.String: char[] toCharArray()>
<it.yup.screens.OptionsScreen: void <init>()>	<it.yup.screens.OptionsScreen: void <init>()>
<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>	<it.yup.xmpp.packets.Presence: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>
<lampiro.screens.GatewayRegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.GatewayRegisterScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<javax.microedition.lcdui.Graphics: int getStrokeStyle()>	<javax.microedition.lcdui.Graphics: int getStrokeStyle()>
<lampiro.screens.SubscribeScreen: void releaseScreen(lampiro.screens.SubscribeScreen)>	<lampiro.screens.SubscribeScreen: void releaseScreen(lampiro.screens.SubscribeScreen)>
<it.yup.util.MetaVector: int indexOf(java.lang.Object)>	<it.yup.util.MetaVector: int indexOf(java.lang.Object)>
<javax.microedition.lcdui.Display: javax.microedition.lcdui.Displayable getCurrent()>	<javax.microedition.lcdui.Display: javax.microedition.lcdui.Displayable getCurrent()>
<it.yup.xml.KXmlParser: java.lang.String getNamespaceUri(int)>	<it.yup.xml.KXmlParser: java.lang.String getNamespaceUri(int)>
<lampiro.screens.AddContactScreen: boolean access$3(lampiro.screens.AddContactScreen)>	<lampiro.screens.AddContactScreen: boolean access$3(lampiro.screens.AddContactScreen)>
406	406
<java.lang.String: void <init>(char[])>	<java.lang.String: void <init>(char[])>
<lampiro.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen)>
<it.yup.xmlstream.Element: void delAttribute(java.lang.String)>	<it.yup.xmlstream.Element: void delAttribute(java.lang.String)>
<it.yup.ui.UITextPanel: void <init>()>	<it.yup.ui.UITextPanel: void <init>()>
<lampiro.screens.ContactInfoScreen$1: void <init>(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen$1: void <init>(lampiro.screens.ContactInfoScreen)>
Mylabel	Mylabel
<it.yup.xmpp.XMPPClient$XmppListener: void showCommand(java.lang.Object)>	<it.yup.xmpp.XMPPClient$XmppListener: void showCommand(java.lang.Object)>
ACTIONS	ACTIONS
<it.yup.xmpp.packets.Presence: java.lang.String getShow()>	<it.yup.xmpp.packets.Presence: java.lang.String getShow()>
<it.yup.xmlstream.Element: java.lang.String getUri(java.lang.String)>	<it.yup.xmlstream.Element: java.lang.String getUri(java.lang.String)>
<<\\"Undefined Prefix: \\">>	<<\\"Undefined Prefix: \\">>
<org.bouncycastle.crypto.digests.GeneralDigest: void update(byte[],int,int)>	<org.bouncycastle.crypto.digests.GeneralDigest: void update(byte[],int,int)>
<it.yup.xmpp.Contact: void compileMessage(java.lang.String,it.yup.xmpp.packets.Message,java.lang.String)>	<it.yup.xmpp.Contact: void compileMessage(java.lang.String,it.yup.xmpp.packets.Message,java.lang.String)>
<com.jcraft.jzlib.ZOutputStream: void setFlushMode(int)>	<com.jcraft.jzlib.ZOutputStream: void setFlushMode(int)>
<com.jcraft.jzlib.Inflate: int inflate(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Inflate: int inflate(com.jcraft.jzlib.ZStream,int)>
<it.yup.ui.UICombobox: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UICombobox: it.yup.ui.UIItem getSelectedItem()>
close	close
<it.yup.screens.ContactInfoScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.ContactInfoScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.xmlstream.KXmlParser: int next()>	<it.yup.xmlstream.KXmlParser: int next()>
<it.yup.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>
<lampiro.screens.DataFormScreen: void <clinit>()>	<lampiro.screens.DataFormScreen: void <clinit>()>
<com.jcraft.jzlib.Deflate: void putShortMSB(int)>	<com.jcraft.jzlib.Deflate: void putShortMSB(int)>
<it.yup.tests.UITestMidlet$TestScreen: void itemAction(it.yup.ui.UIItem)>	<it.yup.tests.UITestMidlet$TestScreen: void itemAction(it.yup.ui.UIItem)>
stringa-lunga-senza-sensostringa-lunga-senza-sensostringa-lunga-senza-senso	stringa-lunga-senza-sensostringa-lunga-senza-sensostringa-lunga-senza-senso
<it.yup.xmlstream.KXmlParser: int nextTag()>	<it.yup.xmlstream.KXmlParser: int nextTag()>
<javax.microedition.lcdui.ChoiceGroup: void delete(int)>	<javax.microedition.lcdui.ChoiceGroup: void delete(int)>
<it.yup.ui.UISeparator: void <init>(int,int)>	<it.yup.ui.UISeparator: void <init>(int,int)>
<it.yup.ui.UIUtils: it.yup.ui.UIMenu easyMenu(java.lang.String,int,int,int,it.yup.ui.UIItem,java.lang.String,java.lang.String)>	<it.yup.ui.UIUtils: it.yup.ui.UIMenu easyMenu(java.lang.String,int,int,int,it.yup.ui.UIItem,java.lang.String,java.lang.String)>
<it.yup.xml.Element: void addElement(it.yup.xml.Element)>	<it.yup.xml.Element: void addElement(it.yup.xml.Element)>
<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient)>
<com.jcraft.jzlib.ZInputStream: int read(byte[],int,int)>	<com.jcraft.jzlib.ZInputStream: int read(byte[],int,int)>
<lampiro.screens.ChatScreen$1: void <init>(lampiro.screens.ChatScreen)>	<lampiro.screens.ChatScreen$1: void <init>(lampiro.screens.ChatScreen)>
<it.yup.ui.UIMenu: int indexOf(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: int indexOf(it.yup.ui.UIItem)>
<it.yup.util.MetaVector: void removeElementAt(int)>	<it.yup.util.MetaVector: void removeElementAt(int)>
<java.lang.Object: java.lang.Class getClass()>	<java.lang.Object: java.lang.Class getClass()>
<javax.microedition.rms.RecordStore: int getSizeAvailable()>	<javax.microedition.rms.RecordStore: int getSizeAvailable()>
<it.yup.xmpp.FTSender: void access$2(it.yup.xmpp.FTSender,boolean)>	<it.yup.xmpp.FTSender: void access$2(it.yup.xmpp.FTSender,boolean)>
<java.util.Vector: void copyInto(java.lang.Object[])>	<java.util.Vector: void copyInto(java.lang.Object[])>
<it.yup.ui.UIScreen: void startDrag(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void startDrag(it.yup.ui.UIItem)>
DOCTYPE	DOCTYPE
<it.yup.xml.KXmlSerializer: void ignorableWhitespace(java.lang.String)>	<it.yup.xml.KXmlSerializer: void ignorableWhitespace(java.lang.String)>
<lampiro.screens.DebugScreen: void <init>()>	<lampiro.screens.DebugScreen: void <init>()>
<it.yup.tests.UITestMidlet: void startApp()>	<it.yup.tests.UITestMidlet: void startApp()>
encoding=\'	encoding=\'
<it.yup.xmpp.Roster: void unsubscribeContact(it.yup.xmpp.Contact)>	<it.yup.xmpp.Roster: void unsubscribeContact(it.yup.xmpp.Contact)>
<it.yup.tests.UITestMidlet$TestScreen: void <init>(it.yup.tests.UITestMidlet)>	<it.yup.tests.UITestMidlet$TestScreen: void <init>(it.yup.tests.UITestMidlet)>
success	success
<it.yup.ui.UITextPanel: void setFont(javax.microedition.lcdui.Font)>	<it.yup.ui.UITextPanel: void setFont(javax.microedition.lcdui.Font)>
<it.yup.xmlstream.BasicXmlStream: void dispatchEvent(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.BasicXmlStream: void dispatchEvent(java.lang.String,java.lang.Object)>
<it.yup.xmpp.packets.Message: void setBody(java.lang.String)>	<it.yup.xmpp.packets.Message: void setBody(java.lang.String)>
<javax.microedition.lcdui.Font: int stringWidth(java.lang.String)>	<javax.microedition.lcdui.Font: int stringWidth(java.lang.String)>
<it.yup.xmpp.packets.DataForm: void parseForm(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm: void parseForm(it.yup.xml.Element)>
<it.yup.ui.UIAccordion$AccordionItem: java.util.Vector access$2(it.yup.ui.UIAccordion$AccordionItem)>	<it.yup.ui.UIAccordion$AccordionItem: java.util.Vector access$2(it.yup.ui.UIAccordion$AccordionItem)>
invalid initValue for non interactive mode	invalid initValue for non interactive mode
<java.lang.Runtime: long totalMemory()>	<java.lang.Runtime: long totalMemory()>
<it.yup.xml.KXmlParser: boolean getFeature(java.lang.String)>	<it.yup.xml.KXmlParser: boolean getFeature(java.lang.String)>
\\"label\\"	\\"label\\"
<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>	<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>
tino	tino
<lampiro.screens.ChatScreen: void updateLabel(lampiro.screens.ChatScreen$ConversationEntry)>	<lampiro.screens.ChatScreen: void updateLabel(lampiro.screens.ChatScreen$ConversationEntry)>
<it.yup.util.Utils: void <init>()>	<it.yup.util.Utils: void <init>()>
<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int,int)>	<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>	<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<lampiro.screens.RosterScreen: void playSmartTone()>	<lampiro.screens.RosterScreen: void playSmartTone()>
<it.yup.ui.UITextField: int getMinLines()>	<it.yup.ui.UITextField: int getMinLines()>
subscribed	subscribed
<it.yup.ui.UIGauge: void start()>	<it.yup.ui.UIGauge: void start()>
<lampiro.screens.MUCScreen: void populateRosterCombo()>	<lampiro.screens.MUCScreen: void populateRosterCombo()>
_fixed_	_fixed_
<lampiro.screens.RegisterScreen: it.yup.ui.UITextField access$0(lampiro.screens.RegisterScreen)>	<lampiro.screens.RegisterScreen: it.yup.ui.UITextField access$0(lampiro.screens.RegisterScreen)>
<it.yup.tests.RMSTestMidlet: void checkCoherency(it.yup.util.RMSIndex,java.util.Hashtable,java.util.Vector)>	<it.yup.tests.RMSTestMidlet: void checkCoherency(it.yup.util.RMSIndex,java.util.Hashtable,java.util.Vector)>
<javax.microedition.lcdui.Alert: void <init>(java.lang.String,java.lang.String,javax.microedition.lcdui.Image,javax.microedition.lcdui.AlertType)>	<javax.microedition.lcdui.Alert: void <init>(java.lang.String,java.lang.String,javax.microedition.lcdui.Image,javax.microedition.lcdui.AlertType)>
<it.yup.xml.KXmlSerializer: void flush()>	<it.yup.xml.KXmlSerializer: void flush()>
<it.yup.xmpp.BluendoXMLRPC: void <init>(java.lang.String)>	<it.yup.xmpp.BluendoXMLRPC: void <init>(java.lang.String)>
sha1	sha1
<it.yup.xml.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>	<it.yup.xml.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>
:-/	:-/
<it.yup.ui.UIScreen: boolean isFreezed()>	<it.yup.ui.UIScreen: boolean isFreezed()>
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
unknown	unknown
<lampiro.screens.RosterScreen: void <clinit>()>	<lampiro.screens.RosterScreen: void <clinit>()>
<lampiro.screens.RegisterScreen: void checkLogin()>	<lampiro.screens.RegisterScreen: void checkLogin()>
<it.yup.screens.AboutScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.AboutScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<javax.microedition.lcdui.Graphics: int getTranslateX()>	<javax.microedition.lcdui.Graphics: int getTranslateX()>
combo3-4	combo3-4
<it.yup.ui.UISeparator: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UISeparator: void paint(javax.microedition.lcdui.Graphics,int,int)>
bluendo:register:0	bluendo:register:0
<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence[] getAllPresences()>	<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence[] getAllPresences()>
illegal comment delimiter: --->	illegal comment delimiter: --->
<java.io.Reader: void <init>()>	<java.io.Reader: void <init>()>
\\"DIRECT_SOCKET\\"	\\"DIRECT_SOCKET\\"
<lampiro.screens.RosterScreen: void addGateway(java.util.Hashtable,java.lang.String,java.lang.String,javax.microedition.lcdui.Image,java.lang.String)>	<lampiro.screens.RosterScreen: void addGateway(java.util.Hashtable,java.lang.String,java.lang.String,javax.microedition.lcdui.Image,java.lang.String)>
<lampiro.screens.RegisterScreen: java.lang.String getServer(java.lang.String)>	<lampiro.screens.RegisterScreen: java.lang.String getServer(java.lang.String)>
<it.yup.xml.BSerializer: byte[] toXml(it.yup.xml.Element)>	<it.yup.xml.BSerializer: byte[] toXml(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: void rosterRetrieved()>	<lampiro.screens.RosterScreen: void rosterRetrieved()>
<javax.microedition.lcdui.Graphics: void setClip(int,int,int,int)>	<javax.microedition.lcdui.Graphics: void setClip(int,int,int,int)>
<it.yup.xmpp.CommandExecutor: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.CommandExecutor: void packetReceived(it.yup.xml.Element)>
version expected	version expected
<java.io.Writer: void write(int)>	<java.io.Writer: void write(int)>
combobig2	combobig2
<it.yup.xmlstream.BasicXmlStream: it.yup.xmlstream.EventQueryRegistration addEventListener(it.yup.xmlstream.EventQuery,java.lang.Object)>	<it.yup.xmlstream.BasicXmlStream: it.yup.xmlstream.EventQueryRegistration addEventListener(it.yup.xmlstream.EventQuery,java.lang.Object)>
<lampiro.screens.DataFormScreen: boolean keyPressed(int)>	<lampiro.screens.DataFormScreen: boolean keyPressed(int)>
<it.yup.ui.UIGauge: void setValue(int)>	<it.yup.ui.UIGauge: void setValue(int)>
instead-of-I	instead-of-I
<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$TimerTask1)>	<it.yup.xmpp.XMPPClient$TimerTask1: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$TimerTask1)>
<example.org>	<example.org>
<lampiro.screens.ChatScreen$ForwardScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.ChatScreen$ForwardScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.ui.Semaphore: void acquire()>	<it.yup.ui.Semaphore: void acquire()>
<lampiro.screens.ShowMMScreen$1: void run()>	<lampiro.screens.ShowMMScreen$1: void run()>
<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIGroup getSelectedUIGroup()>	<lampiro.screens.RosterScreen: lampiro.screens.RosterScreen$UIGroup getSelectedUIGroup()>
<javax.microedition.lcdui.TextBox: void <init>(java.lang.String,java.lang.String,int,int)>	<javax.microedition.lcdui.TextBox: void <init>(java.lang.String,java.lang.String,int,int)>
<it.yup.ui.UIAccordion: void setSepColor(int)>	<it.yup.ui.UIAccordion: void setSepColor(int)>
<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$4(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: javax.microedition.lcdui.TextField access$4(it.yup.screens.RegisterScreen)>
<lampiro.screens.FTScreen: void ftAccept(it.yup.xmpp.FTSender,boolean)>	<lampiro.screens.FTScreen: void ftAccept(it.yup.xmpp.FTSender,boolean)>
Motorola	Motorola
<com.jcraft.jzlib.Deflate: void flush_block_only(boolean)>	<com.jcraft.jzlib.Deflate: void flush_block_only(boolean)>
<it.yup.ui.UIPanel: void setSelectedIndex(int)>	<it.yup.ui.UIPanel: void setSelectedIndex(int)>
<it.yup.ui.UITextField: boolean keyPressed(int)>	<it.yup.ui.UITextField: boolean keyPressed(int)>
<java.lang.String: int compareTo(java.lang.String)>	<java.lang.String: int compareTo(java.lang.String)>
<javax.microedition.lcdui.List: void addCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.List: void addCommand(javax.microedition.lcdui.Command)>
<com.jcraft.jzlib.Deflate: int deflate_stored(int)>	<com.jcraft.jzlib.Deflate: int deflate_stored(int)>
JID	JID
<javax.microedition.lcdui.Alert: void addCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.Alert: void addCommand(javax.microedition.lcdui.Command)>
illegal position for attribute	illegal position for attribute
<lampiro.screens.ShowMMScreen: void showNotify()>	<lampiro.screens.ShowMMScreen: void showNotify()>
<it.yup.xmpp.CommandExecutor: boolean execute(int)>	<it.yup.xmpp.CommandExecutor: boolean execute(int)>
<it.yup.xmlstream.KXmlParser: int getColumnNumber()>	<it.yup.xmlstream.KXmlParser: int getColumnNumber()>
<it.yup.ui.UICanvas: void lock()>	<it.yup.ui.UICanvas: void lock()>
<it.yup.xmpp.Contact: int getAvailability(java.lang.String)>	<it.yup.xmpp.Contact: int getAvailability(java.lang.String)>
<it.yup.ui.UIItem: int getLayoutWidth()>	<it.yup.ui.UIItem: int getLayoutWidth()>
incompatible version	incompatible version
<it.yup.xmlstream.BasicXmlStream$SessionOpener: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.BasicXmlStream$SessionOpener: void start(it.yup.xmlstream.BasicXmlStream)>
<it.yup.ui.UIScreen: void replace(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void replace(it.yup.ui.UIItem,it.yup.ui.UIItem)>
<it.yup.xmlstream.Element: it.yup.xmlstream.Element pullDocumentStart(org.xmlpull.v1.XmlPullParser)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element pullDocumentStart(org.xmlpull.v1.XmlPullParser)>
encoding	encoding
<lampiro.screens.RosterScreen: void commandExecuted(java.lang.Object)>	<lampiro.screens.RosterScreen: void commandExecuted(java.lang.Object)>
<it.yup.util.Utils: byte[] digest(java.lang.String,java.lang.String)>	<it.yup.util.Utils: byte[] digest(java.lang.String,java.lang.String)>
<it.yup.screens.OptionsScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.OptionsScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.ui.UIMenu: void insert(int,it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: void insert(int,it.yup.ui.UIItem)>
|-)	|-)
<it.yup.xmpp.CommandExecutor: void init(java.lang.String[],java.lang.String)>	<it.yup.xmpp.CommandExecutor: void init(java.lang.String[],java.lang.String)>
<it.yup.ui.UIScreen: boolean intersect(int[],int[])>	<it.yup.ui.UIScreen: boolean intersect(int[],int[])>
<java.util.NoSuchElementException: void <init>()>	<java.util.NoSuchElementException: void <init>()>
<com.jcraft.jzlib.InfCodes: int inflate_fast(int,int,int[],int,int[],int,com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfCodes: int inflate_fast(int,int,int[],int,int[],int,com.jcraft.jzlib.InfBlocks,com.jcraft.jzlib.ZStream)>
\\"lampirorms\\"	\\"lampirorms\\"
<it.yup.ui.UIPanel: void removeAllItems()>	<it.yup.ui.UIPanel: void removeAllItems()>
<it.yup.ui.UIMenu: boolean remove(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: boolean remove(it.yup.ui.UIItem)>
\\"jabber:x:listo\\"	\\"jabber:x:listo\\"
invalid bit length repeat	invalid bit length repeat
\\"priority\\"	\\"priority\\"
<java.util.TimerTask: void <init>()>	<java.util.TimerTask: void <init>()>
<it.yup.ui.UIGauge: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIGauge: int getHeight(javax.microedition.lcdui.Graphics)>
<com.jcraft.jzlib.ZStream: int deflate(int)>	<com.jcraft.jzlib.ZStream: int deflate(int)>
<it.yup.xmlstream.AccountRegistration: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.AccountRegistration: void packetReceived(it.yup.xml.Element)>
<lampiro.screens.SplashScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.SplashScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<lampiro.screens.ChatScreen: java.util.Vector access$0(lampiro.screens.ChatScreen)>	<lampiro.screens.ChatScreen: java.util.Vector access$0(lampiro.screens.ChatScreen)>
<it.yup.ui.UIAccordion: void setSubPanel(it.yup.ui.UIItem,java.util.Vector)>	<it.yup.ui.UIAccordion: void setSubPanel(it.yup.ui.UIItem,java.util.Vector)>
<java.lang.Math: int min(int,int)>	<java.lang.Math: int min(int,int)>
<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image)>	<it.yup.ui.UILabel: void <init>(javax.microedition.lcdui.Image)>
\\"required\\"	\\"required\\"
<it.yup.ui.UIItem: void setFocusable(boolean)>	<it.yup.ui.UIItem: void setFocusable(boolean)>
*******	*******
<it.yup.ui.UIMenu: int getAbsoluteY()>	<it.yup.ui.UIMenu: int getAbsoluteY()>
<it.yup.ui.UIItem: void setLayoutWidth(int)>	<it.yup.ui.UIItem: void setLayoutWidth(int)>
<it.yup.transport.BaseChannel$Sender: void <init>(it.yup.transport.BaseChannel,it.yup.transport.BaseChannel)>	<it.yup.transport.BaseChannel$Sender: void <init>(it.yup.transport.BaseChannel,it.yup.transport.BaseChannel)>
<it.yup.tests.RMSTestMidlet: void startApp()>	<it.yup.tests.RMSTestMidlet: void startApp()>
<it.yup.ui.UICanvas: void pointerDragged(int,int)>	<it.yup.ui.UICanvas: void pointerDragged(int,int)>
<it.yup.xmpp.FTReceiver$OpenListener: void answerFT(boolean)>	<it.yup.xmpp.FTReceiver$OpenListener: void answerFT(boolean)>
<com.jcraft.jzlib.Tree: int d_code(int)>	<com.jcraft.jzlib.Tree: int d_code(int)>
realm	realm
<it.yup.xmlstream.KXmlSerializer: void endDocument()>	<it.yup.xmlstream.KXmlSerializer: void endDocument()>
Loading Lampiro...	Loading Lampiro...	@x_notGlider
<<\\"Impossible to get : \\">>	<<\\"Impossible to get : \\">>
<javax.microedition.lcdui.TextBox: void addCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.TextBox: void addCommand(javax.microedition.lcdui.Command)>
<java.lang.InterruptedException: void printStackTrace()>	<java.lang.InterruptedException: void printStackTrace()>
<java.util.Vector: void <init>()>	<java.util.Vector: void <init>()>
<it.yup.screens.DeleteContactAlert: void <clinit>()>	<it.yup.screens.DeleteContactAlert: void <clinit>()>
<it.yup.xml.Element: java.lang.String getAttribute(java.lang.String)>	<it.yup.xml.Element: java.lang.String getAttribute(java.lang.String)>
<it.yup.ui.UIIContainer: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIIContainer: void setSelectedItem(it.yup.ui.UIItem)>
<it.yup.xmpp.Contact: int availabilityDiff(it.yup.xmpp.Contact,it.yup.xmpp.Contact)>	<it.yup.xmpp.Contact: int availabilityDiff(it.yup.xmpp.Contact,it.yup.xmpp.Contact)>
<it.yup.ui.UICombobox$UIComboScreen: void updateFilter()>	<it.yup.ui.UICombobox$UIComboScreen: void updateFilter()>
http://www.w3.org/2000/xmlns/	http://www.w3.org/2000/xmlns/
<it.yup.xmpp.Contact: java.lang.String resource(java.lang.String)>	<it.yup.xmpp.Contact: java.lang.String resource(java.lang.String)>
<it.yup.tests.RMSTestMidlet: void pauseApp()>	<it.yup.tests.RMSTestMidlet: void pauseApp()>
<it.yup.transport.TransportListener: void connectionEstablished(it.yup.transport.BaseChannel)>	<it.yup.transport.TransportListener: void connectionEstablished(it.yup.transport.BaseChannel)>
<it.yup.ui.UIGauge: int getMaxValue()>	<it.yup.ui.UIGauge: int getMaxValue()>
<java.lang.Integer: int intValue()>	<java.lang.Integer: int intValue()>
<com.jcraft.jzlib.ZOutputStream: void write(int)>	<com.jcraft.jzlib.ZOutputStream: void write(int)>
<it.yup.ui.Semaphore: void release()>	<it.yup.ui.Semaphore: void release()>
<it.yup.xmlstream.Element: it.yup.xmlstream.Element pullElement(org.xmlpull.v1.XmlPullParser)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element pullElement(org.xmlpull.v1.XmlPullParser)>
\n	\n
/>	/>
<it.yup.xmpp.SimpleDataFormExecutor: void display_internal()>	<it.yup.xmpp.SimpleDataFormExecutor: void display_internal()>
<lampiro.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>	<lampiro.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>
<javax.microedition.lcdui.Form: void deleteAll()>	<javax.microedition.lcdui.Form: void deleteAll()>
<lampiro.screens.RosterScreen: void chatWithContact(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.RosterScreen: void chatWithContact(it.yup.xmpp.Contact,java.lang.String)>
<lampiro.screens.MUCScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.MUCScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
LabelPicture:	LabelPicture:
<javax.microedition.midlet.MIDletStateChangeException: void printStackTrace()>	<javax.microedition.midlet.MIDletStateChangeException: void printStackTrace()>
[CDATA[	[CDATA[
Send	Send
<it.yup.ui.UIAccordion: int getLabelGradientColor()>	<it.yup.ui.UIAccordion: int getLabelGradientColor()>
<it.yup.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>	<it.yup.screens.TaskListScreen: void <init>(it.yup.xmpp.Task[])>
<javax.microedition.io.StreamConnection: java.io.OutputStream openOutputStream()>	<javax.microedition.io.StreamConnection: java.io.OutputStream openOutputStream()>
<it.yup.ui.UICanvas: boolean close(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: boolean close(it.yup.ui.UIScreen)>
<com.jcraft.jzlib.ZOutputStream: long getTotalOut()>	<com.jcraft.jzlib.ZOutputStream: long getTotalOut()>
<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener3)>	<it.yup.xmpp.FTSender$PacketListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$PacketListener3)>
<it.yup.ui.UIGauge: int access$0(it.yup.ui.UIGauge)>	<it.yup.ui.UIGauge: int access$0(it.yup.ui.UIGauge)>
<it.yup.xmpp.Roster: void <clinit>()>	<it.yup.xmpp.Roster: void <clinit>()>
<it.yup.xmpp.XMPPClient: java.lang.String[] access$5(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient: java.lang.String[] access$5(it.yup.xmpp.XMPPClient)>
<javax.microedition.lcdui.game.GameCanvas: void setFullScreenMode(boolean)>	<javax.microedition.lcdui.game.GameCanvas: void setFullScreenMode(boolean)>
<it.yup.ui.UIScreen: void handleMenuKey(it.yup.ui.UIMenu,int)>	<it.yup.ui.UIScreen: void handleMenuKey(it.yup.ui.UIMenu,int)>
H*W=	H*W=
<com.jcraft.jzlib.FilterInputStream: long skip(long)>	<com.jcraft.jzlib.FilterInputStream: long skip(long)>
<javax.microedition.lcdui.List: void setSelectCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.List: void setSelectCommand(javax.microedition.lcdui.Command)>
\\"1\\"	\\"1\\"
<it.yup.ui.UICombobox: void setSelectedFlags(boolean[])>	<it.yup.ui.UICombobox: void setSelectedFlags(boolean[])>
test01	test01
<it.yup.screens.TaskListScreen: void <clinit>()>	<it.yup.screens.TaskListScreen: void <clinit>()>
<java.lang.IllegalArgumentException: void <init>()>	<java.lang.IllegalArgumentException: void <init>()>
<javax.microedition.lcdui.Graphics: int getClipHeight()>	<javax.microedition.lcdui.Graphics: int getClipHeight()>
<javax.microedition.lcdui.TextField: void setLayout(int)>	<javax.microedition.lcdui.TextField: void setLayout(int)>
<it.yup.ui.UIScreen: void hideNotify()>	<it.yup.ui.UIScreen: void hideNotify()>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>	<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<it.yup.util.ResourceManager: it.yup.util.ResourceManager getManager(java.lang.String,java.lang.String)>	<it.yup.util.ResourceManager: it.yup.util.ResourceManager getManager(java.lang.String,java.lang.String)>
<it.yup.ui.UIGauge: int getValue()>	<it.yup.ui.UIGauge: int getValue()>
<lampiro.screens.ChatScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>	<lampiro.screens.ChatScreen: void getPrintableHeight(javax.microedition.lcdui.Graphics,int)>
<it.yup.xmlstream.BasicXmlStream: void tryToSend()>	<it.yup.xmlstream.BasicXmlStream: void tryToSend()>
jpeg	jpeg
<lampiro.screens.AddContactScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.AddContactScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem,java.util.Vector)>	<it.yup.ui.UIAccordion: void addItem(it.yup.ui.UIItem,java.util.Vector)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>	<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>
<com.jcraft.jzlib.Deflate: void fill_window()>	<com.jcraft.jzlib.Deflate: void fill_window()>
Subscription:	Subscription:
<it.yup.xmpp.XMPPClient: it.yup.xmlstream.BasicXmlStream createStream(boolean,boolean)>	<it.yup.xmpp.XMPPClient: it.yup.xmlstream.BasicXmlStream createStream(boolean,boolean)>
<it.yup.ui.UICombobox: void append(java.lang.String)>	<it.yup.ui.UICombobox: void append(java.lang.String)>
FORM_TYPE	FORM_TYPE
<javax.microedition.lcdui.TextBox: void setCommandListener(javax.microedition.lcdui.CommandListener)>	<javax.microedition.lcdui.TextBox: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<it.yup.ui.UITextField: void setDirty(boolean)>	<it.yup.ui.UITextField: void setDirty(boolean)>
<lampiro.screens.RosterScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.RosterScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.xml.KXmlParser: java.lang.String getAttributeName(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributeName(int)>
<it.yup.xml.KXmlParser: boolean isAttributeDefault(int)>	<it.yup.xml.KXmlParser: boolean isAttributeDefault(int)>
<it.yup.ui.UIAccordion: void removePanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void removePanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem)>
<it.yup.ui.UIScreen: void invalidate(int,int)>	<it.yup.ui.UIScreen: void invalidate(int,int)>
<it.yup.xmpp.SimpleDataFormExecutor: it.yup.xmpp.packets.Stanza buildReply(it.yup.xml.Element)>	<it.yup.xmpp.SimpleDataFormExecutor: it.yup.xmpp.packets.Stanza buildReply(it.yup.xml.Element)>
<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.Deflate: int deflateInit(com.jcraft.jzlib.ZStream,int)>
<java.util.Calendar: void setTime(java.util.Date)>	<java.util.Calendar: void setTime(java.util.Date)>
test_ff	test_ff
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>	<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<it.yup.xml.KXmlParser: int nextTag()>	<it.yup.xml.KXmlParser: int nextTag()>
<it.yup.ui.UIMenu: void setAbsoluteX(int)>	<it.yup.ui.UIMenu: void setAbsoluteX(int)>
mechanism	mechanism
<it.yup.xmlstream.BasicXmlStream: void promotePacket(it.yup.xml.Element)>	<it.yup.xmlstream.BasicXmlStream: void promotePacket(it.yup.xml.Element)>
<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout,java.util.Vector)>	<it.yup.ui.UIAccordion$AccordionItem: void <init>(it.yup.ui.UIAccordion,it.yup.ui.UIVLayout,java.util.Vector)>
--	--
<it.yup.ui.UIButton: int getHPadding()>	<it.yup.ui.UIButton: int getHPadding()>
<it.yup.ui.UICombobox: int getSelectedIndex()>	<it.yup.ui.UICombobox: int getSelectedIndex()>
<it.yup.ui.UIScreen: void keyRepeated(int)>	<it.yup.ui.UIScreen: void keyRepeated(int)>
<<\\"The quick brown fox jumps over the lazy dog. And this is a_very_long_word. \\">>	<<\\"The quick brown fox jumps over the lazy dog. And this is a_very_long_word. \\">>
<it.yup.xmpp.XMPPClient: void closeStream()>	<it.yup.xmpp.XMPPClient: void closeStream()>
<lampiro.screens.SplashScreen: void <clinit>()>	<lampiro.screens.SplashScreen: void <clinit>()>
<javax.microedition.lcdui.TextField: java.lang.String getString()>	<javax.microedition.lcdui.TextField: java.lang.String getString()>
<lampiro.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.ContactInfoScreen: void <init>(it.yup.xmpp.Contact)>
<<\\"illegal tag name: \\">>	<<\\"illegal tag name: \\">>
<it.yup.xml.BProcessor: void writeTag(byte,java.lang.String,java.io.OutputStream)>	<it.yup.xml.BProcessor: void writeTag(byte,java.lang.String,java.io.OutputStream)>
<lampiro.screens.AddContactScreen: it.yup.ui.UITextField access$0(lampiro.screens.AddContactScreen)>	<lampiro.screens.AddContactScreen: it.yup.ui.UITextField access$0(lampiro.screens.AddContactScreen)>
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>
<it.yup.screens.RegisterScreen: int indexOf(javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen: int indexOf(javax.microedition.lcdui.Item)>
<lampiro.screens.DataResultScreen: void <clinit>()>	<lampiro.screens.DataResultScreen: void <clinit>()>
bmp	bmp
<javax.microedition.lcdui.Canvas: int getGameAction(int)>	<javax.microedition.lcdui.Canvas: int getGameAction(int)>
<it.yup.xmpp.Contact: boolean unread_msg()>	<it.yup.xmpp.Contact: boolean unread_msg()>
<it.yup.xmpp.Roster$IQResultListener2: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener2: void handleError(it.yup.xml.Element)>
<javax.microedition.lcdui.Spacer: void <init>(int,int)>	<javax.microedition.lcdui.Spacer: void <init>(int,int)>
<lampiro.screens.RosterScreen: void createMUC(it.yup.xmpp.IQResultListener)>	<lampiro.screens.RosterScreen: void createMUC(it.yup.xmpp.IQResultListener)>
<it.yup.ui.UIAccordion: int getLabelColor()>	<it.yup.ui.UIAccordion: int getLabelColor()>
<it.yup.util.MemoryLogConsumer: void setExiting()>	<it.yup.util.MemoryLogConsumer: void setExiting()>
<lampiro.screens.FTScreen: lampiro.screens.FTScreen getInstance()>	<lampiro.screens.FTScreen: lampiro.screens.FTScreen getInstance()>
<javax.microedition.media.control.RecordControl: void startRecord()>	<javax.microedition.media.control.RecordControl: void startRecord()>
<it.yup.transport.SocketChannel$UTFReader: int getByte()>	<it.yup.transport.SocketChannel$UTFReader: int getByte()>
combo3	combo3
muc#roomconfig_membersonly	muc#roomconfig_membersonly
<it.yup.xmlstream.BasicXmlStream: void processFeatures(it.yup.xml.Element[])>	<it.yup.xmlstream.BasicXmlStream: void processFeatures(it.yup.xml.Element[])>
Popup-B	Popup-B
<it.yup.ui.UITextField: void setSelected(boolean)>	<it.yup.ui.UITextField: void setSelected(boolean)>
<it.yup.util.MetaVector: java.lang.Object firstElement()>	<it.yup.util.MetaVector: java.lang.Object firstElement()>
<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getFrom()>	<it.yup.xmpp.SimpleDataFormExecutor: java.lang.String getFrom()>
<it.yup.util.RMSIndex$KeyEnumeration: void <init>(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex$KeyEnumeration: void <init>(it.yup.util.RMSIndex)>
maxValue negative for interactive mode	maxValue negative for interactive mode
<it.yup.ui.UIAccordion: java.util.Enumeration getSubPanelElements(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: java.util.Enumeration getSubPanelElements(it.yup.ui.UIItem)>
<it.yup.ui.UIScreen: void invalidatePopups(it.yup.ui.UIMenu,int,int,int,int)>	<it.yup.ui.UIScreen: void invalidatePopups(it.yup.ui.UIMenu,int,int,int,int)>
<it.yup.xmpp.Roster$IQResultListener2: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener2: void handleResult(it.yup.xml.Element)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>	<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
<lampiro.screens.RosterScreen$UIGroup: void saveGroups()>	<lampiro.screens.RosterScreen$UIGroup: void saveGroups()>
<javax.microedition.lcdui.Graphics: void fillRect(int,int,int,int)>	<javax.microedition.lcdui.Graphics: void fillRect(int,int,int,int)>
<it.yup.ui.UIItem: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIItem: void paint(javax.microedition.lcdui.Graphics,int,int)>
<lampiro.screens.GatewayRegisterScreen: void packetReceived(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen: void packetReceived(it.yup.xml.Element)>
lt	lt
<it.yup.xml.KXmlParser: void parseEndTag()>	<it.yup.xml.KXmlParser: void parseEndTag()>
<it.yup.xmlstream.KXmlParser: int getAttributeCount()>	<it.yup.xmlstream.KXmlParser: int getAttributeCount()>
<javax.microedition.lcdui.Font: int getSize()>	<javax.microedition.lcdui.Font: int getSize()>
version	version
<it.yup.ui.UIAccordion: void setLabelColor(int)>	<it.yup.ui.UIAccordion: void setLabelColor(int)>
<it.yup.ui.UIAccordion: void insertSpareItem(it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: void insertSpareItem(it.yup.ui.UIItem,int)>
\r\n	\r\n
<it.yup.transport.SocketChannel$UTFReader: void <init>(it.yup.transport.SocketChannel,java.io.InputStream)>	<it.yup.transport.SocketChannel$UTFReader: void <init>(it.yup.transport.SocketChannel,java.io.InputStream)>
\\"unsubscribed\\"	\\"unsubscribed\\"
<lampiro.screens.MUCScreen: void updateResource()>	<lampiro.screens.MUCScreen: void updateResource()>
<lampiro.screens.RegisterScreen: java.lang.String srvQuery()>	<lampiro.screens.RegisterScreen: java.lang.String srvQuery()>
<com.jcraft.jzlib.Deflate: int deflateParams(com.jcraft.jzlib.ZStream,int,int)>	<com.jcraft.jzlib.Deflate: int deflateParams(com.jcraft.jzlib.ZStream,int,int)>
<it.yup.xmlstream.AccountRegistration: void <init>()>	<it.yup.xmlstream.AccountRegistration: void <init>()>
<it.yup.ui.UICanvas: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String)>	<it.yup.ui.UICanvas: void showAlert(javax.microedition.lcdui.AlertType,java.lang.String,java.lang.String)>
unexpected type	unexpected type
text-single	text-single
<com.jcraft.jzlib.InfTree: int inflate_trees_fixed(int[],int[],int[][],int[][],com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfTree: int inflate_trees_fixed(int[],int[],int[][],int[][],com.jcraft.jzlib.ZStream)>
<it.yup.xmlstream.KXmlParser: void read(char)>	<it.yup.xmlstream.KXmlParser: void read(char)>
<?xml version=\\\"1.0\\\"?>\n	<?xml version=\\\"1.0\\\"?>\n
agw	agw
<it.yup.tests.RMSTestMidlet: void testFuncs(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testFuncs(it.yup.util.RMSIndex)>
<java.io.Reader: int read()>	<java.io.Reader: int read()>
<it.yup.xml.KXmlParser: java.lang.String getNamespace(java.lang.String)>	<it.yup.xml.KXmlParser: java.lang.String getNamespace(java.lang.String)>
<lampiro.screens.CommandListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.CommandListScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
Task error	Task error
<it.yup.xmpp.FTSender$FTSEventHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void chunkSent(int,int,it.yup.xmpp.FTSender)>
<lampiro.screens.SendMMScreen$UploadHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void fileSent(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>
<lampiro.screens.RosterScreen: boolean askRepaint()>	<lampiro.screens.RosterScreen: boolean askRepaint()>
a-file-transfer	a-file-transfer
Bigmenu2-	Bigmenu2-
<com.jcraft.jzlib.Tree: void gen_bitlen(com.jcraft.jzlib.Deflate)>	<com.jcraft.jzlib.Tree: void gen_bitlen(com.jcraft.jzlib.Deflate)>
<com.jcraft.jzlib.ZStream: int inflateEnd()>	<com.jcraft.jzlib.ZStream: int inflateEnd()>
<lampiro.screens.RosterScreen: void access$3(lampiro.screens.RosterScreen,java.util.Hashtable,java.lang.String,java.lang.String,javax.microedition.lcdui.Image,java.lang.String)>	<lampiro.screens.RosterScreen: void access$3(lampiro.screens.RosterScreen,java.util.Hashtable,java.lang.String,java.lang.String,javax.microedition.lcdui.Image,java.lang.String)>
<it.yup.ui.UITextField: void <clinit>()>	<it.yup.ui.UITextField: void <clinit>()>
<com.jcraft.jzlib.FilterInputStream: void <init>(java.io.InputStream)>	<com.jcraft.jzlib.FilterInputStream: void <init>(java.io.InputStream)>
<it.yup.xmlstream.Element: void serialize(java.io.DataOutputStream)>	<it.yup.xmlstream.Element: void serialize(java.io.DataOutputStream)>
<lampiro.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>	<lampiro.screens.RosterScreen: void rosterXsubscription(it.yup.xml.Element)>
<it.yup.xml.KXmlParser: boolean adjustNsp()>	<it.yup.xml.KXmlParser: boolean adjustNsp()>
<com.jcraft.jzlib.ZStream: int read_buf(byte[],int,int)>	<com.jcraft.jzlib.ZStream: int read_buf(byte[],int,int)>
Unsupported Feature	Unsupported Feature
Message	Message
<lampiro.screens.DataFormScreen: void setActions(int)>	<lampiro.screens.DataFormScreen: void setActions(int)>
<it.yup.transport.SocketChannel: java.io.OutputStream getOutputStream()>	<it.yup.transport.SocketChannel: java.io.OutputStream getOutputStream()>
<com.jcraft.jzlib.Adler32: long adler32(long,byte[],int,int)>	<com.jcraft.jzlib.Adler32: long adler32(long,byte[],int,int)>
illegal xmldecl	illegal xmldecl
<it.yup.xmlstream.KXmlParser: java.lang.String getPrefix()>	<it.yup.xmlstream.KXmlParser: java.lang.String getPrefix()>
<java.io.ByteArrayOutputStream: java.lang.String toString()>	<java.io.ByteArrayOutputStream: java.lang.String toString()>
http://jabber.org/protocol/ibb	http://jabber.org/protocol/ibb
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<it.yup.xmpp.XMPPClient: it.yup.xmpp.Contact getMyContact()>	<it.yup.xmpp.XMPPClient: it.yup.xmpp.Contact getMyContact()>
<java.io.OutputStream: void close()>	<java.io.OutputStream: void close()>
<lampiro.screens.ChatScreen$MUCUpdateListener: void <init>(lampiro.screens.ChatScreen)>	<lampiro.screens.ChatScreen$MUCUpdateListener: void <init>(lampiro.screens.ChatScreen)>
\\"jid-multi\\"	\\"jid-multi\\"
<it.yup.xmpp.Contact: void updatePresence(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: void updatePresence(it.yup.xmpp.packets.Presence)>
In removing menu item	In removing menu item
<com.jcraft.jzlib.ZStream: int inflateInit()>	<com.jcraft.jzlib.ZStream: int inflateInit()>
<org.bouncycastle.util.encoders.UrlBase64: byte[] decode(byte[])>	<org.bouncycastle.util.encoders.UrlBase64: byte[] decode(byte[])>
<javax.microedition.lcdui.Graphics: int getColor()>	<javax.microedition.lcdui.Graphics: int getColor()>
<java.lang.Boolean: void <init>(boolean)>	<java.lang.Boolean: void <init>(boolean)>
<java.util.Vector: java.lang.Object firstElement()>	<java.util.Vector: java.lang.Object firstElement()>
<it.yup.util.RMSIndex: java.util.Vector access$0(it.yup.util.RMSIndex)>	<it.yup.util.RMSIndex: java.util.Vector access$0(it.yup.util.RMSIndex)>
<it.yup.ui.UILabel: void <init>(java.lang.String)>	<it.yup.ui.UILabel: void <init>(java.lang.String)>
An error occurred while executing the task	An error occurred while executing the task
<it.yup.xmpp.packets.IQResultListener: void handleResult(it.yup.xmlstream.Element)>	<it.yup.xmpp.packets.IQResultListener: void handleResult(it.yup.xmlstream.Element)>
<lampiro.screens.ContactInfoScreen: it.yup.ui.UILabel access$7(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UILabel access$7(lampiro.screens.ContactInfoScreen)>
agb	agb
<it.yup.ui.UIItem: it.yup.ui.UIScreen getScreen()>	<it.yup.ui.UIItem: it.yup.ui.UIScreen getScreen()>
<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener3)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener3: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener3)>
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleResult(it.yup.xml.Element)>
<java.io.DataInputStream: int read()>	<java.io.DataInputStream: int read()>
<it.yup.xml.KXmlParser: java.lang.String getPositionDescription()>	<it.yup.xml.KXmlParser: java.lang.String getPositionDescription()>
This is a very long string that is not wrapped and hence SHOULD finish with thre full stops!!!!	This is a very long string that is not wrapped and hence SHOULD finish with thre full stops!!!!
<it.yup.ui.UITextField: void setMaxLines(int)>	<it.yup.ui.UITextField: void setMaxLines(int)>
<java.lang.Exception: void printStackTrace()>	<java.lang.Exception: void printStackTrace()>
<com.jcraft.jzlib.Deflate: int deflateReset(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Deflate: int deflateReset(com.jcraft.jzlib.ZStream)>
<lampiro.screens.ChatScreen: boolean needDisplay()>	<lampiro.screens.ChatScreen: boolean needDisplay()>
<lampiro.screens.SendMMScreen$UploadHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>	<lampiro.screens.SendMMScreen$UploadHandler: void fileAcceptance(it.yup.xmpp.Contact,java.lang.String,boolean,it.yup.xmpp.FTSender)>
incomplete literal/length tree	incomplete literal/length tree
<it.yup.util.ResourceIDs: void <init>()>	<it.yup.util.ResourceIDs: void <init>()>
<java.lang.Integer: java.lang.String toHexString(int)>	<java.lang.Integer: java.lang.String toHexString(int)>
next	next
<it.yup.ui.UIMenu: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: it.yup.ui.UIItem replace(int,it.yup.ui.UIItem)>
<com.jcraft.jzlib.InfTree: int inflate_trees_bits(int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.InfTree: int inflate_trees_bits(int[],int[],int[],int[],com.jcraft.jzlib.ZStream)>
<lampiro.screens.StatusScreen: void <init>()>	<lampiro.screens.StatusScreen: void <init>()>
<javax.microedition.lcdui.StringItem: java.lang.String getText()>	<javax.microedition.lcdui.StringItem: java.lang.String getText()>
<it.yup.xmpp.Task: java.lang.String getLabel()>	<it.yup.xmpp.Task: java.lang.String getLabel()>
\\"canceled\\"	\\"canceled\\"
invalid stored block lengths	invalid stored block lengths
<it.yup.xmpp.Roster$IQResultListener1: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Roster$IQResultListener1: void handleError(it.yup.xml.Element)>
<it.yup.xmlstream.KXmlParser: boolean isEmptyElementTag()>	<it.yup.xmlstream.KXmlParser: boolean isEmptyElementTag()>
<java.lang.String: java.lang.String trim()>	<java.lang.String: java.lang.String trim()>
:d	:d
http://www.bluendo.com	http://www.bluendo.com
session-initiate	session-initiate
\\"status\\"	\\"status\\"
<lampiro.screens.MUCScreen: void handlePresence(it.yup.xmpp.MUC,it.yup.xml.Element,java.lang.String)>	<lampiro.screens.MUCScreen: void handlePresence(it.yup.xmpp.MUC,it.yup.xml.Element,java.lang.String)>
<it.yup.ui.UICanvas: int getClipHeight()>	<it.yup.ui.UICanvas: int getClipHeight()>
Popup-A	Popup-A
<it.yup.xml.KXmlSerializer: boolean getFeature(java.lang.String)>	<it.yup.xml.KXmlSerializer: boolean getFeature(java.lang.String)>
<it.yup.ui.UIHLayout: void <init>(int)>	<it.yup.ui.UIHLayout: void <init>(int)>
\\"_*\\"	\\"_*\\"
<java.io.DataOutputStream: void writeInt(int)>	<java.io.DataOutputStream: void writeInt(int)>
<javax.microedition.lcdui.Command: java.lang.String getLabel()>	<javax.microedition.lcdui.Command: java.lang.String getLabel()>
Error saving roster to storage:\n	Error saving roster to storage:\n
<it.yup.xml.KXmlParser: java.lang.String readName()>	<it.yup.xml.KXmlParser: java.lang.String readName()>
xmldecl-version	xmldecl-version
<it.yup.xmpp.BluendoXMLRPC: void open()>	<it.yup.xmpp.BluendoXMLRPC: void open()>
set	set
<it.yup.xmlstream.KXmlParser: boolean isWhitespace()>	<it.yup.xmlstream.KXmlParser: boolean isWhitespace()>
<it.yup.xmlstream.StreamEventListener: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.StreamEventListener: void gotStreamEvent(java.lang.String,java.lang.Object)>
<it.yup.ui.UIPanel: void <init>(boolean,boolean)>	<it.yup.ui.UIPanel: void <init>(boolean,boolean)>
<it.yup.ui.UIVLayout: void setHeight(int)>	<it.yup.ui.UIVLayout: void setHeight(int)>
<lampiro.screens.RegisterScreen: java.lang.String getUser(java.lang.String)>	<lampiro.screens.RegisterScreen: java.lang.String getUser(java.lang.String)>
<it.yup.xmpp.Contact: int getHistoryLength(java.lang.String)>	<it.yup.xmpp.Contact: int getHistoryLength(java.lang.String)>
<it.yup.ui.UILabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>	<it.yup.ui.UILabel: void paintTextLine(javax.microedition.lcdui.Graphics,java.lang.String,int,int)>
<it.yup.screens.SplashScreen$1: void <init>(it.yup.screens.SplashScreen)>	<it.yup.screens.SplashScreen$1: void <init>(it.yup.screens.SplashScreen)>
<lampiro.screens.RosterScreen: java.lang.String getActionJid()>	<lampiro.screens.RosterScreen: java.lang.String getActionJid()>
<lampiro.screens.DataResultScreen: boolean keyPressed(int)>	<lampiro.screens.DataResultScreen: boolean keyPressed(int)>
<it.yup.xmpp.CommandExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>	<it.yup.xmpp.CommandExecutor: void display(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable)>
<it.yup.xmlstream.SASLAuthenticator: void access$0(it.yup.xmlstream.SASLAuthenticator,it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator: void access$0(it.yup.xmlstream.SASLAuthenticator,it.yup.xml.Element)>
1.0.2	1.0.2
<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel)>	<it.yup.transport.SocketChannel$TimerTask1: void <init>(it.yup.transport.SocketChannel)>
<it.yup.ui.UIScreen: void removeAllPopups()>	<it.yup.ui.UIScreen: void removeAllPopups()>
<it.yup.xmpp.packets.DataForm$Field: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm$Field: void <init>(it.yup.xmpp.packets.DataForm,it.yup.xml.Element)>
combo3-5	combo3-5
<it.yup.xml.KXmlParser: int peekType()>	<it.yup.xml.KXmlParser: int peekType()>
<it.yup.transport.SocketChannel$UTFReader: void close()>	<it.yup.transport.SocketChannel$UTFReader: void close()>
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>	<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>
<it.yup.xmlstream.KXmlParser: int parseLegacy(boolean)>	<it.yup.xmlstream.KXmlParser: int parseLegacy(boolean)>
<it.yup.util.MetaVector: void copyInto(java.lang.Object[])>	<it.yup.util.MetaVector: void copyInto(java.lang.Object[])>
<lampiro.screens.RosterScreen: void setWaitingDF(lampiro.screens.RosterScreen$WaitScreen)>	<lampiro.screens.RosterScreen: void setWaitingDF(lampiro.screens.RosterScreen$WaitScreen)>
<lampiro.screens.MUCScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.MUCScreen: void <init>(it.yup.xmpp.Contact)>
xmpp/	xmpp/
/icons/contact_delete.png	/icons/contact_delete.png
<it.yup.xmpp.FTReceiver: it.yup.xmpp.FTReceiver$FTREventHandler access$1(it.yup.xmpp.FTReceiver)>	<it.yup.xmpp.FTReceiver: it.yup.xmpp.FTReceiver$FTREventHandler access$1(it.yup.xmpp.FTReceiver)>
<java.lang.Object: void notify()>	<java.lang.Object: void notify()>
<lampiro.screens.RosterScreen: void firstLoginIntro()>	<lampiro.screens.RosterScreen: void firstLoginIntro()>
<com.jcraft.jzlib.FilterInputStream: int available()>	<com.jcraft.jzlib.FilterInputStream: int available()>
<it.yup.xmlstream.KXmlParser: boolean getFeature(java.lang.String)>	<it.yup.xmlstream.KXmlParser: boolean getFeature(java.lang.String)>
<it.yup.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.SimpleComposerScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<org.xmlpull.v1.XmlSerializer: void flush()>	<org.xmlpull.v1.XmlSerializer: void flush()>
<lampiro.screens.RosterScreen: void showNextScreen(it.yup.ui.UIScreen)>	<lampiro.screens.RosterScreen: void showNextScreen(it.yup.ui.UIScreen)>
Error!!!	Error!!!
<it.yup.util.Utils: boolean is_email(java.lang.String)>	<it.yup.util.Utils: boolean is_email(java.lang.String)>
<lampiro.screens.RegisterScreen$1: void <init>(lampiro.screens.RegisterScreen)>	<lampiro.screens.RegisterScreen$1: void <init>(lampiro.screens.RegisterScreen)>
<it.yup.tests.TestMidlet: void exit()>	<it.yup.tests.TestMidlet: void exit()>
<lampiro.screens.RosterScreen$UIGroup: void stopMoving()>	<lampiro.screens.RosterScreen$UIGroup: void stopMoving()>
raw	raw
<it.yup.ui.UICombobox: boolean access$0(it.yup.ui.UICombobox)>	<it.yup.ui.UICombobox: boolean access$0(it.yup.ui.UICombobox)>
<it.yup.tests.UITestMidlet$KeysScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.tests.UITestMidlet$KeysScreen: void paint(javax.microedition.lcdui.Graphics)>
client	client
<java.util.Vector: void removeAllElements()>	<java.util.Vector: void removeAllElements()>
<lampiro.screens.RegisterScreen: lampiro.screens.RegisterScreen getInstance()>	<lampiro.screens.RegisterScreen: lampiro.screens.RegisterScreen getInstance()>
<it.yup.xmpp.IqManager: void streamInitialized()>	<it.yup.xmpp.IqManager: void streamInitialized()>
</	</
<it.yup.xml.Element: java.lang.String createUniqueId()>	<it.yup.xml.Element: java.lang.String createUniqueId()>
empty distance tree with lengths	empty distance tree with lengths
<it.yup.xmlstream.EventQueryRegistration: void <init>(java.lang.Object,java.util.Vector)>	<it.yup.xmlstream.EventQueryRegistration: void <init>(java.lang.Object,java.util.Vector)>
<javax.microedition.lcdui.ChoiceGroup: boolean isSelected(int)>	<javax.microedition.lcdui.ChoiceGroup: boolean isSelected(int)>
<lampiro.screens.AddContactScreen: void getGateways()>	<lampiro.screens.AddContactScreen: void getGateways()>
<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener2)>	<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener2)>
destroy	destroy
<it.yup.xmpp.XMPPClient$TimerTask1: void run()>	<it.yup.xmpp.XMPPClient$TimerTask1: void run()>
<it.yup.xml.BProcessor: void writeLength(int,java.io.OutputStream)>	<it.yup.xml.BProcessor: void writeLength(int,java.io.OutputStream)>
<it.yup.ui.UIScreen: it.yup.ui.UICanvas getCanvas()>	<it.yup.ui.UIScreen: it.yup.ui.UICanvas getCanvas()>
<it.yup.ui.UIUtils: void <clinit>()>	<it.yup.ui.UIUtils: void <clinit>()>
<lampiro.screens.FTScreen: void startFtreceive(it.yup.xmpp.FTReceiver$OpenListener)>	<lampiro.screens.FTScreen: void startFtreceive(it.yup.xmpp.FTReceiver$OpenListener)>
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespacePrefix(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespacePrefix(int)>
<it.yup.ui.UILabel: void setWrappable(boolean,int)>	<it.yup.ui.UILabel: void setWrappable(boolean,int)>
<com.jcraft.jzlib.Deflate$Config: void <init>(int,int,int,int,int)>	<com.jcraft.jzlib.Deflate$Config: void <init>(int,int,int,int,int)>
<it.yup.ui.UILabel: java.util.Vector splitLongStrings(java.lang.String,int,javax.microedition.lcdui.Font)>	<it.yup.ui.UILabel: java.util.Vector splitLongStrings(java.lang.String,int,javax.microedition.lcdui.Font)>
<it.yup.transport.SocketChannel$UTFReader: int read(char[])>	<it.yup.transport.SocketChannel$UTFReader: int read(char[])>
_16	_16
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(byte[],int,int)>	<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(byte[],int,int)>
<it.yup.util.Utils: boolean is_jid(java.lang.String)>	<it.yup.util.Utils: boolean is_jid(java.lang.String)>
Bigmenu1	Bigmenu1
unknown compression method	unknown compression method
<com.jcraft.jzlib.InfBlocks: int proc(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.InfBlocks: int proc(com.jcraft.jzlib.ZStream,int)>
<it.yup.ui.UIGauge: void <init>(java.lang.String,boolean,int,int)>	<it.yup.ui.UIGauge: void <init>(java.lang.String,boolean,int,int)>
<lampiro.screens.RosterScreen: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>	<lampiro.screens.RosterScreen: void fileError(it.yup.xmpp.Contact,java.lang.String,it.yup.xml.Element)>
<com.jcraft.jzlib.ZOutputStream: void end()>	<com.jcraft.jzlib.ZOutputStream: void end()>
<lampiro.screens.RosterScreen: boolean reorganizeContact(it.yup.xmpp.Contact,int)>	<lampiro.screens.RosterScreen: boolean reorganizeContact(it.yup.xmpp.Contact,int)>
<it.yup.ui.UIMenu: boolean isAutoClose()>	<it.yup.ui.UIMenu: boolean isAutoClose()>
<it.yup.ui.Semaphore: long permits()>	<it.yup.ui.Semaphore: long permits()>
<javax.microedition.io.HttpConnection: int getResponseCode()>	<javax.microedition.io.HttpConnection: int getResponseCode()>
<it.yup.transport.TransportListener: void connectionLost(it.yup.transport.BaseChannel)>	<it.yup.transport.TransportListener: void connectionLost(it.yup.transport.BaseChannel)>
<it.yup.ui.UIButton: void setHPadding(int)>	<it.yup.ui.UIButton: void setHPadding(int)>
<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener2)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator,it.yup.xmlstream.SASLAuthenticator$PacketListener2)>
<it.yup.ui.UIItem: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIItem: int getHeight(javax.microedition.lcdui.Graphics)>
<it.yup.ui.UIItem: void drawBorder(javax.microedition.lcdui.Graphics,int[],int[],int[][])>	<it.yup.ui.UIItem: void drawBorder(javax.microedition.lcdui.Graphics,int[],int[],int[][])>
<it.yup.ui.UIScreen: boolean askRepaint()>	<it.yup.ui.UIScreen: boolean askRepaint()>
<lampiro.screens.DataFormScreen: void fillForm()>	<lampiro.screens.DataFormScreen: void fillForm()>
otorola	otorola
<it.yup.util.MemoryLogConsumer: void <init>()>	<it.yup.util.MemoryLogConsumer: void <init>()>
<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient)>
groupchat	groupchat
<it.yup.ui.UITextField: void <init>(java.lang.String,java.lang.String,int,int)>	<it.yup.ui.UITextField: void <init>(java.lang.String,java.lang.String,int,int)>
apos	apos
<com.jcraft.jzlib.FilterInputStream: int read(byte[],int,int)>	<com.jcraft.jzlib.FilterInputStream: int read(byte[],int,int)>
No Input specified	No Input specified
<java.io.ByteArrayOutputStream: void write(byte[])>	<java.io.ByteArrayOutputStream: void write(byte[])>
\\"field\\"	\\"field\\"
<it.yup.ui.UIItem: int getGradientColor()>	<it.yup.ui.UIItem: int getGradientColor()>
<it.yup.xmpp.XMPPClient$XmppListener: void authenticated()>	<it.yup.xmpp.XMPPClient$XmppListener: void authenticated()>
<it.yup.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>	<it.yup.screens.RosterScreen: java.lang.Object handleDataForm(it.yup.xmpp.packets.DataForm,byte,it.yup.xmpp.DataFormListener,int)>
<<\\"veryLongLabel \\">>	<<\\"veryLongLabel \\">>
<it.yup.xmpp.Roster: void streamInitialized()>	<it.yup.xmpp.Roster: void streamInitialized()>
<it.yup.ui.UICanvas: void setMenuKeys(int,int)>	<it.yup.ui.UICanvas: void setMenuKeys(int,int)>
<javax.microedition.lcdui.Form: void removeCommand(javax.microedition.lcdui.Command)>	<javax.microedition.lcdui.Form: void removeCommand(javax.microedition.lcdui.Command)>
<it.yup.ui.UIAccordion: int removeItem(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: int removeItem(it.yup.ui.UIItem)>
MENU	MENU
expected: \'	expected: \'
<it.yup.xmpp.XMPPClient: void stopClient()>	<it.yup.xmpp.XMPPClient: void stopClient()>
/icons/gear.png	/icons/gear.png
urn:xmpp:jingle:0	urn:xmpp:jingle:0
<it.yup.ui.UIRadioButtons: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIRadioButtons: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xml.KXmlParser: void read(char)>	<it.yup.xml.KXmlParser: void read(char)>
jabber.bluendo.com	jabber.bluendo.com
<javax.microedition.lcdui.Canvas: void <init>()>	<javax.microedition.lcdui.Canvas: void <init>()>
<it.yup.util.Logger: void log(java.lang.String)>	<it.yup.util.Logger: void log(java.lang.String)>
<it.yup.xmlstream.EventQuery: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>	<it.yup.xmlstream.EventQuery: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>
<it.yup.tests.TestMidlet: void destroyApp(boolean)>	<it.yup.tests.TestMidlet: void destroyApp(boolean)>
<lampiro.screens.CommandListScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.CommandListScreen: void itemAction(it.yup.ui.UIItem)>
<java.io.ByteArrayInputStream: void <init>(byte[])>	<java.io.ByteArrayInputStream: void <init>(byte[])>
<it.yup.xmpp.XMPPClient$DiscoHandler: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.XMPPClient$DiscoHandler: void packetReceived(it.yup.xml.Element)>
DIGEST-MD5	DIGEST-MD5
<it.yup.ui.UIAccordion: void insertPanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem,int)>	<it.yup.ui.UIAccordion: void insertPanelItem(it.yup.ui.UIItem,it.yup.ui.UIItem,int)>
\\"from\\"	\\"from\\"
<it.yup.ui.UICombobox: void append(it.yup.ui.UILabel)>	<it.yup.ui.UICombobox: void append(it.yup.ui.UILabel)>
<it.yup.ui.UIMenu: void setWidth(int)>	<it.yup.ui.UIMenu: void setWidth(int)>
<lampiro.screens.FTScreen$FTItem: boolean access$3()>	<lampiro.screens.FTScreen$FTItem: boolean access$3()>
<it.yup.ui.UIAccordion: void invalidateItems(int)>	<it.yup.ui.UIAccordion: void invalidateItems(int)>
<it.yup.xmlstream.BasicXmlStream: boolean areMatching(it.yup.xml.Element,it.yup.xmlstream.EventQuery)>	<it.yup.xmlstream.BasicXmlStream: boolean areMatching(it.yup.xml.Element,it.yup.xmlstream.EventQuery)>
<javax.microedition.lcdui.ChoiceGroup: void setSelectedFlags(boolean[])>	<javax.microedition.lcdui.ChoiceGroup: void setSelectedFlags(boolean[])>
<com.jcraft.jzlib.ZStream: int deflateInit(int,int)>	<com.jcraft.jzlib.ZStream: int deflateInit(int,int)>
<java.lang.Thread: void start()>	<java.lang.Thread: void start()>
<it.yup.xmlstream.KXmlSerializer: int getDepth()>	<it.yup.xmlstream.KXmlSerializer: int getDepth()>
urn:ietf:params:xml:ns:xmpp-session	urn:ietf:params:xml:ns:xmpp-session
<it.yup.ui.UISeparator: void <init>(int)>	<it.yup.ui.UISeparator: void <init>(int)>
<it.yup.xml.KXmlParser: int next()>	<it.yup.xml.KXmlParser: int next()>
<it.yup.screens.RosterScreen: void paintHeader(javax.microedition.lcdui.Graphics)>	<it.yup.screens.RosterScreen: void paintHeader(javax.microedition.lcdui.Graphics)>
<it.yup.ui.UIItem: int getLayoutHeight()>	<it.yup.ui.UIItem: int getLayoutHeight()>
Illegal: ]]>	Illegal: ]]>
<it.yup.ui.UIAccordion: int getSepColor()>	<it.yup.ui.UIAccordion: int getSepColor()>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>	<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<it.yup.transport.BaseChannel: boolean pollAlive()>	<it.yup.transport.BaseChannel: boolean pollAlive()>
Not enough memory for completing the authentication	Not enough memory for completing the authentication
yuprms	yuprms
<it.yup.xmpp.FTSender$IQResultListener4: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener4: void handleError(it.yup.xml.Element)>
jfif	jfif
<it.yup.xmlstream.KXmlParser: java.lang.String getInputEncoding()>	<it.yup.xmlstream.KXmlParser: java.lang.String getInputEncoding()>
<java.lang.String: int indexOf(java.lang.String,int)>	<java.lang.String: int indexOf(java.lang.String,int)>
<com.jcraft.jzlib.Deflate: void send_tree(short[],int)>	<com.jcraft.jzlib.Deflate: void send_tree(short[],int)>
<it.yup.xmpp.FTSender: void access$8(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: void access$8(it.yup.xmpp.FTSender)>
<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>	<it.yup.xml.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>
<it.yup.tests.TestMidlet: void <init>()>	<it.yup.tests.TestMidlet: void <init>()>
<com.jcraft.jzlib.Deflate: void set_data_type()>	<com.jcraft.jzlib.Deflate: void set_data_type()>
<it.yup.screens.RosterScreen: void toggleMenus()>	<it.yup.screens.RosterScreen: void toggleMenus()>
invalid distance code	invalid distance code
<it.yup.ui.UIMenu: void setAutoClose(boolean)>	<it.yup.ui.UIMenu: void setAutoClose(boolean)>
<it.yup.ui.UILayout: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UILayout: boolean contains(it.yup.ui.UIItem)>
<![CDATA[	<![CDATA[
<javax.microedition.lcdui.ImageItem: void <init>(java.lang.String,javax.microedition.lcdui.Image,int,java.lang.String)>	<javax.microedition.lcdui.ImageItem: void <init>(java.lang.String,javax.microedition.lcdui.Image,int,java.lang.String)>
<javax.microedition.rms.RecordStore: void closeRecordStore()>	<javax.microedition.rms.RecordStore: void closeRecordStore()>
<com.jcraft.jzlib.InfBlocks: int inflate_flush(com.jcraft.jzlib.ZStream,int)>	<com.jcraft.jzlib.InfBlocks: int inflate_flush(com.jcraft.jzlib.ZStream,int)>
Resource Manager Error	Resource Manager Error
<lampiro.screens.RosterScreen: void updateScreen()>	<lampiro.screens.RosterScreen: void updateScreen()>
<it.yup.screens.RegisterScreen: java.lang.String srvQuery()>	<it.yup.screens.RegisterScreen: java.lang.String srvQuery()>
<it.yup.ui.UIScreen: java.lang.String getTitle()>	<it.yup.ui.UIScreen: java.lang.String getTitle()>
<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener2: void <init>(it.yup.xmlstream.SASLAuthenticator)>
<it.yup.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>	<it.yup.screens.CommandListScreen: void <init>(it.yup.xmpp.Contact,java.lang.String)>
<it.yup.ui.UILayout: void updateChildren()>	<it.yup.ui.UILayout: void updateChildren()>
/transport/yahoo.png	/transport/yahoo.png
invalid value for non interactive mode	invalid value for non interactive mode
<java.io.OutputStream: void <init>()>	<java.io.OutputStream: void <init>()>
<java.util.Hashtable: void <init>(int)>	<java.util.Hashtable: void <init>(int)>
<lampiro.screens.ContactInfoScreen: void <clinit>()>	<lampiro.screens.ContactInfoScreen: void <clinit>()>
<javax.microedition.lcdui.Display: javax.microedition.lcdui.Display getDisplay(javax.microedition.midlet.MIDlet)>	<javax.microedition.lcdui.Display: javax.microedition.lcdui.Display getDisplay(javax.microedition.midlet.MIDlet)>
<it.yup.ui.UICanvas: void longPress(it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: void longPress(it.yup.ui.UIScreen)>
<it.yup.xmpp.Roster: void access$1(it.yup.xmpp.Roster)>	<it.yup.xmpp.Roster: void access$1(it.yup.xmpp.Roster)>
<lampiro.screens.RosterScreen: it.yup.ui.UIAccordion getAccordion()>	<lampiro.screens.RosterScreen: it.yup.ui.UIAccordion getAccordion()>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>	<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<lampiro.screens.RosterScreen$MUCStateHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$MUCStateHandler: void handleError(it.yup.xml.Element)>
<it.yup.xmlstream.Element: void <init>()>	<it.yup.xmlstream.Element: void <init>()>
<javax.microedition.midlet.MIDlet: boolean platformRequest(java.lang.String)>	<javax.microedition.midlet.MIDlet: boolean platformRequest(java.lang.String)>
harp	harp
<it.yup.xmlstream.EventQueryRegistration: void remove()>	<it.yup.xmlstream.EventQueryRegistration: void remove()>
<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleResult(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleResult(it.yup.xml.Element)>
roster	roster
name expected	name expected
http://bluendo.com/midp#platform	http://bluendo.com/midp#platform
\\"*\\"	\\"*\\"
iq	iq
<it.yup.tests.RMSTestMidlet: void testDb(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testDb(it.yup.util.RMSIndex)>
<it.yup.xml.Element: void addText(java.lang.String)>	<it.yup.xml.Element: void addText(java.lang.String)>
<lampiro.screens.AddContactScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.AddContactScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.ui.UILabel: void setFlip(boolean)>	<it.yup.ui.UILabel: void setFlip(boolean)>
\\"reported\\"	\\"reported\\"
/transport/msn.png	/transport/msn.png
reason	reason
<lampiro.screens.ChatScreen: boolean isMyPacket(it.yup.xml.Element)>	<lampiro.screens.ChatScreen: boolean isMyPacket(it.yup.xml.Element)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<it.yup.ui.UIRadioButtons$UIRadioButton: boolean keyPressed(int)>	<it.yup.ui.UIRadioButtons$UIRadioButton: boolean keyPressed(int)>
<lampiro.screens.RosterScreen: javax.microedition.lcdui.Image access$13(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: javax.microedition.lcdui.Image access$13(lampiro.screens.RosterScreen)>
<lampiro.screens.GroupsScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.GroupsScreen: void itemAction(it.yup.ui.UIItem)>
<it.yup.util.NetworkConsumer: void <init>()>	<it.yup.util.NetworkConsumer: void <init>()>
<it.yup.screens.ChatScreen: void hideNotify()>	<it.yup.screens.ChatScreen: void hideNotify()>
data error	data error
<lampiro.screens.RegisterScreen: boolean keyPressed(int)>	<lampiro.screens.RegisterScreen: boolean keyPressed(int)>
<java.io.DataInputStream: void <init>(java.io.InputStream)>	<java.io.DataInputStream: void <init>(java.io.InputStream)>
exclude-list-native	exclude-list-native
<org.bouncycastle.crypto.digests.GeneralDigest: int getByteLength()>	<org.bouncycastle.crypto.digests.GeneralDigest: int getByteLength()>
<lampiro.screens.RosterScreen$UIContact: boolean updateContactData()>	<lampiro.screens.RosterScreen$UIContact: boolean updateContactData()>
<it.yup.util.RMSIndex$KeyEnumeration: java.lang.Object nextElement()>	<it.yup.util.RMSIndex$KeyEnumeration: java.lang.Object nextElement()>
<it.yup.xmpp.IqManager: void purge()>	<it.yup.xmpp.IqManager: void purge()>
<lampiro.screens.AlbumScreen: boolean keyPressed(int)>	<lampiro.screens.AlbumScreen: boolean keyPressed(int)>
<lampiro.screens.GatewayRegisterScreen: void access$0(lampiro.screens.GatewayRegisterScreen,boolean)>	<lampiro.screens.GatewayRegisterScreen: void access$0(lampiro.screens.GatewayRegisterScreen,boolean)>
<it.yup.tests.XMLTestMidlet: void testPerformances()>	<it.yup.tests.XMLTestMidlet: void testPerformances()>
<lampiro.screens.RosterScreen: it.yup.ui.UIMenu access$8(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: it.yup.ui.UIMenu access$8(lampiro.screens.RosterScreen)>
<it.yup.util.Utils: boolean[] str2flags(java.lang.String,int,int)>	<it.yup.util.Utils: boolean[] str2flags(java.lang.String,int,int)>
http://jabber.org/protocol/muc#user	http://jabber.org/protocol/muc#user
nickname	nickname
<it.yup.screens.AboutScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.AboutScreen: void paint(javax.microedition.lcdui.Graphics)>
<com.jcraft.jzlib.InfBlocks: void <clinit>()>	<com.jcraft.jzlib.InfBlocks: void <clinit>()>
<it.yup.xml.KXmlSerializer: void setFeature(java.lang.String,boolean)>	<it.yup.xml.KXmlSerializer: void setFeature(java.lang.String,boolean)>
<lampiro.screens.AboutScreen: void <clinit>()>	<lampiro.screens.AboutScreen: void <clinit>()>
<it.yup.xml.KXmlProcessor: it.yup.xml.Element pullElement(org.xmlpull.v1.XmlPullParser)>	<it.yup.xml.KXmlProcessor: it.yup.xml.Element pullElement(org.xmlpull.v1.XmlPullParser)>
<it.yup.ui.UICanvas: it.yup.ui.UIItem findItem(int,int,it.yup.ui.UIScreen)>	<it.yup.ui.UICanvas: it.yup.ui.UIItem findItem(int,int,it.yup.ui.UIScreen)>
<it.yup.ui.UIScreen: void setFreezed(boolean)>	<it.yup.ui.UIScreen: void setFreezed(boolean)>
<it.yup.ui.UIHLayout: void insert(it.yup.ui.UIItem,int,int,int)>	<it.yup.ui.UIHLayout: void insert(it.yup.ui.UIItem,int,int,int)>
element stack empty	element stack empty
hash	hash
<javax.microedition.io.HttpConnection: java.io.OutputStream openOutputStream()>	<javax.microedition.io.HttpConnection: java.io.OutputStream openOutputStream()>
<it.yup.ui.UIItem: void setGradientColor(int)>	<it.yup.ui.UIItem: void setGradientColor(int)>
<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream)>	<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream)>
de	de
<it.yup.ui.UIButton: boolean isPressed()>	<it.yup.ui.UIButton: boolean isPressed()>
<javax.microedition.lcdui.ChoiceGroup: void setSelectedIndex(int,boolean)>	<javax.microedition.lcdui.ChoiceGroup: void setSelectedIndex(int,boolean)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>	<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,java.lang.String)>	<lampiro.screens.ShowMMScreen: void <init>(byte[],java.lang.String,java.lang.String)>
<it.yup.xml.Element: it.yup.xml.Element removeChild(java.lang.String,java.lang.String)>	<it.yup.xml.Element: it.yup.xml.Element removeChild(java.lang.String,java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>	<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<it.yup.ui.UIEmoLabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>	<it.yup.ui.UIEmoLabel: int getTextWidth(java.lang.String,javax.microedition.lcdui.Font)>
<com.jcraft.jzlib.FilterInputStream: void reset()>	<com.jcraft.jzlib.FilterInputStream: void reset()>
<<\\"illegal standalone value: \\">>	<<\\"illegal standalone value: \\">>
<lampiro.screens.ContactInfoScreen$1: void handleResult(it.yup.xml.Element)>	<lampiro.screens.ContactInfoScreen$1: void handleResult(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>	<lampiro.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>
<lampiro.screens.RosterScreen$RegisterHandler: it.yup.xml.Element access$0(lampiro.screens.RosterScreen$RegisterHandler)>	<lampiro.screens.RosterScreen$RegisterHandler: it.yup.xml.Element access$0(lampiro.screens.RosterScreen$RegisterHandler)>
<java.lang.String: boolean equals(java.lang.Object)>	<java.lang.String: boolean equals(java.lang.Object)>
<javax.microedition.lcdui.Form: void setTitle(java.lang.String)>	<javax.microedition.lcdui.Form: void setTitle(java.lang.String)>
<it.yup.xmpp.Roster: void saveGateways()>	<it.yup.xmpp.Roster: void saveGateways()>
<lampiro.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.ChatScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener3)>	<it.yup.xmpp.FTSender$IQResultListener3: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener3)>
<java.io.DataOutputStream: void write(byte[],int,int)>	<java.io.DataOutputStream: void write(byte[],int,int)>
Not a valid key	Not a valid key
combo1-2	combo1-2
<it.yup.ui.UIScreen: void invalidateArea(int,int,int,int)>	<it.yup.ui.UIScreen: void invalidateArea(int,int,int,int)>
<it.yup.xml.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>
urn:xmpp:jingle:transports:ibb:0	urn:xmpp:jingle:transports:ibb:0
Lampiro Agent	Lampiro Agent
<java.lang.Object: void <init>()>	<java.lang.Object: void <init>()>
<com.jcraft.jzlib.Inflate: void <init>()>	<com.jcraft.jzlib.Inflate: void <init>()>
<it.yup.ui.UIConfig: void <init>()>	<it.yup.ui.UIConfig: void <init>()>
xa	xa
_14	_14
\\"message\\"	\\"message\\"
<<\\"Active Item \\">>	<<\\"Active Item \\">>
\\"set\\"	\\"set\\"
Connecting server	Connecting server
<com.jcraft.jzlib.Deflate: void put_byte(byte[],int,int)>	<com.jcraft.jzlib.Deflate: void put_byte(byte[],int,int)>
<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$MessageHandler)>	<it.yup.xmpp.XMPPClient$MessageHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$MessageHandler)>
<com.jcraft.jzlib.Deflate: void send_all_trees(int,int,int)>	<com.jcraft.jzlib.Deflate: void send_all_trees(int,int,int)>
auth	auth
</{	</{
<java.util.Date: void <init>()>	<java.util.Date: void <init>()>
nc	nc
<it.yup.ui.UIMenu: void setItemList(java.util.Vector)>	<it.yup.ui.UIMenu: void setItemList(java.util.Vector)>
<it.yup.xmlstream.Element: it.yup.xmlstream.Element clone()>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element clone()>
<it.yup.ui.UICanvas: void open(it.yup.ui.UIScreen,boolean)>	<it.yup.ui.UICanvas: void open(it.yup.ui.UIScreen,boolean)>
/icons/radio_checked.png	/icons/radio_checked.png
<it.yup.xmpp.FTSender$IQResultListener4: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener4: void handleResult(it.yup.xml.Element)>
<it.yup.screens.SplashScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.SplashScreen: void paint(javax.microedition.lcdui.Graphics)>
<lampiro.screens.RegisterScreen$1: void run()>	<lampiro.screens.RegisterScreen$1: void run()>
<it.yup.ui.UIAccordion: boolean isOneOpen()>	<it.yup.ui.UIAccordion: boolean isOneOpen()>
<java.io.IOException: void <init>(java.lang.String)>	<java.io.IOException: void <init>(java.lang.String)>
<it.yup.tests.UITestMidlet$KeysScreen: void keyPressed(int)>	<it.yup.tests.UITestMidlet$KeysScreen: void keyPressed(int)>
<it.yup.xmpp.Config: it.yup.xml.Element getCapabilities(java.lang.String,java.lang.String)>	<it.yup.xmpp.Config: it.yup.xml.Element getCapabilities(java.lang.String,java.lang.String)>
<it.yup.ui.UIAccordion: it.yup.ui.UIItem[] getItemLabels()>	<it.yup.ui.UIAccordion: it.yup.ui.UIItem[] getItemLabels()>
<it.yup.xml.Element: void ensureCapacity(int,byte)>	<it.yup.xml.Element: void ensureCapacity(int,byte)>
<it.yup.xml.KXmlParser: void parseStartTag(boolean)>	<it.yup.xml.KXmlParser: void parseStartTag(boolean)>
<javax.microedition.lcdui.Graphics: void drawImage(javax.microedition.lcdui.Image,int,int,int)>	<javax.microedition.lcdui.Graphics: void drawImage(javax.microedition.lcdui.Image,int,int,int)>
<it.yup.util.MetaVector: java.lang.Object lastElement()>	<it.yup.util.MetaVector: java.lang.Object lastElement()>
<lampiro.screens.AlbumScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.AlbumScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.xmpp.packets.IQResultListener: void handleError(it.yup.xmlstream.Element)>	<it.yup.xmpp.packets.IQResultListener: void handleError(it.yup.xmlstream.Element)>
not-authorized	not-authorized
<it.yup.xmlstream.Element: void setAttribute(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: void setAttribute(java.lang.String,java.lang.String)>
<lampiro.LampiroMidlet: void pauseApp()>	<lampiro.LampiroMidlet: void pauseApp()>
<lampiro.screens.RosterScreen: it.yup.ui.UIAccordion access$10(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: it.yup.ui.UIAccordion access$10(lampiro.screens.RosterScreen)>
<lampiro.screens.RosterScreen: void authenticated()>	<lampiro.screens.RosterScreen: void authenticated()>
location	location
<it.yup.ui.UIScreen: void removeAll()>	<it.yup.ui.UIScreen: void removeAll()>
Task finished	Task finished
xmlns	xmlns
/icons/checked.png	/icons/checked.png
<it.yup.ui.UIScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
300000	300000
<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DiscoHandler)>	<it.yup.xmpp.XMPPClient$DiscoHandler: void <init>(it.yup.xmpp.XMPPClient,it.yup.xmpp.XMPPClient$DiscoHandler)>
<it.yup.ui.UICanvas: int getGameAction(int)>	<it.yup.ui.UICanvas: int getGameAction(int)>
<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen)>	<it.yup.screens.RosterScreen$AdHocCommandsHandler: void <init>(it.yup.screens.RosterScreen)>
<it.yup.ui.UIAccordion: java.util.Vector getSubpanel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: java.util.Vector getSubpanel(it.yup.ui.UIItem)>
\\"get\\"	\\"get\\"
<lampiro.screens.FTScreen: void fillScreen()>	<lampiro.screens.FTScreen: void fillScreen()>
<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int)>	<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int)>
<com.jcraft.jzlib.Tree: void gen_codes(short[],int,short[])>	<com.jcraft.jzlib.Tree: void gen_codes(short[],int,short[])>
<it.yup.ui.UIMenu: void setOpenedState(boolean)>	<it.yup.ui.UIMenu: void setOpenedState(boolean)>
<it.yup.xmpp.Roster$RosterX: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.Roster$RosterX: void packetReceived(it.yup.xml.Element)>
http://services.bluendo.com/srv/?domain=	http://services.bluendo.com/srv/?domain=
<it.yup.xml.Element: void setAttribute(java.lang.String,java.lang.String)>	<it.yup.xml.Element: void setAttribute(java.lang.String,java.lang.String)>
<!DOCTYPE	<!DOCTYPE
iemens	iemens
<it.yup.xmlstream.SocketStream: void connectionFailed(it.yup.transport.BaseChannel)>	<it.yup.xmlstream.SocketStream: void connectionFailed(it.yup.transport.BaseChannel)>
<it.yup.xmlstream.BasicXmlStream: void <init>()>	<it.yup.xmlstream.BasicXmlStream: void <init>()>
\\"bosh.bluendo.com\\"	\\"bosh.bluendo.com\\"
<it.yup.screens.RegisterScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.RegisterScreen$ItemCommandListener1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>
<it.yup.ui.UIPanel: void setScreen(it.yup.ui.UIScreen)>	<it.yup.ui.UIPanel: void setScreen(it.yup.ui.UIScreen)>
<it.yup.ui.UITextField: void setAutoUnexpand(boolean)>	<it.yup.ui.UITextField: void setAutoUnexpand(boolean)>
<it.yup.ui.UILabel: void setFont(javax.microedition.lcdui.Font)>	<it.yup.ui.UILabel: void setFont(javax.microedition.lcdui.Font)>
<it.yup.xmpp.FTSender$IQResultListener3: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$IQResultListener3: void handleResult(it.yup.xml.Element)>
xml	xml
/icons/lag.png	/icons/lag.png
<it.yup.ui.UIMenu: boolean contains(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: boolean contains(it.yup.ui.UIItem)>
/icons/rab.png	/icons/rab.png
get	get
serverEl	serverEl
<it.yup.util.MetaVector: boolean removeElement(java.lang.Object)>	<it.yup.util.MetaVector: boolean removeElement(java.lang.Object)>
<it.yup.ui.UICanvas: void unlock()>	<it.yup.ui.UICanvas: void unlock()>
<it.yup.xmpp.Task: byte getStatus()>	<it.yup.xmpp.Task: byte getStatus()>
Nokia	Nokia
<java.io.OutputStream: void flush()>	<java.io.OutputStream: void flush()>
<lampiro.screens.RosterScreen$UIGroup: void access$5(lampiro.screens.RosterScreen$UIGroup,it.yup.xmpp.Contact)>	<lampiro.screens.RosterScreen$UIGroup: void access$5(lampiro.screens.RosterScreen$UIGroup,it.yup.xmpp.Contact)>
Command Info	Command Info
<it.yup.xmpp.CommandExecutor: void sendReply(java.lang.String,it.yup.xml.Element)>	<it.yup.xmpp.CommandExecutor: void sendReply(java.lang.String,it.yup.xml.Element)>
<it.yup.xmpp.Contact: void handleResult(it.yup.xml.Element)>	<it.yup.xmpp.Contact: void handleResult(it.yup.xml.Element)>
<lampiro.screens.ContactInfoScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.ContactInfoScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<it.yup.screens.RegisterScreen: void placeItems()>	<it.yup.screens.RegisterScreen: void placeItems()>
<it.yup.ui.UIPanel: void setFirstVisible(int)>	<it.yup.ui.UIPanel: void setFirstVisible(int)>
<java.io.DataOutputStream: void flush()>	<java.io.DataOutputStream: void flush()>
<it.yup.screens.ChatScreen: boolean updateConversation(int)>	<it.yup.screens.ChatScreen: boolean updateConversation(int)>
<java.lang.String: void <init>(byte[])>	<java.lang.String: void <init>(byte[])>
<it.yup.xml.KXmlParser: void pushText(int,boolean)>	<it.yup.xml.KXmlParser: void pushText(int,boolean)>
<it.yup.tests.UITestMidlet: void pauseApp()>	<it.yup.tests.UITestMidlet: void pauseApp()>
<it.yup.ui.UILayout: void setSelectedItem(it.yup.ui.UIItem)>	<it.yup.ui.UILayout: void setSelectedItem(it.yup.ui.UIItem)>
<it.yup.screens.StatusScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.StatusScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.xml.KXmlParser: java.lang.String getName()>	<it.yup.xml.KXmlParser: java.lang.String getName()>
<lampiro.screens.RosterScreen$IQResultListener1: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$IQResultListener1: void handleError(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: void endDrag()>	<lampiro.screens.RosterScreen: void endDrag()>
feature-not-implemented	feature-not-implemented
<lampiro.screens.SubscribeScreen: boolean addSubscription(it.yup.xmpp.Contact,int)>	<lampiro.screens.SubscribeScreen: boolean addSubscription(it.yup.xmpp.Contact,int)>
<it.yup.xml.KXmlParser: java.lang.String nextText()>	<it.yup.xml.KXmlParser: java.lang.String nextText()>
<com.jcraft.jzlib.InfCodes: void <init>()>	<com.jcraft.jzlib.InfCodes: void <init>()>
<com.jcraft.jzlib.ZStream: int deflateParams(int,int)>	<com.jcraft.jzlib.ZStream: int deflateParams(int,int)>
<lampiro.screens.ChatScreen: void updateResource()>	<lampiro.screens.ChatScreen: void updateResource()>
<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.SASLAuthenticator$PacketListener1: void packetReceived(it.yup.xml.Element)>
<it.yup.ui.Semaphore: void release(long)>	<it.yup.ui.Semaphore: void release(long)>
<it.yup.ui.UITextPanel: boolean isNeedScrollbar()>	<it.yup.ui.UITextPanel: boolean isNeedScrollbar()>
<javax.microedition.lcdui.Form: void <init>(java.lang.String)>	<javax.microedition.lcdui.Form: void <init>(java.lang.String)>
dnd	dnd
<it.yup.xmpp.Roster: void saveToStorage()>	<it.yup.xmpp.Roster: void saveToStorage()>
<it.yup.ui.UIMenu: void <init>(java.lang.String)>	<it.yup.ui.UIMenu: void <init>(java.lang.String)>
<javax.microedition.lcdui.Font: javax.microedition.lcdui.Font getFont(int,int,int)>	<javax.microedition.lcdui.Font: javax.microedition.lcdui.Font getFont(int,int,int)>
<lampiro.screens.AlbumScreen: void updateChildren()>	<lampiro.screens.AlbumScreen: void updateChildren()>
<it.yup.tests.RMSTestMidlet: void destroyApp(boolean)>	<it.yup.tests.RMSTestMidlet: void destroyApp(boolean)>
<it.yup.ui.UILayout: void drawSegmentedBorder(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UILayout: void drawSegmentedBorder(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.ui.UITextPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>	<it.yup.ui.UITextPanel: void drawScrollBar(javax.microedition.lcdui.Graphics,int,int,int)>
block-size	block-size
<it.yup.ui.UICanvas: void change(int)>	<it.yup.ui.UICanvas: void change(int)>
<com.jcraft.jzlib.InfBlocks: void reset(com.jcraft.jzlib.ZStream,long[])>	<com.jcraft.jzlib.InfBlocks: void reset(com.jcraft.jzlib.ZStream,long[])>
<it.yup.tests.XMPPTestClient$Listener: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.tests.XMPPTestClient$Listener: void gotStreamEvent(java.lang.String,java.lang.Object)>
<it.yup.xmlstream.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>	<it.yup.xmlstream.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>
<it.yup.xml.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>
<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient$DataFormHandler: void <init>(it.yup.xmpp.XMPPClient)>
<it.yup.screens.RegisterScreen: java.lang.String access$7(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: java.lang.String access$7(it.yup.screens.RegisterScreen)>
<it.yup.tests.UITestMidlet: void <init>()>	<it.yup.tests.UITestMidlet: void <init>()>
<it.yup.ui.UIPanel: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIPanel: int getHeight(javax.microedition.lcdui.Graphics)>
<it.yup.screens.DebugScreen: void <clinit>()>	<it.yup.screens.DebugScreen: void <clinit>()>
\\"x\\"	\\"x\\"
<it.yup.xmlstream.Element: java.lang.Object clone()>	<it.yup.xmlstream.Element: java.lang.Object clone()>
\\"id\\"	\\"id\\"
<<\\"Contains d: \\">>	<<\\"Contains d: \\">>
<com.jcraft.jzlib.Inflate: int inflateEnd(com.jcraft.jzlib.ZStream)>	<com.jcraft.jzlib.Inflate: int inflateEnd(com.jcraft.jzlib.ZStream)>
<it.yup.ui.UIScreen: void setPopupList(java.util.Vector)>	<it.yup.ui.UIScreen: void setPopupList(java.util.Vector)>
<it.yup.xml.KXmlParser: int read()>	<it.yup.xml.KXmlParser: int read()>
<com.jcraft.jzlib.ZOutputStream: int getFlushMode()>	<com.jcraft.jzlib.ZOutputStream: int getFlushMode()>
<javax.microedition.rms.RecordStore: int getSize()>	<javax.microedition.rms.RecordStore: int getSize()>
<javax.microedition.media.control.VideoControl: void setDisplaySize(int,int)>	<javax.microedition.media.control.VideoControl: void setDisplaySize(int,int)>
<it.yup.xmlstream.PacketListener: void packetReceived(it.yup.xml.Element)>	<it.yup.xmlstream.PacketListener: void packetReceived(it.yup.xml.Element)>
<it.yup.xmpp.BluendoXMLRPC: void flush()>	<it.yup.xmpp.BluendoXMLRPC: void flush()>
command	command
start:	start:
<java.lang.IllegalStateException: void <init>(java.lang.String)>	<java.lang.IllegalStateException: void <init>(java.lang.String)>
PLAIN	PLAIN
<lampiro.screens.RosterScreen$UIGroup: void moveGroups(it.yup.ui.UIAccordion,int,int)>	<lampiro.screens.RosterScreen$UIGroup: void moveGroups(it.yup.ui.UIAccordion,int,int)>
<it.yup.util.GoogleToken: void <init>(java.lang.String,java.lang.String,java.lang.Object)>	<it.yup.util.GoogleToken: void <init>(java.lang.String,java.lang.String,java.lang.Object)>
<it.yup.transport.BaseChannel: void open()>	<it.yup.transport.BaseChannel: void open()>
<java.lang.Error: java.lang.String getMessage()>	<java.lang.Error: java.lang.String getMessage()>
_12	_12
<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$AdHocCommandsHandler: void handleError(it.yup.xml.Element)>
<it.yup.util.Utils: java.lang.String bytesToHex(byte[])>	<it.yup.util.Utils: java.lang.String bytesToHex(byte[])>
<it.yup.screens.RegisterScreen: boolean access$9(it.yup.screens.RegisterScreen)>	<it.yup.screens.RegisterScreen: boolean access$9(it.yup.screens.RegisterScreen)>
invite	invite
<lampiro.screens.RosterScreen: void getIMGateways(java.lang.String)>	<lampiro.screens.RosterScreen: void getIMGateways(java.lang.String)>
<java.util.Vector: int size()>	<java.util.Vector: int size()>
<it.yup.xml.KXmlParser: int getDepth()>	<it.yup.xml.KXmlParser: int getDepth()>
<lampiro.screens.InnerMMScreen: java.lang.String getVideoRes(boolean)>	<lampiro.screens.InnerMMScreen: java.lang.String getVideoRes(boolean)>
<lampiro.screens.RosterScreen$UIContact: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.RosterScreen$UIContact: void paint(javax.microedition.lcdui.Graphics,int,int)>
<lampiro.screens.ContactInfoScreen: void updateContactLayout(it.yup.ui.UIVLayout,it.yup.xml.Element)>	<lampiro.screens.ContactInfoScreen: void updateContactLayout(it.yup.ui.UIVLayout,it.yup.xml.Element)>
<lampiro.screens.MUCComposer: void <init>(it.yup.xmpp.MUC)>	<lampiro.screens.MUCComposer: void <init>(it.yup.xmpp.MUC)>
<it.yup.xml.KXmlParser: void setInput(java.io.Reader)>	<it.yup.xml.KXmlParser: void setInput(java.io.Reader)>
OK	OK
<lampiro.screens.RosterScreen$RegisterHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.RosterScreen$RegisterHandler: void handleError(it.yup.xml.Element)>
ext	ext
/icons/rag.png	/icons/rag.png
<it.yup.ui.UIRadioButtons: void <init>(java.lang.String[])>	<it.yup.ui.UIRadioButtons: void <init>(java.lang.String[])>
<it.yup.util.RMSIndex: void store(byte[],byte[])>	<it.yup.util.RMSIndex: void store(byte[],byte[])>
<lampiro.screens.RosterScreen: void captureMedia(java.lang.String,int)>	<lampiro.screens.RosterScreen: void captureMedia(java.lang.String,int)>
<it.yup.util.GoogleToken: java.lang.String getToken(java.lang.String,java.lang.String)>	<it.yup.util.GoogleToken: java.lang.String getToken(java.lang.String,java.lang.String)>
<<\\"ERR: \\">>	<<\\"ERR: \\">>
<<\\"Accordion Menu \\">>	<<\\"Accordion Menu \\">>
<it.yup.util.RMSIndex: void <init>(java.lang.String)>	<it.yup.util.RMSIndex: void <init>(java.lang.String)>
<lampiro.screens.ChatScreen$UICutLabel: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>	<lampiro.screens.ChatScreen$UICutLabel: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>
<it.yup.xmpp.packets.Stanza: void <init>(it.yup.xml.Element)>	<it.yup.xmpp.packets.Stanza: void <init>(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: boolean access$9(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: boolean access$9(lampiro.screens.RosterScreen)>
<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String)>	<it.yup.xmpp.Roster$IQResultListener3: void <init>(it.yup.xmpp.Roster,boolean,java.lang.String)>
<it.yup.xmlstream.Initializer: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.Initializer: void start(it.yup.xmlstream.BasicXmlStream)>
<it.yup.ui.UIPanel: void insertItemAt(it.yup.ui.UIItem,int)>	<it.yup.ui.UIPanel: void insertItemAt(it.yup.ui.UIItem,int)>
SELECT	SELECT
<javax.microedition.lcdui.TextField: void <init>(java.lang.String,java.lang.String,int,int)>	<javax.microedition.lcdui.TextField: void <init>(java.lang.String,java.lang.String,int,int)>
<lampiro.screens.AlbumScreen: int getCount(int)>	<lampiro.screens.AlbumScreen: int getCount(int)>
/icons/empty_avatar.png	/icons/empty_avatar.png
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>	<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<it.yup.screens.ContactInfoScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.ContactInfoScreen$1: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>
<it.yup.xmpp.FTSender$FTSEventHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$FTSEventHandler: void sessionInitated(it.yup.xmpp.Contact,java.lang.String,it.yup.xmpp.FTSender)>
<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,boolean)>	<com.jcraft.jzlib.ZInputStream: void <init>(java.io.InputStream,boolean)>
<java.util.Vector: boolean removeElement(java.lang.Object)>	<java.util.Vector: boolean removeElement(java.lang.Object)>
<it.yup.xmpp.packets.Presence: java.lang.String getStatus()>	<it.yup.xmpp.packets.Presence: java.lang.String getStatus()>
<it.yup.xmpp.XMPPClient: int access$1(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient: int access$1(it.yup.xmpp.XMPPClient)>
<java.io.DataInputStream: void readFully(byte[],int,int)>	<java.io.DataInputStream: void readFully(byte[],int,int)>
<it.yup.screens.MessageComposerScreen: javax.microedition.lcdui.ChoiceGroup access$0(it.yup.screens.MessageComposerScreen)>	<it.yup.screens.MessageComposerScreen: javax.microedition.lcdui.ChoiceGroup access$0(it.yup.screens.MessageComposerScreen)>
\\"away\\"	\\"away\\"
<com.jcraft.jzlib.Inflate: void <clinit>()>	<com.jcraft.jzlib.Inflate: void <clinit>()>
<lampiro.screens.ChatScreen$ForwardScreen: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>	<lampiro.screens.ChatScreen$ForwardScreen: void <init>(lampiro.screens.ChatScreen,java.lang.String,java.lang.String)>
<it.yup.ui.UITextField: void setWrappable(boolean)>	<it.yup.ui.UITextField: void setWrappable(boolean)>
<it.yup.xmlstream.Initializer: void <init>(java.lang.String,boolean)>	<it.yup.xmlstream.Initializer: void <init>(java.lang.String,boolean)>
combo3-2	combo3-2
<it.yup.xmlstream.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>
<it.yup.ui.UIMenu: void setDirty(boolean)>	<it.yup.ui.UIMenu: void setDirty(boolean)>
unresolved: &	unresolved: &
<java.io.InputStream: boolean markSupported()>	<java.io.InputStream: boolean markSupported()>
<it.yup.xmpp.FTReceiver: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver: void packetReceived(it.yup.xml.Element)>
<it.yup.ui.UIScreen: void addPopup(it.yup.ui.UIMenu)>	<it.yup.ui.UIScreen: void addPopup(it.yup.ui.UIMenu)>
Image button	Image button
<com.jcraft.jzlib.FilterInputStream: boolean markSupported()>	<com.jcraft.jzlib.FilterInputStream: boolean markSupported()>
<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[][])>	<it.yup.xml.Element: void <init>(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[][])>
<it.yup.screens.ContactInfoScreen$1: void <init>(it.yup.screens.ContactInfoScreen)>	<it.yup.screens.ContactInfoScreen$1: void <init>(it.yup.screens.ContactInfoScreen)>
<java.lang.Math: int max(int,int)>	<java.lang.Math: int max(int,int)>
<it.yup.ui.UIConfig: void <clinit>()>	<it.yup.ui.UIConfig: void <clinit>()>
&#	&#
<com.jcraft.jzlib.Deflate: void scan_tree(short[],int)>	<com.jcraft.jzlib.Deflate: void scan_tree(short[],int)>
<lampiro.screens.AlbumScreen: void <clinit>()>	<lampiro.screens.AlbumScreen: void <clinit>()>
vcard-temp	vcard-temp
<lampiro.screens.SubscribeScreen: void <init>(it.yup.xmpp.Contact)>	<lampiro.screens.SubscribeScreen: void <init>(it.yup.xmpp.Contact)>
incorrect header check	incorrect header check
<java.lang.String: int indexOf(int)>	<java.lang.String: int indexOf(int)>
<javax.microedition.lcdui.Font: int charWidth(char)>	<javax.microedition.lcdui.Font: int charWidth(char)>
<java.lang.Integer: int parseInt(java.lang.String,int)>	<java.lang.Integer: int parseInt(java.lang.String,int)>
list-multi	list-multi
<lampiro.screens.FTScreen$FTItem: int access$6(lampiro.screens.FTScreen$FTItem)>	<lampiro.screens.FTScreen$FTItem: int access$6(lampiro.screens.FTScreen$FTItem)>
Screen	Screen
<lampiro.screens.OptionsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.OptionsScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<com.jcraft.jzlib.ZStreamException: void <init>()>	<com.jcraft.jzlib.ZStreamException: void <init>()>
<it.yup.xml.Element: java.lang.Object clone()>	<it.yup.xml.Element: java.lang.Object clone()>
standalone	standalone
First	First
<it.yup.screens.RegisterScreen: void login()>	<it.yup.screens.RegisterScreen: void login()>
<it.yup.tests.RMSTestMidlet: void testJoin(it.yup.util.RMSIndex)>	<it.yup.tests.RMSTestMidlet: void testJoin(it.yup.util.RMSIndex)>
combo2-2longlonglonglonglonglonglonglonglonglonglonglong	combo2-2longlonglonglonglonglonglonglonglonglonglonglong
<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIGroup access$1()>	<lampiro.screens.RosterScreen$UIGroup: lampiro.screens.RosterScreen$UIGroup access$1()>
attr name expected	attr name expected
<com.jcraft.jzlib.ZStream: int inflateInit(int,boolean)>	<com.jcraft.jzlib.ZStream: int inflateInit(int,boolean)>
<it.yup.transport.SocketChannel: it.yup.transport.SocketChannel$UTFReader getReader()>	<it.yup.transport.SocketChannel: it.yup.transport.SocketChannel$UTFReader getReader()>
<it.yup.ui.UIAccordion: void move(int,int)>	<it.yup.ui.UIAccordion: void move(int,int)>
prompt	prompt
<it.yup.ui.UIPanel: int getFirstVisible()>	<it.yup.ui.UIPanel: int getFirstVisible()>
<lampiro.screens.RosterScreen$MUCStateHandler: void <init>(it.yup.xmpp.IQResultListener)>	<lampiro.screens.RosterScreen$MUCStateHandler: void <init>(it.yup.xmpp.IQResultListener)>
<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$PacketListener2: void <init>(it.yup.xmpp.FTSender)>
<it.yup.screens.RegisterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.screens.RegisterScreen: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
jid-multi	jid-multi
<it.yup.xmpp.packets.DataForm: void parseItem(it.yup.xml.Element)>	<it.yup.xmpp.packets.DataForm: void parseItem(it.yup.xml.Element)>
message	message
<it.yup.ui.UITextField: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<it.yup.ui.UITextField: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<it.yup.xmpp.packets.DataForm: it.yup.xml.Element getResultElement()>	<it.yup.xmpp.packets.DataForm: it.yup.xml.Element getResultElement()>
<org.bouncycastle.crypto.digests.MD5Digest: void <init>()>	<org.bouncycastle.crypto.digests.MD5Digest: void <init>()>
<it.yup.ui.UIPanel: boolean isFocusable()>	<it.yup.ui.UIPanel: boolean isFocusable()>
Feature not implemented	Feature not implemented
<<\\"\\">>	<<\\"\\">>
Mobile Messaging	Mobile Messaging
<it.yup.screens.ChatScreen: void paintEntries(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ChatScreen: void paintEntries(javax.microedition.lcdui.Graphics)>
description	description
<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>	<it.yup.xmlstream.KXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean,boolean)>
Combo0	Combo0
<it.yup.xmpp.FTSender: boolean supportFT(it.yup.xml.Element)>	<it.yup.xmpp.FTSender: boolean supportFT(it.yup.xml.Element)>
album	album
<it.yup.ui.UIVLayout: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIVLayout: int getHeight(javax.microedition.lcdui.Graphics)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>	<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
combobig3	combobig3
<it.yup.ui.UIAccordion: void setOneOpen(boolean)>	<it.yup.ui.UIAccordion: void setOneOpen(boolean)>
<it.yup.xmpp.CommandExecutor: void <init>(java.lang.String[],java.lang.String)>	<it.yup.xmpp.CommandExecutor: void <init>(java.lang.String[],java.lang.String)>
<java.lang.Object: java.lang.String toString()>	<java.lang.Object: java.lang.String toString()>
<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>	<it.yup.screens.DataFormScreen$ListChoiceHandler: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item)>
illegal empty namespace	illegal empty namespace
<it.yup.xmlstream.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: java.lang.Object getProperty(java.lang.String)>
<com.jcraft.jzlib.Tree: void build_tree(com.jcraft.jzlib.Deflate)>	<com.jcraft.jzlib.Tree: void build_tree(com.jcraft.jzlib.Deflate)>
<it.yup.tests.XMLTestMidlet: void destroyApp(boolean)>	<it.yup.tests.XMLTestMidlet: void destroyApp(boolean)>
<lampiro.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>	<lampiro.screens.RegisterScreen: void gotStreamEvent(java.lang.String,java.lang.Object)>
<lampiro.screens.DataFormScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.DataFormScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmpp.packets.Presence: void setStatus(java.lang.String)>	<it.yup.xmpp.packets.Presence: void setStatus(java.lang.String)>
completed	completed
<it.yup.xmpp.FTReceiver: it.yup.xmpp.XMPPClient access$0(it.yup.xmpp.FTReceiver)>	<it.yup.xmpp.FTReceiver: it.yup.xmpp.XMPPClient access$0(it.yup.xmpp.FTReceiver)>
<com.jcraft.jzlib.Tree: void <init>()>	<com.jcraft.jzlib.Tree: void <init>()>
<it.yup.xml.Element: void removeChild(it.yup.xml.Element)>	<it.yup.xml.Element: void removeChild(it.yup.xml.Element)>
<lampiro.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>	<lampiro.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmpp.FTSender: it.yup.xmpp.FTSender$FTSEventHandler access$1(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender: it.yup.xmpp.FTSender$FTSEventHandler access$1(it.yup.xmpp.FTSender)>
<lampiro.screens.RosterScreen: void removeAllContacts()>	<lampiro.screens.RosterScreen: void removeAllContacts()>
/icons/radio_unchecked.png	/icons/radio_unchecked.png
\\"text-multi\\"	\\"text-multi\\"
<lampiro.screens.InnerMMScreen: void setTypeIndex(int)>	<lampiro.screens.InnerMMScreen: void setTypeIndex(int)>
<lampiro.screens.ContactInfoScreen$1: void handleError(it.yup.xml.Element)>	<lampiro.screens.ContactInfoScreen$1: void handleError(it.yup.xml.Element)>
<lampiro.screens.MUCComposer: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>	<lampiro.screens.MUCComposer: void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable)>
<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(java.lang.String)>	<javax.microedition.lcdui.Image: javax.microedition.lcdui.Image createImage(java.lang.String)>
session-accept	session-accept
Content-Type	Content-Type
<it.yup.xml.KXmlParser: java.lang.String getAttributePrefix(int)>	<it.yup.xml.KXmlParser: java.lang.String getAttributePrefix(int)>
<it.yup.xmlstream.Element: void _parse(org.xmlpull.v1.XmlPullParser)>	<it.yup.xmlstream.Element: void _parse(org.xmlpull.v1.XmlPullParser)>
(c) 2007-2008 Bluendo srl	(c) 2007-2008 Bluendo srl
:(	:(
<java.lang.StringBuilder: void <init>()>	<java.lang.StringBuilder: void <init>()>
<it.yup.xmlstream.KXmlParser: boolean adjustNsp()>	<it.yup.xmlstream.KXmlParser: boolean adjustNsp()>
<lampiro.screens.DataFormScreen: void stopWaiting()>	<lampiro.screens.DataFormScreen: void stopWaiting()>
executing	executing
<java.lang.String: java.lang.String replace(char,char)>	<java.lang.String: java.lang.String replace(char,char)>
<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemCommandListener1)>	<it.yup.screens.RegisterScreen$ItemCommandListener1: void <init>(it.yup.screens.RegisterScreen,it.yup.screens.RegisterScreen$ItemCommandListener1)>
<<\\" / \\">>	<<\\" / \\">>
<it.yup.xmpp.Roster: void access$2(it.yup.xmpp.Roster,it.yup.xml.Element,boolean)>	<it.yup.xmpp.Roster: void access$2(it.yup.xmpp.Roster,it.yup.xml.Element,boolean)>
\\"chat\\"	\\"chat\\"
<it.yup.xml.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>	<it.yup.xml.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>
_10	_10
<it.yup.ui.UIGauge: void paint(javax.microedition.lcdui.Graphics,int,int)>	<it.yup.ui.UIGauge: void paint(javax.microedition.lcdui.Graphics,int,int)>
<it.yup.xmpp.CommandExecutor: void sendPacket(it.yup.xmpp.packets.Iq)>	<it.yup.xmpp.CommandExecutor: void sendPacket(it.yup.xmpp.packets.Iq)>
<it.yup.xmpp.Contact: java.lang.String[] getGroups()>	<it.yup.xmpp.Contact: java.lang.String[] getGroups()>
<it.yup.xml.BProcessor: int[] untag(java.io.InputStream)>	<it.yup.xml.BProcessor: int[] untag(java.io.InputStream)>
<it.yup.ui.UITextField: void expand()>	<it.yup.ui.UITextField: void expand()>
<com.jcraft.jzlib.ZStream: int deflateInit(int)>	<com.jcraft.jzlib.ZStream: int deflateInit(int)>
<it.yup.ui.UIItem: void setWidth(int)>	<it.yup.ui.UIItem: void setWidth(int)>
<it.yup.xmpp.Group: it.yup.xmpp.Group getGroup(java.lang.String)>	<it.yup.xmpp.Group: it.yup.xmpp.Group getGroup(java.lang.String)>
groups	groups
http://bluendo.com/protocol/caps	http://bluendo.com/protocol/caps
version 1.0	version 1.0
<it.yup.ui.UITextField: boolean isEditable()>	<it.yup.ui.UITextField: boolean isEditable()>
<com.jcraft.jzlib.InfTree: void <init>()>	<com.jcraft.jzlib.InfTree: void <init>()>
<lampiro.screens.RosterScreen$RegisterHandler: it.yup.ui.UIScreen access$2(lampiro.screens.RosterScreen$RegisterHandler)>	<lampiro.screens.RosterScreen$RegisterHandler: it.yup.ui.UIScreen access$2(lampiro.screens.RosterScreen$RegisterHandler)>
Connection lost	Connection lost
<it.yup.xmlstream.SASLAuthenticator: void <clinit>()>	<it.yup.xmlstream.SASLAuthenticator: void <clinit>()>
<com.jcraft.jzlib.Deflate: void put_byte(byte)>	<com.jcraft.jzlib.Deflate: void put_byte(byte)>
<javax.microedition.lcdui.Display: void setCurrent(javax.microedition.lcdui.Displayable)>	<javax.microedition.lcdui.Display: void setCurrent(javax.microedition.lcdui.Displayable)>
<java.io.PrintStream: void write(int)>	<java.io.PrintStream: void write(int)>
pcm	pcm
<it.yup.transport.SocketChannel: void open()>	<it.yup.transport.SocketChannel: void open()>
<it.yup.tests.XMPPTestClient: void startClient()>	<it.yup.tests.XMPPTestClient: void startClient()>
<it.yup.xml.KXmlParser: int getEventType()>	<it.yup.xml.KXmlParser: int getEventType()>
Item not found	Item not found
Not authorized	Not authorized
<it.yup.ui.UIPanel: void <init>()>	<it.yup.ui.UIPanel: void <init>()>
<<\\"illegal attribute name: \\">>	<<\\"illegal attribute name: \\">>
<<\\" ns\\">>	<<\\" ns\\">>
<java.io.DataInputStream: int read(byte[])>	<java.io.DataInputStream: int read(byte[])>
<it.yup.xmpp.Group: java.util.Hashtable getGroups()>	<it.yup.xmpp.Group: java.util.Hashtable getGroups()>
9.6.0	9.6.0
<it.yup.screens.ScreenSaver: void <init>(javax.microedition.lcdui.Displayable)>	<it.yup.screens.ScreenSaver: void <init>(javax.microedition.lcdui.Displayable)>
<com.jcraft.jzlib.ZStream: int deflateSetDictionary(byte[],int)>	<com.jcraft.jzlib.ZStream: int deflateSetDictionary(byte[],int)>
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>
send	send
<it.yup.xmpp.XMPPClient: void setXmppListener(it.yup.xmpp.XMPPClient$XmppListener)>	<it.yup.xmpp.XMPPClient: void setXmppListener(it.yup.xmpp.XMPPClient$XmppListener)>
<javax.microedition.lcdui.ChoiceGroup: void <init>(java.lang.String,int)>	<javax.microedition.lcdui.ChoiceGroup: void <init>(java.lang.String,int)>
size	size
<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
stream error	stream error
<it.yup.xml.Element: void setAttributes(java.lang.String[],java.lang.String[])>	<it.yup.xml.Element: void setAttributes(java.lang.String[],java.lang.String[])>
sha-1	sha-1
_08	_08
\\"value\\"	\\"value\\"
<lampiro.LampiroMidlet: void destroyApp(boolean)>	<lampiro.LampiroMidlet: void destroyApp(boolean)>
<it.yup.xmpp.XMPPClient: int[] getTraffic()>	<it.yup.xmpp.XMPPClient: int[] getTraffic()>
/transport/transport.png	/transport/transport.png
<it.yup.ui.UIAccordion: void open(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void open(it.yup.ui.UIItem)>
<it.yup.ui.UIAccordion: void setSepSize(int)>	<it.yup.ui.UIAccordion: void setSepSize(int)>
<java.io.PrintStream: void println(int)>	<java.io.PrintStream: void println(int)>
<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence()>	<it.yup.xmpp.Contact: it.yup.xmpp.packets.Presence getPresence()>
<javax.microedition.lcdui.Gauge: int getValue()>	<javax.microedition.lcdui.Gauge: int getValue()>
<it.yup.ui.UIAccordion: void closeLabel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void closeLabel(it.yup.ui.UIItem)>
<java.lang.String: java.lang.String valueOf(int)>	<java.lang.String: java.lang.String valueOf(int)>
item	item
<it.yup.xml.BProcessor: void writeBinary(it.yup.xml.Element,java.lang.String,java.io.OutputStream)>	<it.yup.xml.BProcessor: void writeBinary(it.yup.xml.Element,java.lang.String,java.io.OutputStream)>
<it.yup.ui.UIAccordion$AccordionItem: it.yup.ui.UILabel getImgLabel()>	<it.yup.ui.UIAccordion$AccordionItem: it.yup.ui.UILabel getImgLabel()>
<java.io.DataInputStream: int available()>	<java.io.DataInputStream: int available()>
<javax.microedition.lcdui.Image: void getRGB(int[],int,int,int,int,int,int)>	<javax.microedition.lcdui.Image: void getRGB(int[],int,int,int,int,int,int)>
none	none
<it.yup.xmpp.Contact: void askCapabilities(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: void askCapabilities(it.yup.xmpp.packets.Presence)>
<it.yup.ui.UIAccordion: int getSepSize()>	<it.yup.ui.UIAccordion: int getSepSize()>
unsubscribed	unsubscribed
:-&	:-&
<it.yup.ui.UICombobox: void access$1(it.yup.ui.UICombobox,int)>	<it.yup.ui.UICombobox: void access$1(it.yup.ui.UICombobox,int)>
<it.yup.util.MetaVector$MultiVectorEnumeration: void checkNext()>	<it.yup.util.MetaVector$MultiVectorEnumeration: void checkNext()>
bluendo:http:publish:0	bluendo:http:publish:0
<java.io.ByteArrayOutputStream: void <init>()>	<java.io.ByteArrayOutputStream: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>	<java.util.Hashtable: boolean contains(java.lang.Object)>
<lampiro.screens.ContactInfoScreen: it.yup.ui.UIPanel access$0(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UIPanel access$0(lampiro.screens.ContactInfoScreen)>
<it.yup.screens.SplashScreen$1: void run()>	<it.yup.screens.SplashScreen$1: void run()>
<it.yup.xmlstream.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>	<it.yup.xmlstream.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>
<lampiro.screens.SubscribeScreen: void itemAction(it.yup.ui.UIItem)>	<lampiro.screens.SubscribeScreen: void itemAction(it.yup.ui.UIItem)>
<lampiro.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>	<lampiro.screens.RosterScreen: void handleTask(it.yup.xmpp.Task,boolean)>
<lampiro.screens.MUCScreen: boolean needDisplay()>	<lampiro.screens.MUCScreen: boolean needDisplay()>
<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$IQResultListener1: void <init>(it.yup.xmpp.FTSender)>
<it.yup.screens.AddContactScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>	<it.yup.screens.AddContactScreen: void _itemStateChanged(javax.microedition.lcdui.Item)>
<lampiro.screens.ChatScreen: boolean keyPressed(int)>	<lampiro.screens.ChatScreen: boolean keyPressed(int)>
<it.yup.ui.UIItem: boolean isFocusable()>	<it.yup.ui.UIItem: boolean isFocusable()>
<it.yup.ui.UIGauge: boolean keyPressed(int)>	<it.yup.ui.UIGauge: boolean keyPressed(int)>
<it.yup.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ChatScreen: void paint(javax.microedition.lcdui.Graphics)>
<it.yup.util.Logger: void addConsumer(it.yup.util.LogConsumer)>	<it.yup.util.Logger: void addConsumer(it.yup.util.LogConsumer)>
fixed	fixed
<it.yup.xmlstream.KXmlSerializer: void processingInstruction(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void processingInstruction(java.lang.String)>
<javax.microedition.lcdui.Display: boolean vibrate(int)>	<javax.microedition.lcdui.Display: boolean vibrate(int)>
<it.yup.xml.Element: void resetText()>	<it.yup.xml.Element: void resetText()>
\\"socket://localhost:10080\\"	\\"socket://localhost:10080\\"
code	code
<it.yup.screens.ScreenSaver: void keyPressed(int)>	<it.yup.screens.ScreenSaver: void keyPressed(int)>
<it.yup.xmlstream.BasicXmlStream: void gotStreamEvent(java.lang.String,java.lang.Object)>	<it.yup.xmlstream.BasicXmlStream: void gotStreamEvent(java.lang.String,java.lang.Object)>
<javax.microedition.lcdui.TextField: void setString(java.lang.String)>	<javax.microedition.lcdui.TextField: void setString(java.lang.String)>
<com.jcraft.jzlib.Deflate: boolean _tr_tally(int,int)>	<com.jcraft.jzlib.Deflate: boolean _tr_tally(int,int)>
<java.lang.Exception: java.lang.String getMessage()>	<java.lang.Exception: java.lang.String getMessage()>
text-private	text-private
<lampiro.screens.RosterScreen: void updateHeader()>	<lampiro.screens.RosterScreen: void updateHeader()>
<<HASH:-935196850>>	<cap xmlns=\'http://jabber.org/protocol/disco#info\'><feature var=\'http://jabber.org/protocol/bytestreams\'></feature><feature var=\'http://jabber.org/protocol/si\'></feature><feature var=\'http://jabber.org/protocol/si/profile/file-transfer\'></feature><feature var=\'http://jabber.org/protocol/disco#info\'></feature><feature var=\'http://jabber.org/protocol/commands\'></feature><feature var=\'http://jabber.org/protocol/rosterx\'></feature><feature var=\'http://jabber.org/protocol/muc\'></feature><feature var=\'jabber:x:data\'></feature></cap>
<it.yup.xmpp.FTSender$PacketListener3: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTSender$PacketListener3: void packetReceived(it.yup.xml.Element)>
reg_gateways	reg_gateways
Can\'t open URL:	Can\'t open URL:
<it.yup.xmlstream.KXmlParser: int getEventType()>	<it.yup.xmlstream.KXmlParser: int getEventType()>
<it.yup.ui.UIMenu: it.yup.ui.UIItem getSelectedItem()>	<it.yup.ui.UIMenu: it.yup.ui.UIItem getSelectedItem()>
body	body
<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object,int)>	<it.yup.util.MetaVector: int lastIndexOf(java.lang.Object,int)>
<it.yup.ui.UIMenu: void setSelectedIndex(int)>	<it.yup.ui.UIMenu: void setSelectedIndex(int)>
\\"subscribe\\"	\\"subscribe\\"
<lampiro.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String,int)>	<lampiro.screens.MessageComposerScreen: void <init>(it.yup.xmpp.Contact,java.lang.String,int)>
<it.yup.screens.AboutScreen: void <clinit>()>	<it.yup.screens.AboutScreen: void <clinit>()>
<it.yup.xmlstream.SocketStream: void tryToSend()>	<it.yup.xmlstream.SocketStream: void tryToSend()>
cancel	cancel
<it.yup.ui.UIUtils: int colorize(int,int)>	<it.yup.ui.UIUtils: int colorize(int,int)>
<it.yup.screens.RegisterScreen: void <clinit>()>	<it.yup.screens.RegisterScreen: void <clinit>()>
<it.yup.xmlstream.KXmlSerializer: void ignorableWhitespace(java.lang.String)>	<it.yup.xmlstream.KXmlSerializer: void ignorableWhitespace(java.lang.String)>
<it.yup.ui.UIItem: java.lang.Object getStatus()>	<it.yup.ui.UIItem: java.lang.Object getStatus()>
<it.yup.xmlstream.KXmlParser: java.lang.String nextText()>	<it.yup.xmlstream.KXmlParser: java.lang.String nextText()>
<java.io.DataOutputStream: void write(int)>	<java.io.DataOutputStream: void write(int)>
<it.yup.tests.XMLTestMidlet: void startApp()>	<it.yup.tests.XMLTestMidlet: void startApp()>
<javax.microedition.lcdui.Canvas: void setCommandListener(javax.microedition.lcdui.CommandListener)>	<javax.microedition.lcdui.Canvas: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<it.yup.xmlstream.KXmlParser: java.lang.Object getProperty(java.lang.String)>	<it.yup.xmlstream.KXmlParser: java.lang.Object getProperty(java.lang.String)>
<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>	<it.yup.xml.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<lampiro.screens.RosterScreen$UIGroup: boolean reorganizeContact(it.yup.xmpp.Contact,int)>	<lampiro.screens.RosterScreen$UIGroup: boolean reorganizeContact(it.yup.xmpp.Contact,int)>
<lampiro.screens.RosterScreen$UIContact: it.yup.ui.UIItem getSelectedItem()>	<lampiro.screens.RosterScreen$UIContact: it.yup.ui.UIItem getSelectedItem()>
<javax.microedition.lcdui.TextBox: void setTitle(java.lang.String)>	<javax.microedition.lcdui.TextBox: void setTitle(java.lang.String)>
\\"form\\"	\\"form\\"
<it.yup.xmpp.Contact: void handleError(it.yup.xml.Element)>	<it.yup.xmpp.Contact: void handleError(it.yup.xml.Element)>
<it.yup.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>	<it.yup.screens.RosterScreen: void handleCommand(it.yup.xmpp.Contact,java.lang.String)>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>	<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
&gt;	&gt;
<it.yup.ui.UIMenu: int append(it.yup.ui.UIItem)>	<it.yup.ui.UIMenu: int append(it.yup.ui.UIItem)>
<it.yup.ui.UILayout: boolean isDirty()>	<it.yup.ui.UILayout: boolean isDirty()>
<lampiro.screens.MUCScreen: boolean updateConversation()>	<lampiro.screens.MUCScreen: boolean updateConversation()>
text-multi	text-multi
\\"presence\\"	\\"presence\\"
<javax.microedition.lcdui.StringItem: void <init>(java.lang.String,java.lang.String)>	<javax.microedition.lcdui.StringItem: void <init>(java.lang.String,java.lang.String)>
check3	check3
<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout access$3(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout access$3(lampiro.screens.ContactInfoScreen)>
\\"subscribed\\"	\\"subscribed\\"
urn:ietf:params:xml:ns:xmpp-sasl	urn:ietf:params:xml:ns:xmpp-sasl
<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout access$5(lampiro.screens.ContactInfoScreen)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout access$5(lampiro.screens.ContactInfoScreen)>
identity	identity
<it.yup.screens.MessageComposerScreen: void <clinit>()>	<it.yup.screens.MessageComposerScreen: void <clinit>()>
<it.yup.xml.KXmlParser: int getNamespaceCount(int)>	<it.yup.xml.KXmlParser: int getNamespaceCount(int)>
<it.yup.xml.KXmlParser: void require(int,java.lang.String,java.lang.String)>	<it.yup.xml.KXmlParser: void require(int,java.lang.String,java.lang.String)>
<lampiro.screens.ContactInfoScreen: void setColor(it.yup.ui.UIItem)>	<lampiro.screens.ContactInfoScreen: void setColor(it.yup.ui.UIItem)>
<it.yup.xmpp.Roster: void updateRosterItem(it.yup.xml.Element)>	<it.yup.xmpp.Roster: void updateRosterItem(it.yup.xml.Element)>
<javax.microedition.lcdui.Alert: void setCommandListener(javax.microedition.lcdui.CommandListener)>	<javax.microedition.lcdui.Alert: void setCommandListener(javax.microedition.lcdui.CommandListener)>
<it.yup.ui.UIMenu: it.yup.ui.UIMenu getSubmenu()>	<it.yup.ui.UIMenu: it.yup.ui.UIMenu getSubmenu()>
<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$IQResultListener2: void <init>(lampiro.screens.RosterScreen)>
Press right key	Press right key
exclude-list	exclude-list
<it.yup.xmlstream.SASLAuthenticator: java.lang.String unparse(java.util.Hashtable)>	<it.yup.xmlstream.SASLAuthenticator: java.lang.String unparse(java.util.Hashtable)>
<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen$IQResultListener1: void <init>(lampiro.screens.RosterScreen)>
&apos;	&apos;
FIRST	FIRST
<it.yup.util.MetaVector: java.lang.Object elementAt(int)>	<it.yup.util.MetaVector: java.lang.Object elementAt(int)>
<lampiro.screens.AddContactScreen: it.yup.ui.UILabel access$2(lampiro.screens.AddContactScreen)>	<lampiro.screens.AddContactScreen: it.yup.ui.UILabel access$2(lampiro.screens.AddContactScreen)>
<it.yup.screens.DataResultScreen: void <clinit>()>	<it.yup.screens.DataResultScreen: void <clinit>()>
<it.yup.ui.UIItem: void setContainer(it.yup.ui.UIIContainer)>	<it.yup.ui.UIItem: void setContainer(it.yup.ui.UIIContainer)>
<java.lang.String: java.lang.String valueOf(char)>	<java.lang.String: java.lang.String valueOf(char)>
muc#roomconfig_publicroom	muc#roomconfig_publicroom
\\"subject\\"	\\"subject\\"
img	img
<it.yup.xmpp.XMPPClient: void playSmartTone()>	<it.yup.xmpp.XMPPClient: void playSmartTone()>
\\"jabber.bluendo.com\\"	\\"jabber.bluendo.com\\"
<it.yup.ui.UIAccordion: boolean keyPressed(int)>	<it.yup.ui.UIAccordion: boolean keyPressed(int)>
<it.yup.xml.KXmlParser: int getAttributeCount()>	<it.yup.xml.KXmlParser: int getAttributeCount()>
<javax.microedition.rms.RecordStore: void deleteRecordStore(java.lang.String)>	<javax.microedition.rms.RecordStore: void deleteRecordStore(java.lang.String)>
<it.yup.util.MetaVector: java.util.Enumeration elements()>	<it.yup.util.MetaVector: java.util.Enumeration elements()>
<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleError(it.yup.xml.Element)>	<lampiro.screens.GatewayRegisterScreen$GatewayRegistrationHandler: void handleError(it.yup.xml.Element)>
<it.yup.xmlstream.SocketStream: void restart()>	<it.yup.xmlstream.SocketStream: void restart()>
<lampiro.screens.RegisterScreen: void access$3(lampiro.screens.RegisterScreen,boolean)>	<lampiro.screens.RegisterScreen: void access$3(lampiro.screens.RegisterScreen,boolean)>
<it.yup.ui.UIItem: int getSelectedColor()>	<it.yup.ui.UIItem: int getSelectedColor()>
<it.yup.util.Logger: void log(java.lang.String,int)>	<it.yup.util.Logger: void log(java.lang.String,int)>
<it.yup.xml.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>	<it.yup.xml.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>
<it.yup.xml.KXmlParser: void parseDoctype(boolean)>	<it.yup.xml.KXmlParser: void parseDoctype(boolean)>
finish	finish
<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener4)>	<it.yup.xmpp.FTSender$IQResultListener4: void <init>(it.yup.xmpp.FTSender,it.yup.xmpp.FTSender$IQResultListener4)>
<java.io.OutputStream: void write(byte[],int,int)>	<java.io.OutputStream: void write(byte[],int,int)>
relaxed	relaxed
<it.yup.util.NetworkConsumer: void setExiting()>	<it.yup.util.NetworkConsumer: void setExiting()>
<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender)>	<it.yup.xmpp.FTSender$PacketListener1: void <init>(it.yup.xmpp.FTSender)>
<it.yup.ui.UIScreen: void addPaintedItem(it.yup.ui.UIItem)>	<it.yup.ui.UIScreen: void addPaintedItem(it.yup.ui.UIItem)>
<com.jcraft.jzlib.Deflate: void _tr_align()>	<com.jcraft.jzlib.Deflate: void _tr_align()>
<it.yup.ui.UILayout: void setSelected(boolean)>	<it.yup.ui.UILayout: void setSelected(boolean)>
\\"lampiro@golem.jabber.bluendo.com\\"	\\"lampiro@golem.jabber.bluendo.com\\"
Cannot authenticate	Cannot authenticate
<it.yup.ui.UICanvas: void pointerPressed(int,int)>	<it.yup.ui.UICanvas: void pointerPressed(int,int)>
<lampiro.screens.DataResultScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.DataResultScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<lampiro.screens.InnerMMScreen: void <init>(javax.microedition.media.Player,javax.microedition.media.Control,int,java.lang.String)>	<lampiro.screens.InnerMMScreen: void <init>(javax.microedition.media.Player,javax.microedition.media.Control,int,java.lang.String)>
groups_position	groups_position
<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout contactLayout(it.yup.ui.UILabel,it.yup.ui.UILabel)>	<lampiro.screens.ContactInfoScreen: it.yup.ui.UIVLayout contactLayout(it.yup.ui.UILabel,it.yup.ui.UILabel)>
<lampiro.screens.TaskListScreen: void <clinit>()>	<lampiro.screens.TaskListScreen: void <clinit>()>
<lampiro.screens.ShowMMScreen: int getMmType()>	<lampiro.screens.ShowMMScreen: int getMmType()>
<it.yup.util.Utils: it.yup.xmpp.packets.Iq easyReply(it.yup.xml.Element)>	<it.yup.util.Utils: it.yup.xmpp.packets.Iq easyReply(it.yup.xml.Element)>
<lampiro.screens.RosterScreen: boolean access$11(lampiro.screens.RosterScreen,boolean)>	<lampiro.screens.RosterScreen: boolean access$11(lampiro.screens.RosterScreen,boolean)>
<java.io.InputStream: void reset()>	<java.io.InputStream: void reset()>
<lampiro.screens.RosterScreen: boolean access$6(lampiro.screens.RosterScreen)>	<lampiro.screens.RosterScreen: boolean access$6(lampiro.screens.RosterScreen)>
A very long text button	A very long text button
<it.yup.ui.UIGauge: int getOffset()>	<it.yup.ui.UIGauge: int getOffset()>
\\"result\\"	\\"result\\"
<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeType(int)>	<it.yup.xmlstream.KXmlParser: java.lang.String getAttributeType(int)>
<lampiro.screens.RegisterScreen: void login()>	<lampiro.screens.RegisterScreen: void login()>
<<\\"Lampiro \\">>	<<\\"Lampiro \\">>
<lampiro.screens.MessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>	<lampiro.screens.MessageComposerScreen: void menuAction(it.yup.ui.UIMenu,it.yup.ui.UIItem)>
<java.lang.Integer: int parseInt(java.lang.String)>	<java.lang.Integer: int parseInt(java.lang.String)>
<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener1)>	<lampiro.screens.AddContactScreen$IQResultListener1: void <init>(lampiro.screens.AddContactScreen,lampiro.screens.AddContactScreen$IQResultListener1)>
<it.yup.util.StderrConsumer: void <init>()>	<it.yup.util.StderrConsumer: void <init>()>
<java.util.Vector: void removeElementAt(int)>	<java.util.Vector: void removeElementAt(int)>
<it.yup.ui.UIMenu: boolean isOpenedState()>	<it.yup.ui.UIMenu: boolean isOpenedState()>
<java.util.Vector: java.lang.Object elementAt(int)>	<java.util.Vector: java.lang.Object elementAt(int)>
expected: /	expected: /
<it.yup.xmpp.packets.DataForm: void <clinit>()>	<it.yup.xmpp.packets.DataForm: void <clinit>()>
<it.yup.ui.UITextField: java.lang.String getText()>	<it.yup.ui.UITextField: java.lang.String getText()>
<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen)>	<lampiro.screens.AddContactScreen$IQResultListener2: void <init>(lampiro.screens.AddContactScreen)>
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>	<java.io.DataOutputStream: void <init>(java.io.OutputStream)>
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void <init>(it.yup.xmpp.FTReceiver$OpenListener)>
invalid block type	invalid block type
<it.yup.ui.UIScreen: it.yup.ui.UIMenu getMenu()>	<it.yup.ui.UIScreen: it.yup.ui.UIMenu getMenu()>
<it.yup.ui.UILayout: boolean isGroup()>	<it.yup.ui.UILayout: boolean isGroup()>
<<\\"Invalid itemList pos: \\">>	<<\\"Invalid itemList pos: \\">>
<lampiro.screens.AboutScreen: void <init>()>	<lampiro.screens.AboutScreen: void <init>()>
prev	prev
:o	:o
<it.yup.ui.UIItem: void setDirty(boolean)>	<it.yup.ui.UIItem: void setDirty(boolean)>
<it.yup.xmpp.XMPPClient: void updateTask(it.yup.xmpp.Task)>	<it.yup.xmpp.XMPPClient: void updateTask(it.yup.xmpp.Task)>
<java.lang.Boolean: boolean booleanValue()>	<java.lang.Boolean: boolean booleanValue()>
<java.lang.NullPointerException: void <init>(java.lang.String)>	<java.lang.NullPointerException: void <init>(java.lang.String)>
<javax.microedition.media.control.VideoControl: java.lang.Object initDisplayMode(int,java.lang.Object)>	<javax.microedition.media.control.VideoControl: java.lang.Object initDisplayMode(int,java.lang.Object)>
<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int)>	<lampiro.screens.RosterScreen$Thread1: void <init>(lampiro.screens.RosterScreen,java.lang.String,int)>
<it.yup.xmpp.FTReceiver$OpenListener: it.yup.xmpp.FTReceiver access$4(it.yup.xmpp.FTReceiver$OpenListener)>	<it.yup.xmpp.FTReceiver$OpenListener: it.yup.xmpp.FTReceiver access$4(it.yup.xmpp.FTReceiver$OpenListener)>
<it.yup.ui.UIRadioButtons: boolean keyPressed(int)>	<it.yup.ui.UIRadioButtons: boolean keyPressed(int)>
<javax.microedition.io.SocketConnection: java.io.InputStream openInputStream()>	<javax.microedition.io.SocketConnection: java.io.InputStream openInputStream()>
<it.yup.ui.UIItem: int getFg_color()>	<it.yup.ui.UIItem: int getFg_color()>
<lampiro.screens.FTScreen: void addFileSend(it.yup.xmpp.FTSender,java.lang.String)>	<lampiro.screens.FTScreen: void addFileSend(it.yup.xmpp.FTSender,java.lang.String)>
<it.yup.xmpp.Contact: boolean supportsMUC(it.yup.xmpp.packets.Presence)>	<it.yup.xmpp.Contact: boolean supportsMUC(it.yup.xmpp.packets.Presence)>
<it.yup.ui.UIRadioButtons: void setSelectedIndex(int)>	<it.yup.ui.UIRadioButtons: void setSelectedIndex(int)>
Available/Total memory:	Available/Total memory:
<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>	<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>	<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
<it.yup.screens.ChatScreen: void paintHeader(javax.microedition.lcdui.Graphics)>	<it.yup.screens.ChatScreen: void paintHeader(javax.microedition.lcdui.Graphics)>
<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void packetReceived(it.yup.xml.Element)>	<it.yup.xmpp.FTReceiver$OpenListener$PacketListener1: void packetReceived(it.yup.xml.Element)>
<it.yup.xmpp.MUC: void <init>(java.lang.String,java.lang.String)>	<it.yup.xmpp.MUC: void <init>(java.lang.String,java.lang.String)>
amr-xb	amr-xb
<it.yup.util.RMSIndex$DefaultUTF8Comparator: int compare(byte[],byte[])>	<it.yup.util.RMSIndex$DefaultUTF8Comparator: int compare(byte[],byte[])>
<it.yup.tests.XMLTestMidlet: void pauseApp()>	<it.yup.tests.XMLTestMidlet: void pauseApp()>
\\"fixed\\"	\\"fixed\\"
<it.yup.ui.UIMenu: int getHeight(javax.microedition.lcdui.Graphics)>	<it.yup.ui.UIMenu: int getHeight(javax.microedition.lcdui.Graphics)>
<it.yup.ui.UIAccordion: void clickLabel(it.yup.ui.UIItem)>	<it.yup.ui.UIAccordion: void clickLabel(it.yup.ui.UIItem)>
<it.yup.xmpp.XMPPClient: java.util.TimerTask access$6(it.yup.xmpp.XMPPClient)>	<it.yup.xmpp.XMPPClient: java.util.TimerTask access$6(it.yup.xmpp.XMPPClient)>
<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace()>	<it.yup.xmlstream.KXmlParser: java.lang.String getNamespace()>
<it.yup.xml.KXmlParser: void pushEntity()>	<it.yup.xml.KXmlParser: void pushEntity()>
<it.yup.xmlstream.AccountRegistration: void start(it.yup.xmlstream.BasicXmlStream)>	<it.yup.xmlstream.AccountRegistration: void start(it.yup.xmlstream.BasicXmlStream)>
<lampiro.screens.ChatScreen: void <clinit>()>	<lampiro.screens.ChatScreen: void <clinit>()>
<it.yup.util.MetaVector$MultiVectorEnumeration: boolean hasMoreElements()>	<it.yup.util.MetaVector$MultiVectorEnumeration: boolean hasMoreElements()>
<it.yup.util.MetaVector: java.util.Enumeration superEnumeration()>	<it.yup.util.MetaVector: java.util.Enumeration superEnumeration()>
<it.yup.screens.RosterScreen: void commandExecuted(java.lang.Object)>	<it.yup.screens.RosterScreen: void commandExecuted(java.lang.Object)>
Lampiro	Lampiro
<it.yup.util.MetaVector: void <init>(int)>	<it.yup.util.MetaVector: void <init>(int)>
precondition: START_TAG	precondition: START_TAG
<it.yup.xmpp.XMPPClient: void <init>()>	<it.yup.xmpp.XMPPClient: void <init>()>
<java.lang.StringBuffer: void <init>()>	<java.lang.StringBuffer: void <init>()>
\\"list-multi\\"	\\"list-multi\\"
subscription	subscription
<it.yup.xml.KXmlSerializer: void check(boolean)>	<it.yup.xml.KXmlSerializer: void check(boolean)>
<it.yup.util.RMSIndex: int physicalWrite(int,byte[],byte[],int,int,byte,it.yup.util.RMSIndex$Item)>	<it.yup.util.RMSIndex: int physicalWrite(int,byte[],byte[],int,int,byte,it.yup.util.RMSIndex$Item)>
<it.yup.xmlstream.Element: it.yup.xmlstream.Element getChildByName(java.lang.String,java.lang.String)>	<it.yup.xmlstream.Element: it.yup.xmlstream.Element getChildByName(java.lang.String,java.lang.String)>
