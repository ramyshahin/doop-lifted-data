<Graph: void display()>/if/instruction31	!=	@GEN_Edges
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction5	!=	@Cycle /\ Directed
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction24	==	@(EdgeObjects) /\ (EdgeObjects)
<CycleWorkSpace: void postVisitAction(Vertex)>/assign/instruction6	-	@(Cycle) /\ (Cycle)
<Vertex: void nodeSearch(WorkSpace)>/if/instruction17	!=	@DFS /\ SearchBase
<Graph: Graph kruskal()>/assign/instruction78	+	@MSTKruskal
<Vertex: void nodeSearch(WorkSpace)>/if/instruction23	!=	@SearchBase /\ BFS
<Graph: void endProfile()>/assign/instruction7	+	@(Benchmark) /\ (Benchmark)
<Graph: void graphSearch(WorkSpace)>/if/instruction12	!=	@SearchBase
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/if/instruction4	!=	@(StronglyConnected) /\ (StronglyConnected)
<Edge: Vertex getOtherVertex(Vertex)>/if/instruction4	!=	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph prim(Vertex)>/if/instruction32	==	@MSTPrim
<Main: void main(java.lang.String[])>/if/instruction85	<	@(Prog) /\ (Prog)
<Graph: void endProfile()>/assign/instruction6	-	@(Benchmark) /\ (Benchmark)
<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction6	<=	@(StronglyConnected) /\ (StronglyConnected)
<Main: void main(java.lang.String[])>/assign/instruction92	-	@(Prog) /\ (Prog)
<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction11	!=	@(MSTPrim) /\ (MSTPrim)
<Main: void main(java.lang.String[])>/assign/instruction82	+	@(Prog) /\ (Prog)
<Graph: Graph kruskal()>/if/instruction85	<	@MSTKruskal
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction3	!=
<Graph: void display()>/assign/instruction14	+
<Graph: Graph prim(Vertex)>/assign/instruction79	+	@MSTPrim
<Graph: Graph kruskal()>/if/instruction64	!=	@MSTKruskal
<Graph: Graph prim(Vertex)>/if/instruction65	>=	@MSTPrim
<Graph: Graph kruskal()>/if/instruction34	!=	@MSTKruskal
<Graph: Graph prim(Vertex)>/if/instruction133	!=	@MSTPrim
<Graph: Graph kruskal()>/if/instruction42	<=	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction140	+	@MSTKruskal
<NumberWorkSpace: void preVisitAction(Vertex)>/if/instruction4	!=	@Number
<Graph: Graph kruskal()>/if/instruction113	!=	@MSTKruskal
<Graph: void display()>/if/instruction19	<
<Main: void main(java.lang.String[])>/if/instruction66	<	@(Prog) /\ (Prog)
<Graph: Graph prim(Vertex)>/if/instruction78	>=	@MSTPrim
<Graph: int readNumber()>/assign/instruction15	+	@(Benchmark) /\ (Benchmark)
<Vertex: void nodeSearch(WorkSpace)>/if/instruction5	==	@SearchBase
<Graph: Graph prim(Vertex)>/assign/instruction86	+	@MSTPrim
<Graph: Graph kruskal()>/if/instruction15	!=	@MSTKruskal
<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction11	!=	@(StronglyConnected) /\ (StronglyConnected)
<WorkSpaceTranspose: void preVisitAction(Vertex)>/if/instruction4	!=	@(StronglyConnected) /\ (StronglyConnected)
<Graph: Graph prim(Vertex)>/if/instruction98	!=	@MSTPrim
<Graph: Graph prim(Vertex)>/if/instruction14	!=	@MSTPrim
<CycleWorkSpace: void preVisitAction(Vertex)>/assign/instruction6	+	@Cycle
<Graph: Graph kruskal()>/if/instruction148	<	@MSTKruskal
<Edge: Vertex getOtherVertex(Vertex)>/if/instruction8	!=	@(EdgeObjects) /\ (EdgeObjects)
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/assign/instruction6	+	@(StronglyConnected) /\ (StronglyConnected)
<Graph: Graph prim(Vertex)>/if/instruction92	!=	@MSTPrim
<Graph: void stopProfile()>/assign/instruction7	+	@(Benchmark) /\ (Benchmark)
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction11	==
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction17	==	@Cycle /\ Undirected
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction16	!=	@(EdgeObjects) /\ (EdgeObjects)
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction6	>=	@(MSTKruskal) /\ (MSTKruskal)
<Graph: Graph kruskal()>/assign/instruction51	+	@MSTKruskal
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction20	==	@(EdgeObjects) /\ (EdgeObjects)
<Vertex: void nodeSearch(WorkSpace)>/if/instruction41	!=	@SearchBase /\ BFS
<Graph: Graph kruskal()>/if/instruction58	<	@MSTKruskal
<Main: void main(java.lang.String[])>/assign/instruction63	+	@(Prog) /\ (Prog)
<Graph: Graph computeTranspose(Graph)>/if/instruction42	!=	@(Transpose) /\ (Transpose)
<Graph: Graph computeTranspose(Graph)>/if/instruction21	!=	@(Transpose) /\ (Transpose)
<Graph: Graph prim(Vertex)>/if/instruction119	!=	@MSTPrim
<Graph: void graphSearch(WorkSpace)>/if/instruction17	!=	@SearchBase
<FinishTimeWorkSpace: void postVisitAction(Vertex)>/assign/instruction4	+	@(StronglyConnected) /\ (StronglyConnected)
<WorkSpaceTranspose: void nextRegionAction(Vertex)>/assign/instruction4	+	@(StronglyConnected) /\ (StronglyConnected)
<Vertex: void nodeSearch(WorkSpace)>/if/instruction30	!=	@SearchBase /\ BFS
<Vertex: void display()>/if/instruction47	==	@SearchBase
<Vertex: void display()>/if/instruction94	!=	@MSTKruskal
<Graph: Graph computeTranspose(Graph)>/if/instruction38	!=	@(Transpose) /\ (Transpose)
<CycleWorkSpace: void preVisitAction(Vertex)>/if/instruction4	!=	@Cycle
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction11	!=	@Cycle /\ Undirected
<Main: void main(java.lang.String[])>/assign/instruction51	+	@(Prog) /\ (Prog)
<Graph: Graph prim(Vertex)>/if/instruction113	!=	@MSTPrim
<Graph: int readNumber()>/if/instruction26	!=	@(Benchmark) /\ (Benchmark)
<Graph: Graph prim(Vertex)>/if/instruction58	==	@MSTPrim
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction27	!=	@(EdgeObjects) /\ (EdgeObjects)
<Vertex: void display()>/if/instruction23	<	@Weighted /\ G_NoEdges
<Graph: Graph kruskal()>/if/instruction126	!=	@MSTKruskal
<NumberWorkSpace: void preVisitAction(Vertex)>/assign/instruction6	+	@Number
<Graph: void graphSearch(WorkSpace)>/if/instruction5	!=	@SearchBase
<Vertex: void display()>/assign/instruction18	+	@Weighted /\ G_NoEdges
<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction6	>=	@(MSTPrim) /\ (MSTPrim)
<Graph: int readNumber()>/if/instruction24	==	@(Benchmark) /\ (Benchmark)
<RegionWorkSpace: void nextRegionAction(Vertex)>/assign/instruction4	+	@(Connected) /\ (Connected)
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction14	!=
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction13	!=
<Graph: Graph prim(Vertex)>/if/instruction63	==	@MSTPrim
<Main: void main(java.lang.String[])>/if/instruction54	<	@(Prog) /\ (Prog)
<Graph: Graph prim(Vertex)>/assign/instruction80	-	@MSTPrim
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction12	==	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph prim(Vertex)>/if/instruction40	!=	@MSTPrim
<Graph: void graphSearch(WorkSpace)>/if/instruction24	!=	@SearchBase
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction7	!=
<Graph: int readNumber()>/if/instruction12	==	@(Benchmark) /\ (Benchmark)
<Graph: Graph kruskal()>/if/instruction91	!=	@MSTKruskal
<Graph: int readNumber()>/if/instruction25	==	@(Benchmark) /\ (Benchmark)
<Graph: void stopProfile()>/assign/instruction6	-	@(Benchmark) /\ (Benchmark)
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction11	!=	@(MSTKruskal) /\ (MSTKruskal)
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/assign/instruction16	+	@Cycle /\ Undirected
<Vertex: void display()>/if/instruction45	!=
