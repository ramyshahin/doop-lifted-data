<Main: void main(java.lang.String[])>/if/instruction85	<Main: void main(java.lang.String[])>/tmp<Main: void main(java.lang.String[])>/if/instruction85	@(Prog) /\ (Prog)
<Vertex: void nodeSearch(WorkSpace)>/if/instruction30	<Vertex: void nodeSearch(WorkSpace)>/tmp<Vertex: void nodeSearch(WorkSpace)>/if/instruction30	@SearchBase /\ BFS
<Graph: void graphSearch(WorkSpace)>/if/instruction12	<Graph: void graphSearch(WorkSpace)>/tmp<Graph: void graphSearch(WorkSpace)>/if/instruction12	@SearchBase
<Graph: Graph prim(Vertex)>/if/instruction113	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction113	@MSTPrim
<Graph: Graph prim(Vertex)>/if/instruction58	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction58	@MSTPrim
<Graph: Graph kruskal()>/if/instruction148	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction148	@MSTKruskal
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction27	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/tmp<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction27	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph computeTranspose(Graph)>/if/instruction21	<Graph: Graph computeTranspose(Graph)>/tmp<Graph: Graph computeTranspose(Graph)>/if/instruction21	@(Transpose) /\ (Transpose)
<Graph: int readNumber()>/if/instruction26	<Graph: int readNumber()>/tmp<Graph: int readNumber()>/if/instruction26	@(Benchmark) /\ (Benchmark)
<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction11	<Graph$Comparator1: int compare(Vertex,Vertex)>/tmp<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction11	@(StronglyConnected) /\ (StronglyConnected)
<Graph: Graph prim(Vertex)>/if/instruction65	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction65	@MSTPrim
<CycleWorkSpace: void preVisitAction(Vertex)>/if/instruction4	<CycleWorkSpace: void preVisitAction(Vertex)>/tmp<CycleWorkSpace: void preVisitAction(Vertex)>/if/instruction4	@Cycle
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction11	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/tmp<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction11	@(MSTKruskal) /\ (MSTKruskal)
<Vertex: void nodeSearch(WorkSpace)>/if/instruction41	<Vertex: void nodeSearch(WorkSpace)>/tmp<Vertex: void nodeSearch(WorkSpace)>/if/instruction41	@SearchBase /\ BFS
<Graph: Graph kruskal()>/if/instruction113	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction113	@MSTKruskal
<Vertex: void nodeSearch(WorkSpace)>/if/instruction5	<Vertex: void nodeSearch(WorkSpace)>/tmp<Vertex: void nodeSearch(WorkSpace)>/if/instruction5	@SearchBase
<Graph: int readNumber()>/if/instruction12	<Graph: int readNumber()>/tmp<Graph: int readNumber()>/if/instruction12	@(Benchmark) /\ (Benchmark)
<Graph: Graph prim(Vertex)>/if/instruction78	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction78	@MSTPrim
<Graph: Graph kruskal()>/if/instruction42	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction42	@MSTKruskal
<Graph: Graph computeTranspose(Graph)>/if/instruction42	<Graph: Graph computeTranspose(Graph)>/tmp<Graph: Graph computeTranspose(Graph)>/if/instruction42	@(Transpose) /\ (Transpose)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction16	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/tmp<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction16	@(EdgeObjects) /\ (EdgeObjects)
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction13	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/tmp<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction13
<Graph: int readNumber()>/if/instruction24	<Graph: int readNumber()>/tmp<Graph: int readNumber()>/if/instruction24	@(Benchmark) /\ (Benchmark)
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction6	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/tmp<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction6	@(MSTKruskal) /\ (MSTKruskal)
<Graph: Graph prim(Vertex)>/if/instruction92	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction92	@MSTPrim
<Edge: Vertex getOtherVertex(Vertex)>/if/instruction4	<Edge: Vertex getOtherVertex(Vertex)>/tmp<Edge: Vertex getOtherVertex(Vertex)>/if/instruction4	@(EdgeObjects) /\ (EdgeObjects)
<Main: void main(java.lang.String[])>/if/instruction54	<Main: void main(java.lang.String[])>/tmp<Main: void main(java.lang.String[])>/if/instruction54	@(Prog) /\ (Prog)
<Graph: Graph kruskal()>/if/instruction126	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction126	@MSTKruskal
<Vertex: void display()>/if/instruction47	<Vertex: void display()>/tmp<Vertex: void display()>/if/instruction47	@SearchBase
<Graph: void graphSearch(WorkSpace)>/if/instruction24	<Graph: void graphSearch(WorkSpace)>/tmp<Graph: void graphSearch(WorkSpace)>/if/instruction24	@SearchBase
<Graph: Graph kruskal()>/if/instruction58	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction58	@MSTKruskal
<Graph: Graph computeTranspose(Graph)>/if/instruction38	<Graph: Graph computeTranspose(Graph)>/tmp<Graph: Graph computeTranspose(Graph)>/if/instruction38	@(Transpose) /\ (Transpose)
<Graph: Graph prim(Vertex)>/if/instruction40	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction40	@MSTPrim
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction7	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/tmp<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction7
<WorkSpaceTranspose: void preVisitAction(Vertex)>/if/instruction4	<WorkSpaceTranspose: void preVisitAction(Vertex)>/tmp<WorkSpaceTranspose: void preVisitAction(Vertex)>/if/instruction4	@(StronglyConnected) /\ (StronglyConnected)
<NumberWorkSpace: void preVisitAction(Vertex)>/if/instruction4	<NumberWorkSpace: void preVisitAction(Vertex)>/tmp<NumberWorkSpace: void preVisitAction(Vertex)>/if/instruction4	@Number
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction3	<Graph: Vertex findsVertex(java.lang.String)>/tmp<Graph: Vertex findsVertex(java.lang.String)>/if/instruction3
<Vertex: void display()>/if/instruction45	<Vertex: void display()>/tmp<Vertex: void display()>/if/instruction45
<Graph: void display()>/if/instruction31	<Graph: void display()>/tmp<Graph: void display()>/if/instruction31	@GEN_Edges
<Graph: void graphSearch(WorkSpace)>/if/instruction5	<Graph: void graphSearch(WorkSpace)>/tmp<Graph: void graphSearch(WorkSpace)>/if/instruction5	@SearchBase
<Graph: Graph kruskal()>/if/instruction34	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction34	@MSTKruskal
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction12	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/tmp<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction12	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph prim(Vertex)>/if/instruction133	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction133	@MSTPrim
<Edge: Vertex getOtherVertex(Vertex)>/if/instruction8	<Edge: Vertex getOtherVertex(Vertex)>/tmp<Edge: Vertex getOtherVertex(Vertex)>/if/instruction8	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph kruskal()>/if/instruction15	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction15	@MSTKruskal
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction14	<Graph: Vertex findsVertex(java.lang.String)>/tmp<Graph: Vertex findsVertex(java.lang.String)>/if/instruction14
<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction6	<Graph$Comparator1: int compare(Vertex,Vertex)>/tmp<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction6	@(StronglyConnected) /\ (StronglyConnected)
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction17	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/tmp<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction17	@Cycle /\ Undirected
<Graph: void display()>/if/instruction19	<Graph: void display()>/tmp<Graph: void display()>/if/instruction19
<Graph: Graph prim(Vertex)>/if/instruction98	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction98	@MSTPrim
<Graph: Graph prim(Vertex)>/if/instruction14	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction14	@MSTPrim
<Vertex: void nodeSearch(WorkSpace)>/if/instruction17	<Vertex: void nodeSearch(WorkSpace)>/tmp<Vertex: void nodeSearch(WorkSpace)>/if/instruction17	@DFS /\ SearchBase
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction20	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/tmp<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction20	@(EdgeObjects) /\ (EdgeObjects)
<Main: void main(java.lang.String[])>/if/instruction66	<Main: void main(java.lang.String[])>/tmp<Main: void main(java.lang.String[])>/if/instruction66	@(Prog) /\ (Prog)
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction11	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/tmp<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction11	@Cycle /\ Undirected
<Graph: Graph prim(Vertex)>/if/instruction32	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction32	@MSTPrim
<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction11	<Graph$Comparator2: int compare(Vertex,Vertex)>/tmp<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction11	@(MSTPrim) /\ (MSTPrim)
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/if/instruction4	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/tmp<FinishTimeWorkSpace: void preVisitAction(Vertex)>/if/instruction4	@(StronglyConnected) /\ (StronglyConnected)
<Graph: Graph kruskal()>/if/instruction91	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction91	@MSTKruskal
<Graph: void graphSearch(WorkSpace)>/if/instruction17	<Graph: void graphSearch(WorkSpace)>/tmp<Graph: void graphSearch(WorkSpace)>/if/instruction17	@SearchBase
<Graph: Graph prim(Vertex)>/if/instruction119	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction119	@MSTPrim
<Vertex: void display()>/if/instruction23	<Vertex: void display()>/tmp<Vertex: void display()>/if/instruction23	@Weighted /\ G_NoEdges
<Vertex: void display()>/if/instruction94	<Vertex: void display()>/tmp<Vertex: void display()>/if/instruction94	@MSTKruskal
<Graph: Graph kruskal()>/if/instruction64	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction64	@MSTKruskal
<Graph: Graph prim(Vertex)>/if/instruction63	<Graph: Graph prim(Vertex)>/tmp<Graph: Graph prim(Vertex)>/if/instruction63	@MSTPrim
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction24	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/tmp<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction24	@(EdgeObjects) /\ (EdgeObjects)
<Graph: int readNumber()>/if/instruction25	<Graph: int readNumber()>/tmp<Graph: int readNumber()>/if/instruction25	@(Benchmark) /\ (Benchmark)
<Vertex: void nodeSearch(WorkSpace)>/if/instruction23	<Vertex: void nodeSearch(WorkSpace)>/tmp<Vertex: void nodeSearch(WorkSpace)>/if/instruction23	@SearchBase /\ BFS
<Graph: Graph kruskal()>/if/instruction85	<Graph: Graph kruskal()>/tmp<Graph: Graph kruskal()>/if/instruction85	@MSTKruskal
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction11	<Graph: Vertex findsVertex(java.lang.String)>/tmp<Graph: Vertex findsVertex(java.lang.String)>/if/instruction11
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction5	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/tmp<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction5	@Cycle /\ Directed
<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction6	<Graph$Comparator2: int compare(Vertex,Vertex)>/tmp<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction6	@(MSTPrim) /\ (MSTPrim)
