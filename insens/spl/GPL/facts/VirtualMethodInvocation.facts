<Graph: void connectedComponents()>/Graph.graphSearch/0	4	<Graph: void graphSearch(WorkSpace)>	<Graph: void connectedComponents()>/this#_0	<Graph: void connectedComponents()>	@(Connected) /\ (Connected)
<Vertex: void display()>/java.io.PrintStream.print/4	49	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r62	<Vertex: void display()>	@SearchBase
<Graph: void display()>/EdgeIfc.display/0	29	<EdgeIfc: void display()>	<Graph: void display()>/$r8	<Graph: void display()>	@GEN_Edges
<Vertex: void display()>/java.io.PrintStream.print/1	17	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r4	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Graph: boolean cycleCheck()>/Graph.graphSearch/0	5	<Graph: void graphSearch(WorkSpace)>	<Graph: boolean cycleCheck()>/this#_0	<Graph: boolean cycleCheck()>	@(Cycle) /\ (Cycle)
<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/0	20	<VertexIter: boolean hasNext()>	<Graph: Graph computeTranspose(Graph)>/vxiter#_353	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Main: void main(java.lang.String[])>/Graph.readNumber/1	14	<Graph: int readNumber()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: Graph kruskal()>/java.util.LinkedList.clear/0	68	<java.util.LinkedList: void clear()>	<Graph: Graph kruskal()>/$r22	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/java.util.LinkedList.add/2	62	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph kruskal()>/$r21	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: void run(Vertex)>/Graph.connectedComponents/0	3	<Graph: void connectedComponents()>	<Graph: void run(Vertex)>/this#_0	<Graph: void run(Vertex)>	@Prog /\ Connected
<Graph: Graph computeTranspose(Graph)>/VertexIter.next/3	29	<VertexIter: Vertex next()>	<Graph: Graph computeTranspose(Graph)>/neighbors#_374	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: Graph prim(Vertex)>/Graph.findsVertex/2	124	<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void display()>/java.io.PrintStream.print/10	108	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r46	<Vertex: void display()>	@MSTKruskal
<Graph: Graph kruskal()>/EdgeIfc.getEnd/0	28	<EdgeIfc: Vertex getEnd()>	<Graph: Graph kruskal()>/e1#_430	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/Vertex.getName/4	67	<Vertex: java.lang.String getName()>	<Graph: Graph prim(Vertex)>/u#_573	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph kruskal()>/java.util.LinkedList.add/6	93	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph kruskal()>/$r16	<Graph: Graph kruskal()>	@MSTKruskal
<Vertex: void addWeight(int)>/java.util.LinkedList.add/0	6	<java.util.LinkedList: boolean add(java.lang.Object)>	<Vertex: void addWeight(int)>/$r1	<Vertex: void addWeight(int)>	@(Weighted) /\ (Weighted /\ G_NoEdges)
<Graph: Graph prim(Vertex)>/Vertex.getName/3	56	<Vertex: java.lang.String getName()>	<Graph: Graph prim(Vertex)>/v#_584	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/EdgeIter.hasNext/0	91	<EdgeIter: boolean hasNext()>	<Graph: Graph prim(Vertex)>/edgeiter#_580	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: void display()>/java.io.PrintStream.println/2	21	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void display()>/$r6	<Graph: void display()>
<Vertex: void display()>/java.io.PrintStream.print/8	92	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r40	<Vertex: void display()>	@Cycle
<Graph: Graph kruskal()>/EdgeIfc.getWeight/0	137	<EdgeIfc: int getWeight()>	<Graph: Graph kruskal()>/theEdge#_499	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/Graph.getVertices/0	4	<Graph: VertexIter getVertices()>	<Graph: Graph prim(Vertex)>/this#_0	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	18	<WorkSpace: void postVisitAction(Vertex)>	<Vertex: void nodeSearch(WorkSpace)>/w#_0	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase
<Graph: Graph strongComponents()>/Graph.sortVertices/0	9	<Graph: void sortVertices(java.util.Comparator)>	<Graph: Graph strongComponents()>/this#_0	<Graph: Graph strongComponents()>	@StronglyConnected
<Graph: Graph kruskal()>/Graph.findsVertex/1	136	<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Graph kruskal()>/e1_$$A_1#_481	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: void addEdge(Vertex,Neighbor)>/Vertex.addEdge/1	9	<Vertex: void addEdge(Neighbor)>	<Graph: void addEdge(Vertex,Neighbor)>/end#_148	<Graph: void addEdge(Vertex,Neighbor)>	@(GN_OnlyNeighbors) /\ (Undirected /\ GN_OnlyNeighbors)
<Graph: Graph kruskal()>/Graph.addVertex/0	124	<Graph: void addVertex(Vertex)>	<Graph: Graph kruskal()>/e1_$$A_1#_481	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/VertexIter.next/1	30	<VertexIter: Vertex next()>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	12	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	<Vertex: void nodeSearch(WorkSpace)>/w#_0	<Vertex: void nodeSearch(WorkSpace)>	@DFS /\ SearchBase
<Graph: Graph kruskal()>/Graph.getEdges/1	24	<Graph: EdgeIter getEdges()>	<Graph: Graph kruskal()>/this#_0	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/Vertex.getName/1	34	<Vertex: java.lang.String getName()>	<Graph: Graph prim(Vertex)>/x_$$A_3#_546	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void display()>/Vertex.getName/0	38	<Vertex: java.lang.String getName()>	<Vertex: void display()>/v#_266	<Vertex: void display()>
<Graph: Graph prim(Vertex)>/Vertex.getName/2	45	<Vertex: java.lang.String getName()>	<Graph: Graph prim(Vertex)>/u#_573	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph computeTranspose(Graph)>/VertexIter.next/2	26	<VertexIter: Vertex next()>	<Graph: Graph computeTranspose(Graph)>/newvxiter#_366	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Vertex: void addNeighbor(Neighbor)>/java.util.LinkedList.add/0	4	<java.util.LinkedList: boolean add(java.lang.Object)>	<Vertex: void addNeighbor(Neighbor)>/$r0	<Vertex: void addNeighbor(Neighbor)>	@(GEN_Edges) /\ (GEN_Edges)
<Graph: Graph prim(Vertex)>/java.util.Set.remove/1	73	<java.util.Set: boolean remove(java.lang.Object)>	<Graph: Graph prim(Vertex)>/indx#_540	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph computeTranspose(Graph)>/VertexIter.next/1	25	<VertexIter: Vertex next()>	<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: Graph prim(Vertex)>/java.util.Set.add/2	85	<java.util.Set: boolean add(java.lang.Object)>	<Graph: Graph prim(Vertex)>/indx#_540	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void display()>/VertexIter.next/0	35	<VertexIter: Vertex next()>	<Vertex: void display()>/vxiter_$$A_1#_265	<Vertex: void display()>
<Graph: void addVertex(Vertex)>/java.util.LinkedList.add/0	4	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: void addVertex(Vertex)>/$r0	<Graph: void addVertex(Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/3	14	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph prim(Vertex)>/Graph.findsVertex/1	122	<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/java.util.Set.add/1	35	<java.util.Set: boolean add(java.lang.Object)>	<Graph: Graph prim(Vertex)>/indx#_540	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph computeTranspose(Graph)>/Vertex.getNeighbors/0	27	<Vertex: VertexIter getNeighbors()>	<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1#_370	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: Graph kruskal()>/EdgeIter.next/0	26	<EdgeIter: EdgeIfc next()>	<Graph: Graph kruskal()>/edgeiter#_428	<Graph: Graph kruskal()>	@MSTKruskal
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator2.compare/0	6	<Graph$Comparator2: int compare(Vertex,Vertex)>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l0#_0	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	3	<WorkSpace: void preVisitAction(Vertex)>	<Vertex: void nodeSearch(WorkSpace)>/w#_0	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase
<Main: void main(java.lang.String[])>/Graph.readNumber/5	58	<Graph: int readNumber()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: Graph prim(Vertex)>/Graph.getVertices/2	102	<Graph: VertexIter getVertices()>	<Graph: Graph prim(Vertex)>/this#_0	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.hasNext/0	13	<VertexIter: boolean hasNext()>	<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Graph computeTranspose(Graph)>/Graph.addEdge/0	33	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	<Graph: Graph computeTranspose(Graph)>/newGraph#_350	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: void run(Vertex)>/Graph.display/0	14	<Graph: void display()>	<Graph: void run(Vertex)>/gaux#_259	<Graph: void run(Vertex)>	@MSTKruskal /\ Prog
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.next/0	7	<EdgeIter: EdgeIfc next()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: void run(Vertex)>/Graph.kruskal/0	12	<Graph: Graph kruskal()>	<Graph: void run(Vertex)>/this#_0	<Graph: void run(Vertex)>	@MSTKruskal /\ Prog
<Vertex: void setWeight(int)>/Vertex.addWeight/0	3	<Vertex: void addWeight(int)>	<Vertex: void setWeight(int)>/this#_0	<Vertex: void setWeight(int)>	@(Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges)
<Graph: void display()>/java.io.PrintStream.println/4	33	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void display()>/$r9	<Graph: void display()>	@GEN_Edges
<Graph: Graph strongComponents()>/Graph.computeTranspose/0	10	<Graph: Graph computeTranspose(Graph)>	<Graph: Graph strongComponents()>/this#_0	<Graph: Graph strongComponents()>	@StronglyConnected
<Graph: Graph computeTranspose(Graph)>/Graph.addVertex/0	16	<Graph: void addVertex(Vertex)>	<Graph: Graph computeTranspose(Graph)>/newGraph#_350	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: Graph prim(Vertex)>/EdgeIfc.getOtherVertex/0	54	<EdgeIfc: Vertex getOtherVertex(Vertex)>	<Graph: Graph prim(Vertex)>/en#_582	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void display()>/java.io.PrintStream.print/11	120	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r53	<Vertex: void display()>	@MSTPrim
<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/1	21	<VertexIter: Vertex next()>	<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Graph: Graph prim(Vertex)>/VertexIter.hasNext/3	132	<VertexIter: boolean hasNext()>	<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: void run(Vertex)>/Graph.display/2	23	<Graph: void display()>	<Graph: void run(Vertex)>/gaux2#_271	<Graph: void run(Vertex)>	@Prog /\ StronglyConnected
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/3	10	<EdgeIfc: int getWeight()>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@(MSTKruskal) /\ (MSTKruskal)
<Graph: Graph prim(Vertex)>/EdgeIfc.getWeight/0	62	<EdgeIfc: int getWeight()>	<Graph: Graph prim(Vertex)>/en#_582	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/Graph.findsEdge/0	127	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	<Graph: Graph prim(Vertex)>/this#_0	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: void display()>/java.io.PrintStream.println/0	3	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void display()>/$r0	<Graph: void display()>
<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/3	83	<java.util.LinkedList: void add(int,java.lang.Object)>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	<Graph: Graph prim(Vertex)>	@MSTPrim
<Neighbor: void display()>/java.io.PrintStream.print/0	10	<java.io.PrintStream: void print(java.lang.String)>	<Neighbor: void display()>/$r3	<Neighbor: void display()>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Graph: Graph prim(Vertex)>/Graph.getVertices/1	28	<Graph: VertexIter getVertices()>	<Graph: Graph prim(Vertex)>/this#_0	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph kruskal()>/Graph.addEdge/0	138	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	<Graph: Graph kruskal()>/e1_$$A_1#_481	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addAdjacent/0	5	<Vertex: void addAdjacent(Vertex)>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@G_NoEdges
<Graph: void runBenchmark(java.lang.String)>/java.io.PrintStream.println/0	16	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void runBenchmark(java.lang.String)>/$r3	<Graph: void runBenchmark(java.lang.String)>	@(Benchmark) /\ (Benchmark)
<Graph: Graph kruskal()>/java.util.LinkedList.clear/1	95	<java.util.LinkedList: void clear()>	<Graph: Graph kruskal()>/$r15	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: void display()>/Graph.getEdges/0	26	<Graph: EdgeIter getEdges()>	<Graph: void display()>/this#_0	<Graph: void display()>	@GEN_Edges
<Graph: Graph kruskal()>/Vertex.getName/2	120	<Vertex: java.lang.String getName()>	<Graph: Graph kruskal()>/$r25	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph computeTranspose(Graph)>/java.util.Map.put/0	17	<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>	<Graph: Graph computeTranspose(Graph)>/newVertices#_347	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.hasNext/0	26	<EdgeIter: boolean hasNext()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: void run(Vertex)>/Graph.display/1	18	<Graph: void display()>	<Graph: void run(Vertex)>/gaux1#_264	<Graph: void run(Vertex)>	@MSTPrim /\ Prog
<Vertex: void display()>/java.io.PrintStream.println/0	53	<java.io.PrintStream: void println(java.lang.String)>	<Vertex: void display()>/$r22	<Vertex: void display()>	@SearchBase
<Main: void main(java.lang.String[])>/Graph.readNumber/4	17	<Graph: int readNumber()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Vertex: void display()>/java.io.PrintStream.print/6	72	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r29	<Vertex: void display()>	@Connected
<Vertex: void display()>/java.io.PrintStream.print/2	32	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r11	<Vertex: void display()>
<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/2	41	<VertexIter: boolean hasNext()>	<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: void run(Vertex)>/Graph.prim/0	16	<Graph: Graph prim(Vertex)>	<Graph: void run(Vertex)>/this#_0	<Graph: void run(Vertex)>	@MSTPrim /\ Prog
<Graph: Graph kruskal()>/EdgeIter.hasNext/0	112	<EdgeIter: boolean hasNext()>	<Graph: Graph kruskal()>/edgeiter#_428	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/2	23	<Graph: VertexIter getVertices()>	<Graph: Graph computeTranspose(Graph)>/this#_0	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: void run(Vertex)>/Graph.numberVertices/0	20	<Graph: void numberVertices()>	<Graph: void run(Vertex)>/this#_0	<Graph: void run(Vertex)>	@Prog /\ Number
<Vertex: void nodeSearch(WorkSpace)>/Vertex.nodeSearch/0	13	<Vertex: void nodeSearch(WorkSpace)>	<Vertex: void nodeSearch(WorkSpace)>/v_$$A_1#_208	<Vertex: void nodeSearch(WorkSpace)>	@DFS /\ SearchBase
<Graph: Graph computeTranspose(Graph)>/Vertex.getName/0	12	<Vertex: java.lang.String getName()>	<Graph: Graph computeTranspose(Graph)>/$r2	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Vertex: void nodeSearch(WorkSpace)>/java.util.LinkedList.remove/0	36	<java.util.LinkedList: java.lang.Object remove(int)>	<Vertex: void nodeSearch(WorkSpace)>/$r4	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Vertex: void setWeight(int)>/Vertex.addWeight/1	7	<Vertex: void addWeight(int)>	<Vertex: void setWeight(int)>/$r2	<Vertex: void setWeight(int)>	@(Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges)
<Vertex: void adjustAdorns(Vertex,int)>/java.util.LinkedList.add/0	11	<java.util.LinkedList: boolean add(java.lang.Object)>	<Vertex: void adjustAdorns(Vertex,int)>/$r4	<Vertex: void adjustAdorns(Vertex,int)>	@(G_NoEdges) /\ (Weighted /\ G_NoEdges)
<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/1	11	<VertexIter: boolean hasNext()>	<Graph: void graphSearch(WorkSpace)>/vxiter#_293	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: Graph prim(Vertex)>/Graph.getVertices/3	114	<Graph: VertexIter getVertices()>	<Graph: Graph prim(Vertex)>/this#_0	<Graph: Graph prim(Vertex)>	@MSTPrim
<Main: void main(java.lang.String[])>/Vertex.assignName/0	46	<Vertex: Vertex assignName(java.lang.String)>	<Main: void main(java.lang.String[])>/$r5	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: Graph kruskal()>/java.util.LinkedList.add/4	77	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph kruskal()>/$r13	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/VertexIter.next/3	116	<VertexIter: Vertex next()>	<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: void display()>/java.io.PrintStream.println/3	24	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void display()>/$r7	<Graph: void display()>	@GEN_Edges
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/0	4	<EdgeIfc: int getWeight()>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@(MSTKruskal) /\ (MSTKruskal)
<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/1	37	<VertexIter: boolean hasNext()>	<Graph: Graph computeTranspose(Graph)>/neighbors#_374	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: void graphSearch(WorkSpace)>/Graph.getVertices/0	3	<Graph: VertexIter getVertices()>	<Graph: void graphSearch(WorkSpace)>/this#_0	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.next/0	8	<VertexIter: Vertex next()>	<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161	<Graph: Vertex findsVertex(java.lang.String)>
<Main: void main(java.lang.String[])>/Graph.readNumber/0	13	<Graph: int readNumber()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addAdjacent/1	6	<Vertex: void addAdjacent(Vertex)>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@Undirected /\ G_NoEdges
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/4	17	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph computeTranspose(Graph)>/VertexIter.next/0	11	<VertexIter: Vertex next()>	<Graph: Graph computeTranspose(Graph)>/vxiter#_353	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	18	<WorkSpace: void nextRegionAction(Vertex)>	<Graph: void graphSearch(WorkSpace)>/w#_0	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: Graph prim(Vertex)>/java.util.Set.add/0	27	<java.util.Set: boolean add(java.lang.Object)>	<Graph: Graph prim(Vertex)>/indx#_540	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/VertexIter.next/2	104	<VertexIter: Vertex next()>	<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Vertex findsVertex(java.lang.String)>/Vertex.getName/0	9	<Vertex: java.lang.String getName()>	<Graph: Vertex findsVertex(java.lang.String)>/theVertex#_162	<Graph: Vertex findsVertex(java.lang.String)>
<Main: void main(java.lang.String[])>/Graph.run/0	89	<Graph: void run(Vertex)>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/2	23	<VertexIter: boolean hasNext()>	<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: Graph kruskal()>/java.util.LinkedList.add/5	89	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph kruskal()>/$r14	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addWeight/0	8	<Vertex: void addWeight(int)>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@Undirected /\ Weighted /\ G_NoEdges
<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/1	29	<VertexIter: boolean hasNext()>	<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Graph: void graphSearch(WorkSpace)>/VertexIter.next/0	7	<VertexIter: Vertex next()>	<Graph: void graphSearch(WorkSpace)>/vxiter#_293	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: Graph kruskal()>/Graph.getVertices/1	117	<Graph: VertexIter getVertices()>	<Graph: Graph kruskal()>/this#_0	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/1	33	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/java.util.LinkedList.set/0	69	<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>	<Graph: Graph prim(Vertex)>/uneighbors#_577	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph kruskal()>/Graph.sortEdges/0	23	<Graph: void sortEdges(java.util.Comparator)>	<Graph: Graph kruskal()>/this#_0	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/Vertex.getEdges/0	49	<Vertex: EdgeIter getEdges()>	<Graph: Graph prim(Vertex)>/u#_573	<Graph: Graph prim(Vertex)>	@MSTPrim
<Edge: void display()>/Vertex.getName/1	19	<Vertex: java.lang.String getName()>	<Edge: void display()>/$r10	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: void run(Vertex)>/Graph.cycleCheck/0	8	<Graph: boolean cycleCheck()>	<Graph: void run(Vertex)>/this#_0	<Graph: void run(Vertex)>	@Cycle /\ Prog
<Edge: void display()>/java.io.PrintStream.print/0	9	<java.io.PrintStream: void print(java.lang.String)>	<Edge: void display()>/$r1	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects /\ Weighted)
<Graph: Graph kruskal()>/VertexIter.hasNext/0	14	<VertexIter: boolean hasNext()>	<Graph: Graph kruskal()>/vxiter#_406	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/Vertex.getName/4	135	<Vertex: java.lang.String getName()>	<Graph: Graph kruskal()>/v_$$A_5#_501	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: void display()>/Vertex.display/0	13	<Vertex: void display()>	<Graph: void display()>/$r5	<Graph: void display()>
<Graph: Graph strongComponents()>/Graph.graphSearch/0	5	<Graph: void graphSearch(WorkSpace)>	<Graph: Graph strongComponents()>/this#_0	<Graph: Graph strongComponents()>	@StronglyConnected
<Vertex: void display()>/Vertex.getNeighbors/0	33	<Vertex: VertexIter getNeighbors()>	<Vertex: void display()>/this#_0	<Vertex: void display()>
<Vertex: void display()>/java.io.PrintStream.print/9	96	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r61	<Vertex: void display()>	@MSTKruskal
<Graph: Graph kruskal()>/EdgeIfc.getStart/0	27	<EdgeIfc: Vertex getStart()>	<Graph: Graph kruskal()>/e1#_430	<Graph: Graph kruskal()>	@MSTKruskal
<Main: void main(java.lang.String[])>/Graph.readNumber/6	61	<Graph: int readNumber()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: Graph kruskal()>/VertexIter.hasNext/1	125	<VertexIter: boolean hasNext()>	<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/Vertex.getName/1	32	<Vertex: java.lang.String getName()>	<Graph: Graph kruskal()>/$r6	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/Vertex.getNeighborsObj/0	47	<Vertex: java.util.LinkedList getNeighborsObj()>	<Graph: Graph prim(Vertex)>/u#_573	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/EdgeIter.next/0	53	<EdgeIter: EdgeIfc next()>	<Graph: Graph prim(Vertex)>/edgeiter#_580	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/Vertex.getName/5	72	<Vertex: java.lang.String getName()>	<Graph: Graph prim(Vertex)>/v#_584	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/java.util.Set.remove/0	46	<java.util.Set: boolean remove(java.lang.Object)>	<Graph: Graph prim(Vertex)>/indx#_540	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/7	22	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph kruskal()>/Graph.getEdges/0	19	<Graph: EdgeIter getEdges()>	<Graph: Graph kruskal()>/this#_0	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph strongComponents()>/Graph.graphSearch/1	14	<Graph: void graphSearch(WorkSpace)>	<Graph: Graph strongComponents()>/gaux#_334	<Graph: Graph strongComponents()>	@StronglyConnected
<Graph: Graph kruskal()>/VertexIter.next/0	7	<VertexIter: Vertex next()>	<Graph: Graph kruskal()>/vxiter#_406	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: void addEdge(Vertex,Neighbor)>/Vertex.addEdge/0	4	<Vertex: void addEdge(Neighbor)>	<Graph: void addEdge(Vertex,Neighbor)>/start#_0	<Graph: void addEdge(Vertex,Neighbor)>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/5	18	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: void graphSearch(WorkSpace)>/Graph.getVertices/1	13	<Graph: VertexIter getVertices()>	<Graph: void graphSearch(WorkSpace)>/this#_0	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Vertex: void addEdge(Neighbor)>/java.util.LinkedList.add/0	4	<java.util.LinkedList: boolean add(java.lang.Object)>	<Vertex: void addEdge(Neighbor)>/$r0	<Vertex: void addEdge(Neighbor)>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Graph: Graph prim(Vertex)>/java.util.LinkedList.remove/0	71	<java.util.LinkedList: boolean remove(java.lang.Object)>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: void display()>/EdgeIter.next/0	28	<EdgeIter: EdgeIfc next()>	<Graph: void display()>/edgeiter_$$A_1#_177	<Graph: void display()>	@GEN_Edges
<Graph: void graphSearch(WorkSpace)>/Vertex.nodeSearch/0	19	<Vertex: void nodeSearch(WorkSpace)>	<Graph: void graphSearch(WorkSpace)>/v_$$A_3#_306	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/0	9	<Graph: VertexIter getVertices()>	<Graph: Graph computeTranspose(Graph)>/this#_0	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: Graph kruskal()>/Vertex.getName/0	30	<Vertex: java.lang.String getName()>	<Graph: Graph kruskal()>/$r4	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/2	81	<java.util.LinkedList: void add(int,java.lang.Object)>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/VertexIter.hasNext/2	112	<VertexIter: boolean hasNext()>	<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Vertex findsVertex(java.lang.String)>/Graph.getVertices/0	6	<Graph: VertexIter getVertices()>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Graph prim(Vertex)>/Vertex.getName/0	26	<Vertex: java.lang.String getName()>	<Graph: Graph prim(Vertex)>/root#_522	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: void graphSearch(WorkSpace)>/Vertex.init_vertex/0	8	<Vertex: void init_vertex(WorkSpace)>	<Graph: void graphSearch(WorkSpace)>/v_$$A_1#_300	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/2	13	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v2#_281	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Main: void main(java.lang.String[])>/java.io.PrintStream.println/0	102	<java.io.PrintStream: void println(java.lang.String)>	<Main: void main(java.lang.String[])>/$r19	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: void run(Vertex)>/Graph.strongComponents/0	21	<Graph: Graph strongComponents()>	<Graph: void run(Vertex)>/this#_0	<Graph: void run(Vertex)>	@Prog /\ StronglyConnected
<Graph: Graph computeTranspose(Graph)>/Vertex.getName/1	30	<Vertex: java.lang.String getName()>	<Graph: Graph computeTranspose(Graph)>/theNeighbor#_377	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Main: void main(java.lang.String[])>/Graph.addVertex/0	50	<Graph: void addVertex(Vertex)>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: Graph kruskal()>/Graph.findsVertex/0	134	<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Graph kruskal()>/e1_$$A_1#_481	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/0	25	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph kruskal()>/VertexIter.next/1	119	<VertexIter: Vertex next()>	<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484	<Graph: Graph kruskal()>	@MSTKruskal
<Vertex: void nodeSearch(WorkSpace)>/Vertex.getNeighbors/0	9	<Vertex: VertexIter getNeighbors()>	<Vertex: void nodeSearch(WorkSpace)>/this#_0	<Vertex: void nodeSearch(WorkSpace)>	@DFS /\ SearchBase
<Graph: Graph prim(Vertex)>/Vertex.assignName/0	108	<Vertex: Vertex assignName(java.lang.String)>	<Graph: Graph prim(Vertex)>/$r14	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/VertexIter.hasNext/0	13	<VertexIter: boolean hasNext()>	<Graph: Graph prim(Vertex)>/vxiter#_526	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void addAdjacent(Vertex)>/java.util.LinkedList.add/0	4	<java.util.LinkedList: boolean add(java.lang.Object)>	<Vertex: void addAdjacent(Vertex)>/$r0	<Vertex: void addAdjacent(Vertex)>	@(G_NoEdges) /\ (G_NoEdges)
<Vertex: void display()>/Vertex.getName/1	104	<Vertex: java.lang.String getName()>	<Vertex: void display()>/$r47	<Vertex: void display()>	@MSTKruskal
<Graph: Graph kruskal()>/EdgeIfc.adjustAdorns/0	139	<EdgeIfc: void adjustAdorns(EdgeIfc)>	<Graph: Graph kruskal()>/theNewEdge#_511	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/java.util.LinkedList.add/3	66	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph kruskal()>/$r23	<Graph: Graph kruskal()>	@MSTKruskal
<Main: void main(java.lang.String[])>/Graph.stopBenchmark/0	73	<Graph: void stopBenchmark()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Edge: void display()>/Vertex.getName/0	15	<Vertex: java.lang.String getName()>	<Edge: void display()>/$r6	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/6	21	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v2#_281	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/0	4	<VertexIter: boolean hasNext()>	<Graph: void graphSearch(WorkSpace)>/vxiter#_293	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/0	11	<VertexIter: Vertex next()>	<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207	<Vertex: void nodeSearch(WorkSpace)>	@DFS /\ SearchBase
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/2	9	<EdgeIfc: int getWeight()>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@(MSTKruskal) /\ (MSTKruskal)
<Graph: Graph prim(Vertex)>/Graph.findsVertex/0	118	<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Graph prim(Vertex)>/this#_0	<Graph: Graph prim(Vertex)>	@MSTPrim
<Edge: void adjustAdorns(EdgeIfc)>/EdgeIfc.getWeight/0	3	<EdgeIfc: int getWeight()>	<Edge: void adjustAdorns(EdgeIfc)>/the_edge#_0	<Edge: void adjustAdorns(EdgeIfc)>	@(EdgeObjects) /\ (EdgeObjects /\ Weighted)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/0	9	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph prim(Vertex)>/Graph.addEdge/0	125	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	<Graph: Graph prim(Vertex)>	@MSTPrim
<Main: void main(java.lang.String[])>/Graph.readNumber/3	16	<Graph: int readNumber()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: void stopBenchmark()>/java.io.Reader.close/0	3	<java.io.Reader: void close()>	<Graph: void stopBenchmark()>/$r0	<Graph: void stopBenchmark()>	@(Benchmark) /\ (Benchmark)
<Graph: void graphSearch(WorkSpace)>/VertexIter.next/1	15	<VertexIter: Vertex next()>	<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305	<Graph: void graphSearch(WorkSpace)>	@SearchBase
<Graph: void display()>/java.io.PrintStream.println/1	6	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void display()>/$r1	<Graph: void display()>
<Graph: Graph kruskal()>/EdgeIfc.getStart/1	131	<EdgeIfc: Vertex getStart()>	<Graph: Graph kruskal()>/theEdge#_499	<Graph: Graph kruskal()>	@MSTKruskal
<Main: void main(java.lang.String[])>/Graph.findsVertex/0	88	<Graph: Vertex findsVertex(java.lang.String)>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: Graph prim(Vertex)>/EdgeIfc.adjustAdorns/0	128	<EdgeIfc: void adjustAdorns(EdgeIfc)>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph kruskal()>/EdgeIfc.getEnd/1	132	<EdgeIfc: Vertex getEnd()>	<Graph: Graph kruskal()>/theEdge#_499	<Graph: Graph kruskal()>	@MSTKruskal
<Vertex: void display()>/java.io.PrintStream.print/7	83	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r34	<Vertex: void display()>	@StronglyConnected
<Graph: void run(Vertex)>/java.io.PrintStream.println/0	11	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void run(Vertex)>/$r1	<Graph: void run(Vertex)>	@Cycle /\ Prog
<Graph: Graph kruskal()>/Vertex.getName/3	133	<Vertex: java.lang.String getName()>	<Graph: Graph kruskal()>/vxiter_$$A_2_$$A_3#_500	<Graph: Graph kruskal()>	@MSTKruskal
<Vertex: void display()>/java.io.PrintStream.print/3	43	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r17	<Vertex: void display()>
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator1.compare/0	6	<Graph$Comparator1: int compare(Vertex,Vertex)>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l0#_0	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
<Graph: Graph prim(Vertex)>/VertexIter.next/0	6	<VertexIter: Vertex next()>	<Graph: Graph prim(Vertex)>/vxiter#_526	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getEdges/0	5	<Vertex: EdgeIter getEdges()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph prim(Vertex)>/Graph.addVertex/0	109	<Graph: void addVertex(Vertex)>	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	<Graph: Graph prim(Vertex)>	@MSTPrim
<Vertex: void nodeSearch(WorkSpace)>/Vertex.getNeighbors/1	19	<Vertex: VertexIter getNeighbors()>	<Vertex: void nodeSearch(WorkSpace)>/this#_0	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Graph: void display()>/EdgeIter.hasNext/0	30	<EdgeIter: boolean hasNext()>	<Graph: void display()>/edgeiter_$$A_1#_177	<Graph: void display()>	@GEN_Edges
<Graph: Graph kruskal()>/java.util.LinkedList.add/1	50	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph kruskal()>/$r20	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: void endProfile()>/java.io.PrintStream.println/0	17	<java.io.PrintStream: void println(java.lang.String)>	<Graph: void endProfile()>/$r1	<Graph: void endProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: Graph prim(Vertex)>/Vertex.getName/6	84	<Vertex: java.lang.String getName()>	<Graph: Graph prim(Vertex)>/v#_584	<Graph: Graph prim(Vertex)>	@MSTPrim
<Main: void main(java.lang.String[])>/Graph.runBenchmark/0	7	<Graph: void runBenchmark(java.lang.String)>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Graph: Graph kruskal()>/Vertex.assignName/0	123	<Vertex: Vertex assignName(java.lang.String)>	<Graph: Graph kruskal()>/$r26	<Graph: Graph kruskal()>	@MSTKruskal
<Main: void main(java.lang.String[])>/Graph.readNumber/2	15	<Graph: int readNumber()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Vertex: void nodeSearch(WorkSpace)>/java.util.LinkedList.add/0	25	<java.util.LinkedList: boolean add(java.lang.Object)>	<Vertex: void nodeSearch(WorkSpace)>/$r0	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Edge: void display()>/java.io.PrintStream.println/0	22	<java.io.PrintStream: void println(java.lang.String)>	<Edge: void display()>/$r5	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects)
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/1	5	<EdgeIfc: int getWeight()>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@(MSTKruskal) /\ (MSTKruskal)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIfc.getOtherVertex/0	8	<EdgeIfc: Vertex getOtherVertex(Vertex)>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theEdge#_280	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/0	16	<VertexIter: boolean hasNext()>	<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207	<Vertex: void nodeSearch(WorkSpace)>	@DFS /\ SearchBase
<Main: void main(java.lang.String[])>/Graph.display/0	93	<Graph: void display()>	<Main: void main(java.lang.String[])>/g#_16	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Vertex: void nodeSearch(WorkSpace)>/Vertex.nodeSearch/1	38	<Vertex: void nodeSearch(WorkSpace)>	<Vertex: void nodeSearch(WorkSpace)>/header#_230	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	5	<WorkSpace: void init_vertex(Vertex)>	<Vertex: void init_vertex(WorkSpace)>/w#_0	<Vertex: void init_vertex(WorkSpace)>	@(SearchBase) /\ (SearchBase)
<Graph: Graph kruskal()>/java.util.LinkedList.add/0	35	<java.util.LinkedList: boolean add(java.lang.Object)>	<Graph: Graph kruskal()>/A#_401	<Graph: Graph kruskal()>	@MSTKruskal
<Vertex: void display()>/VertexIter.hasNext/0	44	<VertexIter: boolean hasNext()>	<Vertex: void display()>/vxiter_$$A_1#_265	<Vertex: void display()>
<Vertex: void display()>/java.io.PrintStream.println/1	122	<java.io.PrintStream: void println()>	<Vertex: void display()>/$r60	<Vertex: void display()>
<Graph: Graph computeTranspose(Graph)>/Vertex.assignName/0	15	<Vertex: Vertex assignName(java.lang.String)>	<Graph: Graph computeTranspose(Graph)>/$r3	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: Graph prim(Vertex)>/VertexIter.hasNext/1	39	<VertexIter: boolean hasNext()>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator3.compare/0	6	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l0#_0	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/1	10	<Vertex: java.lang.String getName()>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Edge: void adjustAdorns(EdgeIfc)>/Edge.setWeight/0	4	<Edge: void setWeight(int)>	<Edge: void adjustAdorns(EdgeIfc)>/this#_0	<Edge: void adjustAdorns(EdgeIfc)>	@(EdgeObjects) /\ (EdgeObjects /\ Weighted)
<Graph: void numberVertices()>/Graph.graphSearch/0	4	<Graph: void graphSearch(WorkSpace)>	<Graph: void numberVertices()>/this#_0	<Graph: void numberVertices()>	@(Number) /\ (Number)
<Main: EdgeIfc addEdge(Graph,int)>/Graph.addEdge/0	11	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	<Main: EdgeIfc addEdge(Graph,int)>/g#_0	<Main: EdgeIfc addEdge(Graph,int)>	@(Prog) /\ (Prog)
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.setWeight/0	7	<Vertex: void setWeight(int)>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@Weighted /\ G_NoEdges
<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/1	22	<Graph: VertexIter getVertices()>	<Graph: Graph computeTranspose(Graph)>/newGraph#_350	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Vertex: void display()>/java.io.PrintStream.print/0	3	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r0	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Vertex: void display()>/java.io.PrintStream.print/5	63	<java.io.PrintStream: void print(java.lang.String)>	<Vertex: void display()>/$r24	<Vertex: void display()>	@Number
<Graph: Graph kruskal()>/Graph.getVertices/0	5	<Graph: VertexIter getVertices()>	<Graph: Graph kruskal()>/this#_0	<Graph: Graph kruskal()>	@MSTKruskal
