abstract	<EdgeIfc: Vertex getStart()>
public	<WorkSpaceTranspose: void <init>()>
public	<Graph: Graph kruskal()>
public	<FinishTimeWorkSpace: void <init>()>
public	<CycleWorkSpace: void preVisitAction(Vertex)>
public	<Graph: Graph strongComponents()>
private	<Vertex$VertexIter2: void <init>(Vertex)>
abstract	<EdgeIfc: Vertex getEnd()>
public	<RegionWorkSpace: void <init>()>
public	<EdgeIfc: void adjustAdorns(EdgeIfc)>
public	<Neighbor: void <init>(Vertex,Edge)>
	<Graph: void display()>
private	<Vertex$VertexIter1: void <init>(Vertex)>
public	<Graph: void sortVertices(java.util.Comparator)>
public	<Vertex: java.lang.String getName()>
private	<Vertex$VertexIter3: void <init>(Vertex)>
public	<Graph: void run(Vertex)>
	<Graph: Vertex findsVertex(java.lang.String)>
	<VertexIter: void <init>()>
public	<EdgeIfc: void display()>
	<VertexIter: void <init>(Graph)>
public	<Graph: VertexIter getVertices()>
private	<Graph$Comparator3: void <init>(Graph)>
bridge	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
public	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
static	<Graph: void <clinit>()>
abstract	<EdgeIfc: Vertex getOtherVertex(Vertex)>
abstract	<EdgeIfc: void setWeight(int)>
abstract	<EdgeIfc: void adjustAdorns(EdgeIfc)>
private	<Graph$EdgeIter1: void <init>(Graph)>
public	<WorkSpace: void <init>()>
public	<Vertex: Vertex assignName(java.lang.String)>
abstract	<EdgeIfc: int getWeight()>
public	<EdgeIfc: Vertex getStart()>
	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>
private	<Graph$Comparator2: void <init>(Graph)>
	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>
	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>
public	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>
public	<Graph: EdgeIter getEdges()>
static	<Graph: java.util.LinkedList access$0(Graph)>
public	<Vertex: void nodeSearch(WorkSpace)>
public	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>
public	<Neighbor: void <init>(Vertex,int)>
public	<EdgeIfc: Vertex getEnd()>
private	<Vertex$EdgeIter1: void <init>(Vertex)>
public	<Vertex: void display()>
abstract	<EdgeIfc: void display()>
public	<Edge: void <init>(Vertex,Vertex,int)>
public	<CycleWorkSpace: void <init>()>
	<Vertex: void <init>()>
public	<Neighbor: void <init>()>
public	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
public	<GlobalVarsWrapper: void <init>()>
private	<Vertex$EdgeIter2: void <init>(Vertex)>
	<Graph: void <init>()>
public	<Graph: void graphSearch(WorkSpace)>
public	<EdgeIter: EdgeIfc next()>
public	<EdgeIter: boolean hasNext()>
	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>
public	<VertexIter: Vertex next()>
private	<Graph$Comparator1: void <init>(Graph)>
public	<EdgeIfc: int getWeight()>
	<Graph: void addVertex(Vertex)>
bridge	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>
public	<NumberWorkSpace: void preVisitAction(Vertex)>
public	<EdgeIter: void <init>()>
public	<VertexIter: boolean hasNext()>
public	<EdgeIfc: Vertex getOtherVertex(Vertex)>
private	<Vertex$EdgeIter3: void <init>(Vertex)>
public	<EdgeIfc: void setWeight(int)>
	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>
bridge	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>
	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>
public	<NumberWorkSpace: void <init>()>
public	<Graph: Graph prim(Vertex)>
public	<Main: void <init>()>
