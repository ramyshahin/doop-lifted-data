<Edge: void display()>/assign/instruction7	7	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects /\ Weighted)
<Edge: void display()>/assign/instruction8	8	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects /\ Weighted)
<Edge: void display()>/assign/instruction16	16	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects)
<Edge: void display()>/assign/instruction17	17	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects)
<Edge: void display()>/assign/instruction20	20	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects)
<Edge: void display()>/assign/instruction21	21	<Edge: void display()>	@(EdgeObjects) /\ (EdgeObjects)
<VertexIter: void <init>(Graph)>/assign/instruction5	5	<VertexIter: void <init>(Graph)>
<VertexIter: Vertex next()>/assign/instruction3	3	<VertexIter: Vertex next()>
<VertexIter: boolean hasNext()>/assign/instruction3	3	<VertexIter: boolean hasNext()>
<Vertex$EdgeIter3: void <init>(Vertex)>/assign/instruction6	6	<Vertex$EdgeIter3: void <init>(Vertex)>	@EdgeObjects /\ GEN_Edges
<Vertex$EdgeIter3: EdgeIfc next()>/assign/instruction3	3	<Vertex$EdgeIter3: EdgeIfc next()>	@(EdgeObjects /\ GEN_Edges) /\ (EdgeObjects /\ GEN_Edges)
<Vertex$EdgeIter3: boolean hasNext()>/assign/instruction3	3	<Vertex$EdgeIter3: boolean hasNext()>	@(EdgeObjects /\ GEN_Edges) /\ (EdgeObjects /\ GEN_Edges)
<Vertex: void adjustAdorns(Vertex,int)>/assign/instruction5	5	<Vertex: void adjustAdorns(Vertex,int)>	@(G_NoEdges) /\ (Weighted /\ G_NoEdges)
<Vertex: void adjustAdorns(Vertex,int)>/assign/instruction7	7	<Vertex: void adjustAdorns(Vertex,int)>	@(G_NoEdges) /\ (Weighted /\ G_NoEdges)
<Vertex: void adjustAdorns(Neighbor)>/assign/instruction4	4	<Vertex: void adjustAdorns(Neighbor)>	@(GN_OnlyNeighbors) /\ (Weighted /\ GN_OnlyNeighbors)
<Vertex: void addWeight(int)>/assign/instruction8	8	<Vertex: void addWeight(int)>	@(Weighted) /\ (Weighted /\ GN_OnlyNeighbors)
<Vertex: void setWeight(int)>/assign/instruction5	5	<Vertex: void setWeight(int)>	@(Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges)
<Vertex: void nodeSearch(WorkSpace)>/assign/instruction33	33	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Vertex: void nodeSearch(WorkSpace)>/assign/instruction40	40	<Vertex: void nodeSearch(WorkSpace)>	@SearchBase /\ BFS
<Vertex: void display()>/assign/instruction10	10	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Vertex: void display()>/assign/instruction12	12	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Vertex: void display()>/assign/instruction13	13	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Vertex: void display()>/assign/instruction15	15	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Vertex: void display()>/assign/instruction16	16	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Vertex: void display()>/assign/instruction22	22	<Vertex: void display()>	@Weighted /\ G_NoEdges
<Vertex: void display()>/assign/instruction29	29	<Vertex: void display()>
<Vertex: void display()>/assign/instruction30	30	<Vertex: void display()>
<Vertex: void display()>/assign/instruction31	31	<Vertex: void display()>
<Vertex: void display()>/assign/instruction39	39	<Vertex: void display()>
<Vertex: void display()>/assign/instruction41	41	<Vertex: void display()>
<Vertex: void display()>/assign/instruction42	42	<Vertex: void display()>
<Vertex: void display()>/assign/instruction60	60	<Vertex: void display()>	@Number
<Vertex: void display()>/assign/instruction61	61	<Vertex: void display()>	@Number
<Vertex: void display()>/assign/instruction62	62	<Vertex: void display()>	@Number
<Vertex: void display()>/assign/instruction69	69	<Vertex: void display()>	@Connected
<Vertex: void display()>/assign/instruction70	70	<Vertex: void display()>	@Connected
<Vertex: void display()>/assign/instruction71	71	<Vertex: void display()>	@Connected
<Vertex: void display()>/assign/instruction78	78	<Vertex: void display()>	@StronglyConnected
<Vertex: void display()>/assign/instruction79	79	<Vertex: void display()>	@StronglyConnected
<Vertex: void display()>/assign/instruction81	81	<Vertex: void display()>	@StronglyConnected
<Vertex: void display()>/assign/instruction82	82	<Vertex: void display()>	@StronglyConnected
<Vertex: void display()>/assign/instruction89	89	<Vertex: void display()>	@Cycle
<Vertex: void display()>/assign/instruction90	90	<Vertex: void display()>	@Cycle
<Vertex: void display()>/assign/instruction91	91	<Vertex: void display()>	@Cycle
<Vertex: void display()>/assign/instruction105	105	<Vertex: void display()>	@MSTKruskal
<Vertex: void display()>/assign/instruction106	106	<Vertex: void display()>	@MSTKruskal
<Vertex: void display()>/assign/instruction107	107	<Vertex: void display()>	@MSTKruskal
<Vertex: void display()>/assign/instruction114	114	<Vertex: void display()>	@MSTPrim
<Vertex: void display()>/assign/instruction115	115	<Vertex: void display()>	@MSTPrim
<Vertex: void display()>/assign/instruction117	117	<Vertex: void display()>	@MSTPrim
<Vertex: void display()>/assign/instruction118	118	<Vertex: void display()>	@MSTPrim
<Vertex: void display()>/assign/instruction119	119	<Vertex: void display()>	@MSTPrim
<Vertex$VertexIter2: void <init>(Vertex)>/assign/instruction6	6	<Vertex$VertexIter2: void <init>(Vertex)>	@GN_OnlyNeighbors
<Vertex$VertexIter2: Vertex next()>/assign/instruction3	3	<Vertex$VertexIter2: Vertex next()>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Vertex$VertexIter2: boolean hasNext()>/assign/instruction3	3	<Vertex$VertexIter2: boolean hasNext()>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Graph: Vertex findsVertex(java.lang.String)>/assign/instruction10	10	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: void display()>/assign/instruction11	11	<Graph: void display()>
<Graph: void display()>/assign/instruction18	18	<Graph: void display()>
<Graph: void runBenchmark(java.lang.String)>/assign/instruction13	13	<Graph: void runBenchmark(java.lang.String)>	@(Benchmark) /\ (Benchmark)
<Graph: void runBenchmark(java.lang.String)>/assign/instruction14	14	<Graph: void runBenchmark(java.lang.String)>	@(Benchmark) /\ (Benchmark)
<Graph: void runBenchmark(java.lang.String)>/assign/instruction15	15	<Graph: void runBenchmark(java.lang.String)>	@(Benchmark) /\ (Benchmark)
<Graph: int readNumber()>/assign/instruction6	6	<Graph: int readNumber()>	@(Benchmark) /\ (Benchmark)
<Graph: int readNumber()>/assign/instruction9	9	<Graph: int readNumber()>	@(Benchmark) /\ (Benchmark)
<Graph: int readNumber()>/assign/instruction19	19	<Graph: int readNumber()>	@(Benchmark) /\ (Benchmark)
<Graph: int readNumber()>/assign/instruction33	33	<Graph: int readNumber()>	@(Benchmark) /\ (Benchmark)
<Graph: int readNumber()>/assign/instruction35	35	<Graph: int readNumber()>	@(Benchmark) /\ (Benchmark)
<Graph: int readNumber()>/assign/instruction36	36	<Graph: int readNumber()>	@(Benchmark) /\ (Benchmark)
<Graph: void startProfile()>/assign/instruction3	3	<Graph: void startProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: void stopProfile()>/assign/instruction1	1	<Graph: void stopProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: void resumeProfile()>/assign/instruction1	1	<Graph: void resumeProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: void endProfile()>/assign/instruction1	1	<Graph: void endProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: void endProfile()>/assign/instruction14	14	<Graph: void endProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: void endProfile()>/assign/instruction15	15	<Graph: void endProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: void endProfile()>/assign/instruction16	16	<Graph: void endProfile()>	@(Benchmark) /\ (Benchmark)
<Graph: void run(Vertex)>/assign/instruction9	9	<Graph: void run(Vertex)>	@Cycle /\ Prog
<Graph: void run(Vertex)>/assign/instruction10	10	<Graph: void run(Vertex)>	@Cycle /\ Prog
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/assign/instruction11	11	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/assign/instruction15	15	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/assign/instruction19	19	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/assign/instruction23	23	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@(EdgeObjects) /\ (EdgeObjects)
<Graph: Graph computeTranspose(Graph)>/assign/instruction31	31	<Graph: Graph computeTranspose(Graph)>	@(Transpose) /\ (Transpose)
<Graph: Graph kruskal()>/assign/instruction33	33	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction39	39	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction41	41	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction46	46	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction57	57	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction63	63	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction73	73	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction84	84	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction90	90	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction129	129	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph kruskal()>/assign/instruction147	147	<Graph: Graph kruskal()>	@MSTKruskal
<Graph: Graph prim(Vertex)>/assign/instruction43	43	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/assign/instruction51	51	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/assign/instruction57	57	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/assign/instruction77	77	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph: Graph prim(Vertex)>/assign/instruction97	97	<Graph: Graph prim(Vertex)>	@MSTPrim
<Graph$EdgeIter1: void <init>(Graph)>/assign/instruction6	6	<Graph$EdgeIter1: void <init>(Graph)>	@EdgeObjects
<Graph$EdgeIter1: EdgeIfc next()>/assign/instruction3	3	<Graph$EdgeIter1: EdgeIfc next()>	@(EdgeObjects) /\ (EdgeObjects)
<Graph$EdgeIter1: boolean hasNext()>/assign/instruction3	3	<Graph$EdgeIter1: boolean hasNext()>	@(EdgeObjects) /\ (EdgeObjects)
<Vertex$VertexIter1: void <init>(Vertex)>/assign/instruction6	6	<Vertex$VertexIter1: void <init>(Vertex)>	@G_NoEdges
<Vertex$VertexIter1: Vertex next()>/assign/instruction3	3	<Vertex$VertexIter1: Vertex next()>	@(G_NoEdges) /\ (G_NoEdges)
<Vertex$VertexIter1: boolean hasNext()>/assign/instruction3	3	<Vertex$VertexIter1: boolean hasNext()>	@(G_NoEdges) /\ (G_NoEdges)
<Main: void main(java.lang.String[])>/assign/instruction2	2	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Main: void main(java.lang.String[])>/assign/instruction44	44	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Main: void main(java.lang.String[])>/assign/instruction45	45	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Main: void main(java.lang.String[])>/assign/instruction91	91	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Main: void main(java.lang.String[])>/assign/instruction100	100	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Main: void main(java.lang.String[])>/assign/instruction101	101	<Main: void main(java.lang.String[])>	@(Prog) /\ (Prog)
<Vertex$VertexIter3: void <init>(Vertex)>/assign/instruction6	6	<Vertex$VertexIter3: void <init>(Vertex)>	@GEN_Edges
<Vertex$VertexIter3: Vertex next()>/assign/instruction3	3	<Vertex$VertexIter3: Vertex next()>	@(GEN_Edges) /\ (GEN_Edges)
<Vertex$VertexIter3: boolean hasNext()>/assign/instruction3	3	<Vertex$VertexIter3: boolean hasNext()>	@(GEN_Edges) /\ (GEN_Edges)
<Neighbor: void display()>/assign/instruction6	6	<Neighbor: void display()>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Neighbor: void display()>/assign/instruction8	8	<Neighbor: void display()>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Neighbor: void display()>/assign/instruction9	9	<Neighbor: void display()>	@(GN_OnlyNeighbors) /\ (GN_OnlyNeighbors)
<Vertex$EdgeIter2: void <init>(Vertex)>/assign/instruction6	6	<Vertex$EdgeIter2: void <init>(Vertex)>	@EdgeObjects /\ GN_OnlyNeighbors
<Vertex$EdgeIter2: EdgeIfc next()>/assign/instruction3	3	<Vertex$EdgeIter2: EdgeIfc next()>	@(EdgeObjects /\ GN_OnlyNeighbors) /\ (EdgeObjects /\ GN_OnlyNeighbors)
<Vertex$EdgeIter2: boolean hasNext()>/assign/instruction3	3	<Vertex$EdgeIter2: boolean hasNext()>	@(EdgeObjects /\ GN_OnlyNeighbors) /\ (EdgeObjects /\ GN_OnlyNeighbors)
<Vertex$EdgeIter1: void <init>(Vertex)>/assign/instruction6	6	<Vertex$EdgeIter1: void <init>(Vertex)>	@EdgeObjects /\ G_NoEdges
<Vertex$EdgeIter1: EdgeIfc next()>/assign/instruction3	3	<Vertex$EdgeIter1: EdgeIfc next()>	@(EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)
<Vertex$EdgeIter1: boolean hasNext()>/assign/instruction3	3	<Vertex$EdgeIter1: boolean hasNext()>	@(EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)
