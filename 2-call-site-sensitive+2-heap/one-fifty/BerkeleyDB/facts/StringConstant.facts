DbState.
\\"<dupCountLN>\\"
\\"</dupCountLN>\\"
NULL_LSN without KnownDeleted
<dupCountLN>
</dupCountLN>
\\\">
</ref>
<lsn/>
\\\"/>
<<\\"Logged item entrySize= \\">>
<key/>
<DbPrintLog>
<target/>
</DbPrintLog>
<knownDeleted val=\\\"
\\\"/>
<pendingDeleted val=\\\"
\\\"/>
\\\"/>
.
<<\\"usage: \\">>
<<\\"Usage: \\">>
<<\\" -h  <envHomeDir>\\">>
<<\\" -e  <end file number, in hex>\\">>
<<\\" -k  <binary|text> (format for dumping the key)\\">>
<<\\" -s  <start file number, in hex>\\">>
<<\\" -tx <targetted txn ids, comma separated>\\">>
<<\\" -ty <targetted entry types, comma separated>\\">>
<<\\" -S  show Summary of log entries\\">>
<<\\" -q  if specified, concise version is printed\\">>
<<\\"     Default is verbose version.)\\">>
All arguments are optional
-h requires an argument
-h is a required argument
<<\\"Read non-valid log entry type: \\">>
<
<<\\" exists = \\\"\\">>
\\\">
\\\"/>
File 0x
Channel closed, may be due to thread interrupt
<<\\"  File    Size (KB)  % Used\n--------  ---------  ------\\">>
\\"INCompress:\\"
\\\"/>
INCompressor.addToQueue should never be called.
<summary totalCount=\\\"
\\\" totalSize=\\\"
\\\" totalINCount=\\\"
\\\" totalINSize=\\\"
\\\" totalLNCount=\\\"
\\\" totalLNSize=\\\"
\\\" obsoleteINCount=\\\"
\\\" obsoleteLNCount=\\\"
\\\"/>
fsyncLatch
\\";\\"
<<\\"InCompress.doCompress called, queue size: \\">>
<<\\" A configuration parameter name can\'t be null or 0 length\\">>
delete
<<\\"SecondaryCursor.delete: \\">>
Nested transactions are not supported yet.
<DatabaseEntry
>
<<\\"SecondaryCursor.getCurrent: \\">>
<<\\"SecondaryCursor.getFirst: \\">>
<<\\"SecondaryCursor.getLast: \\">>
<<\\"SecondaryCursor.getNext: \\">>
<<\\"SecondaryCursor.getNextDup: \\">>
<<\\"XA Transaction \\">>
<<\\"SecondaryCursor.getNextNoDup: \\">>
<<\\"SecondaryCursor.getPrev: \\">>
<<\\"SecondaryCursor.getPrevDup: \\">>
txnId=
<<\\"SecondaryCursor.getPrevNoDup: \\">>
key
pKey
data
<<\\"SecondaryCursor.getSearchKey: \\">>
key
pKey
data
<<\\"SecondaryCursor.getSearchKeyRange: \\">>
key
pKey
Sequences not supported in databases configured for duplicates
data
<<\\"SecondaryCursor.getSearchBoth: \\">>
Minimum sequence value must be less than the maximum
Initial sequence value is out of range
The cache size is larger than the sequence range
key
pKey
data
<<\\"SecondaryCursor.getSearchBothRange: \\">>
ExclusiveCreate=true and the sequence record already exists.
Sequence record removed during openSequence.
AllowCreate=false and the sequence record does not exist.
Sequence delta must be greater than zero
Sequence delta is larger than the range
<<\\"Sequence overflow \\">>
key
pKey
data
All nodes should have been loaded
Sequence.get value=
nGets=
The sequence record has been deleted while it is open.
<<\\"usage: \\">>
-f requires an argument
-h requires an argument
copy.remaining=
-d requires an argument
-s requires an argument
idKey=
-h is a required argument
Must supply a database name if -l not supplied.
true
false
<<\\"Lock Table \\">>
<<\\"DbDump.dump of \\">>
DATA=END
<<\\"DbDump.dump of \\">>
VERSION=3
format=print
format=bytevalue
type=btree
dupsort=
1
0
HEADER=END
<<\\"locker \\">>
<<\\"locker \\">>
\\".jdb\\"
\\".cif\\"
\\".del\\"
\\".bad\\"
\\".lck\\"
<<\\" Owners:\\">>
<<\\" (none)\\">>
<<\\" Waiters:\\">>
<<\\" (none)\\">>
.del
.jdb
.jdb
.del
<<\\"Environment home \\">>
.
\n
<<\\"Usage: \\">>
<<\\"                 -h <environment home>\\">>
(optional)
<<\\"                 -f <file number, in hex>\\">>
<<\\"                 -o <offset, in hex>\\">>
numBottomInternalNodes=
Log file is truncated at position starting at and inclusive of the offset. Beware, not  for general purpose use yet!
\n
numInternalNodes=
\n
numDuplicateInternalNodes=
\n
numDuplicateBottomInternalNodes=
\n
\n
\n
\n
\n
\n
.jdb
\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\"
<<\\"prepare() has already been called for Transaction \\">>
<<\\"Transaction \\">>
Transaction
.jdb
Lock
Transaction
<<\\"Transaction \\">>
No value after -records
<<\\"\\">>
.
<<\\"Couldn\'t rename \\">>
<<\\"Couldn\'t delete \\">>
No value after -key
No value after -data
No value after -nodemax
No value after -density
No value after -overhead
No value after -measure
<<\\"Unknown arg: \\">>
-records not specified
-key not specified
<<\\"Commit of transaction \\">>
Txn
commit
<<\\"Failed while attempting to commit transaction \\">>
<<\\"Failed while attempting to commit transaction \\">>
<<\\"Couldn\'t open file \\">>
<<\\"usage:\njava \\">>
++++++++++ begin lock table dump ++++++++++
<<\\"Couldn\'t open file \\">>
Inputs: records=
++++++++++ end lock table dump ++++++++++
<<\\"Abort:id = \\">>
: waited for lock
<<\\"Transaction \\">>
Txn undo for node=
<<\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\">>
\n
Minimum, internal nodes only
Maximum, internal nodes only
Minimum, internal nodes and leaf nodes
Maximum, internal nodes and leaf nodes
\nTo get leaf node sizing specify -data
<<\\"\nBtree levels: \\">>
Channel closed, may be due to thread interrupt
<<\\"IOException caught: \\">>
<<\\"File \\">>
<<\\"Directory is not empty: \\">>
<<\\"\nMeasuring with cache size: \\">>
Stats for internal and leaf nodes (after insert)
<<\\"\nPreloading with cache size: \\">>
<<\\"Transfer, lock \\">>
FileManager would overwrite non-empty file 0x
generated for testing
File closed, may be due to thread interrupt
generated for testing
Stats for internal nodes only (after preload)
<<\\"During close: \\">>
<<\\"During close: \\">>
<<\\"Transfer, lock \\">>
foo
*** Key doesn\'t fit value=
Random key already exists -- retrying
<<\\"*** \\">>
<<\\"Couldn\'t find lock for Node \\">>
<<\\"*** Ran out of cache memory at record \\">>
----\n
.
\n
<<\\" waits for \\">>
<<\\" nothing\\">>
<<\\" node \\">>
\n
<<\\"Can\'t find \\">>
CacheSize=
*** All records did not fit in the cache ***
<<\\"Transaction \\">>
<<\\"Can\'t find \\">>
<<\\"No transaction found for \\">>
je.lck
rw
<<\\"A je.lckfile exists in \\">>
shared
single writer
<<\\"Transaction \\">>
<<\\"The Environment directory \\">>
<<\\"No transaction found for \\">>
<<\\"Transaction \\">>
<txn id=\\\"
\\\">
</txn>
<<\\"No transaction found for \\">>
Write after RunRecoveryException
Randomly generated for testing
\\\">
>
<LockInfo locker=\\\"
\\\" type=\\\"
\\\"/>
<<\\" lock taken at: \\">>
\\"!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\"
\n
primaryDatabase
Can\'t use as primary:
<<\\"Duplicates must not be allowed for a primary database: \\">>
Primary and secondary databases must be in the same environment
secConfig.getKeyCreator() and getMultiKeyCreator() may not both be non-null
secConfig and getKeyCreator()/getMultiKeyCreator() may be null only if the primary database is read-only
secConfig.getForeignKeyNullifier() and getForeignMultiKeyNullifier() may not both be non-null
!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
ForeignKeyNullifier or ForeignMultiKeyNullifier must be non-null when ForeignKeyDeleteAction is NULLIFY
ForeignKeyNullifier may not be used with SecondaryMultiKeyCreator -- use ForeignMultiKeyNullifier instead
<<\\"Duplicates must not be allowed for a foreign key  database: \\">>
false
true
SEVERE
false
<<\\"java { \\">>
\\"<nameLN>\\"
\\"</nameLN>\\"
\\\" gTxnId=\\\"
null
\\\" bqual=\\\"
null
\\\"/>
<nameLN>
</nameLN>
\\\">
<<\\"Secondary is already associated with a different primary: \\">>
\\\">
\\"RootSplit:\\"
\\"DupRootSplit:\\"
\\"Mut:\\"
\\"Ins:\\"
\\"InsD:\\"
SecondaryDatabase open
RootLatch
key
Can\'t call SecondaryDatabase.delete:
SecondaryDatabase.delete
key
pKey
data
Can\'t call SecondaryDatabase.get:
SecondaryDatabase.get
<key v=\\\"
<null>
<null>
<<\\"\\">>
\\\"/>
key=
\\"<fileSummaryLN>\\"
\\"</fileSummaryLN>\\"
UTF-8
key
pKey
data
Can\'t call SecondaryDatabase.getSearchBoth:
SecondaryDatabase.getSearchBoth
<fileSummaryLN>
</fileSummaryLN>
Txnl access to UP db not allowed
getFirstNode passed null root
getLastNode passed null root
TxnCommit
\\\">
</INDupDeleteEntry>
getParentNode passed null
<knownDeleted val=\\\"
true
false
\\\"/>
This statement would have triggered an Exception: virtualinvoke searchResult#1.<com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>()
<<\\"Secondary \\">>
<<\\"Secondary \\">>
\\\">
</INDeleteEntry>
<<\\"Could not insert secondary key in \\">>
\\"_jeIdMap\\"
\\"_jeNameMap\\"
\\"_jeUtilization\\"
_jeIdMap
_jeNameMap
_jeUtilization
_jeIdMap
_jeNameMap
<<\\"Secondary \\">>
_jeIdMap
_jeNameMap
subtree did not have a BIN for leaf
RootSplit:
SET
<<\\"Secondary \\">>
Operation not allowed on a secondary
BOTH
SET_RANGE
BOTH_RANGE
SearchMode.
DEFAULT
READ_UNCOMMITTED
READ_COMMITTED
RMW
LockMode.
searchSubTree passed key and left/right search
<<\\"Invalid value of searchType: \\">>
READ
WRITE
RANGE_READ
RANGE_WRITE
RANGE_INSERT
NONE
je.disable.java5.latches
java.util.concurrent.locks.ReentrantLock
java.util.concurrent.locks.ReentrantReadWriteLock
LatchImpl
RESTART
<<\\"can\'t find database \\">>
\\"Delete\\"
\\"Mod:\\"
<<\\"Attempted to \\">>
<<\\"Can\'t \\">>
rename
remove
<<\\"failed adding in \\">>
truncate
size=
db=
non LogEntryType passed to LogEntryType.compare
Delete
<<\\"Environment invalid because of previous exception: \\">>
<<\\"Database \\">>
<<\\"Can\'t truncate database \\">>
<<\\"txnId = \\">>
Bad value for timeout:
Bad value for timeout:
putNoDupData() called, but database is not configured for duplicate data.
allowCreate=
exactParentFound=
null
NEW
WAIT_NEW
PROMOTION
WAIT_PROMOTION
EXISTING
DENIED
WAIT_RESTART
NONE_NEEDED
Can\'t replace a duplicate with different data.
Mod:
Already closed
This statement would have triggered an Exception: virtualinvoke dupRoot#4.<com.sleepycat.je.tree.DIN: void releaseLatch()>()
key
neither LN or DIN found in BIN
<<\\"JoinCursor.getNext(key): \\">>
key
data
<<\\"JoinCursor.getNext(key,data): \\">>
_jeIdMap
_jeNameMap
DupRootSplit:
UTF-8
Secondary corrupt
allowDuplicates passed to insert but database doesn\'t have allow duplicates set.
UTF-8
<dbtree lastId = \\\"
\\\">
<idDb>
</idDb><nameDb>
</nameDb>
</dbtree>
<dbTree lastDbId =\\\"
\\\">
</dbtree>
Non-blocking lock was denied.
<<\\"SubtreeRemoval: subtreeRoot = \\">>
<root>
</root>
<tree>
<in/>
</tree>
<<\\"\\">>
<<\\"IN \\">>
<<\\"IN \\">>
<<\\"IN \\">>
)
<<\\"<LATCH \\">>
<<\\"] \\">>
]
<<\\" [waiters: \\">>
<<\\" \\">>
]
>
Mut:
<<\\" existingLn=\\">>
<<\\" newLn=\\">>
Log statistics:
type
total
provisional
total
min
max
avg
entries
<<\\"\\">>
count
count
bytes
bytes
bytes
bytes
as % of log
key/data
<<\\"\\">>
<<\\"\\">>
<<\\" newLnLsn=\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\" dupCountLN=\\">>
<<\\" dupRootLsn=\\">>
<<\\" rootdin=\\">>
<<\\" ddinLsn=\\">>
\\"<node>\\"
\\"</node>\\"
<<\\" dbin=\\">>
<<\\" dbinLsn=\\">>
<<\\" bin=\\">>
Ins:
<<\\" bin=\\">>
<<\\" ln=\\">>
<<\\" lnLsn=\\">>
matchLNByNodeId called on non DIN/DBIN
<<\\" index=\\">>
InsD:
(
<<\\" dbin=\\">>
<<\\" bin=\\">>
<<\\" ln=\\">>
<<\\"\nTotal bytes in portion of log read: \\">>
<<\\" lnLsn=\\">>
<node>
</node>
<<\\"Total number of entries: \\">>
\\"<in>\\"
\\"</in>\\"
\\"Split:\\"
\\"Delete:\\"
<<\\" \\">>
<
<node>
</node>
\nPer checkpoint interval info:
lnTxn
ln
mapLNTxn
mapLN
end-end
end-start
start-end
maxLNReplay
ckptEnd
<<\\"Pass 1: \\">>
<<\\"\\">>
<<\\"Pass 2: \\">>
<<\\"End: \\">>
<<\\"processing file \\">>
<<\\".jdb  \\">>
<<\\"Already name mapped for dbId: \\">>
<<\\"Already saw dupSort entry for dbId: \\">>
db
.bad
DATA=END
\\"usage: java <utility> [options...]\\"
\\"com.sleepycat.je.util.\\"
Missing utility name
com.sleepycat.je.util.
usage: java <utility> [options...]
NULL_LSN without KnownDeleted
<<\\"fetchTarget of \\">>
null lsn
\n
----- Event Dump -----
\\"<din>\\"
\\"</din>\\"
<<\\"Cursor.count: \\">>
delete
<<\\"Cursor.delete: \\">>
key
data
put
<<\\"Cursor.put: \\">>
key
data
putNoOverwrite
<<\\"Cursor.putNoOverwrite: \\">>
key
data
putNoDupData
<<\\"Cursor.putNoDupData: \\">>
data
BIN cursorSet is inconsistent.
Cursor Not Initialized.
Cursor has been closed.
<<\\"Unknown cursor status: \\">>
CURSOR_NOT_INITIALIZED
CURSOR_INITIALIZED
CURSOR_CLOSED
UNKNOWN (
putCurrent
<<\\"Cursor.putCurrent: \\">>
\\\"
<<\\"Cursor.getCurrent: \\">>
<<\\"-Warning: Out of sync. Should be \\">>
<<\\"Cursor.getFirst: \\">>
<<\\"Cursor.getLast: \\">>
<<\\"Cursor.getNext: \\">>
<<\\"Cursor.getNextDup: \\">>
<<\\"Cursor.getNextNoDup: \\">>
<<\\"Cursor.getPrev: \\">>
<<\\"Cursor.getPrevDup: \\">>
\\\"
\\\"
>\n
<<\\"\\">>
<<\\"Cursor.getPrevNoDup: \\">>
key
data
<<\\"Cursor.getSearchKey: \\">>
key
data
<<\\"Cursor.getSearchKeyRange: \\">>
<<\\"Cursor.getSearchBoth: \\">>
<din>
</din>
<dupkey>
<<\\"\\">>
</dupkey>
<dupCountLN/>
DIN
OPEN
CLOSED
INVALID
DatabaseConfig.setReadOnly() must be set to false when creating a Database
<<\\"Cursor.getSearchBothRange: \\">>
<<\\"\\">>
\n</Cursor>
<<\\" bin=\\">>
<<\\" ln=\\">>
<<\\" lnIdx=\\">>
<<\\" oldLnLsn=\\">>
<<\\" newLnLsn=\\">>
initialized
open
closed
invalid
<<\\"Node \\">>
<<\\"Can\'t go from environment state \\">>
put passed a null DatabaseEntry arg
put passed a null DatabaseEntry arg
<<\\"A per-thread transaction was created in \\">>
idkey is null
unknown PutMode
<<\\"You can\'t open a Database with a duplicatesAllowed configuration of \\">>
<<\\"You can\'t open a Database with a transactional configuration of \\">>
A Transaction cannot be used because the environment was opened non-transactionally
A Transaction cannot be used because the database was opened non-transactionally
A Transaction cannot be used because the database was opened non-transactionally
A Transaction cannot be used because the database was opened non-transactionally
Can\'t close Database:
<<\\"Database.close: \\">>
There are open cursors against the database.\n
They will be closed.\n
key
Can\'t call Database.openSequence:
openSequence
Database.openSequence
<<\\"IN \\">>
<<\\"IN \\">>
Can\'t open a cursor
Only one may be specified: ReadCommitted or ReadUncommitted
Database.openCursor
key
Can\'t call Database.delete:
delete
Database.delete
key
data
Can\'t call Database.get:
Database.get
<<\\"Found non-deletable IN \\">>
A checksum error was found in the log.
<<\\"Corruption begins at LSN:\n   \\">>
<<\\"Last known good record before corruption is at LSN:\n   \\">>
key
data
Can\'t call Database.getSearchBoth:
Database.getSearchBoth
key
data
Can\'t call Database.put
put
Database.put
key
data
Can\'t call Database.putNoOverWrite
putNoOverwrite
Database.putNoOverwrite
<<\\"Next known good record after corruption is at LSN:\n   \\">>
This statement would have triggered an Exception: $stack45 = result#4.<com.sleepycat.je.dbi.CursorImpl$KeyChangeStatus: com.sleepycat.je.OperationStatus status>
<<\\"Invalid value of searchType: \\">>
key
data
Can\'t call Database.putNoDupData
putNoDupData
Database.putNoDupData
\\"DupRootRecover:\\"
\\"LNRedo:\\"
\\"LNUndo\\"
\\"INRecover:\\"
\\"RootRecover:\\"
\\"INDelReplay:\\"
\\"INDupDelReplay:\\"
\\"RootDelete:\\"
Can\'t call Database.join
cursors
At least one cursor is required.
All cursors must use the same transaction.
All cursors must use the same environment.
All cursors must use the same transaction.
Recovery underway, found end of log
<<\\"Recovery checkpoint search, \\">>
Recovery w/no files.
<<\\"There are \\">>
recovery
RecoveryManager
recover
Couldn\'t recover
<<\\"Couldn\'t recover: \\">>
<<\\"Recovery finished: \\">>
<<\\"Recovery finished: \\">>
Can\'t call Database.truncate
truncate
Database.truncate: txnId=
null
lastUsed=
couldn\'t find database - truncate
truncate
Can\'t call Database.preload
preload
Can\'t call Database.preload
preload
Can\'t call Database.preload
preload
Can\'t call Database.stat
stat
<<HASH:-870535562>>
Can\'t call Database.verify
verify
<isRoot val=\\\"
\\\"/>
<level val=\\\"
\\\"/>
<entries numEntries=\\\"
\\\" length=\\\"
\\\" baseFileNumber=\\\"
\\\">
\\\">
</ref>
</entries>
<in>
</in>
<<\\"Database is Read Only: \\">>
<idkey>
<<\\"\\">>
</idkey>
\\\"/>
\\\"/>
<level val=\\\"
\\\"/>
<<\\" name=\\">>
\\\"/>
<entries nEntries=\\\"
\\\">
<entry id=\\\"
<lsn/>
<key/>
<target/>
\\\"/>
</entry>
</entries>
<knownDeleted val=\\\"
\\\"/>
<pendingDeleted val=\\\"
\\\"/>
IN
readMapIns
Split:
<<\\" parent=\\">>
<<\\" child=\\">>
<<\\" newSibling=\\">>
<<\\" parentLsn = \\">>
<<\\" childLsn = \\">>
<<\\" newSiblingLsn = \\">>
<<\\" splitIdx=\\">>
<<\\" idKeyIdx=\\">>
<<\\" childIdx=\\">>
,
Delete:
,
<<\\" index=\\">>
<<\\"usage: \\">>
<<\\"usage: \\">>
unknown GetMode
-h requires an argument
-s requires an argument
-v requires a positive argument
-v requires an argument
-h is a required argument
-s is a required argument
<<\\"DbStat.stats of \\">>
LN_TX
LN
MapLN_TX
MapLN
readNonMapIns
NameLN_TX
NameLN
DelDupLN_TX
DelDupLN
DupCountLN_TX
DupCountLN
FileSummaryLN
IN
BIN
<<\\"DbStat.stats of \\">>
DIN
DBIN
Root
Commit
Abort
CkptStart
CkptEnd
INDelete
BINDelta
DupBINDelta
Trace
FileHeader
INDupDelete
Prepare
Usage: EnvironmentParams <samplePropertyFile>
<<\\"Found unfinished prepare record: id: \\">>
undoLNs
####################################################\n# Example Berkeley DB, Java Edition property file\n# Each parameter is set to its default value\n####################################################\n\n
#
lsn=
ABORT
CASCADE
NULLIFY
redoLns
ForeignKeyDeleteAction.
<<\\"A transaction was not supplied when opening this cursor: \\">>
key
data
key
data
\\\" isProvisional=\\\"true
\\\" prev=\\\"0x
\\\">
</entry>
<<\\"usage: \\">>
-f requires an argument
-h requires an argument
-s requires an argument
<<\\" lsnFromLog:\\">>
<<\\"-c: \\">>
RecoveryManager
replaceOrInsert
lsnFromLog=
-c requires an argument
Cleaner.addToQueue should never be called.
-h is a required argument
-v requires -f
Trace list:
lsnFromLog=
RootRecover:
RootRecover:
<<\\"CleanerRun \\">>
Cleaner
doClean
<<\\"\\">>
<<\\"CleanerRun \\">>
<<\\"CleanerRun \\">>
<<\\"DbLoad.load of \\">>
<<\\"Load start: \\">>
Must supply a database name if -l not supplied.
<<\\"DbLoad.load of \\">>
<<\\"Load end: \\">>
\\\"/>
<<\\"Invalid header parameter: \\">>
<<\\"Version \\">>
\'
<<\\"No data to match key \\">>
CleanLN:
<<\\"Shutting down \\">>
CleanLN:
Exiting
Continuing
DupRootRecover:
CleanLN:
DupRootRecover:
SUCCESS
KEYEXIST
KEYEMPTY
NOTFOUND
OperationStatus.
<<\\"<LatchWaiter: \\">>
INRecover:
<<\\"Key exists: \\">>
INRecover:
INRecover:
<<\\"loaded \\">>
No \\\"DATA=END\\\"
CleanLN:
CleanLN:
Corrupted file
Corrupted file
\n
0000000000000000
0x
LNRedo:
CleanLN:
CleanLN:
LNRedo:
LNRedo:
CleanIN:
CleanIN:
CleanIN:
<<\\"Obsolete lsns contains valid lsn \\">>
<<\\"Tree contains obsolete lsn \\">>
Lsn mismatch
LNUndo
LNUndo
<<\\"Error in \\">>
,-
,
-
\\\"/>
<<\\"Recovery Pass \\">>
<<\\"Recovery Pass \\">>
<<\\" node=\\">>
<<\\" lsn=\\">>
<<\\" found=\\">>
<<\\" replaced=\\">>
<<\\" inserted=\\">>
<<\\" replacedLsn=\\">>
<<\\" abortLsn=\\">>
INDupDelReplay:
INDelReplay:
Cannot write file summary in a read-only environment
.jdb
<<\\"last LSN = \\">>
RecoveryManager
last LSN=
RootDelete:
\\"CleanIN:\\"
\\"CleanLN:\\"
\\"CleanMigrateLN:\\"
\\"CleanPendingLN:\\"
<<\\"Cannot read backward over cleaned file from \\">>
<<\\"FileReader read invalid log entry type: \\">>
<<\\"Both \\">>
<<\\"\\">>
_jeUtilization
_jeUtilization
Cleaner duplicate key sequence file=0x
<<\\"Cleaner has \\">>
.del
<<\\"Problem in fillReadBuffer, readBufferFileNum = \\">>
Cleaner deleted file 0x
Log file 0x
deleted
renamed
Cleaner
deleteSafeToDeleteFiles
<<\\"lsn \\">>
CleanPendingLN:
CleanPendingLN:
CleanPendingLN:
CleanPendingLN:
CleanPendingLN:
\\\"/>
CleanPendingLN:
CleanPendingLN:
daemon
<<\\" lastCkpt=\\">>
<<\\" lastCkpt=\\">>
<<\\" lastCkpt=\\">>
<<\\" lastCkpt=\\">>
CleanMigrateLN:
<<\\" lastCkpt=\\">>
CleanMigrateLN:
CleanMigrateLN:
NEXT
PREV
NEXT_DUP
PREV_DUP
NEXT_NODUP
PREV_NODUP
\\"sun.arch.data.model\\"
\\"je.forceJVMArch\\"
1.4 based 64 bit JVM not supported
Mac OS X
<Transaction id=\\\"
\\\"
<<\\" name=\\\"\\">>
\\\"
>
<<\\"Transaction \\">>
<<\\"DatabaseEntry \\">>
<<\\"Data field for DatabaseEntry \\">>
A partial key DatabaseEntry is not allowed
<<\\"CleanAddPendingDB \\">>
<<\\" node=\\">>
<<\\" logLsn=\\">>
SUCCESS
FILLED_CACHE
EXCEEDED_TIME
\\"daemon\\"
\\"manual\\"
PreloadStatus.
\\"critical\\"
<<\\"environmentImpl is null for target db \\">>
\\\"/>
Evictor.addToQueue should never be called.
activeTxns=[
]\n
daemon
\\"<dbin>\\"
\\"</dbin>\\"
critical
<dbin>
</dbin>
<<\\"Wrong filenum in header for file \\">>
Evictor: pass=
<dupkey>
<<\\"\\">>
</dupkey>
DBIN
Evictor: pass=
<<\\"Expected log version 3 or earlier but found \\">>
<FileHeader num=\\\"0x
\\\" lastEntryInPrevFileOffset=\\\"0x
\\\" logVersion=\\\"0x
Evictor: pass=
<<\\"latches held = \\">>
\\\"/>
Unexpected interrupt while waiting for fsync
<<\\" IN type=\\">>
<<\\"Database \\">>
<offsets size=\\\"
remaining=
<DbLsn val=\\\"0x
0x
\\\">
0x
</offsets>
<offsets size=\\\"0\\\"/>
\\"<ln>\\"
\\"</ln>\\"
<<\\"null buffer given to checksum validation, probably  result of 0\'s in log file. \\">>
<<\\"Location \\">>
<<\\"Location \\">>
\\"  File    Size (KB)  % Used\n--------  ---------  ------\\"
<<\\" TOTALS \\">>
<<\\"  \\">>
<<\\"     \\">>
\\"                                                                                                                                \\"
<<\\"                                                                                                                                \\">>
<<\\" \\">>
null
<ln>
</ln>
Recovery Info
<<\\" lastUsed=\\">>
<<\\" nextAvail=\\">>
<<\\" ckptStart=\\">>
<data>
<<\\" firstActive=\\">>
</data>
<<\\" ckptEnd=\\">>
<<\\" useRoot=\\">>
>
<dbId id=\\\"
\\\"/>
\\"je.properties\\"
<data>
</data>
envHome
je.properties
<<\\"An error occurred when reading \\">>
<<\\"There \\">>
is 1 open Database in the Environment.\n
<<\\"are \\">>
<<\\" open Database in the Environment.\n\\">>
Closing the following databases:\n
<<\\" \\">>
<<\\"There \\">>
is 1 existing transaction opened against
<<\\" the Environment.\n\\">>
<<\\"are \\">>
<<\\" existing transactions opened against\\">>
<<\\" the Environment.\n\\">>
Aborting open transactions ...\n
databaseName
Environment.open:  name=
<<\\"Database \\">>
<<\\"Database \\">>
<<\\"Cache percent is not a valid integer: \\">>
<<\\"Attempted to open Database \\">>
<<\\"Attempted to open Database \\">>
databaseName
databaseName
newName
databaseName
Transactions can not be used in a non-transactional environment
Only one may be specified: SerializableIsolation, ReadCommitted or ReadUncommitted
.
api
sync
mutableConfig
Attempt to use non-open Environment object().
Btree
Duplicate
<TreeLocation bin=\\\"
null
\\\" index=\\\"
\\\" lnKey=\\\"
\\\" childLsn=\\\"
\\\">
The following DatabaseConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
<<\\" Transactional\n\\">>
<<\\" Read-Only\n\\">>
<<\\" Sorted Duplicates\n\\">>
<<\\" Btree Comparator\n\\">>
<<\\" Duplicate Comparator\n\\">>
<<\\"Not Exception or Error: \\">>
\\"<mapLN>\\"
\\"</mapLN>\\"
<mapLN>
</mapLN>
\\\">
Channel closed, may be due to thread interrupt
.
true
false
<<\\"\\">>
false
<<\\"\\">>
1000
<<\\"Files cleaned: \\">>
<<\\"\\">>
<<\\"\\">>
<<\\"\nrecovery time = \\">>
<<\\"action time = \\">>
<<\\"\nrecovery time = \\">>
<<\\"action time = \\">>
<<\\"\nrecovery time = \\">>
<<\\"action time = \\">>
cleanedCount=
<<\\"Remove of \\">>
Preload starting
<<\\"Preloaded \\">>
evict time=
<<\\"Usage: \n \\">>
<<\\"  -h <environment home> \\">>
<<\\"  -a <clean|compress|evict|checkpoint|removedb>\\">>
<<\\"  -ro (read-only - defaults to read-write)\\">>
<<\\"  -s <dbName> (for preloading of evict or db remove)\\">>
<<\\"Attempt to \\">>
\\"je.disable.java.adler32\\"
<<\\"Error Key \\">>
UNKNOWN
<<\\"Error Data \\">>
UNKNOWN
<<\\"maxBytes parameter to Database.preload() was specified as \\">>
<database id=\\\"
\\\"
<<\\" btc=\\\"\\">>
\\\"
<<\\" dupc=\\\"\\">>
\\\"
/>
MapTreeRoot
Can\'t set \'je.env.isNoLocking\' and \'je.env.isTransactional\';
<<\\"Enviroment creation isn\'t allowed,  but there is no pre-existing  environment in \\">>
TriggerLatch
Btree
Duplicate
Evictor
couldn\'t instantiate class comparator
Checkpointer
INCompressor
Cleaner
<database>
\\\"/>
<btcf name=\\\"
\\\"/>
<dupcf name=\\\"
\\\"/>
</database>
<<\\"\\">>
<<\\"Exception while trying to load \\">>
<<\\"Exception while trying to load \\">>
<<\\"\\">>
\\\"/>
<<\\"usage: \\">>
<<\\"Exit status = \\">>
<<\\"Exit status = \\">>
Attempt to use a Environment that has been closed.
<<\\"Exit status = \\">>
<<\\"Close of environment \\">>
close
<<\\"\nException shutting down daemon threads: \\">>
\n
-h requires an argument
<<\\"Env \\">>
-s requires an argument
<<\\"\nException clearing file manager: \\">>
-v requires a positive argument
\n
-v requires an argument
<<\\"\nException clearing file manager: \\">>
\n
-h is a required argument
-s is a required argument
<<\\"DbVerify.verify of \\">>
<<\\"Problem: \\">>
<<\\"Problem: \\">>
Some latches held at env close.
Checking obsolete offsets ...
Lock, transaction, or latch left behind at environment close
<<\\"DbVerify.verify of \\">>
<<\\"DbVerify.verify of \\">>
File Flip
manual
r
rw
beginTransaction called,  but Environment was not opened with transactional cpabilities
.
.
<<\\"Dup Offset \\">>
TxnPrepare
\\\">
>
\\"LatchImpl\\"
LatchImpl
<lastFullLsn>
</lastFullLsn>
\\\"/>
waitTarget.active but not owner
.
.
.
.
<<\\" (\\">>
)
TxnAbort
<<\\"\\">>
\\\">
<ckptStart>
</ckptStart>
<root>
</root>
<firstActive>
</firstActive>
</CkptEnd>
\\"je.info\\"
<<\\"Problem parsing parameter \\">>
<Dbg time=\\\"
\\\">
<msg val=\\\"
\\\"/>
</Dbg>
foreignKeyDeleteAction
The SecondaryConfig argument is null.
The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
<<\\" SecondaryKeyCreator\n\\">>
<<\\" SecondaryMultiKeyCreator\n\\">>
<<\\" ForeignKeyDelete\n\\">>
<<\\" ForeignKeyDeleteAction\n\\">>
<<\\" ForeignKeyNullifier\n\\">>
<<\\" ForeignMultiKeyNullifier\n\\">>
<<\\" ImmutableSecondaryKey\n\\">>
\\"<bin>\\"
\\"</bin>\\"
nodeId=
BIN must be latched before evicting LNs
<bin>
</bin>
BIN
