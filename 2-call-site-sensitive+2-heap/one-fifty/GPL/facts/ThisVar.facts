<CycleWorkSpace: void <init>()>	<CycleWorkSpace: void <init>()>/@this
<CycleWorkSpace: void init_vertex(Vertex)>	<CycleWorkSpace: void init_vertex(Vertex)>/@this
<CycleWorkSpace: void preVisitAction(Vertex)>	<CycleWorkSpace: void preVisitAction(Vertex)>/@this
<CycleWorkSpace: void postVisitAction(Vertex)>	<CycleWorkSpace: void postVisitAction(Vertex)>/@this
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
<Neighbor: void <init>()>	<Neighbor: void <init>()>/@this
<Neighbor: void <init>(Vertex,int)>	<Neighbor: void <init>(Vertex,int)>/@this
<Neighbor: void display()>	<Neighbor: void display()>/@this
<Neighbor: Vertex getStart()>	<Neighbor: Vertex getStart()>/@this
<Neighbor: Vertex getEnd()>	<Neighbor: Vertex getEnd()>/@this
<Neighbor: void setWeight(int)>	<Neighbor: void setWeight(int)>/@this
<Neighbor: int getWeight()>	<Neighbor: int getWeight()>/@this
<Neighbor: Vertex getOtherVertex(Vertex)>	<Neighbor: Vertex getOtherVertex(Vertex)>/@this
<Neighbor: void adjustAdorns(EdgeIfc)>	<Neighbor: void adjustAdorns(EdgeIfc)>/@this
<Neighbor: void <init>(Vertex,Edge)>	<Neighbor: void <init>(Vertex,Edge)>/@this
<Vertex$EdgeIter3: void <init>(Vertex)>	<Vertex$EdgeIter3: void <init>(Vertex)>/@this
<Vertex$EdgeIter3: EdgeIfc next()>	<Vertex$EdgeIter3: EdgeIfc next()>/@this
<Vertex$EdgeIter3: boolean hasNext()>	<Vertex$EdgeIter3: boolean hasNext()>/@this
<GlobalVarsWrapper: void <init>()>	<GlobalVarsWrapper: void <init>()>/@this
<Vertex: void <init>()>	<Vertex: void <init>()>/@this
<Vertex: Vertex assignName(java.lang.String)>	<Vertex: Vertex assignName(java.lang.String)>/@this
<Vertex: java.lang.String getName()>	<Vertex: java.lang.String getName()>/@this
<Vertex: void addAdjacent(Vertex)>	<Vertex: void addAdjacent(Vertex)>/@this
<Vertex: void adjustAdorns(Vertex,int)>	<Vertex: void adjustAdorns(Vertex,int)>/@this
<Vertex: VertexIter getNeighbors()>	<Vertex: VertexIter getNeighbors()>/@this
<Vertex: Vertex getStart()>	<Vertex: Vertex getStart()>/@this
<Vertex: Vertex getEnd()>	<Vertex: Vertex getEnd()>/@this
<Vertex: int getWeight()>	<Vertex: int getWeight()>/@this
<Vertex: Vertex getOtherVertex(Vertex)>	<Vertex: Vertex getOtherVertex(Vertex)>/@this
<Vertex: void adjustAdorns(EdgeIfc)>	<Vertex: void adjustAdorns(EdgeIfc)>/@this
<Vertex: void addEdge(Neighbor)>	<Vertex: void addEdge(Neighbor)>/@this
<Vertex: void adjustAdorns(Neighbor)>	<Vertex: void adjustAdorns(Neighbor)>/@this
<Vertex: void addNeighbor(Neighbor)>	<Vertex: void addNeighbor(Neighbor)>/@this
<Vertex: EdgeIter getEdges()>	<Vertex: EdgeIter getEdges()>/@this
<Vertex: java.util.LinkedList getNeighborsObj()>	<Vertex: java.util.LinkedList getNeighborsObj()>/@this
<Vertex: void addWeight(int)>	<Vertex: void addWeight(int)>/@this
<Vertex: void setWeight(int)>	<Vertex: void setWeight(int)>/@this
<Vertex: void init_vertex(WorkSpace)>	<Vertex: void init_vertex(WorkSpace)>/@this
<Vertex: void nodeSearch(WorkSpace)>	<Vertex: void nodeSearch(WorkSpace)>/@this
<Vertex: void display()>	<Vertex: void display()>/@this
<Vertex$VertexIter3: void <init>(Vertex)>	<Vertex$VertexIter3: void <init>(Vertex)>/@this
<Vertex$VertexIter3: Vertex next()>	<Vertex$VertexIter3: Vertex next()>/@this
<Vertex$VertexIter3: boolean hasNext()>	<Vertex$VertexIter3: boolean hasNext()>/@this
<EdgeIfc: Vertex getStart()>	<EdgeIfc: Vertex getStart()>/@this
<EdgeIfc: Vertex getEnd()>	<EdgeIfc: Vertex getEnd()>/@this
<EdgeIfc: void display()>	<EdgeIfc: void display()>/@this
<EdgeIfc: Vertex getOtherVertex(Vertex)>	<EdgeIfc: Vertex getOtherVertex(Vertex)>/@this
<EdgeIfc: void adjustAdorns(EdgeIfc)>	<EdgeIfc: void adjustAdorns(EdgeIfc)>/@this
<EdgeIfc: void setWeight(int)>	<EdgeIfc: void setWeight(int)>/@this
<EdgeIfc: int getWeight()>	<EdgeIfc: int getWeight()>/@this
<Vertex$EdgeIter2: void <init>(Vertex)>	<Vertex$EdgeIter2: void <init>(Vertex)>/@this
<Vertex$EdgeIter2: EdgeIfc next()>	<Vertex$EdgeIter2: EdgeIfc next()>/@this
<Vertex$EdgeIter2: boolean hasNext()>	<Vertex$EdgeIter2: boolean hasNext()>/@this
<EdgeIter: void <init>()>	<EdgeIter: void <init>()>/@this
<EdgeIter: boolean hasNext()>	<EdgeIter: boolean hasNext()>/@this
<EdgeIter: EdgeIfc next()>	<EdgeIter: EdgeIfc next()>/@this
<Vertex$VertexIter1: void <init>(Vertex)>	<Vertex$VertexIter1: void <init>(Vertex)>/@this
<Vertex$VertexIter1: Vertex next()>	<Vertex$VertexIter1: Vertex next()>/@this
<Vertex$VertexIter1: boolean hasNext()>	<Vertex$VertexIter1: boolean hasNext()>/@this
<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@this
<Main: void <init>()>	<Main: void <init>()>/@this
<Vertex$VertexIter2: void <init>(Vertex)>	<Vertex$VertexIter2: void <init>(Vertex)>/@this
<Vertex$VertexIter2: Vertex next()>	<Vertex$VertexIter2: Vertex next()>/@this
<Vertex$VertexIter2: boolean hasNext()>	<Vertex$VertexIter2: boolean hasNext()>/@this
<NumberWorkSpace: void <init>()>	<NumberWorkSpace: void <init>()>/@this
<NumberWorkSpace: void preVisitAction(Vertex)>	<NumberWorkSpace: void preVisitAction(Vertex)>/@this
<Graph$EdgeIter1: void <init>(Graph)>	<Graph$EdgeIter1: void <init>(Graph)>/@this
<Graph$EdgeIter1: EdgeIfc next()>	<Graph$EdgeIter1: EdgeIfc next()>/@this
<Graph$EdgeIter1: boolean hasNext()>	<Graph$EdgeIter1: boolean hasNext()>/@this
<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@this
<WorkSpaceTranspose: void <init>()>	<WorkSpaceTranspose: void <init>()>/@this
<WorkSpaceTranspose: void preVisitAction(Vertex)>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@this
<WorkSpaceTranspose: void nextRegionAction(Vertex)>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this
<Graph: void <init>()>	<Graph: void <init>()>/@this
<Graph: VertexIter getVertices()>	<Graph: VertexIter getVertices()>/@this
<Graph: EdgeIter getEdges()>	<Graph: EdgeIter getEdges()>/@this
<Graph: void sortVertices(java.util.Comparator)>	<Graph: void sortVertices(java.util.Comparator)>/@this
<Graph: void sortEdges(java.util.Comparator)>	<Graph: void sortEdges(java.util.Comparator)>/@this
<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this
<Graph: void addEdge(Vertex,Neighbor)>	<Graph: void addEdge(Vertex,Neighbor)>/@this
<Graph: Vertex findsVertex(java.lang.String)>	<Graph: Vertex findsVertex(java.lang.String)>/@this
<Graph: void display()>	<Graph: void display()>/@this
<Graph: void addVertex(Vertex)>	<Graph: void addVertex(Vertex)>/@this
<Graph: void runBenchmark(java.lang.String)>	<Graph: void runBenchmark(java.lang.String)>/@this
<Graph: void stopBenchmark()>	<Graph: void stopBenchmark()>/@this
<Graph: int readNumber()>	<Graph: int readNumber()>/@this
<Graph: void run(Vertex)>	<Graph: void run(Vertex)>/@this
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this
<Graph: void graphSearch(WorkSpace)>	<Graph: void graphSearch(WorkSpace)>/@this
<Graph: void numberVertices()>	<Graph: void numberVertices()>/@this
<Graph: void connectedComponents()>	<Graph: void connectedComponents()>/@this
<Graph: Graph strongComponents()>	<Graph: Graph strongComponents()>/@this
<Graph: Graph computeTranspose(Graph)>	<Graph: Graph computeTranspose(Graph)>/@this
<Graph: boolean cycleCheck()>	<Graph: boolean cycleCheck()>/@this
<Graph: Graph kruskal()>	<Graph: Graph kruskal()>/@this
<Graph: Graph prim(Vertex)>	<Graph: Graph prim(Vertex)>/@this
<FinishTimeWorkSpace: void <init>()>	<FinishTimeWorkSpace: void <init>()>/@this
<FinishTimeWorkSpace: void preVisitAction(Vertex)>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@this
<FinishTimeWorkSpace: void postVisitAction(Vertex)>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@this
<Graph$Comparator2: void <init>(Graph)>	<Graph$Comparator2: void <init>(Graph)>/@this
<Graph$Comparator2: int compare(Vertex,Vertex)>	<Graph$Comparator2: int compare(Vertex,Vertex)>/@this
<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@this
<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@this
<RegionWorkSpace: void <init>()>	<RegionWorkSpace: void <init>()>/@this
<RegionWorkSpace: void init_vertex(Vertex)>	<RegionWorkSpace: void init_vertex(Vertex)>/@this
<RegionWorkSpace: void postVisitAction(Vertex)>	<RegionWorkSpace: void postVisitAction(Vertex)>/@this
<RegionWorkSpace: void nextRegionAction(Vertex)>	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this
<Vertex$EdgeIter1: void <init>(Vertex)>	<Vertex$EdgeIter1: void <init>(Vertex)>/@this
<Vertex$EdgeIter1: EdgeIfc next()>	<Vertex$EdgeIter1: EdgeIfc next()>/@this
<Vertex$EdgeIter1: boolean hasNext()>	<Vertex$EdgeIter1: boolean hasNext()>/@this
<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@this
<Graph$Comparator1: void <init>(Graph)>	<Graph$Comparator1: void <init>(Graph)>/@this
<Graph$Comparator1: int compare(Vertex,Vertex)>	<Graph$Comparator1: int compare(Vertex,Vertex)>/@this
<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@this
<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@this
<VertexIter: void <init>()>	<VertexIter: void <init>()>/@this
<VertexIter: void <init>(Graph)>	<VertexIter: void <init>(Graph)>/@this
<VertexIter: Vertex next()>	<VertexIter: Vertex next()>/@this
<VertexIter: boolean hasNext()>	<VertexIter: boolean hasNext()>/@this
<Edge: void <init>(Vertex,Vertex,int)>	<Edge: void <init>(Vertex,Vertex,int)>/@this
<Edge: void adjustAdorns(EdgeIfc)>	<Edge: void adjustAdorns(EdgeIfc)>/@this
<Edge: void setWeight(int)>	<Edge: void setWeight(int)>/@this
<Edge: int getWeight()>	<Edge: int getWeight()>/@this
<Edge: Vertex getOtherVertex(Vertex)>	<Edge: Vertex getOtherVertex(Vertex)>/@this
<Edge: Vertex getStart()>	<Edge: Vertex getStart()>/@this
<Edge: Vertex getEnd()>	<Edge: Vertex getEnd()>/@this
<Edge: void display()>	<Edge: void display()>/@this
<Graph$Comparator3: void <init>(Graph)>	<Graph$Comparator3: void <init>(Graph)>/@this
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@this
<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@this
<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@this
<WorkSpace: void <init>()>	<WorkSpace: void <init>()>/@this
<WorkSpace: void init_vertex(Vertex)>	<WorkSpace: void init_vertex(Vertex)>/@this
<WorkSpace: void preVisitAction(Vertex)>	<WorkSpace: void preVisitAction(Vertex)>/@this
<WorkSpace: void postVisitAction(Vertex)>	<WorkSpace: void postVisitAction(Vertex)>/@this
<WorkSpace: void nextRegionAction(Vertex)>	<WorkSpace: void nextRegionAction(Vertex)>/@this
<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
