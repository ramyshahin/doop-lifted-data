<CycleWorkSpace: void preVisitAction(Vertex)>/if/instruction4	4	11	<CycleWorkSpace: void preVisitAction(Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction5	5	10	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction7	7	10	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction11	11	20	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction13	13	20	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/if/instruction17	17	20	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>
<Vertex: void nodeSearch(WorkSpace)>/if/instruction5	5	7	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void nodeSearch(WorkSpace)>/if/instruction17	17	11	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void nodeSearch(WorkSpace)>/if/instruction23	23	26	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void nodeSearch(WorkSpace)>/if/instruction30	30	21	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void nodeSearch(WorkSpace)>/if/instruction41	41	32	<Vertex: void nodeSearch(WorkSpace)>
<Vertex: void display()>/if/instruction23	23	7	<Vertex: void display()>
<Vertex: void display()>/if/instruction45	45	35	<Vertex: void display()>
<Vertex: void display()>/if/instruction47	47	52	<Vertex: void display()>
<Vertex: void display()>/if/instruction94	94	99	<Vertex: void display()>
<Main: void main(java.lang.String[])>/if/instruction54	54	38	<Main: void main(java.lang.String[])>
<Main: void main(java.lang.String[])>/if/instruction66	66	57	<Main: void main(java.lang.String[])>
<Main: void main(java.lang.String[])>/if/instruction85	85	81	<Main: void main(java.lang.String[])>
<NumberWorkSpace: void preVisitAction(Vertex)>/if/instruction4	4	9	<NumberWorkSpace: void preVisitAction(Vertex)>
<WorkSpaceTranspose: void preVisitAction(Vertex)>/if/instruction4	4	7	<WorkSpaceTranspose: void preVisitAction(Vertex)>
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction3	3	6	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction11	11	13	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: Vertex findsVertex(java.lang.String)>/if/instruction14	14	8	<Graph: Vertex findsVertex(java.lang.String)>
<Graph: void display()>/if/instruction19	19	10	<Graph: void display()>
<Graph: void display()>/if/instruction31	31	28	<Graph: void display()>
<Graph: int readNumber()>/if/instruction12	12	8	<Graph: int readNumber()>
<Graph: int readNumber()>/if/instruction24	24	27	<Graph: int readNumber()>
<Graph: int readNumber()>/if/instruction25	25	27	<Graph: int readNumber()>
<Graph: int readNumber()>/if/instruction26	26	14	<Graph: int readNumber()>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction12	12	17	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction16	16	25	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction20	20	26	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction24	24	26	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/if/instruction27	27	7	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>
<Graph: void graphSearch(WorkSpace)>/if/instruction5	5	9	<Graph: void graphSearch(WorkSpace)>
<Graph: void graphSearch(WorkSpace)>/if/instruction12	12	7	<Graph: void graphSearch(WorkSpace)>
<Graph: void graphSearch(WorkSpace)>/if/instruction17	17	20	<Graph: void graphSearch(WorkSpace)>
<Graph: void graphSearch(WorkSpace)>/if/instruction24	24	15	<Graph: void graphSearch(WorkSpace)>
<Graph: Graph computeTranspose(Graph)>/if/instruction21	21	11	<Graph: Graph computeTranspose(Graph)>
<Graph: Graph computeTranspose(Graph)>/if/instruction38	38	29	<Graph: Graph computeTranspose(Graph)>
<Graph: Graph computeTranspose(Graph)>/if/instruction42	42	25	<Graph: Graph computeTranspose(Graph)>
<Graph: Graph kruskal()>/if/instruction15	15	7	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction34	34	96	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction42	42	70	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction58	58	45	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction64	64	67	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction85	85	72	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction91	91	94	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction113	113	26	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction126	126	119	<Graph: Graph kruskal()>
<Graph: Graph kruskal()>/if/instruction148	148	129	<Graph: Graph kruskal()>
<Graph: Graph prim(Vertex)>/if/instruction14	14	6	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction32	32	36	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction40	40	30	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction58	58	60	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction63	63	86	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction65	65	86	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction78	78	83	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction92	92	51	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction98	98	43	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction113	113	104	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction119	119	121	<Graph: Graph prim(Vertex)>
<Graph: Graph prim(Vertex)>/if/instruction133	133	116	<Graph: Graph prim(Vertex)>
<FinishTimeWorkSpace: void preVisitAction(Vertex)>/if/instruction4	4	8	<FinishTimeWorkSpace: void preVisitAction(Vertex)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction6	6	9	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Graph$Comparator2: int compare(Vertex,Vertex)>/if/instruction11	11	14	<Graph$Comparator2: int compare(Vertex,Vertex)>
<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction6	6	9	<Graph$Comparator1: int compare(Vertex,Vertex)>
<Graph$Comparator1: int compare(Vertex,Vertex)>/if/instruction11	11	14	<Graph$Comparator1: int compare(Vertex,Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>/if/instruction4	4	7	<Edge: Vertex getOtherVertex(Vertex)>
<Edge: Vertex getOtherVertex(Vertex)>/if/instruction8	8	11	<Edge: Vertex getOtherVertex(Vertex)>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction6	6	9	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/if/instruction11	11	14	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>
