<<unique-hcontext>>	java.lang.String[]::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/@parameter0	@ Prog
<<unique-hcontext>>	java.lang.String[]::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/args#_0	@ Prog
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$stringconstant0	@ ((Prog /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$stringconstant1	@ ((Prog /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$r7	@ ((Prog /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$r18	@ ((Prog /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r3	@ ((Prog /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/1	<<unique-context>>	<Main: void main(java.lang.String[])>/$r4	@ ((Prog /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void endProfile()>/$stringconstant0	@ ((Benchmark /\ (Benchmark /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Graph: void endProfile()>/$r0	@ ((Benchmark /\ (Benchmark /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r0	@ ((Prog /\ Prog) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r2	@ ((Prog /\ Prog) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r5	@ ((Prog /\ Prog) /\ Prog)
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: void <init>()>/@this
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: boolean hasNext()>/@this
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: EdgeIfc next()>/@this
<<unique-hcontext>>	GlobalVarsWrapper::: (Mock)	<<unique-context>>	<GlobalVarsWrapper: void <init>()>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void <init>()>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/@this	@ Cycle
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/@this
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/@this	@ Cycle
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/@this	@ EdgeObjects
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/@this	@ EdgeObjects
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: Vertex next()>/@this
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: boolean hasNext()>/@this
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: Vertex next()>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: boolean hasNext()>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@this	@ MSTKruskal
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@this
<<unique-hcontext>>	Main::: (Mock)	<<unique-context>>	<Main: void <init>()>/@this
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: Vertex next()>/@this	@ GEN_Edges
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: boolean hasNext()>/@this	@ GEN_Edges
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/@this
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@this	@ StronglyConnected
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.lang.String getName()>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getStart()>/@this	@ (Undirected /\ G_NoEdges)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getEnd()>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: int getWeight()>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/@this	@ GEN_Edges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: EdgeIter getEdges()>/@this	@ (EdgeObjects /\ G_NoEdges)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.util.LinkedList getNeighborsObj()>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addWeight(int)>/@this	@ Weighted
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void setWeight(int)>/@this	@ (Weighted /\ G_NoEdges)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/@this	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/@this
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void display()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: VertexIter getVertices()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@this	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/@this	@ Benchmark
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void stopBenchmark()>/@this	@ Benchmark
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: int readNumber()>/@this	@ Benchmark
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void numberVertices()>/@this	@ Number
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void connectedComponents()>/@this	@ Connected
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph strongComponents()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@this	@ Transpose
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: boolean cycleCheck()>/@this	@ Cycle
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/@this
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/@this	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/@this	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/@this	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@this	@ SearchBase
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: EdgeIfc next()>/@this	@ (EdgeObjects /\ GEN_Edges)
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: boolean hasNext()>/@this	@ (EdgeObjects /\ GEN_Edges)
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: EdgeIfc next()>/@this	@ (EdgeObjects /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: boolean hasNext()>/@this	@ (EdgeObjects /\ GN_OnlyNeighbors)
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void <init>()>/@this
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/@this
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/@this	@ MSTPrim
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@this
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/@this	@ (EdgeObjects /\ G_NoEdges)
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/@this	@ (EdgeObjects /\ G_NoEdges)
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/@this
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@this	@ StronglyConnected
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@this	@ StronglyConnected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void <init>()>/@this
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/@this	@ Connected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/@this	@ Connected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this	@ Connected
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/@this
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/@this	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void setWeight(int)>/@this	@ (EdgeObjects /\ Weighted)
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: int getWeight()>/@this	@ (EdgeObjects /\ Weighted)
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/@this	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getStart()>/@this	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getEnd()>/@this	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void display()>/@this	@ EdgeObjects
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/@this	@ StronglyConnected
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>()>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/@this
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void display()>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getStart()>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getEnd()>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void setWeight(int)>/@this	@ (Weighted /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: int getWeight()>/@this	@ (Weighted /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/@this	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/@this
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant0	@ (Weighted /\ G_NoEdges)
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant1
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant2	@ SearchBase
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant3	@ SearchBase
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant4	@ Number
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant5	@ Connected
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant6	@ StronglyConnected
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant7	@ Cycle
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant8	@ MSTKruskal
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant9	@ MSTKruskal
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Vertex: void display()>/$stringconstant10	@ MSTPrim
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r2	@ (Weighted /\ G_NoEdges)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r10
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r16
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r23	@ Number
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r28	@ Connected
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r33	@ StronglyConnected
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r39	@ Cycle
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r45	@ MSTKruskal
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Vertex: void display()>/$r52	@ MSTPrim
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/$stringconstant0	@ ((Benchmark /\ (Benchmark /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/$r2	@ ((Benchmark /\ (Benchmark /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<Graph: int readNumber()>/new char[]/0	<<unique-context>>	<Graph: int readNumber()>/word#_208	@ ((Benchmark /\ (Benchmark /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void run(Vertex)>/$stringconstant0	@ (Cycle /\ Prog)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Graph: void run(Vertex)>/$r0	@ (Cycle /\ Prog)
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Edge: void display()>/$stringconstant0	@ ((EdgeObjects /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ EdgeObjects)
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Edge: void display()>/$stringconstant1	@ ((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Edge: void display()>/$r0	@ ((EdgeObjects /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ EdgeObjects)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Edge: void display()>/$r4	@ ((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<<string-builder>>	<<unique-context>>	<Neighbor: void display()>/$r0	@ ((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<EdgeIter: EdgeIfc next()>/$null0
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/$null0	@ ((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: Vertex getEnd()>/$null0	@ ((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: EdgeIter getEdges()>/$null0	@ (((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIter getEdges()>/$null0	@ EdgeObjects
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$null0	@ ((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph strongComponents()>/$null0	@ StronglyConnected
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/$null0	@ MSTKruskal
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/$null0	@ MSTPrim
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/$null1	@ MSTPrim
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/$null2	@ MSTPrim
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$null0	@ ((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void <init>()>/$null0	@ GN_OnlyNeighbors
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void <init>()>/$null1	@ GEN_Edges
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void <init>()>/$null2	@ GEN_Edges
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: Vertex getStart()>/$null0	@ ((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void main(java.lang.String[])>/g#_16	@ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r13	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ (Prog /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/1	<<unique-context>>	<Main: void main(java.lang.String[])>/$r14	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ (Prog /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Vertex: void adjustAdorns(Vertex,int)>/new java.lang.Integer/0	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/$r3	@ ((G_NoEdges /\ (Weighted /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/$r0	@ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex: EdgeIter getEdges()>/$r0	@ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Vertex: void addWeight(int)>/new java.lang.Integer/0	<<unique-context>>	<Vertex: void addWeight(int)>/$r0	@ ((Weighted /\ (Weighted /\ G_NoEdges)) /\ Weighted)
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: VertexIter getVertices()>/$r0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/$r0	@ EdgeObjects
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/$r0	@ ((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors)
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/$r0	@ ((Benchmark /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Graph: int readNumber()>/new java.lang.String/0	<<unique-context>>	<Graph: int readNumber()>/$r3	@ ((Benchmark /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Graph: int readNumber()>/new java.lang.String/1	<<unique-context>>	<Graph: int readNumber()>/$r4	@ ((Benchmark /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<Graph: void numberVertices()>/$r0	@ ((Number /\ Number) /\ Number)
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<Graph: void connectedComponents()>/$r0	@ ((Connected /\ Connected) /\ Connected)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: Graph strongComponents()>/$r0	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph: Graph strongComponents()>/$r1	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: Graph strongComponents()>/$r2	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/$r0	@ ((Transpose /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/$r1	@ ((Transpose /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/$r3	@ ((Transpose /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: boolean cycleCheck()>/$r0	@ ((Cycle /\ Cycle) /\ Cycle)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph kruskal()>/$r0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: Graph kruskal()>/$r1	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/2	<<unique-context>>	<Graph: Graph kruskal()>/$r2	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph: Graph kruskal()>/$r3	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/$r24	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r26	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r0	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r1	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r11	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r13	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r14	@ MSTPrim
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: void <init>()>/this#_0
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: boolean hasNext()>/this#_0
<<unique-hcontext>>	EdgeIter::: (Mock)	<<unique-context>>	<EdgeIter: EdgeIfc next()>/this#_0
<<unique-hcontext>>	GlobalVarsWrapper::: (Mock)	<<unique-context>>	<GlobalVarsWrapper: void <init>()>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/this#_0	@ Cycle
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/this#_0	@ Cycle
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Graph$EdgeIter1::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/this#_0	@ EdgeObjects
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: Vertex next()>/this#_0
<<unique-hcontext>>	VertexIter::: (Mock)	<<unique-context>>	<VertexIter: boolean hasNext()>/this#_0
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex$VertexIter1::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: Vertex next()>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex$VertexIter2::: (Mock)	<<unique-context>>	<Vertex$VertexIter2: boolean hasNext()>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/this#_0	@ MSTKruskal
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l0#_0
<<unique-hcontext>>	Main::: (Mock)	<<unique-context>>	<Main: void <init>()>/this#_0
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: Vertex next()>/this#_0	@ GEN_Edges
<<unique-hcontext>>	Vertex$VertexIter3::: (Mock)	<<unique-context>>	<Vertex$VertexIter3: boolean hasNext()>/this#_0	@ GEN_Edges
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/this#_0
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/this#_0	@ StronglyConnected
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.lang.String getName()>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: VertexIter getNeighbors()>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getStart()>/this#_0	@ (Undirected /\ G_NoEdges)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getEnd()>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: int getWeight()>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/this#_0	@ GEN_Edges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: EdgeIter getEdges()>/this#_0	@ (EdgeObjects /\ G_NoEdges)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: java.util.LinkedList getNeighborsObj()>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0	@ Weighted
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0	@ (Weighted /\ G_NoEdges)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/this#_0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/this#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void display()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/this#_0	@ Benchmark
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void stopBenchmark()>/this#_0	@ Benchmark
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: int readNumber()>/this#_0	@ Benchmark
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void numberVertices()>/this#_0	@ Number
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: void connectedComponents()>/this#_0	@ Connected
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph strongComponents()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/this#_0	@ Transpose
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: boolean cycleCheck()>/this#_0	@ Cycle
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/this#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/this#_0	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/this#_0	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/this#_0	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/this#_0	@ SearchBase
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: EdgeIfc next()>/this#_0	@ (EdgeObjects /\ GEN_Edges)
<<unique-hcontext>>	Vertex$EdgeIter3::: (Mock)	<<unique-context>>	<Vertex$EdgeIter3: boolean hasNext()>/this#_0	@ (EdgeObjects /\ GEN_Edges)
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: EdgeIfc next()>/this#_0	@ (EdgeObjects /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Vertex$EdgeIter2::: (Mock)	<<unique-context>>	<Vertex$EdgeIter2: boolean hasNext()>/this#_0	@ (EdgeObjects /\ GN_OnlyNeighbors)
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/this#_0
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/this#_0	@ MSTPrim
<<unique-hcontext>>	Graph$Comparator2::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l0#_0
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0	@ (EdgeObjects /\ G_NoEdges)
<<unique-hcontext>>	Vertex$EdgeIter1::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/this#_0	@ (EdgeObjects /\ G_NoEdges)
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/this#_0	@ StronglyConnected
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/this#_0	@ StronglyConnected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void <init>()>/this#_0
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/this#_0	@ Connected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/this#_0	@ Connected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0	@ Connected
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/this#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void setWeight(int)>/this#_0	@ (EdgeObjects /\ Weighted)
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: int getWeight()>/this#_0	@ (EdgeObjects /\ Weighted)
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getStart()>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: Vertex getEnd()>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Edge: void display()>/this#_0	@ EdgeObjects
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/this#_0	@ StronglyConnected
<<unique-hcontext>>	Graph$Comparator1::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l0#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>()>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/this#_0
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void display()>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getStart()>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getEnd()>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void setWeight(int)>/this#_0	@ (Weighted /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: int getWeight()>/this#_0	@ (Weighted /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/this#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/this#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r6	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r11	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r1	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex[]/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r3	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r0	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ (Prog /\ Prog)) /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new int[]/1	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r2	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ (Prog /\ Prog)) /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/@parameter0	@ Cycle
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/@parameter0	@ Cycle
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter0	@ MSTKruskal
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/@parameter1	@ MSTKruskal
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/@parameter0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/@parameter0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0	@ G_NoEdges
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/@parameter0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/@parameter0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/@parameter0	@ GEN_Edges
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/@parameter0	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@parameter0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@parameter0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/@parameter0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/@parameter1	@ GN_OnlyNeighbors
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/@parameter0	@ Benchmark
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter1	@ EdgeObjects
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@parameter0	@ Transpose
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/@parameter0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/@parameter0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/@parameter0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@parameter0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/@parameter1	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter0	@ MSTPrim
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/@parameter1	@ MSTPrim
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/@parameter0	@ Connected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/@parameter0	@ Connected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/@parameter0	@ Connected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/@parameter0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/@parameter0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/@parameter1	@ StronglyConnected
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/@parameter1
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/@parameter0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/@parameter0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/@parameter0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/@parameter0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/@parameter1
<<unique-hcontext>>	<Graph: int readNumber()>/new java.lang.String/0	<<unique-context>>	<Graph: int readNumber()>/theString#_224	@ (((Benchmark /\ Benchmark) /\ Benchmark) /\ (Benchmark /\ Benchmark))
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: Graph strongComponents()>/FTWS#_324	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: Graph strongComponents()>/WST#_337	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new java.util.HashMap/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/newVertices#_347	@ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/newGraph#_350	@ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: boolean cycleCheck()>/c#_393	@ (((Cycle /\ Cycle) /\ Cycle) /\ (Cycle /\ Cycle))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph kruskal()>/A#_401	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new java.util.LinkedList/2	<<unique-context>>	<Graph: Graph kruskal()>/vxiter_$$A_1#_415	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/e1_$$A_1#_481	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.LinkedList/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1#_539	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new java.util.HashSet/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/indx#_540	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/residue_$$A_1#_630	@ MSTPrim
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void init_vertex(Vertex)>/v#_0	@ Cycle
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void preVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void postVisitAction(Vertex)>/v#_0	@ Cycle
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e1#_0	@ MSTKruskal
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/e2#_0	@ MSTKruskal
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l1#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void preVisitAction(Vertex)>/v#_0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/v#_0	@ StronglyConnected
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/name#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/the_vertex#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: Vertex getOtherVertex(Vertex)>/vertex#_0	@ G_NoEdges
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ G_NoEdges
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/n#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void adjustAdorns(Neighbor)>/sourceNeighbor#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Vertex: void addNeighbor(Neighbor)>/n#_0	@ GEN_Edges
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/w#_0	@ SearchBase
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/c#_0
<<unique-hcontext>>	Graph$Comparator3::: (Mock)	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/c#_0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/start#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Neighbor::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/theNeighbor#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/FileName#_0	@ Benchmark
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void run(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theTarget#_0	@ EdgeObjects
<<unique-hcontext>>	WorkSpace::: (Mock)	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/the_graph#_0	@ Transpose
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/r#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>/v#_0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>/v#_0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>/v#_0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/v#_0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vsource#_0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>/vtarget#_0	@ SearchBase
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<NumberWorkSpace: void preVisitAction(Vertex)>/v#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/v1#_0	@ MSTPrim
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>/v2#_0	@ MSTPrim
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l1#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void preVisitAction(Vertex)>/v#_0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<FinishTimeWorkSpace: void postVisitAction(Vertex)>/v#_0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void init_vertex(Vertex)>/v#_0	@ Connected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void postVisitAction(Vertex)>/v#_0	@ Connected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/v#_0	@ Connected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/the_start#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/the_end#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/vertex#_0	@ EdgeObjects
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/v1#_0	@ StronglyConnected
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>/v2#_0	@ StronglyConnected
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l1#_0
<<unique-hcontext>>	java.lang.Object::: (Mock)	<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/l2#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/theNeighbor#_0
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/vertex#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ GN_OnlyNeighbors
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/v#_0
<<unique-hcontext>>	Edge::: (Mock)	<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/e#_0
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/@parameter0	@ (((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void readWeights(Graph,int)>/@parameter0	@ (((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<GlobalVarsWrapper: void <clinit>()>/$r0	@ ((BFS /\ BFS) /\ BFS)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	@ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/root#_522	@ MSTPrim
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/g#_0	@ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Main: void readWeights(Graph,int)>/g#_0	@ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r1	@ (((((Prog /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r16	@ (((((Prog /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/@this	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: int readNumber()>/@this	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void stopBenchmark()>/@this	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)) /\ Benchmark)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/@this	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/this#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)) /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: int readNumber()>/this#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)) /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void stopBenchmark()>/this#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)) /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/this#_0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: java.lang.String getName()>/$r0
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Vertex: void display()>/$r12
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: void stopBenchmark()>/$r0	@ ((Benchmark /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: int readNumber()>/$r0	@ ((Benchmark /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: int readNumber()>/$r1	@ ((Benchmark /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	<Graph: void runBenchmark(java.lang.String)>/new java.io.FileReader/0	<<unique-context>>	<Graph: int readNumber()>/$r2	@ ((Benchmark /\ Benchmark) /\ Benchmark)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r0	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r2	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getStart()>/$r0	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void display()>/$r6	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r1	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getOtherVertex(Vertex)>/$r3	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: Vertex getEnd()>/$r0	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Edge: void display()>/$r10	@ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: void display()>/$r1	@ (((GN_OnlyNeighbors /\ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) \/ (((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: Vertex getEnd()>/$r0	@ (((GN_OnlyNeighbors /\ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) \/ (((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	@ (((GN_OnlyNeighbors /\ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) \/ (((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: void display()>/$r1	@ ((GN_OnlyNeighbors /\ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) \/ (((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getEnd()>/$r0	@ ((GN_OnlyNeighbors /\ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) \/ (((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Neighbor: Vertex getOtherVertex(Vertex)>/$r0	@ ((GN_OnlyNeighbors /\ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) \/ (((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/end#_148	@ (((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/end#_148	@ (((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/@this	@ MSTPrim
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ MSTPrim
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ Cycle
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@this	@ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@this	@ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@this
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@this	@ EdgeObjects
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/@this	@ ((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))) /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))) /\ ((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors)))
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<NumberWorkSpace: void <init>()>/@this	@ ((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number))
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void <init>()>/@this	@ ((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected))
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/@this	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@this	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/@this	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<CycleWorkSpace: void <init>()>/@this	@ ((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@this	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/@this	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/@this	@ MSTPrim
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ Number
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ Connected
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void <init>()>/$null0	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>/this#_0	@ MSTPrim
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ MSTPrim
<<unique-hcontext>>	CycleWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ Cycle
<<unique-hcontext>>	WorkSpaceTranspose::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l0#_0	@ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l0#_0	@ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/this#_0
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l0#_0	@ EdgeObjects
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/this#_0	@ ((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))) /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))) /\ ((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors)))
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<NumberWorkSpace: void <init>()>/this#_0	@ ((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number))
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void <init>()>/this#_0	@ ((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected))
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/this#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l0#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void <init>()>/this#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<CycleWorkSpace: void <init>()>/this#_0	@ ((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l0#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l0#_0	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void <init>()>/this#_0	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void <init>()>/this#_0	@ MSTPrim
<<unique-hcontext>>	NumberWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ Number
<<unique-hcontext>>	FinishTimeWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
<<unique-hcontext>>	RegionWorkSpace::: (Mock)	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ Connected
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r0	@ ((((BFS /\ (BFS /\ BFS)) /\ (BFS /\ BFS)) /\ ((BFS /\ BFS) /\ BFS)) /\ (SearchBase /\ BFS))
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r1	@ ((((BFS /\ (BFS /\ BFS)) /\ (BFS /\ BFS)) /\ ((BFS /\ BFS) /\ BFS)) /\ (SearchBase /\ BFS))
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r2	@ ((((BFS /\ (BFS /\ BFS)) /\ (BFS /\ BFS)) /\ ((BFS /\ BFS) /\ BFS)) /\ (SearchBase /\ BFS))
<<unique-hcontext>>	<GlobalVarsWrapper: void <clinit>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/$r4	@ ((((BFS /\ (BFS /\ BFS)) /\ (BFS /\ BFS)) /\ ((BFS /\ BFS) /\ BFS)) /\ (SearchBase /\ BFS))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@parameter0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@this	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/@this	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ MSTPrim
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void <init>()>/$r0	@ (G_NoEdges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Vertex: void <init>()>/$r1	@ (GN_OnlyNeighbors /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/2	<<unique-context>>	<Vertex: void <init>()>/$r2	@ (GEN_Edges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/3	<<unique-context>>	<Vertex: void <init>()>/$r3	@ ((Weighted /\ G_NoEdges) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void <init>()>/$r0	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: void <init>()>/$r1	@ (GEN_Edges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant1	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant2	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant3	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)))
<<unique-hcontext>>	<<string-constant>>	<<unique-context>>	<Graph: void display()>/$stringconstant4	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/$null0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/$null1	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/name#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/this#_0	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/this#_0	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ MSTPrim
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void display()>/$r54	@ MSTPrim
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Neighbor: void display()>/$r2	@ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ ((GN_OnlyNeighbors /\ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) \/ (((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)))
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/vxiter#_207	@ (((((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)) /\ (DFS /\ SearchBase)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/vxiter_$$A_1#_218	@ (((((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)) /\ (SearchBase /\ BFS)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex: void display()>/vxiter_$$A_1#_265	@ ((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/gaux#_259	@ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/gaux1#_264	@ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/vxiter#_293	@ SearchBase
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/vxiter_$$A_1#_305	@ SearchBase
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: Graph strongComponents()>/gaux#_334	@ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/vxiter#_353	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ (((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/vxiter_$$A_1_$$A_1#_367	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph kruskal()>/vxiter#_406	@ MSTKruskal
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph: Graph kruskal()>/edgeiter#_428	@ ((MSTKruskal /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph kruskal()>/vxiter_$$A_1_$$A_1#_484	@ MSTKruskal
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27	@ (MSTKruskal /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/$r27	@ MSTKruskal
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter#_526	@ MSTPrim
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_1_$$A_1#_545	@ MSTPrim
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_2_$$A_4#_633	@ MSTPrim
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15	@ (MSTPrim /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15	@ MSTPrim
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/vxiter_$$A_3_$$A_1#_646	@ MSTPrim
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/e#_664	@ ((((MSTPrim /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ MSTPrim) /\ (EdgeObjects /\ EdgeObjects)) /\ (((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ EdgeObjects)))
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ ((((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ Number) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number)) /\ (((Number /\ Number) /\ Number) /\ (Number /\ Number)))
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ ((((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ Connected) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected)) /\ (((Connected /\ Connected) /\ Connected) /\ (Connected /\ Connected)))
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ ((((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ Cycle) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((((Cycle /\ Cycle) /\ Cycle) /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@parameter0	@ ((((MSTKruskal /\ (((MSTKruskal /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects)) /\ MSTKruskal) /\ EdgeObjects) /\ MSTKruskal)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter0	@ ((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ (G_NoEdges /\ G_NoEdges)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/@parameter1	@ ((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter0	@ (((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/@parameter1	@ (((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ EdgeObjects
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter1	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter1	@ StronglyConnected
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0	@ MSTKruskal
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter1	@ MSTKruskal
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0	@ MSTPrim
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter1	@ MSTPrim
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@this	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358	@ ((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ Transpose)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358	@ (((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose)
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0	@ ((((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ Number) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number)) /\ (((Number /\ Number) /\ Number) /\ (Number /\ Number)))
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0	@ ((((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ Connected) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected)) /\ (((Connected /\ Connected) /\ Connected) /\ (Connected /\ Connected)))
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/c#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0	@ ((((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ Cycle) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((((Cycle /\ Cycle) /\ Cycle) /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/c#_0	@ (((((MSTKruskal /\ (((MSTKruskal /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects)) /\ MSTKruskal) /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l1#_0	@ ((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ (G_NoEdges /\ G_NoEdges)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/l2#_0	@ ((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l1#_0	@ (((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/l2#_0	@ (((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ EdgeObjects
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l2#_0	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0	@ StronglyConnected
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l2#_0	@ StronglyConnected
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0	@ MSTKruskal
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l2#_0	@ MSTKruskal
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0	@ MSTPrim
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l2#_0	@ MSTPrim
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/this#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void display()>/$r2	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void display()>/$r3	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/$r0	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12	@ ((((((Prog /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ (Prog /\ Prog)) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10	@ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27	@ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ MSTKruskal)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15	@ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10	@ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ (MSTKruskal /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15	@ (MSTKruskal /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r10	@ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_1#_355	@ (MSTPrim /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/$r27	@ (MSTPrim /\ MSTKruskal)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r15	@ MSTPrim
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r1	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r7	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r3	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r5	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/newvxiter#_366	@ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void connectedComponents()>/@this	@ (((((Prog /\ Connected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Connected) /\ Connected) /\ (Prog /\ Connected)) /\ Connected)) /\ Connected)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: boolean cycleCheck()>/@this	@ (((((Cycle /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Cycle /\ Prog) /\ Cycle) /\ (Cycle /\ Prog)) /\ Cycle)) /\ Cycle)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/@this	@ ((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/@this	@ ((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void numberVertices()>/@this	@ (((((Prog /\ Number) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Number) /\ Number) /\ (Prog /\ Number)) /\ Number)) /\ Number)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph strongComponents()>/@this	@ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ (((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ ((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358	@ (((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358	@ ((MSTKruskal /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v#_358	@ ((MSTPrim /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void connectedComponents()>/this#_0	@ ((((((Prog /\ Connected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Connected) /\ Connected) /\ (Prog /\ Connected)) /\ Connected)) /\ Connected) /\ Connected)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: boolean cycleCheck()>/this#_0	@ ((((((Cycle /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Cycle /\ Prog) /\ Cycle) /\ (Cycle /\ Prog)) /\ Cycle)) /\ Cycle) /\ Cycle)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph kruskal()>/this#_0	@ ((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/this#_0	@ ((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void numberVertices()>/this#_0	@ ((((((Prog /\ Number) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Number) /\ Number) /\ (Prog /\ Number)) /\ Number)) /\ Number) /\ Number)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph strongComponents()>/this#_0	@ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12	@ ((((((Prog /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ (Prog /\ Prog)) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Main: void main(java.lang.String[])>/$r17	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/theNewEnd#_505	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/j_$$A_1#_504	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewVertex#_658	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewPred#_659	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/vtx_$$A_3#_650	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void run(Vertex)>/gaux2#_271	@ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/edgeiter#_279	@ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r0	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/$r2	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/$r2	@ MSTPrim
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0	@ (((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ (((MSTKruskal /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ MSTKruskal) /\ MSTKruskal)) \/ (((MSTPrim /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0	@ ((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ MSTKruskal) \/ MSTPrim)
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ ((Cycle /\ ((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle))) /\ Cycle)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ ((Number /\ ((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number))) /\ Number)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ StronglyConnected
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/@this	@ ((Connected /\ ((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected))) /\ Connected)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ ((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ Transpose) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ (((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ ((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ (((MSTKruskal /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_2#_375	@ (((MSTPrim /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/vtx_$$A_2#_666	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0	@ (((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ (((MSTKruskal /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ MSTKruskal) /\ MSTKruskal)) \/ (((MSTPrim /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0	@ ((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ MSTKruskal) \/ MSTPrim)
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ ((Cycle /\ ((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle))) /\ Cycle)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ ((Number /\ ((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number))) /\ Number)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<WorkSpace: void <init>()>/this#_0	@ ((Connected /\ ((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected))) /\ Connected)
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Edge: void display()>/$r7	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	java.lang.String::: (Mock)	<<unique-context>>	<Edge: void display()>/$r11	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0	@ ((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ ((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal)) \/ ((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0	@ (((((MSTKruskal /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ MSTKruskal) \/ (((MSTKruskal /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/@parameter0	@ (((((MSTPrim /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ (((MSTPrim /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal)) \/ MSTPrim)
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/@parameter0	@ (((((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ (((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ (((((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ GN_OnlyNeighbors) /\ (((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/@this	@ (((((((DFS /\ SearchBase) /\ (((((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)) /\ (DFS /\ SearchBase)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((DFS /\ SearchBase) /\ G_NoEdges)) /\ G_NoEdges) \/ (((((SearchBase /\ BFS) /\ (((((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)) /\ (SearchBase /\ BFS)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((SearchBase /\ BFS) /\ G_NoEdges)) /\ G_NoEdges)) \/ (((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges))) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges))
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/@this	@ (((((((DFS /\ SearchBase) /\ (((((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)) /\ (DFS /\ SearchBase)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((DFS /\ SearchBase) /\ G_NoEdges)) /\ G_NoEdges) \/ (((((SearchBase /\ BFS) /\ (((((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)) /\ (SearchBase /\ BFS)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((SearchBase /\ BFS) /\ G_NoEdges)) /\ G_NoEdges)) \/ (((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges))) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this	@ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this	@ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: boolean hasNext()>/@this	@ ((((((((SearchBase \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ MSTKruskal) \/ MSTKruskal) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim)
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: Vertex next()>/@this	@ ((((((((SearchBase \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ MSTKruskal) \/ MSTKruskal) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@this	@ (((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected)
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/@this	@ ((((MSTKruskal /\ ((MSTKruskal /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (MSTKruskal /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/@this	@ ((((MSTKruskal /\ ((MSTKruskal /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (MSTKruskal /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/@this	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ (((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ ((((MSTKruskal /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/v_$$A_3#_385	@ ((((MSTPrim /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ Transpose) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0	@ ((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ ((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal)) \/ ((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0	@ (((((MSTKruskal /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ MSTKruskal) \/ (((MSTKruskal /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>/v#_0	@ (((((MSTPrim /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) \/ (((MSTPrim /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal)) \/ MSTPrim)
<<unique-hcontext>>	<Graph: void addEdge(Vertex,Neighbor)>/new Neighbor/0	<<unique-context>>	<Vertex: void addEdge(Neighbor)>/n#_0	@ ((((((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ (((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ (((((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ GN_OnlyNeighbors) /\ (((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)))) /\ GN_OnlyNeighbors)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>/this#_0	@ ((((((((DFS /\ SearchBase) /\ (((((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)) /\ (DFS /\ SearchBase)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((DFS /\ SearchBase) /\ G_NoEdges)) /\ G_NoEdges) \/ (((((SearchBase /\ BFS) /\ (((((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)) /\ (SearchBase /\ BFS)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((SearchBase /\ BFS) /\ G_NoEdges)) /\ G_NoEdges)) \/ (((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges))) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>/this#_0	@ ((((((((DFS /\ SearchBase) /\ (((((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)) /\ (DFS /\ SearchBase)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((DFS /\ SearchBase) /\ G_NoEdges)) /\ G_NoEdges) \/ (((((SearchBase /\ BFS) /\ (((((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)) /\ (SearchBase /\ BFS)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((SearchBase /\ BFS) /\ G_NoEdges)) /\ G_NoEdges)) \/ (((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges))) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0	@ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0	@ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: boolean hasNext()>/this#_0	@ ((((((((SearchBase \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ MSTKruskal) \/ MSTKruskal) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim)
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<VertexIter: Vertex next()>/this#_0	@ ((((((((SearchBase \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))) \/ MSTKruskal) \/ MSTKruskal) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim) \/ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/this#_0	@ (((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected)
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>/this#_0	@ (((((MSTKruskal /\ ((MSTKruskal /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (MSTKruskal /\ EdgeObjects)) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>/this#_0	@ (((((MSTKruskal /\ ((MSTKruskal /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (MSTKruskal /\ EdgeObjects)) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: VertexIter getVertices()>/this#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12	@ ((((((Prog /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ (Prog /\ Prog)) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12	@ ((((((Prog /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ (Prog /\ Prog)) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: void main(java.lang.String[])>/$r12	@ ((((((Prog /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ (Prog /\ Prog)) /\ Prog) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v1#_87	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/v2#_88	@ ((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/@parameter0	@ ((((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/@parameter0	@ ((((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog)) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@parameter0	@ ((((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected)) /\ StronglyConnected) /\ (((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ Transpose))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/@parameter0	@ ((((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected)) /\ StronglyConnected) /\ StronglyConnected)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: void run(Vertex)>/@parameter0	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@parameter0	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ (((MSTPrim /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ MSTPrim) /\ EdgeObjects))
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ ((((SearchBase /\ ((((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ Number) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number)) /\ (((Number /\ Number) /\ Number) /\ (Number /\ Number)))) /\ (Number /\ Number)) /\ SearchBase) /\ SearchBase)
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/@this	@ ((((SearchBase /\ ((((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ Connected) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected)) /\ (((Connected /\ Connected) /\ Connected) /\ (Connected /\ Connected)))) /\ (Connected /\ Connected)) /\ (SearchBase /\ Connected)) /\ Connected)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ ((((SearchBase /\ StronglyConnected) /\ StronglyConnected) /\ SearchBase) /\ SearchBase)
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/@this	@ ((((SearchBase /\ ((((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ Cycle) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((((Cycle /\ Cycle) /\ Cycle) /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)))) /\ (Cycle /\ Cycle)) /\ SearchBase) /\ SearchBase)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/@this	@ ((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges)
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/@this	@ (((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@this	@ EdgeObjects
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/@this	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/@this	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/@this	@ MSTPrim
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/l1#_0	@ ((((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/l1#_0	@ ((((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog)) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/the_graph#_0	@ (((((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected)) /\ StronglyConnected) /\ (((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ Transpose)) /\ Transpose)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/l1#_0	@ ((((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected)) /\ StronglyConnected) /\ StronglyConnected)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: void run(Vertex)>/v#_0	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/theSource#_0	@ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ (((MSTPrim /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ MSTPrim) /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: void numberVertices()>/new NumberWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (((((SearchBase /\ ((((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ Number) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number)) /\ (((Number /\ Number) /\ Number) /\ (Number /\ Number)))) /\ (Number /\ Number)) /\ SearchBase) /\ SearchBase) /\ SearchBase)
<<unique-hcontext>>	<Graph: void connectedComponents()>/new RegionWorkSpace/0	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (((((SearchBase /\ ((((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ Connected) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected)) /\ (((Connected /\ Connected) /\ Connected) /\ (Connected /\ Connected)))) /\ (Connected /\ Connected)) /\ (SearchBase /\ Connected)) /\ Connected) /\ Connected)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new FinishTimeWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (((((SearchBase /\ StronglyConnected) /\ StronglyConnected) /\ SearchBase) /\ SearchBase) /\ SearchBase)
<<unique-hcontext>>	<Graph: boolean cycleCheck()>/new CycleWorkSpace/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>/this#_0	@ (((((SearchBase /\ ((((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ Cycle) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((((Cycle /\ Cycle) /\ Cycle) /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)))) /\ (Cycle /\ Cycle)) /\ SearchBase) /\ SearchBase) /\ SearchBase)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/this#_0	@ ((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges)
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/this#_0	@ (((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/this#_0	@ EdgeObjects
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new Graph$Comparator1/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/this#_0	@ StronglyConnected
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph$Comparator3/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/this#_0	@ MSTKruskal
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph$Comparator2/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/this#_0	@ MSTPrim
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/$r0	@ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))))
<<unique-hcontext>>	<Graph: VertexIter getVertices()>/new VertexIter/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/vxiter#_161	@ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) \/ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim))
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<Graph: void display()>/edgeiter_$$A_1#_177	@ (((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@parameter0	@ (((((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void display()>/@this	@ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/@this	@ ((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/@this	@ ((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/@this	@ ((((((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ ((((((Prog /\ Number) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Number) /\ Number) /\ (Prog /\ Number)) /\ Number)) /\ Number) /\ Number)) /\ (Prog /\ Prog)) /\ ((Number /\ Number) /\ Number)) \/ (((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ ((((((Prog /\ Connected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Connected) /\ Connected) /\ (Prog /\ Connected)) /\ Connected)) /\ Connected) /\ Connected)) /\ (Prog /\ Prog)) /\ ((Connected /\ Connected) /\ Connected))) \/ (((StronglyConnected /\ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))) /\ (Prog /\ Prog)) /\ StronglyConnected)) \/ (((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((((((Cycle /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Cycle /\ Prog) /\ Cycle) /\ (Cycle /\ Prog)) /\ Cycle)) /\ Cycle) /\ Cycle)) /\ (Prog /\ Prog)) /\ ((Cycle /\ Cycle) /\ Cycle)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/@this	@ (((StronglyConnected /\ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))) /\ (Prog /\ Prog)) /\ StronglyConnected)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/@this	@ ((((StronglyConnected /\ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))) /\ (Prog /\ Prog)) /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ Transpose)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/@this	@ ((((MSTKruskal /\ ((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog))) /\ (Prog /\ Prog)) /\ (((MSTKruskal /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/@this	@ ((((MSTPrim /\ ((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog))) /\ (Prog /\ Prog)) /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ EdgeObjects)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/v1#_278	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ (((MSTPrim /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ MSTPrim) /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ EdgeObjects))
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/w#_0	@ (((((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: void display()>/this#_0	@ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>/this#_0	@ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>/this#_0	@ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/this#_0	@ ((((((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ ((((((Prog /\ Number) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Number) /\ Number) /\ (Prog /\ Number)) /\ Number)) /\ Number) /\ Number)) /\ (Prog /\ Prog)) /\ ((Number /\ Number) /\ Number)) \/ (((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ ((((((Prog /\ Connected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Prog /\ Connected) /\ Connected) /\ (Prog /\ Connected)) /\ Connected)) /\ Connected) /\ Connected)) /\ (Prog /\ Prog)) /\ ((Connected /\ Connected) /\ Connected))) \/ (((StronglyConnected /\ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))) /\ (Prog /\ Prog)) /\ StronglyConnected)) \/ (((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((((((Cycle /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ ((((Cycle /\ Prog) /\ Cycle) /\ (Cycle /\ Prog)) /\ Cycle)) /\ Cycle) /\ Cycle)) /\ (Prog /\ Prog)) /\ ((Cycle /\ Cycle) /\ Cycle)))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/this#_0	@ (((StronglyConnected /\ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))) /\ (Prog /\ Prog)) /\ StronglyConnected)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/this#_0	@ (((((StronglyConnected /\ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))) /\ (Prog /\ Prog)) /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ Transpose) /\ Transpose)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/this#_0	@ (((((MSTKruskal /\ ((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog))) /\ (Prog /\ Prog)) /\ (((MSTKruskal /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects)) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/this#_0	@ (((((MSTPrim /\ ((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog))) /\ (Prog /\ Prog)) /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ G_NoEdges))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/@parameter0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/@parameter1	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/@parameter0	@ ((((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/@parameter0	@ (((((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/@parameter0	@ StronglyConnected
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/@parameter0	@ MSTKruskal
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/@parameter0	@ MSTPrim
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<VertexIter: void <init>(Graph)>/g#_0	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/start#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/end#_0	@ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/l1#_0	@ ((((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges))
<<unique-hcontext>>	Vertex::: (Mock)	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/l1#_0	@ (((((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ EdgeObjects
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/l1#_0	@ StronglyConnected
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/l1#_0	@ MSTKruskal
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/l1#_0	@ MSTPrim
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ (((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)) /\ G_NoEdges) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ G_NoEdges))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511	@ (((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ (((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/@parameter0	@ ((((((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/@parameter0	@ ((((((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/@parameter0	@ ((((((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected)) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/@parameter0	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (MSTPrim /\ Prog)) /\ (MSTPrim /\ Prog))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/l1#_0	@ ((((((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/l1#_0	@ ((((((((MSTPrim /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/l1#_0	@ ((((((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected)) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/r#_0	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (MSTPrim /\ Prog)) /\ (MSTPrim /\ Prog))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges)
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/$r0	@ ((((StronglyConnected /\ ((((Prog /\ StronglyConnected) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (Prog /\ StronglyConnected))) /\ (Prog /\ Prog)) /\ StronglyConnected) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/$r0	@ (((EdgeObjects /\ EdgeObjects) /\ (((((MSTKruskal /\ ((((MSTKruskal /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ Prog))) /\ (Prog /\ Prog)) /\ (((MSTKruskal /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects)) /\ EdgeObjects) /\ EdgeObjects)) /\ (GEN_Edges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Graph: Graph prim(Vertex)>/root#_522	@ (((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (MSTPrim /\ Prog)) /\ (MSTPrim /\ Prog)) /\ MSTPrim)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted) /\ Weighted)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/$r4	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph kruskal()>/theNewEdge#_511	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Graph: Graph prim(Vertex)>/theNewEdge#_663	@ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)) /\ (Undirected /\ G_NoEdges))))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges))))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges))))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges))))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@parameter0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges))))
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/@this	@ ((((SearchBase /\ (((((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected)) /\ StronglyConnected) /\ (SearchBase /\ StronglyConnected)) /\ StronglyConnected)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/@this	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal) /\ MSTKruskal) \/ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim) /\ MSTPrim)) /\ (Undirected /\ G_NoEdges)))) /\ G_NoEdges)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges)))) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges)))) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges)))) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/n#_0	@ ((((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges)) \/ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges) /\ (((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Undirected /\ G_NoEdges)))) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph strongComponents()>/new WorkSpaceTranspose/0	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>/this#_0	@ (((((SearchBase /\ (((((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected)) /\ StronglyConnected) /\ (SearchBase /\ StronglyConnected)) /\ StronglyConnected) /\ StronglyConnected)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: EdgeIter getEdges()>/this#_0	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ EdgeObjects
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ (((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/@this	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/@this	@ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<VertexIter: void <init>()>/@this	@ ((((((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/@this	@ (((((((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/@this	@ EdgeObjects
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	Graph::: (Mock)	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ EdgeObjects
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ ((((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ (Prog /\ Prog)) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ (Prog /\ Prog)) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/this#_0	@ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void setWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted) /\ Weighted)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted) /\ Weighted)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void addWeight(int)>/this#_0	@ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted) /\ Weighted)
<<unique-hcontext>>	<Vertex: VertexIter getNeighbors()>/new Vertex$VertexIter1/0	<<unique-context>>	<VertexIter: void <init>()>/this#_0	@ ((((((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Vertex: EdgeIter getEdges()>/new Vertex$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/this#_0	@ (((((((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-hcontext>>	<Graph: EdgeIter getEdges()>/new Graph$EdgeIter1/0	<<unique-context>>	<EdgeIter: void <init>()>/this#_0	@ EdgeObjects
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/$r0	@ (((G_NoEdges /\ G_NoEdges) /\ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ (G_NoEdges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/3	<<unique-context>>	<Vertex: void addWeight(int)>/$r1	@ (((Weighted /\ (Weighted /\ G_NoEdges)) /\ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted) /\ Weighted)) /\ ((Weighted /\ G_NoEdges) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Vertex: void addWeight(int)>/$r2	@ (((Weighted /\ (Weighted /\ GN_OnlyNeighbors)) /\ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted) /\ Weighted)) /\ (GN_OnlyNeighbors /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<Vertex: void <init>()>/new java.util.LinkedList/0	<<unique-context>>	<Vertex: void setWeight(int)>/$r0	@ ((((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges)) /\ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges))) /\ (G_NoEdges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@parameter0	@ (((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ (MSTPrim /\ G_NoEdges)) /\ MSTPrim) /\ G_NoEdges) /\ (((((MSTPrim /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ MSTPrim) /\ (EdgeObjects /\ EdgeObjects)) /\ (((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ EdgeObjects))) /\ MSTPrim))
<<unique-hcontext>>	<<null pseudo heap>>	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/the_edge#_0	@ ((((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ (MSTPrim /\ G_NoEdges)) /\ MSTPrim) /\ G_NoEdges) /\ (((((MSTPrim /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)) /\ MSTPrim) /\ (EdgeObjects /\ EdgeObjects)) /\ (((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ EdgeObjects))) /\ MSTPrim)) /\ G_NoEdges)
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/@parameter0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ (((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ (Transpose /\ Transpose)) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ (Transpose /\ Transpose)) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ (((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ MSTKruskal) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ MSTKruskal) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/@this	@ (((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ MSTPrim) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ MSTPrim) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges))
<<unique-hcontext>>	<Main: void main(java.lang.String[])>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/l1#_0	@ ((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ ((((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ (Transpose /\ Transpose)) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Transpose /\ Transpose)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ (Transpose /\ Transpose)) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ ((((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ MSTKruskal) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTKruskal /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTKruskal) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ MSTKruskal) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Vertex/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>/this#_0	@ ((((((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ MSTPrim) /\ (MSTKruskal /\ G_NoEdges)) /\ G_NoEdges) \/ ((((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ (MSTPrim /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ MSTPrim) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ MSTPrim) /\ (MSTPrim /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/$r0	@ ((EdgeObjects /\ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)) /\ (GEN_Edges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/@parameter0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/l1#_0	@ ((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph kruskal()>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))) /\ MSTKruskal) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph prim(Vertex)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))) /\ MSTPrim) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: void <init>()>/new java.util.LinkedList/1	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/$r0	@ ((((EdgeObjects /\ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)) /\ (GEN_Edges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/@parameter0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
<<unique-hcontext>>	<Graph: Graph computeTranspose(Graph)>/new Graph/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>/l0#_0	@ ((((((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
