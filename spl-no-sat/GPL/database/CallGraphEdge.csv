<<unique-context>>	<Main: void main(java.lang.String[])>/Main.readWeights/0	<<unique-context>>	<Main: void readWeights(Graph,int)>	@ ((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Main.addEdge/0	<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>	@ ((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.startProfile/0	<<unique-context>>	<Graph: void startProfile()>	@ ((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.stopProfile/0	<<unique-context>>	<Graph: void stopProfile()>	@ ((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.resumeProfile/0	<<unique-context>>	<Graph: void resumeProfile()>	@ ((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.endProfile/0	<<unique-context>>	<Graph: void endProfile()>	@ ((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/java.lang.StringBuilder.<init>/0	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ (Prog /\ Prog)) /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/java.lang.StringBuilder.<init>/1	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ (Prog /\ Prog)) /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Graph: void endProfile()>/java.lang.StringBuilder.<init>/0	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ ((((Benchmark /\ (Benchmark /\ Benchmark)) /\ (Benchmark /\ Benchmark)) /\ ((Benchmark /\ (Benchmark /\ Benchmark)) /\ Benchmark)) /\ (Benchmark /\ Benchmark))
<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>/java.util.Collections.sort/0	<<unique-context>>	<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>/java.util.Collections.sort/0	<<unique-context>>	<java.util.Collections: void sort(java.util.List,java.util.Comparator)>	@ ((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-context>>	<Graph: void run(Vertex)>/Graph.stopProfile/0	<<unique-context>>	<Graph: void stopProfile()>	@ (MSTKruskal /\ Prog)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.resumeProfile/0	<<unique-context>>	<Graph: void resumeProfile()>	@ (MSTKruskal /\ Prog)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.stopProfile/1	<<unique-context>>	<Graph: void stopProfile()>	@ (MSTPrim /\ Prog)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.resumeProfile/1	<<unique-context>>	<Graph: void resumeProfile()>	@ (MSTPrim /\ Prog)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.stopProfile/2	<<unique-context>>	<Graph: void stopProfile()>	@ (Prog /\ StronglyConnected)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.resumeProfile/2	<<unique-context>>	<Graph: void resumeProfile()>	@ (Prog /\ StronglyConnected)
<<unique-context>>	<Main: void main(java.lang.String[])>/Vertex.assignName/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.<init>/0	<<unique-context>>	<Graph: void <init>()>	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Vertex.<init>/0	<<unique-context>>	<Vertex: void <init>()>	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.runBenchmark/0	<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.readNumber/0	<<unique-context>>	<Graph: int readNumber()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.readNumber/1	<<unique-context>>	<Graph: int readNumber()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.readNumber/2	<<unique-context>>	<Graph: int readNumber()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.readNumber/3	<<unique-context>>	<Graph: int readNumber()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.readNumber/4	<<unique-context>>	<Graph: int readNumber()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.addVertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.readNumber/5	<<unique-context>>	<Graph: int readNumber()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.readNumber/6	<<unique-context>>	<Graph: int readNumber()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.stopBenchmark/0	<<unique-context>>	<Graph: void stopBenchmark()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.findsVertex/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.run/0	<<unique-context>>	<Graph: void run(Vertex)>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-context>>	<Main: void main(java.lang.String[])>/Graph.display/0	<<unique-context>>	<Graph: void display()>	@ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/0	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ (Weighted /\ G_NoEdges)
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/1	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/2	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/3	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ Number
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/4	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ Connected
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/5	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ StronglyConnected
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/6	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ Cycle
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/7	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ MSTKruskal
<<unique-context>>	<Vertex: void display()>/java.lang.StringBuilder.<init>/8	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ MSTPrim
<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/java.lang.StringBuilder.<init>/0	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ ((((Benchmark /\ (Benchmark /\ Benchmark)) /\ (Benchmark /\ Benchmark)) /\ ((Benchmark /\ (Benchmark /\ Benchmark)) /\ Benchmark)) /\ (Benchmark /\ Benchmark))
<<unique-context>>	<Graph: void run(Vertex)>/java.lang.StringBuilder.<init>/0	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ (Cycle /\ Prog)
<<unique-context>>	<Edge: void display()>/java.lang.StringBuilder.<init>/0	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ ((((EdgeObjects /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ ((EdgeObjects /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ Weighted)))
<<unique-context>>	<Edge: void display()>/java.lang.StringBuilder.<init>/1	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects))
<<unique-context>>	<Neighbor: void display()>/java.lang.StringBuilder.<init>/0	<<unique-context>>	<java.lang.StringBuilder: void <init>(java.lang.String)>	@ ((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ ((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors))
<<unique-context>>	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator3.compare/0	<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@ MSTKruskal
<<unique-context>>	<Vertex: void setWeight(int)>/Vertex.addWeight/0	<<unique-context>>	<Vertex: void addWeight(int)>	@ (((((Weighted /\ G_NoEdges) /\ ((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges))) /\ ((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges))) /\ (Weighted /\ G_NoEdges)) /\ ((((((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges)) /\ Weighted) /\ ((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges))) /\ (Weighted /\ G_NoEdges)) /\ Weighted))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/Vertex.getNeighbors/0	<<unique-context>>	<Vertex: VertexIter getNeighbors()>	@ ((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/Vertex.getNeighbors/1	<<unique-context>>	<Vertex: VertexIter getNeighbors()>	@ ((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges))
<<unique-context>>	<Vertex: void display()>/Vertex.getNeighbors/0	<<unique-context>>	<Vertex: VertexIter getNeighbors()>	@ G_NoEdges
<<unique-context>>	<Graph: void run(Vertex)>/Graph.connectedComponents/0	<<unique-context>>	<Graph: void connectedComponents()>	@ ((Prog /\ Connected) /\ ((((Prog /\ Connected) /\ Connected) /\ (Prog /\ Connected)) /\ Connected))
<<unique-context>>	<Graph: void run(Vertex)>/Graph.cycleCheck/0	<<unique-context>>	<Graph: boolean cycleCheck()>	@ ((Cycle /\ Prog) /\ ((((Cycle /\ Prog) /\ Cycle) /\ (Cycle /\ Prog)) /\ Cycle))
<<unique-context>>	<Graph: void run(Vertex)>/Graph.kruskal/0	<<unique-context>>	<Graph: Graph kruskal()>	@ (MSTKruskal /\ Prog)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.prim/0	<<unique-context>>	<Graph: Graph prim(Vertex)>	@ (MSTPrim /\ Prog)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.numberVertices/0	<<unique-context>>	<Graph: void numberVertices()>	@ ((Prog /\ Number) /\ ((((Prog /\ Number) /\ Number) /\ (Prog /\ Number)) /\ Number))
<<unique-context>>	<Graph: void run(Vertex)>/Graph.strongComponents/0	<<unique-context>>	<Graph: Graph strongComponents()>	@ (Prog /\ StronglyConnected)
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/Graph.getVertices/0	<<unique-context>>	<Graph: VertexIter getVertices()>	@ SearchBase
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/Graph.getVertices/1	<<unique-context>>	<Graph: VertexIter getVertices()>	@ SearchBase
<<unique-context>>	<Graph: void numberVertices()>/Graph.graphSearch/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>	@ ((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ Number) /\ ((Number /\ Number) /\ Number))
<<unique-context>>	<Graph: void connectedComponents()>/Graph.graphSearch/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>	@ ((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ Connected) /\ ((Connected /\ Connected) /\ Connected))
<<unique-context>>	<Graph: Graph strongComponents()>/Graph.graphSearch/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>	@ StronglyConnected
<<unique-context>>	<Graph: Graph strongComponents()>/Graph.sortVertices/0	<<unique-context>>	<Graph: void sortVertices(java.util.Comparator)>	@ StronglyConnected
<<unique-context>>	<Graph: Graph strongComponents()>/Graph.computeTranspose/0	<<unique-context>>	<Graph: Graph computeTranspose(Graph)>	@ (StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/0	<<unique-context>>	<Graph: VertexIter getVertices()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Vertex.assignName/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/2	<<unique-context>>	<Graph: VertexIter getVertices()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: boolean cycleCheck()>/Graph.graphSearch/0	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>	@ ((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ Cycle) /\ ((Cycle /\ Cycle) /\ Cycle))
<<unique-context>>	<Graph: Graph kruskal()>/Graph.getVertices/0	<<unique-context>>	<Graph: VertexIter getVertices()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.getEdges/0	<<unique-context>>	<Graph: EdgeIter getEdges()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.sortEdges/0	<<unique-context>>	<Graph: void sortEdges(java.util.Comparator)>	@ (MSTKruskal /\ (((MSTKruskal /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects))
<<unique-context>>	<Graph: Graph kruskal()>/Graph.getEdges/1	<<unique-context>>	<Graph: EdgeIter getEdges()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.getVertices/1	<<unique-context>>	<Graph: VertexIter getVertices()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Vertex.assignName/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>	@ MSTKruskal
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.getVertices/0	<<unique-context>>	<Graph: VertexIter getVertices()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.getVertices/1	<<unique-context>>	<Graph: VertexIter getVertices()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.getVertices/2	<<unique-context>>	<Graph: VertexIter getVertices()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Vertex.assignName/0	<<unique-context>>	<Vertex: Vertex assignName(java.lang.String)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.getVertices/3	<<unique-context>>	<Graph: VertexIter getVertices()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.findsVertex/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.findsEdge/0	<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@ (MSTPrim /\ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects))
<<unique-context>>	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator2.compare/0	<<unique-context>>	<Graph$Comparator2: int compare(Vertex,Vertex)>	@ MSTPrim
<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/Edge.setWeight/0	<<unique-context>>	<Edge: void setWeight(int)>	@ ((((EdgeObjects /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ EdgeObjects) /\ (((((EdgeObjects /\ (EdgeObjects /\ Weighted)) /\ (EdgeObjects /\ Weighted)) /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ EdgeObjects) /\ (EdgeObjects /\ Weighted)))
<<unique-context>>	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator1.compare/0	<<unique-context>>	<Graph$Comparator1: int compare(Vertex,Vertex)>	@ StronglyConnected
<<unique-context>>	<EdgeIter: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>
<<unique-context>>	<GlobalVarsWrapper: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ BFS
<<unique-context>>	<CycleWorkSpace: void <init>()>/WorkSpace.<init>/0	<<unique-context>>	<WorkSpace: void <init>()>	@ Cycle
<<unique-context>>	<Main: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ Prog
<<unique-context>>	<WorkSpaceTranspose: void <init>()>/WorkSpace.<init>/0	<<unique-context>>	<WorkSpace: void <init>()>	@ StronglyConnected
<<unique-context>>	<Vertex: void adjustAdorns(Vertex,int)>/java.lang.Integer.<init>/0	<<unique-context>>	<java.lang.Integer: void <init>(int)>	@ ((((G_NoEdges /\ (G_NoEdges /\ (Weighted /\ G_NoEdges))) /\ (G_NoEdges /\ (Weighted /\ G_NoEdges))) /\ ((G_NoEdges /\ (Weighted /\ G_NoEdges)) /\ G_NoEdges)) /\ (G_NoEdges /\ (Weighted /\ G_NoEdges)))
<<unique-context>>	<Vertex: VertexIter getNeighbors()>/Vertex$VertexIter1.<init>/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>	@ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))
<<unique-context>>	<Vertex: EdgeIter getEdges()>/Vertex$EdgeIter1.<init>/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>	@ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-context>>	<Vertex: void addWeight(int)>/java.lang.Integer.<init>/0	<<unique-context>>	<java.lang.Integer: void <init>(int)>	@ ((((Weighted /\ (Weighted /\ (Weighted /\ G_NoEdges))) /\ (Weighted /\ (Weighted /\ G_NoEdges))) /\ ((Weighted /\ (Weighted /\ G_NoEdges)) /\ Weighted)) /\ (Weighted /\ (Weighted /\ G_NoEdges)))
<<unique-context>>	<Graph: VertexIter getVertices()>/VertexIter.<init>/0	<<unique-context>>	<VertexIter: void <init>(Graph)>
<<unique-context>>	<Graph: EdgeIter getEdges()>/Graph$EdgeIter1.<init>/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>	@ EdgeObjects
<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/Neighbor.<init>/0	<<unique-context>>	<Neighbor: void <init>(Vertex,int)>	@ ((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))) /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors))) /\ ((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ ((Undirected /\ Weighted) /\ GN_OnlyNeighbors)))
<<unique-context>>	<Graph: void runBenchmark(java.lang.String)>/java.io.FileReader.<init>/0	<<unique-context>>	<java.io.FileReader: void <init>(java.lang.String)>	@ ((((Benchmark /\ (Benchmark /\ Benchmark)) /\ (Benchmark /\ Benchmark)) /\ ((Benchmark /\ Benchmark) /\ Benchmark)) /\ (Benchmark /\ Benchmark))
<<unique-context>>	<Graph: int readNumber()>/java.lang.String.<init>/0	<<unique-context>>	<java.lang.String: void <init>(char[])>	@ ((((Benchmark /\ (Benchmark /\ Benchmark)) /\ (Benchmark /\ Benchmark)) /\ ((Benchmark /\ Benchmark) /\ Benchmark)) /\ (Benchmark /\ Benchmark))
<<unique-context>>	<Graph: int readNumber()>/java.lang.String.<init>/1	<<unique-context>>	<java.lang.String: void <init>(java.lang.String)>	@ ((((Benchmark /\ (Benchmark /\ Benchmark)) /\ (Benchmark /\ Benchmark)) /\ ((Benchmark /\ Benchmark) /\ Benchmark)) /\ (Benchmark /\ Benchmark))
<<unique-context>>	<Graph: void numberVertices()>/NumberWorkSpace.<init>/0	<<unique-context>>	<NumberWorkSpace: void <init>()>	@ ((((Number /\ (Number /\ Number)) /\ (Number /\ Number)) /\ ((Number /\ Number) /\ Number)) /\ (Number /\ Number))
<<unique-context>>	<Graph: void connectedComponents()>/RegionWorkSpace.<init>/0	<<unique-context>>	<RegionWorkSpace: void <init>()>	@ ((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected))
<<unique-context>>	<Graph: Graph strongComponents()>/FinishTimeWorkSpace.<init>/0	<<unique-context>>	<FinishTimeWorkSpace: void <init>()>	@ StronglyConnected
<<unique-context>>	<Graph: Graph strongComponents()>/Graph$Comparator1.<init>/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>	@ StronglyConnected
<<unique-context>>	<Graph: Graph strongComponents()>/WorkSpaceTranspose.<init>/0	<<unique-context>>	<WorkSpaceTranspose: void <init>()>	@ StronglyConnected
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/java.util.HashMap.<init>/0	<<unique-context>>	<java.util.HashMap: void <init>()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Graph.<init>/0	<<unique-context>>	<Graph: void <init>()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Vertex.<init>/0	<<unique-context>>	<Vertex: void <init>()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))
<<unique-context>>	<Graph: boolean cycleCheck()>/CycleWorkSpace.<init>/0	<<unique-context>>	<CycleWorkSpace: void <init>()>	@ ((((Cycle /\ (Cycle /\ Cycle)) /\ (Cycle /\ Cycle)) /\ ((Cycle /\ Cycle) /\ Cycle)) /\ (Cycle /\ Cycle))
<<unique-context>>	<Graph: Graph kruskal()>/java.util.LinkedList.<init>/0	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/java.util.LinkedList.<init>/1	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/java.util.LinkedList.<init>/2	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph$Comparator3.<init>/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.<init>/0	<<unique-context>>	<Graph: void <init>()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Vertex.<init>/0	<<unique-context>>	<Vertex: void <init>()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph prim(Vertex)>/java.util.LinkedList.<init>/0	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/java.util.HashSet.<init>/0	<<unique-context>>	<java.util.HashSet: void <init>()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph$Comparator2.<init>/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.<init>/0	<<unique-context>>	<Graph: void <init>()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Vertex.<init>/0	<<unique-context>>	<Vertex: void <init>()>	@ MSTPrim
<<unique-context>>	<WorkSpace: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ SearchBase
<<unique-context>>	<NumberWorkSpace: void <init>()>/WorkSpace.<init>/0	<<unique-context>>	<WorkSpace: void <init>()>	@ Number
<<unique-context>>	<FinishTimeWorkSpace: void <init>()>/WorkSpace.<init>/0	<<unique-context>>	<WorkSpace: void <init>()>	@ StronglyConnected
<<unique-context>>	<RegionWorkSpace: void <init>()>/WorkSpace.<init>/0	<<unique-context>>	<WorkSpace: void <init>()>	@ Connected
<<unique-context>>	<Edge: void <init>(Vertex,Vertex,int)>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ EdgeObjects
<<unique-context>>	<Neighbor: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>
<<unique-context>>	<Neighbor: void <init>(Vertex,int)>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ GN_OnlyNeighbors
<<unique-context>>	<Neighbor: void <init>(Vertex,Edge)>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ GEN_Edges
<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/0	<<unique-context>>	<Vertex: int getWeight()>	@ ((((MSTKruskal /\ (MSTKruskal /\ MSTKruskal)) /\ (MSTKruskal /\ MSTKruskal)) /\ MSTKruskal) /\ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges))
<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/1	<<unique-context>>	<Vertex: int getWeight()>	@ ((((MSTKruskal /\ (MSTKruskal /\ MSTKruskal)) /\ (MSTKruskal /\ MSTKruskal)) /\ MSTKruskal) /\ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges))
<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/2	<<unique-context>>	<Vertex: int getWeight()>	@ ((((MSTKruskal /\ (MSTKruskal /\ MSTKruskal)) /\ (MSTKruskal /\ MSTKruskal)) /\ MSTKruskal) /\ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges))
<<unique-context>>	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/3	<<unique-context>>	<Vertex: int getWeight()>	@ ((((MSTKruskal /\ (MSTKruskal /\ MSTKruskal)) /\ (MSTKruskal /\ MSTKruskal)) /\ MSTKruskal) /\ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges))
<<unique-context>>	<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	<<unique-context>>	<WorkSpace: void init_vertex(Vertex)>	@ ((((SearchBase /\ (SearchBase /\ SearchBase)) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ (((((SearchBase /\ SearchBase) /\ SearchBase) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ SearchBase))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	<<unique-context>>	<WorkSpace: void preVisitAction(Vertex)>	@ SearchBase
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	<<unique-context>>	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ ((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ SearchBase) /\ (DFS /\ SearchBase)) /\ SearchBase))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	<<unique-context>>	<WorkSpace: void postVisitAction(Vertex)>	@ SearchBase
<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/Vertex.addEdge/0	<<unique-context>>	<Vertex: void addEdge(Neighbor)>	@ ((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ (((((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/1	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/3	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/5	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/7	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<<unique-context>>	<WorkSpace: void nextRegionAction(Vertex)>	@ SearchBase
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Graph.addVertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/1	<<unique-context>>	<Graph: VertexIter getVertices()>	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/Graph.addEdge/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph kruskal()>/java.util.LinkedList.add/0	<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.addVertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.findsVertex/0	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.findsVertex/1	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/Graph.addEdge/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ MSTKruskal
<<unique-context>>	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/0	<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/1	<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/java.util.LinkedList.remove/0	<<unique-context>>	<java.util.LinkedList: boolean remove(java.lang.Object)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/2	<<unique-context>>	<java.util.LinkedList: void add(int,java.lang.Object)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/3	<<unique-context>>	<java.util.LinkedList: void add(int,java.lang.Object)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.addVertex/0	<<unique-context>>	<Graph: void addVertex(Vertex)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.findsVertex/1	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.findsVertex/2	<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/Graph.addEdge/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ MSTPrim
<<unique-context>>	<Edge: void adjustAdorns(EdgeIfc)>/EdgeIfc.getWeight/0	<<unique-context>>	<Vertex: int getWeight()>	@ ((((EdgeObjects /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ EdgeObjects) /\ (((EdgeObjects /\ (EdgeObjects /\ Weighted)) /\ EdgeObjects) /\ G_NoEdges))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getEdges/0	<<unique-context>>	<Vertex: EdgeIter getEdges()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/0	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/4	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Graph: Graph prim(Vertex)>/Vertex.getName/0	<<unique-context>>	<Vertex: java.lang.String getName()>	@ MSTPrim
<<unique-context>>	<Main: EdgeIfc addEdge(Graph,int)>/Graph.addEdge/0	<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))
<<unique-context>>	<GlobalVarsWrapper: void <clinit>()>/java.util.LinkedList.<init>/0	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ ((((BFS /\ (BFS /\ BFS)) /\ (BFS /\ BFS)) /\ ((BFS /\ BFS) /\ BFS)) /\ (BFS /\ BFS))
<<unique-context>>	<Graph: void addEdge(Vertex,Neighbor)>/Vertex.addEdge/1	<<unique-context>>	<Vertex: void addEdge(Neighbor)>	@ ((((GN_OnlyNeighbors /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ (((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)) /\ (((((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors))
<<unique-context>>	<Edge: void display()>/Vertex.getName/0	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Edge: void display()>/Vertex.getName/1	<<unique-context>>	<Vertex: java.lang.String getName()>	@ ((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)) \/ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects))) /\ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/java.util.LinkedList.add/0	<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>	@ ((((SearchBase /\ BFS) /\ ((((BFS /\ (BFS /\ BFS)) /\ (BFS /\ BFS)) /\ ((BFS /\ BFS) /\ BFS)) /\ (SearchBase /\ BFS))) /\ (BFS /\ BFS)) /\ (SearchBase /\ BFS))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/java.util.LinkedList.remove/0	<<unique-context>>	<java.util.LinkedList: java.lang.Object remove(int)>	@ ((((SearchBase /\ BFS) /\ ((((BFS /\ (BFS /\ BFS)) /\ (BFS /\ BFS)) /\ ((BFS /\ BFS) /\ BFS)) /\ (SearchBase /\ BFS))) /\ (BFS /\ BFS)) /\ (SearchBase /\ BFS))
<<unique-context>>	<Graph: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) \/ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)))) \/ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ MSTKruskal)) \/ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ MSTPrim))
<<unique-context>>	<Vertex: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) \/ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose)))) \/ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ MSTKruskal)) \/ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ MSTPrim))
<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/Graph.getVertices/0	<<unique-context>>	<Graph: VertexIter getVertices()>	@ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) \/ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim))
<<unique-context>>	<Graph: void display()>/Graph.getEdges/0	<<unique-context>>	<Graph: EdgeIter getEdges()>	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges)
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/0	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>	@ ((((DFS /\ SearchBase) /\ (((((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)) /\ (DFS /\ SearchBase)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((DFS /\ SearchBase) /\ G_NoEdges))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/0	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>	@ ((((DFS /\ SearchBase) /\ (((((DFS /\ SearchBase) /\ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)) /\ (DFS /\ SearchBase)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((DFS /\ SearchBase) /\ G_NoEdges))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/1	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>	@ ((((SearchBase /\ BFS) /\ (((((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)) /\ (SearchBase /\ BFS)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((SearchBase /\ BFS) /\ G_NoEdges))
<<unique-context>>	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/1	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>	@ ((((SearchBase /\ BFS) /\ (((((SearchBase /\ BFS) /\ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)) /\ (SearchBase /\ BFS)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges)))) /\ (G_NoEdges /\ G_NoEdges)) /\ ((SearchBase /\ BFS) /\ G_NoEdges))
<<unique-context>>	<Vertex: void display()>/VertexIter.next/0	<<unique-context>>	<Vertex$VertexIter1: Vertex next()>	@ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges))) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges)
<<unique-context>>	<Vertex: void display()>/VertexIter.hasNext/0	<<unique-context>>	<Vertex$VertexIter1: boolean hasNext()>	@ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ G_NoEdges))) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges)
<<unique-context>>	<Graph: void run(Vertex)>/Graph.display/0	<<unique-context>>	<Graph: void display()>	@ ((((MSTKruskal /\ Prog) /\ (((MSTKruskal /\ Prog) /\ MSTKruskal) /\ MSTKruskal)) /\ MSTKruskal) /\ (MSTKruskal /\ Prog))
<<unique-context>>	<Graph: void run(Vertex)>/Graph.display/1	<<unique-context>>	<Graph: void display()>	@ ((((MSTPrim /\ Prog) /\ (((MSTPrim /\ Prog) /\ MSTPrim) /\ MSTPrim)) /\ MSTPrim) /\ (MSTPrim /\ Prog))
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/0	<<unique-context>>	<VertexIter: boolean hasNext()>	@ SearchBase
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/0	<<unique-context>>	<VertexIter: Vertex next()>	@ SearchBase
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/1	<<unique-context>>	<VertexIter: boolean hasNext()>	@ SearchBase
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/1	<<unique-context>>	<VertexIter: Vertex next()>	@ SearchBase
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/2	<<unique-context>>	<VertexIter: boolean hasNext()>	@ SearchBase
<<unique-context>>	<Graph: Graph strongComponents()>/Graph.graphSearch/1	<<unique-context>>	<Graph: void graphSearch(WorkSpace)>	@ (((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected)
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/0	<<unique-context>>	<VertexIter: Vertex next()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/0	<<unique-context>>	<VertexIter: boolean hasNext()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/1	<<unique-context>>	<VertexIter: Vertex next()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/2	<<unique-context>>	<VertexIter: boolean hasNext()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ Transpose) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: Graph kruskal()>/VertexIter.next/0	<<unique-context>>	<VertexIter: Vertex next()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/VertexIter.hasNext/0	<<unique-context>>	<VertexIter: boolean hasNext()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/EdgeIter.next/0	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>	@ (((MSTKruskal /\ ((MSTKruskal /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (MSTKruskal /\ EdgeObjects))
<<unique-context>>	<Graph: Graph kruskal()>/EdgeIter.hasNext/0	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>	@ (((MSTKruskal /\ ((MSTKruskal /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (MSTKruskal /\ EdgeObjects))
<<unique-context>>	<Graph: Graph kruskal()>/VertexIter.next/1	<<unique-context>>	<VertexIter: Vertex next()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph kruskal()>/VertexIter.hasNext/1	<<unique-context>>	<VertexIter: boolean hasNext()>	@ MSTKruskal
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.next/0	<<unique-context>>	<VertexIter: Vertex next()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/0	<<unique-context>>	<VertexIter: boolean hasNext()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.next/1	<<unique-context>>	<VertexIter: Vertex next()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/1	<<unique-context>>	<VertexIter: boolean hasNext()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.next/2	<<unique-context>>	<VertexIter: Vertex next()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/2	<<unique-context>>	<VertexIter: boolean hasNext()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.next/3	<<unique-context>>	<VertexIter: Vertex next()>	@ MSTPrim
<<unique-context>>	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/3	<<unique-context>>	<VertexIter: boolean hasNext()>	@ MSTPrim
<<unique-context>>	<Graph: void <init>()>/java.util.LinkedList.<init>/0	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))
<<unique-context>>	<Graph: void <init>()>/java.util.LinkedList.<init>/1	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (GEN_Edges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ GEN_Edges)
<<unique-context>>	<Vertex: void <init>()>/java.util.LinkedList.<init>/0	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ G_NoEdges) /\ G_NoEdges) /\ (G_NoEdges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges)
<<unique-context>>	<Vertex: void <init>()>/java.util.LinkedList.<init>/1	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ GN_OnlyNeighbors)
<<unique-context>>	<Vertex: void <init>()>/java.util.LinkedList.<init>/2	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (GEN_Edges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ GEN_Edges)
<<unique-context>>	<Vertex: void <init>()>/java.util.LinkedList.<init>/3	<<unique-context>>	<java.util.LinkedList: void <init>()>	@ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((Weighted /\ G_NoEdges) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Weighted /\ G_NoEdges))
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<<unique-context>>	<RegionWorkSpace: void nextRegionAction(Vertex)>	@ (((SearchBase /\ ((((((Connected /\ (Connected /\ Connected)) /\ (Connected /\ Connected)) /\ Connected) /\ ((Connected /\ Connected) /\ Connected)) /\ (Connected /\ Connected)) /\ (((Connected /\ Connected) /\ Connected) /\ (Connected /\ Connected)))) /\ (Connected /\ Connected)) /\ (SearchBase /\ Connected))
<<unique-context>>	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/2	<<unique-context>>	<VertexIter: Vertex next()>	@ ((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ ((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) /\ (Transpose /\ Transpose))) /\ ((Transpose /\ Transpose) /\ Transpose))
<<unique-context>>	<Graph: void addVertex(Vertex)>/java.util.LinkedList.add/0	<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))))
<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex,Vertex$VertexIter1)>/Vertex$VertexIter1.<init>/0	<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>	@ ((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges)
<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex,Vertex$EdgeIter1)>/Vertex$EdgeIter1.<init>/0	<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>	@ (((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-context>>	<VertexIter: void <init>(Graph)>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>
<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph,Graph$EdgeIter1)>/Graph$EdgeIter1.<init>/0	<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>	@ EdgeObjects
<<unique-context>>	<Graph$Comparator1: void <init>(Graph,Graph$Comparator1)>/Graph$Comparator1.<init>/0	<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>	@ StronglyConnected
<<unique-context>>	<Graph$Comparator3: void <init>(Graph,Graph$Comparator3)>/Graph$Comparator3.<init>/0	<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>	@ MSTKruskal
<<unique-context>>	<Graph$Comparator2: void <init>(Graph,Graph$Comparator2)>/Graph$Comparator2.<init>/0	<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>	@ MSTPrim
<<unique-context>>	<Graph: void run(Vertex)>/Graph.display/2	<<unique-context>>	<Graph: void display()>	@ ((((Prog /\ StronglyConnected) /\ ((((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose))) /\ StronglyConnected) /\ ((Prog /\ StronglyConnected) /\ StronglyConnected))) /\ (Transpose /\ Transpose)) /\ (Prog /\ StronglyConnected))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.next/0	<<unique-context>>	<Vertex$EdgeIter1: EdgeIfc next()>	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-context>>	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.hasNext/0	<<unique-context>>	<Vertex$EdgeIter1: boolean hasNext()>	@ (((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (((((((EdgeObjects /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ EdgeObjects)) /\ (EdgeObjects /\ (EdgeObjects /\ EdgeObjects))) /\ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ EdgeObjects)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)))
<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addAdjacent/0	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>	@ (((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ G_NoEdges)
<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addAdjacent/1	<<unique-context>>	<Vertex: void addAdjacent(Vertex)>	@ (((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges))
<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.setWeight/0	<<unique-context>>	<Vertex: void setWeight(int)>	@ (((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Weighted /\ G_NoEdges)) /\ (Weighted /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Weighted /\ G_NoEdges))
<<unique-context>>	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addWeight/0	<<unique-context>>	<Vertex: void addWeight(int)>	@ (((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted))
<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.next/0	<<unique-context>>	<VertexIter: Vertex next()>	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) \/ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim)))
<<unique-context>>	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.hasNext/0	<<unique-context>>	<VertexIter: boolean hasNext()>	@ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) \/ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTKruskal) /\ MSTKruskal)) \/ (((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ MSTPrim) /\ MSTPrim)))
<<unique-context>>	<Graph: void display()>/EdgeIter.next/0	<<unique-context>>	<Graph$EdgeIter1: EdgeIfc next()>	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (GEN_Edges /\ EdgeObjects))
<<unique-context>>	<Graph: void display()>/EdgeIter.hasNext/0	<<unique-context>>	<Graph$EdgeIter1: boolean hasNext()>	@ ((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))) /\ (Prog /\ Prog)) /\ GEN_Edges) /\ GEN_Edges) /\ EdgeObjects) /\ EdgeObjects)) /\ EdgeObjects) /\ (GEN_Edges /\ EdgeObjects))
<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/Graph.access$0/0	<<unique-context>>	<Graph: java.util.LinkedList access$0(Graph)>	@ EdgeObjects
<<unique-context>>	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<<unique-context>>	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@ (((SearchBase /\ (((((StronglyConnected /\ ((((StronglyConnected /\ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)) /\ StronglyConnected) /\ (Transpose /\ Transpose)) /\ ((((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)))) /\ (Transpose /\ Transpose)) /\ StronglyConnected) /\ StronglyConnected) /\ StronglyConnected)) /\ StronglyConnected) /\ (SearchBase /\ StronglyConnected))
<<unique-context>>	<Graph: Graph kruskal()>/EdgeIfc.adjustAdorns/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>	@ ((MSTKruskal /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTKruskal /\ G_NoEdges))) /\ (MSTKruskal /\ G_NoEdges))
<<unique-context>>	<Graph: Graph prim(Vertex)>/EdgeIfc.adjustAdorns/0	<<unique-context>>	<Vertex: void adjustAdorns(EdgeIfc)>	@ ((MSTPrim /\ ((((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))) /\ G_NoEdges) /\ (MSTPrim /\ G_NoEdges))) /\ (MSTPrim /\ G_NoEdges))
<<unique-context>>	<Vertex$VertexIter1: void <init>(Vertex)>/VertexIter.<init>/0	<<unique-context>>	<VertexIter: void <init>()>	@ ((((((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges)) /\ G_NoEdges)
<<unique-context>>	<Vertex$EdgeIter1: void <init>(Vertex)>/EdgeIter.<init>/0	<<unique-context>>	<EdgeIter: void <init>()>	@ (((((((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges)) /\ (((((EdgeObjects /\ G_NoEdges) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges))) /\ (((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ G_NoEdges))) /\ ((EdgeObjects /\ G_NoEdges) /\ (EdgeObjects /\ G_NoEdges)))) /\ (EdgeObjects /\ G_NoEdges))) /\ (EdgeObjects /\ G_NoEdges))
<<unique-context>>	<Graph$EdgeIter1: void <init>(Graph)>/EdgeIter.<init>/0	<<unique-context>>	<EdgeIter: void <init>()>	@ EdgeObjects
<<unique-context>>	<Graph$Comparator1: void <init>(Graph)>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ StronglyConnected
<<unique-context>>	<Graph$Comparator3: void <init>(Graph)>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ MSTKruskal
<<unique-context>>	<Graph$Comparator2: void <init>(Graph)>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ MSTPrim
<<unique-context>>	<Vertex: void addAdjacent(Vertex)>/java.util.LinkedList.add/0	<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>	@ (((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ (((G_NoEdges /\ G_NoEdges) /\ (((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ G_NoEdges) /\ G_NoEdges) \/ (((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ (Undirected /\ G_NoEdges)) /\ (Undirected /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ G_NoEdges)) /\ (G_NoEdges /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))) /\ G_NoEdges) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges))
<<unique-context>>	<Vertex: void addWeight(int)>/java.util.LinkedList.add/0	<<unique-context>>	<java.util.LinkedList: boolean add(java.lang.Object)>	@ (((((Weighted /\ (Weighted /\ (Weighted /\ G_NoEdges))) /\ (Weighted /\ (Weighted /\ G_NoEdges))) /\ (((Weighted /\ (Weighted /\ G_NoEdges)) /\ ((((((((((((((Transpose /\ (Transpose /\ Transpose)) /\ (Transpose /\ Transpose)) /\ (((Transpose /\ Transpose) /\ Transpose) /\ (Transpose /\ Transpose))) /\ (Transpose /\ Transpose)) /\ ((Transpose /\ Transpose) /\ Transpose)) \/ MSTKruskal) \/ MSTPrim) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ ((((((((Prog /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ (Prog /\ Prog)) /\ Prog) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog))))) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ ((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (Prog /\ Prog))) /\ (Prog /\ Prog)) /\ ((((((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((((Prog /\ Prog) /\ Prog) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ Prog)) /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog)))) /\ (Prog /\ Prog)) /\ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)) /\ Weighted) /\ Weighted)) /\ ((Weighted /\ G_NoEdges) /\ ((((Prog /\ (Prog /\ Prog)) /\ (Prog /\ Prog)) /\ ((Prog /\ Prog) /\ Prog)) /\ (Prog /\ Prog))))) /\ (Weighted /\ G_NoEdges)) /\ ((Weighted /\ (Weighted /\ G_NoEdges)) /\ Weighted))
<<unique-context>>	<VertexIter: void <init>()>/java.lang.Object.<init>/0	<<unique-context>>	<java.lang.Object: void <init>()>	@ ((((((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges) /\ G_NoEdges) /\ G_NoEdges) /\ ((((((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ G_NoEdges) /\ G_NoEdges) /\ ((((G_NoEdges /\ (G_NoEdges /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges)) /\ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)) /\ (G_NoEdges /\ G_NoEdges))) /\ G_NoEdges)) /\ G_NoEdges)
