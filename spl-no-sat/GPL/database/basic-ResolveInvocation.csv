Vertex	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/0	<Vertex: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges)
Edge	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/0	<Edge: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (EdgeObjects /\ Weighted))
Neighbor	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/0	<Neighbor: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (Weighted /\ GN_OnlyNeighbors))
Vertex	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/1	<Vertex: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges)
Edge	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/1	<Edge: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (EdgeObjects /\ Weighted))
Neighbor	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/1	<Neighbor: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (Weighted /\ GN_OnlyNeighbors))
Vertex	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/2	<Vertex: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges)
Edge	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/2	<Edge: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (EdgeObjects /\ Weighted))
Neighbor	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/2	<Neighbor: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (Weighted /\ GN_OnlyNeighbors))
Vertex	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/3	<Vertex: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ G_NoEdges)
Edge	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/3	<Edge: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (EdgeObjects /\ Weighted))
Neighbor	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>/EdgeIfc.getWeight/3	<Neighbor: int getWeight()>	@ (((MSTKruskal /\ MSTKruskal) /\ MSTKruskal) /\ (Weighted /\ GN_OnlyNeighbors))
Graph$Comparator3	<Graph$Comparator3: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator3.compare/0	<Graph$Comparator3: int compare(EdgeIfc,EdgeIfc)>	@ MSTKruskal
Graph	<Main: void main(java.lang.String[])>/Graph.runBenchmark/0	<Graph: void runBenchmark(java.lang.String)>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.readNumber/0	<Graph: int readNumber()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.readNumber/1	<Graph: int readNumber()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.readNumber/2	<Graph: int readNumber()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.readNumber/3	<Graph: int readNumber()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.readNumber/4	<Graph: int readNumber()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Vertex	<Main: void main(java.lang.String[])>/Vertex.assignName/0	<Vertex: Vertex assignName(java.lang.String)>	@ ((Prog /\ Prog) /\ Prog)
Graph	<Main: void main(java.lang.String[])>/Graph.addVertex/0	<Graph: void addVertex(Vertex)>	@ ((Prog /\ Prog) /\ Prog)
Graph	<Main: void main(java.lang.String[])>/Graph.readNumber/5	<Graph: int readNumber()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.readNumber/6	<Graph: int readNumber()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.stopBenchmark/0	<Graph: void stopBenchmark()>	@ (((((Prog /\ Prog) /\ Benchmark) /\ (Prog /\ Prog)) /\ Prog) /\ Benchmark)
Graph	<Main: void main(java.lang.String[])>/Graph.findsVertex/0	<Graph: Vertex findsVertex(java.lang.String)>	@ ((Prog /\ Prog) /\ Prog)
Graph	<Main: void main(java.lang.String[])>/Graph.run/0	<Graph: void run(Vertex)>	@ ((Prog /\ Prog) /\ Prog)
Graph	<Main: void main(java.lang.String[])>/Graph.display/0	<Graph: void display()>	@ ((Prog /\ Prog) /\ Prog)
java.io.PrintStream	<Main: void main(java.lang.String[])>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>	@ ((Prog /\ Prog) /\ Prog)
Graph	<Main: EdgeIfc addEdge(Graph,int)>/Graph.addEdge/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ ((Prog /\ Prog) /\ Prog)
java.util.LinkedList	<Vertex: void addAdjacent(Vertex)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ ((G_NoEdges /\ G_NoEdges) /\ G_NoEdges)
java.util.LinkedList	<Vertex: void adjustAdorns(Vertex,int)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ ((G_NoEdges /\ (Weighted /\ G_NoEdges)) /\ G_NoEdges)
java.util.LinkedList	<Vertex: void addEdge(Neighbor)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)
java.util.LinkedList	<Vertex: void addNeighbor(Neighbor)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ ((GEN_Edges /\ GEN_Edges) /\ GEN_Edges)
java.util.LinkedList	<Vertex: void addWeight(int)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ ((Weighted /\ (Weighted /\ G_NoEdges)) /\ Weighted)
Vertex	<Vertex: void setWeight(int)>/Vertex.addWeight/0	<Vertex: void addWeight(int)>	@ ((((((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges)) /\ Weighted) /\ ((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges))) /\ (Weighted /\ G_NoEdges)) /\ Weighted)
Vertex	<Vertex: void setWeight(int)>/Vertex.addWeight/1	<Vertex: void addWeight(int)>	@ ((((((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges)) /\ Weighted) /\ ((Weighted /\ G_NoEdges) /\ (Weighted /\ G_NoEdges))) /\ (Weighted /\ G_NoEdges)) /\ Weighted)
CycleWorkSpace	<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	<CycleWorkSpace: void init_vertex(Vertex)>	@ (((((SearchBase /\ SearchBase) /\ SearchBase) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ Cycle)
WorkSpaceTranspose	<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	<WorkSpace: void init_vertex(Vertex)>	@ (((((SearchBase /\ SearchBase) /\ SearchBase) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ SearchBase)
WorkSpace	<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	<WorkSpace: void init_vertex(Vertex)>	@ (((((SearchBase /\ SearchBase) /\ SearchBase) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ SearchBase)
NumberWorkSpace	<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	<WorkSpace: void init_vertex(Vertex)>	@ (((((SearchBase /\ SearchBase) /\ SearchBase) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ SearchBase)
FinishTimeWorkSpace	<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	<WorkSpace: void init_vertex(Vertex)>	@ (((((SearchBase /\ SearchBase) /\ SearchBase) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ SearchBase)
RegionWorkSpace	<Vertex: void init_vertex(WorkSpace)>/WorkSpace.init_vertex/0	<RegionWorkSpace: void init_vertex(Vertex)>	@ (((((SearchBase /\ SearchBase) /\ SearchBase) /\ (SearchBase /\ SearchBase)) /\ SearchBase) /\ Connected)
CycleWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	<CycleWorkSpace: void preVisitAction(Vertex)>	@ SearchBase
WorkSpaceTranspose	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	<WorkSpaceTranspose: void preVisitAction(Vertex)>	@ (SearchBase /\ StronglyConnected)
WorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	<WorkSpace: void preVisitAction(Vertex)>	@ SearchBase
NumberWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	<NumberWorkSpace: void preVisitAction(Vertex)>	@ SearchBase
FinishTimeWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	<FinishTimeWorkSpace: void preVisitAction(Vertex)>	@ (SearchBase /\ StronglyConnected)
RegionWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.preVisitAction/0	<WorkSpace: void preVisitAction(Vertex)>	@ SearchBase
Vertex	<Vertex: void nodeSearch(WorkSpace)>/Vertex.getNeighbors/0	<Vertex: VertexIter getNeighbors()>	@ ((((DFS /\ SearchBase) /\ G_NoEdges) /\ (DFS /\ SearchBase)) /\ G_NoEdges)
VertexIter	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/0	<VertexIter: Vertex next()>	@ (DFS /\ SearchBase)
Vertex$VertexIter1	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/0	<Vertex$VertexIter1: Vertex next()>	@ ((DFS /\ SearchBase) /\ G_NoEdges)
Vertex$VertexIter2	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/0	<Vertex$VertexIter2: Vertex next()>	@ ((DFS /\ SearchBase) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/0	<Vertex$VertexIter3: Vertex next()>	@ ((DFS /\ SearchBase) /\ GEN_Edges)
CycleWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	<CycleWorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ (((DFS /\ SearchBase) /\ SearchBase) /\ (DFS /\ SearchBase))
WorkSpaceTranspose	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ ((((DFS /\ SearchBase) /\ SearchBase) /\ (DFS /\ SearchBase)) /\ SearchBase)
WorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ ((((DFS /\ SearchBase) /\ SearchBase) /\ (DFS /\ SearchBase)) /\ SearchBase)
NumberWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ ((((DFS /\ SearchBase) /\ SearchBase) /\ (DFS /\ SearchBase)) /\ SearchBase)
FinishTimeWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ ((((DFS /\ SearchBase) /\ SearchBase) /\ (DFS /\ SearchBase)) /\ SearchBase)
RegionWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.checkNeighborAction/0	<WorkSpace: void checkNeighborAction(Vertex,Vertex)>	@ ((((DFS /\ SearchBase) /\ SearchBase) /\ (DFS /\ SearchBase)) /\ SearchBase)
Vertex	<Vertex: void nodeSearch(WorkSpace)>/Vertex.nodeSearch/0	<Vertex: void nodeSearch(WorkSpace)>	@ (DFS /\ SearchBase)
VertexIter	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/0	<VertexIter: boolean hasNext()>	@ (DFS /\ SearchBase)
Vertex$VertexIter1	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/0	<Vertex$VertexIter1: boolean hasNext()>	@ ((DFS /\ SearchBase) /\ G_NoEdges)
Vertex$VertexIter2	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/0	<Vertex$VertexIter2: boolean hasNext()>	@ ((DFS /\ SearchBase) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/0	<Vertex$VertexIter3: boolean hasNext()>	@ ((DFS /\ SearchBase) /\ GEN_Edges)
CycleWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	<CycleWorkSpace: void postVisitAction(Vertex)>	@ (SearchBase /\ Cycle)
WorkSpaceTranspose	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	<WorkSpace: void postVisitAction(Vertex)>	@ SearchBase
WorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	<WorkSpace: void postVisitAction(Vertex)>	@ SearchBase
NumberWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	<WorkSpace: void postVisitAction(Vertex)>	@ SearchBase
FinishTimeWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	<FinishTimeWorkSpace: void postVisitAction(Vertex)>	@ (SearchBase /\ StronglyConnected)
RegionWorkSpace	<Vertex: void nodeSearch(WorkSpace)>/WorkSpace.postVisitAction/0	<RegionWorkSpace: void postVisitAction(Vertex)>	@ (SearchBase /\ Connected)
Vertex	<Vertex: void nodeSearch(WorkSpace)>/Vertex.getNeighbors/1	<Vertex: VertexIter getNeighbors()>	@ ((((SearchBase /\ BFS) /\ G_NoEdges) /\ (SearchBase /\ BFS)) /\ G_NoEdges)
VertexIter	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/1	<VertexIter: Vertex next()>	@ (SearchBase /\ BFS)
Vertex$VertexIter1	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/1	<Vertex$VertexIter1: Vertex next()>	@ ((SearchBase /\ BFS) /\ G_NoEdges)
Vertex$VertexIter2	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/1	<Vertex$VertexIter2: Vertex next()>	@ ((SearchBase /\ BFS) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.next/1	<Vertex$VertexIter3: Vertex next()>	@ ((SearchBase /\ BFS) /\ GEN_Edges)
java.util.LinkedList	<Vertex: void nodeSearch(WorkSpace)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ (SearchBase /\ BFS)
VertexIter	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/1	<VertexIter: boolean hasNext()>	@ (SearchBase /\ BFS)
Vertex$VertexIter1	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/1	<Vertex$VertexIter1: boolean hasNext()>	@ ((SearchBase /\ BFS) /\ G_NoEdges)
Vertex$VertexIter2	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/1	<Vertex$VertexIter2: boolean hasNext()>	@ ((SearchBase /\ BFS) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Vertex: void nodeSearch(WorkSpace)>/VertexIter.hasNext/1	<Vertex$VertexIter3: boolean hasNext()>	@ ((SearchBase /\ BFS) /\ GEN_Edges)
java.util.LinkedList	<Vertex: void nodeSearch(WorkSpace)>/java.util.LinkedList.remove/0	<java.util.LinkedList: java.lang.Object remove(int)>	@ (SearchBase /\ BFS)
Vertex	<Vertex: void nodeSearch(WorkSpace)>/Vertex.nodeSearch/1	<Vertex: void nodeSearch(WorkSpace)>	@ (SearchBase /\ BFS)
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/0	<java.io.PrintStream: void print(java.lang.String)>	@ (Weighted /\ G_NoEdges)
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/1	<java.io.PrintStream: void print(java.lang.String)>	@ (Weighted /\ G_NoEdges)
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/2	<java.io.PrintStream: void print(java.lang.String)>
Vertex	<Vertex: void display()>/Vertex.getNeighbors/0	<Vertex: VertexIter getNeighbors()>	@ G_NoEdges
VertexIter	<Vertex: void display()>/VertexIter.next/0	<VertexIter: Vertex next()>
Vertex$VertexIter1	<Vertex: void display()>/VertexIter.next/0	<Vertex$VertexIter1: Vertex next()>	@ G_NoEdges
Vertex$VertexIter2	<Vertex: void display()>/VertexIter.next/0	<Vertex$VertexIter2: Vertex next()>	@ GN_OnlyNeighbors
Vertex$VertexIter3	<Vertex: void display()>/VertexIter.next/0	<Vertex$VertexIter3: Vertex next()>	@ GEN_Edges
Vertex	<Vertex: void display()>/Vertex.getName/0	<Vertex: java.lang.String getName()>
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/3	<java.io.PrintStream: void print(java.lang.String)>
VertexIter	<Vertex: void display()>/VertexIter.hasNext/0	<VertexIter: boolean hasNext()>
Vertex$VertexIter1	<Vertex: void display()>/VertexIter.hasNext/0	<Vertex$VertexIter1: boolean hasNext()>	@ G_NoEdges
Vertex$VertexIter2	<Vertex: void display()>/VertexIter.hasNext/0	<Vertex$VertexIter2: boolean hasNext()>	@ GN_OnlyNeighbors
Vertex$VertexIter3	<Vertex: void display()>/VertexIter.hasNext/0	<Vertex$VertexIter3: boolean hasNext()>	@ GEN_Edges
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/4	<java.io.PrintStream: void print(java.lang.String)>	@ SearchBase
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>	@ SearchBase
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/5	<java.io.PrintStream: void print(java.lang.String)>	@ Number
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/6	<java.io.PrintStream: void print(java.lang.String)>	@ Connected
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/7	<java.io.PrintStream: void print(java.lang.String)>	@ StronglyConnected
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/8	<java.io.PrintStream: void print(java.lang.String)>	@ Cycle
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/9	<java.io.PrintStream: void print(java.lang.String)>	@ MSTKruskal
Vertex	<Vertex: void display()>/Vertex.getName/1	<Vertex: java.lang.String getName()>	@ MSTKruskal
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/10	<java.io.PrintStream: void print(java.lang.String)>	@ MSTKruskal
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.print/11	<java.io.PrintStream: void print(java.lang.String)>	@ MSTPrim
java.io.PrintStream	<Vertex: void display()>/java.io.PrintStream.println/1	<java.io.PrintStream: void println()>
Vertex	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addAdjacent/0	<Vertex: void addAdjacent(Vertex)>	@ G_NoEdges
Vertex	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addAdjacent/1	<Vertex: void addAdjacent(Vertex)>	@ ((((Undirected /\ G_NoEdges) /\ G_NoEdges) /\ (Undirected /\ G_NoEdges)) /\ G_NoEdges)
Vertex	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.setWeight/0	<Vertex: void setWeight(int)>	@ (Weighted /\ G_NoEdges)
Vertex	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>/Vertex.addWeight/0	<Vertex: void addWeight(int)>	@ (((((Undirected /\ Weighted) /\ G_NoEdges) /\ Weighted) /\ ((Undirected /\ Weighted) /\ G_NoEdges)) /\ Weighted)
Vertex	<Graph: void addEdge(Vertex,Neighbor)>/Vertex.addEdge/0	<Vertex: void addEdge(Neighbor)>	@ (((((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)
Vertex	<Graph: void addEdge(Vertex,Neighbor)>/Vertex.addEdge/1	<Vertex: void addEdge(Neighbor)>	@ (((((GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors)) /\ GN_OnlyNeighbors) /\ (GN_OnlyNeighbors /\ (Undirected /\ GN_OnlyNeighbors))) /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)
Graph	<Graph: Vertex findsVertex(java.lang.String)>/Graph.getVertices/0	<Graph: VertexIter getVertices()>
VertexIter	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.next/0	<VertexIter: Vertex next()>
Vertex$VertexIter1	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.next/0	<Vertex$VertexIter1: Vertex next()>	@ G_NoEdges
Vertex$VertexIter2	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.next/0	<Vertex$VertexIter2: Vertex next()>	@ GN_OnlyNeighbors
Vertex$VertexIter3	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.next/0	<Vertex$VertexIter3: Vertex next()>	@ GEN_Edges
Vertex	<Graph: Vertex findsVertex(java.lang.String)>/Vertex.getName/0	<Vertex: java.lang.String getName()>
VertexIter	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.hasNext/0	<VertexIter: boolean hasNext()>
Vertex$VertexIter1	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.hasNext/0	<Vertex$VertexIter1: boolean hasNext()>	@ G_NoEdges
Vertex$VertexIter2	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.hasNext/0	<Vertex$VertexIter2: boolean hasNext()>	@ GN_OnlyNeighbors
Vertex$VertexIter3	<Graph: Vertex findsVertex(java.lang.String)>/VertexIter.hasNext/0	<Vertex$VertexIter3: boolean hasNext()>	@ GEN_Edges
java.io.PrintStream	<Graph: void display()>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>
java.io.PrintStream	<Graph: void display()>/java.io.PrintStream.println/1	<java.io.PrintStream: void println(java.lang.String)>
Vertex	<Graph: void display()>/Vertex.display/0	<Vertex: void display()>
java.io.PrintStream	<Graph: void display()>/java.io.PrintStream.println/2	<java.io.PrintStream: void println(java.lang.String)>
java.io.PrintStream	<Graph: void display()>/java.io.PrintStream.println/3	<java.io.PrintStream: void println(java.lang.String)>	@ GEN_Edges
Graph	<Graph: void display()>/Graph.getEdges/0	<Graph: EdgeIter getEdges()>	@ GEN_Edges
EdgeIter	<Graph: void display()>/EdgeIter.next/0	<EdgeIter: EdgeIfc next()>	@ GEN_Edges
Graph$EdgeIter1	<Graph: void display()>/EdgeIter.next/0	<Graph$EdgeIter1: EdgeIfc next()>	@ (GEN_Edges /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: void display()>/EdgeIter.next/0	<Vertex$EdgeIter3: EdgeIfc next()>	@ (GEN_Edges /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: void display()>/EdgeIter.next/0	<Vertex$EdgeIter2: EdgeIfc next()>	@ (GEN_Edges /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: void display()>/EdgeIter.next/0	<Vertex$EdgeIter1: EdgeIfc next()>	@ (GEN_Edges /\ (EdgeObjects /\ G_NoEdges))
Vertex	<Graph: void display()>/EdgeIfc.display/0	<Vertex: void display()>	@ GEN_Edges
Edge	<Graph: void display()>/EdgeIfc.display/0	<Edge: void display()>	@ (GEN_Edges /\ EdgeObjects)
Neighbor	<Graph: void display()>/EdgeIfc.display/0	<Neighbor: void display()>	@ (GEN_Edges /\ GN_OnlyNeighbors)
EdgeIter	<Graph: void display()>/EdgeIter.hasNext/0	<EdgeIter: boolean hasNext()>	@ GEN_Edges
Graph$EdgeIter1	<Graph: void display()>/EdgeIter.hasNext/0	<Graph$EdgeIter1: boolean hasNext()>	@ (GEN_Edges /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: void display()>/EdgeIter.hasNext/0	<Vertex$EdgeIter3: boolean hasNext()>	@ (GEN_Edges /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: void display()>/EdgeIter.hasNext/0	<Vertex$EdgeIter2: boolean hasNext()>	@ (GEN_Edges /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: void display()>/EdgeIter.hasNext/0	<Vertex$EdgeIter1: boolean hasNext()>	@ (GEN_Edges /\ (EdgeObjects /\ G_NoEdges))
java.io.PrintStream	<Graph: void display()>/java.io.PrintStream.println/4	<java.io.PrintStream: void println(java.lang.String)>	@ GEN_Edges
java.util.LinkedList	<Graph: void addVertex(Vertex)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>
java.io.PrintStream	<Graph: void runBenchmark(java.lang.String)>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>	@ ((Benchmark /\ Benchmark) /\ Benchmark)
java.io.Reader	<Graph: void stopBenchmark()>/java.io.Reader.close/0	<java.io.Reader: void close()>	@ ((Benchmark /\ Benchmark) /\ Benchmark)
java.io.PrintStream	<Graph: void endProfile()>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>	@ ((Benchmark /\ Benchmark) /\ Benchmark)
Graph	<Graph: void run(Vertex)>/Graph.connectedComponents/0	<Graph: void connectedComponents()>	@ ((((Prog /\ Connected) /\ Connected) /\ (Prog /\ Connected)) /\ Connected)
Graph	<Graph: void run(Vertex)>/Graph.cycleCheck/0	<Graph: boolean cycleCheck()>	@ ((((Cycle /\ Prog) /\ Cycle) /\ (Cycle /\ Prog)) /\ Cycle)
java.io.PrintStream	<Graph: void run(Vertex)>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>	@ (Cycle /\ Prog)
Graph	<Graph: void run(Vertex)>/Graph.kruskal/0	<Graph: Graph kruskal()>	@ (MSTKruskal /\ Prog)
Graph	<Graph: void run(Vertex)>/Graph.display/0	<Graph: void display()>	@ (MSTKruskal /\ Prog)
Graph	<Graph: void run(Vertex)>/Graph.prim/0	<Graph: Graph prim(Vertex)>	@ (MSTPrim /\ Prog)
Graph	<Graph: void run(Vertex)>/Graph.display/1	<Graph: void display()>	@ (MSTPrim /\ Prog)
Graph	<Graph: void run(Vertex)>/Graph.numberVertices/0	<Graph: void numberVertices()>	@ ((((Prog /\ Number) /\ Number) /\ (Prog /\ Number)) /\ Number)
Graph	<Graph: void run(Vertex)>/Graph.strongComponents/0	<Graph: Graph strongComponents()>	@ (Prog /\ StronglyConnected)
Graph	<Graph: void run(Vertex)>/Graph.display/2	<Graph: void display()>	@ (Prog /\ StronglyConnected)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getEdges/0	<Vertex: EdgeIter getEdges()>	@ (((((EdgeObjects /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges)) /\ (EdgeObjects /\ EdgeObjects)) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))
EdgeIter	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.next/0	<EdgeIter: EdgeIfc next()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Graph$EdgeIter1	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.next/0	<Graph$EdgeIter1: EdgeIfc next()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.next/0	<Vertex$EdgeIter3: EdgeIfc next()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.next/0	<Vertex$EdgeIter2: EdgeIfc next()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.next/0	<Vertex$EdgeIter1: EdgeIfc next()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIfc.getOtherVertex/0	<Vertex: Vertex getOtherVertex(Vertex)>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ G_NoEdges)
Edge	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIfc.getOtherVertex/0	<Edge: Vertex getOtherVertex(Vertex)>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
Neighbor	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIfc.getOtherVertex/0	<Neighbor: Vertex getOtherVertex(Vertex)>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ GN_OnlyNeighbors)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/0	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/1	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/2	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/3	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/4	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/5	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/6	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/Vertex.getName/7	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
EdgeIter	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.hasNext/0	<EdgeIter: boolean hasNext()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Graph$EdgeIter1	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.hasNext/0	<Graph$EdgeIter1: boolean hasNext()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.hasNext/0	<Vertex$EdgeIter3: boolean hasNext()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.hasNext/0	<Vertex$EdgeIter2: boolean hasNext()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>/EdgeIter.hasNext/0	<Vertex$EdgeIter1: boolean hasNext()>	@ (((EdgeObjects /\ EdgeObjects) /\ EdgeObjects) /\ (EdgeObjects /\ G_NoEdges))
Graph	<Graph: void graphSearch(WorkSpace)>/Graph.getVertices/0	<Graph: VertexIter getVertices()>	@ SearchBase
VertexIter	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/0	<VertexIter: boolean hasNext()>	@ SearchBase
Vertex$VertexIter1	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/0	<Vertex$VertexIter1: boolean hasNext()>	@ (SearchBase /\ G_NoEdges)
Vertex$VertexIter2	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/0	<Vertex$VertexIter2: boolean hasNext()>	@ (SearchBase /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/0	<Vertex$VertexIter3: boolean hasNext()>	@ (SearchBase /\ GEN_Edges)
VertexIter	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/0	<VertexIter: Vertex next()>	@ SearchBase
Vertex$VertexIter1	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/0	<Vertex$VertexIter1: Vertex next()>	@ (SearchBase /\ G_NoEdges)
Vertex$VertexIter2	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/0	<Vertex$VertexIter2: Vertex next()>	@ (SearchBase /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/0	<Vertex$VertexIter3: Vertex next()>	@ (SearchBase /\ GEN_Edges)
Vertex	<Graph: void graphSearch(WorkSpace)>/Vertex.init_vertex/0	<Vertex: void init_vertex(WorkSpace)>	@ SearchBase
VertexIter	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/1	<VertexIter: boolean hasNext()>	@ SearchBase
Vertex$VertexIter1	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/1	<Vertex$VertexIter1: boolean hasNext()>	@ (SearchBase /\ G_NoEdges)
Vertex$VertexIter2	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/1	<Vertex$VertexIter2: boolean hasNext()>	@ (SearchBase /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/1	<Vertex$VertexIter3: boolean hasNext()>	@ (SearchBase /\ GEN_Edges)
Graph	<Graph: void graphSearch(WorkSpace)>/Graph.getVertices/1	<Graph: VertexIter getVertices()>	@ SearchBase
VertexIter	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/1	<VertexIter: Vertex next()>	@ SearchBase
Vertex$VertexIter1	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/1	<Vertex$VertexIter1: Vertex next()>	@ (SearchBase /\ G_NoEdges)
Vertex$VertexIter2	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/1	<Vertex$VertexIter2: Vertex next()>	@ (SearchBase /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: void graphSearch(WorkSpace)>/VertexIter.next/1	<Vertex$VertexIter3: Vertex next()>	@ (SearchBase /\ GEN_Edges)
CycleWorkSpace	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<WorkSpace: void nextRegionAction(Vertex)>	@ SearchBase
WorkSpaceTranspose	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<WorkSpaceTranspose: void nextRegionAction(Vertex)>	@ (SearchBase /\ StronglyConnected)
WorkSpace	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<WorkSpace: void nextRegionAction(Vertex)>	@ SearchBase
NumberWorkSpace	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<WorkSpace: void nextRegionAction(Vertex)>	@ SearchBase
FinishTimeWorkSpace	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<WorkSpace: void nextRegionAction(Vertex)>	@ SearchBase
RegionWorkSpace	<Graph: void graphSearch(WorkSpace)>/WorkSpace.nextRegionAction/0	<RegionWorkSpace: void nextRegionAction(Vertex)>	@ (SearchBase /\ Connected)
Vertex	<Graph: void graphSearch(WorkSpace)>/Vertex.nodeSearch/0	<Vertex: void nodeSearch(WorkSpace)>	@ SearchBase
VertexIter	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/2	<VertexIter: boolean hasNext()>	@ SearchBase
Vertex$VertexIter1	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/2	<Vertex$VertexIter1: boolean hasNext()>	@ (SearchBase /\ G_NoEdges)
Vertex$VertexIter2	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/2	<Vertex$VertexIter2: boolean hasNext()>	@ (SearchBase /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: void graphSearch(WorkSpace)>/VertexIter.hasNext/2	<Vertex$VertexIter3: boolean hasNext()>	@ (SearchBase /\ GEN_Edges)
Graph	<Graph: void numberVertices()>/Graph.graphSearch/0	<Graph: void graphSearch(WorkSpace)>	@ ((Number /\ Number) /\ Number)
Graph	<Graph: void connectedComponents()>/Graph.graphSearch/0	<Graph: void graphSearch(WorkSpace)>	@ ((Connected /\ Connected) /\ Connected)
Graph	<Graph: Graph strongComponents()>/Graph.graphSearch/0	<Graph: void graphSearch(WorkSpace)>	@ StronglyConnected
Graph	<Graph: Graph strongComponents()>/Graph.sortVertices/0	<Graph: void sortVertices(java.util.Comparator)>	@ StronglyConnected
Graph	<Graph: Graph strongComponents()>/Graph.computeTranspose/0	<Graph: Graph computeTranspose(Graph)>	@ (((StronglyConnected /\ Transpose) /\ StronglyConnected) /\ Transpose)
Graph	<Graph: Graph strongComponents()>/Graph.graphSearch/1	<Graph: void graphSearch(WorkSpace)>	@ StronglyConnected
Graph	<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/0	<Graph: VertexIter getVertices()>	@ ((Transpose /\ Transpose) /\ Transpose)
VertexIter	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/0	<VertexIter: Vertex next()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex$VertexIter1	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/0	<Vertex$VertexIter1: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/0	<Vertex$VertexIter2: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/0	<Vertex$VertexIter3: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GEN_Edges)
Vertex	<Graph: Graph computeTranspose(Graph)>/Vertex.getName/0	<Vertex: java.lang.String getName()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex	<Graph: Graph computeTranspose(Graph)>/Vertex.assignName/0	<Vertex: Vertex assignName(java.lang.String)>	@ ((Transpose /\ Transpose) /\ Transpose)
Graph	<Graph: Graph computeTranspose(Graph)>/Graph.addVertex/0	<Graph: void addVertex(Vertex)>	@ ((Transpose /\ Transpose) /\ Transpose)
VertexIter	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/0	<VertexIter: boolean hasNext()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex$VertexIter1	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/0	<Vertex$VertexIter1: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/0	<Vertex$VertexIter2: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/0	<Vertex$VertexIter3: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GEN_Edges)
Graph	<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/1	<Graph: VertexIter getVertices()>	@ ((Transpose /\ Transpose) /\ Transpose)
Graph	<Graph: Graph computeTranspose(Graph)>/Graph.getVertices/2	<Graph: VertexIter getVertices()>	@ ((Transpose /\ Transpose) /\ Transpose)
VertexIter	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/1	<VertexIter: Vertex next()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex$VertexIter1	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/1	<Vertex$VertexIter1: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/1	<Vertex$VertexIter2: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/1	<Vertex$VertexIter3: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GEN_Edges)
VertexIter	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/2	<VertexIter: Vertex next()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex$VertexIter1	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/2	<Vertex$VertexIter1: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/2	<Vertex$VertexIter2: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/2	<Vertex$VertexIter3: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GEN_Edges)
Vertex	<Graph: Graph computeTranspose(Graph)>/Vertex.getNeighbors/0	<Vertex: VertexIter getNeighbors()>	@ (((((Transpose /\ Transpose) /\ G_NoEdges) /\ (Transpose /\ Transpose)) /\ Transpose) /\ G_NoEdges)
VertexIter	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/3	<VertexIter: Vertex next()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex$VertexIter1	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/3	<Vertex$VertexIter1: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/3	<Vertex$VertexIter2: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph computeTranspose(Graph)>/VertexIter.next/3	<Vertex$VertexIter3: Vertex next()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GEN_Edges)
Vertex	<Graph: Graph computeTranspose(Graph)>/Vertex.getName/1	<Vertex: java.lang.String getName()>	@ ((Transpose /\ Transpose) /\ Transpose)
Graph	<Graph: Graph computeTranspose(Graph)>/Graph.addEdge/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ ((Transpose /\ Transpose) /\ Transpose)
VertexIter	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/1	<VertexIter: boolean hasNext()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex$VertexIter1	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/1	<Vertex$VertexIter1: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/1	<Vertex$VertexIter2: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/1	<Vertex$VertexIter3: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GEN_Edges)
VertexIter	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/2	<VertexIter: boolean hasNext()>	@ ((Transpose /\ Transpose) /\ Transpose)
Vertex$VertexIter1	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/2	<Vertex$VertexIter1: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/2	<Vertex$VertexIter2: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph computeTranspose(Graph)>/VertexIter.hasNext/2	<Vertex$VertexIter3: boolean hasNext()>	@ (((Transpose /\ Transpose) /\ Transpose) /\ GEN_Edges)
Graph	<Graph: boolean cycleCheck()>/Graph.graphSearch/0	<Graph: void graphSearch(WorkSpace)>	@ ((Cycle /\ Cycle) /\ Cycle)
Graph	<Graph: Graph kruskal()>/Graph.getVertices/0	<Graph: VertexIter getVertices()>	@ MSTKruskal
VertexIter	<Graph: Graph kruskal()>/VertexIter.next/0	<VertexIter: Vertex next()>	@ MSTKruskal
Vertex$VertexIter1	<Graph: Graph kruskal()>/VertexIter.next/0	<Vertex$VertexIter1: Vertex next()>	@ (MSTKruskal /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph kruskal()>/VertexIter.next/0	<Vertex$VertexIter2: Vertex next()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph kruskal()>/VertexIter.next/0	<Vertex$VertexIter3: Vertex next()>	@ (MSTKruskal /\ GEN_Edges)
VertexIter	<Graph: Graph kruskal()>/VertexIter.hasNext/0	<VertexIter: boolean hasNext()>	@ MSTKruskal
Vertex$VertexIter1	<Graph: Graph kruskal()>/VertexIter.hasNext/0	<Vertex$VertexIter1: boolean hasNext()>	@ (MSTKruskal /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph kruskal()>/VertexIter.hasNext/0	<Vertex$VertexIter2: boolean hasNext()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph kruskal()>/VertexIter.hasNext/0	<Vertex$VertexIter3: boolean hasNext()>	@ (MSTKruskal /\ GEN_Edges)
Graph	<Graph: Graph kruskal()>/Graph.getEdges/0	<Graph: EdgeIter getEdges()>	@ MSTKruskal
Graph	<Graph: Graph kruskal()>/Graph.sortEdges/0	<Graph: void sortEdges(java.util.Comparator)>	@ (((MSTKruskal /\ EdgeObjects) /\ MSTKruskal) /\ EdgeObjects)
Graph	<Graph: Graph kruskal()>/Graph.getEdges/1	<Graph: EdgeIter getEdges()>	@ MSTKruskal
EdgeIter	<Graph: Graph kruskal()>/EdgeIter.next/0	<EdgeIter: EdgeIfc next()>	@ MSTKruskal
Graph$EdgeIter1	<Graph: Graph kruskal()>/EdgeIter.next/0	<Graph$EdgeIter1: EdgeIfc next()>	@ (MSTKruskal /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: Graph kruskal()>/EdgeIter.next/0	<Vertex$EdgeIter3: EdgeIfc next()>	@ (MSTKruskal /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: Graph kruskal()>/EdgeIter.next/0	<Vertex$EdgeIter2: EdgeIfc next()>	@ (MSTKruskal /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: Graph kruskal()>/EdgeIter.next/0	<Vertex$EdgeIter1: EdgeIfc next()>	@ (MSTKruskal /\ (EdgeObjects /\ G_NoEdges))
Vertex	<Graph: Graph kruskal()>/EdgeIfc.getStart/0	<Vertex: Vertex getStart()>	@ (MSTKruskal /\ (Undirected /\ G_NoEdges))
Edge	<Graph: Graph kruskal()>/EdgeIfc.getStart/0	<Edge: Vertex getStart()>	@ (MSTKruskal /\ EdgeObjects)
Neighbor	<Graph: Graph kruskal()>/EdgeIfc.getStart/0	<Neighbor: Vertex getStart()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex	<Graph: Graph kruskal()>/EdgeIfc.getEnd/0	<Vertex: Vertex getEnd()>	@ (MSTKruskal /\ G_NoEdges)
Edge	<Graph: Graph kruskal()>/EdgeIfc.getEnd/0	<Edge: Vertex getEnd()>	@ (MSTKruskal /\ EdgeObjects)
Neighbor	<Graph: Graph kruskal()>/EdgeIfc.getEnd/0	<Neighbor: Vertex getEnd()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex	<Graph: Graph kruskal()>/Vertex.getName/0	<Vertex: java.lang.String getName()>	@ MSTKruskal
Vertex	<Graph: Graph kruskal()>/Vertex.getName/1	<Vertex: java.lang.String getName()>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.add/1	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.add/2	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.add/3	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.clear/0	<java.util.LinkedList: void clear()>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.add/4	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.add/5	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.add/6	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTKruskal
java.util.LinkedList	<Graph: Graph kruskal()>/java.util.LinkedList.clear/1	<java.util.LinkedList: void clear()>	@ MSTKruskal
EdgeIter	<Graph: Graph kruskal()>/EdgeIter.hasNext/0	<EdgeIter: boolean hasNext()>	@ MSTKruskal
Graph$EdgeIter1	<Graph: Graph kruskal()>/EdgeIter.hasNext/0	<Graph$EdgeIter1: boolean hasNext()>	@ (MSTKruskal /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: Graph kruskal()>/EdgeIter.hasNext/0	<Vertex$EdgeIter3: boolean hasNext()>	@ (MSTKruskal /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: Graph kruskal()>/EdgeIter.hasNext/0	<Vertex$EdgeIter2: boolean hasNext()>	@ (MSTKruskal /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: Graph kruskal()>/EdgeIter.hasNext/0	<Vertex$EdgeIter1: boolean hasNext()>	@ (MSTKruskal /\ (EdgeObjects /\ G_NoEdges))
Graph	<Graph: Graph kruskal()>/Graph.getVertices/1	<Graph: VertexIter getVertices()>	@ MSTKruskal
VertexIter	<Graph: Graph kruskal()>/VertexIter.next/1	<VertexIter: Vertex next()>	@ MSTKruskal
Vertex$VertexIter1	<Graph: Graph kruskal()>/VertexIter.next/1	<Vertex$VertexIter1: Vertex next()>	@ (MSTKruskal /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph kruskal()>/VertexIter.next/1	<Vertex$VertexIter2: Vertex next()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph kruskal()>/VertexIter.next/1	<Vertex$VertexIter3: Vertex next()>	@ (MSTKruskal /\ GEN_Edges)
Vertex	<Graph: Graph kruskal()>/Vertex.getName/2	<Vertex: java.lang.String getName()>	@ MSTKruskal
Vertex	<Graph: Graph kruskal()>/Vertex.assignName/0	<Vertex: Vertex assignName(java.lang.String)>	@ MSTKruskal
Graph	<Graph: Graph kruskal()>/Graph.addVertex/0	<Graph: void addVertex(Vertex)>	@ MSTKruskal
VertexIter	<Graph: Graph kruskal()>/VertexIter.hasNext/1	<VertexIter: boolean hasNext()>	@ MSTKruskal
Vertex$VertexIter1	<Graph: Graph kruskal()>/VertexIter.hasNext/1	<Vertex$VertexIter1: boolean hasNext()>	@ (MSTKruskal /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph kruskal()>/VertexIter.hasNext/1	<Vertex$VertexIter2: boolean hasNext()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph kruskal()>/VertexIter.hasNext/1	<Vertex$VertexIter3: boolean hasNext()>	@ (MSTKruskal /\ GEN_Edges)
Vertex	<Graph: Graph kruskal()>/EdgeIfc.getStart/1	<Vertex: Vertex getStart()>	@ (MSTKruskal /\ (Undirected /\ G_NoEdges))
Edge	<Graph: Graph kruskal()>/EdgeIfc.getStart/1	<Edge: Vertex getStart()>	@ (MSTKruskal /\ EdgeObjects)
Neighbor	<Graph: Graph kruskal()>/EdgeIfc.getStart/1	<Neighbor: Vertex getStart()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex	<Graph: Graph kruskal()>/EdgeIfc.getEnd/1	<Vertex: Vertex getEnd()>	@ (MSTKruskal /\ G_NoEdges)
Edge	<Graph: Graph kruskal()>/EdgeIfc.getEnd/1	<Edge: Vertex getEnd()>	@ (MSTKruskal /\ EdgeObjects)
Neighbor	<Graph: Graph kruskal()>/EdgeIfc.getEnd/1	<Neighbor: Vertex getEnd()>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Vertex	<Graph: Graph kruskal()>/Vertex.getName/3	<Vertex: java.lang.String getName()>	@ MSTKruskal
Graph	<Graph: Graph kruskal()>/Graph.findsVertex/0	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTKruskal
Vertex	<Graph: Graph kruskal()>/Vertex.getName/4	<Vertex: java.lang.String getName()>	@ MSTKruskal
Graph	<Graph: Graph kruskal()>/Graph.findsVertex/1	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTKruskal
Vertex	<Graph: Graph kruskal()>/EdgeIfc.getWeight/0	<Vertex: int getWeight()>	@ (MSTKruskal /\ G_NoEdges)
Edge	<Graph: Graph kruskal()>/EdgeIfc.getWeight/0	<Edge: int getWeight()>	@ (MSTKruskal /\ (EdgeObjects /\ Weighted))
Neighbor	<Graph: Graph kruskal()>/EdgeIfc.getWeight/0	<Neighbor: int getWeight()>	@ (MSTKruskal /\ (Weighted /\ GN_OnlyNeighbors))
Graph	<Graph: Graph kruskal()>/Graph.addEdge/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ MSTKruskal
Vertex	<Graph: Graph kruskal()>/EdgeIfc.adjustAdorns/0	<Vertex: void adjustAdorns(EdgeIfc)>	@ (MSTKruskal /\ G_NoEdges)
Edge	<Graph: Graph kruskal()>/EdgeIfc.adjustAdorns/0	<Edge: void adjustAdorns(EdgeIfc)>	@ (MSTKruskal /\ EdgeObjects)
Neighbor	<Graph: Graph kruskal()>/EdgeIfc.adjustAdorns/0	<Neighbor: void adjustAdorns(EdgeIfc)>	@ (MSTKruskal /\ GN_OnlyNeighbors)
Graph	<Graph: Graph prim(Vertex)>/Graph.getVertices/0	<Graph: VertexIter getVertices()>	@ MSTPrim
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.next/0	<VertexIter: Vertex next()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.next/0	<Vertex$VertexIter1: Vertex next()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.next/0	<Vertex$VertexIter2: Vertex next()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.next/0	<Vertex$VertexIter3: Vertex next()>	@ (MSTPrim /\ GEN_Edges)
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/0	<VertexIter: boolean hasNext()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/0	<Vertex$VertexIter1: boolean hasNext()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/0	<Vertex$VertexIter2: boolean hasNext()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/0	<Vertex$VertexIter3: boolean hasNext()>	@ (MSTPrim /\ GEN_Edges)
java.util.LinkedList	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/0	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTPrim
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getName/0	<Vertex: java.lang.String getName()>	@ MSTPrim
Graph	<Graph: Graph prim(Vertex)>/Graph.getVertices/1	<Graph: VertexIter getVertices()>	@ MSTPrim
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.next/1	<VertexIter: Vertex next()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.next/1	<Vertex$VertexIter1: Vertex next()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.next/1	<Vertex$VertexIter2: Vertex next()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.next/1	<Vertex$VertexIter3: Vertex next()>	@ (MSTPrim /\ GEN_Edges)
java.util.LinkedList	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/1	<java.util.LinkedList: boolean add(java.lang.Object)>	@ MSTPrim
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getName/1	<Vertex: java.lang.String getName()>	@ MSTPrim
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/1	<VertexIter: boolean hasNext()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/1	<Vertex$VertexIter1: boolean hasNext()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/1	<Vertex$VertexIter2: boolean hasNext()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/1	<Vertex$VertexIter3: boolean hasNext()>	@ (MSTPrim /\ GEN_Edges)
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getName/2	<Vertex: java.lang.String getName()>	@ MSTPrim
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getNeighborsObj/0	<Vertex: java.util.LinkedList getNeighborsObj()>	@ (((MSTPrim /\ GN_OnlyNeighbors) /\ MSTPrim) /\ GN_OnlyNeighbors)
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getEdges/0	<Vertex: EdgeIter getEdges()>	@ (((MSTPrim /\ (EdgeObjects /\ G_NoEdges)) /\ MSTPrim) /\ (EdgeObjects /\ G_NoEdges))
EdgeIter	<Graph: Graph prim(Vertex)>/EdgeIter.next/0	<EdgeIter: EdgeIfc next()>	@ MSTPrim
Graph$EdgeIter1	<Graph: Graph prim(Vertex)>/EdgeIter.next/0	<Graph$EdgeIter1: EdgeIfc next()>	@ (MSTPrim /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: Graph prim(Vertex)>/EdgeIter.next/0	<Vertex$EdgeIter3: EdgeIfc next()>	@ (MSTPrim /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: Graph prim(Vertex)>/EdgeIter.next/0	<Vertex$EdgeIter2: EdgeIfc next()>	@ (MSTPrim /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: Graph prim(Vertex)>/EdgeIter.next/0	<Vertex$EdgeIter1: EdgeIfc next()>	@ (MSTPrim /\ (EdgeObjects /\ G_NoEdges))
Vertex	<Graph: Graph prim(Vertex)>/EdgeIfc.getOtherVertex/0	<Vertex: Vertex getOtherVertex(Vertex)>	@ (MSTPrim /\ G_NoEdges)
Edge	<Graph: Graph prim(Vertex)>/EdgeIfc.getOtherVertex/0	<Edge: Vertex getOtherVertex(Vertex)>	@ (MSTPrim /\ EdgeObjects)
Neighbor	<Graph: Graph prim(Vertex)>/EdgeIfc.getOtherVertex/0	<Neighbor: Vertex getOtherVertex(Vertex)>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getName/3	<Vertex: java.lang.String getName()>	@ MSTPrim
Vertex	<Graph: Graph prim(Vertex)>/EdgeIfc.getWeight/0	<Vertex: int getWeight()>	@ (MSTPrim /\ G_NoEdges)
Edge	<Graph: Graph prim(Vertex)>/EdgeIfc.getWeight/0	<Edge: int getWeight()>	@ (MSTPrim /\ (EdgeObjects /\ Weighted))
Neighbor	<Graph: Graph prim(Vertex)>/EdgeIfc.getWeight/0	<Neighbor: int getWeight()>	@ (MSTPrim /\ (Weighted /\ GN_OnlyNeighbors))
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getName/4	<Vertex: java.lang.String getName()>	@ MSTPrim
java.util.LinkedList	<Graph: Graph prim(Vertex)>/java.util.LinkedList.set/0	<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>	@ MSTPrim
java.util.LinkedList	<Graph: Graph prim(Vertex)>/java.util.LinkedList.remove/0	<java.util.LinkedList: boolean remove(java.lang.Object)>	@ MSTPrim
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getName/5	<Vertex: java.lang.String getName()>	@ MSTPrim
java.util.LinkedList	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/2	<java.util.LinkedList: void add(int,java.lang.Object)>	@ MSTPrim
java.util.LinkedList	<Graph: Graph prim(Vertex)>/java.util.LinkedList.add/3	<java.util.LinkedList: void add(int,java.lang.Object)>	@ MSTPrim
Vertex	<Graph: Graph prim(Vertex)>/Vertex.getName/6	<Vertex: java.lang.String getName()>	@ MSTPrim
EdgeIter	<Graph: Graph prim(Vertex)>/EdgeIter.hasNext/0	<EdgeIter: boolean hasNext()>	@ MSTPrim
Graph$EdgeIter1	<Graph: Graph prim(Vertex)>/EdgeIter.hasNext/0	<Graph$EdgeIter1: boolean hasNext()>	@ (MSTPrim /\ EdgeObjects)
Vertex$EdgeIter3	<Graph: Graph prim(Vertex)>/EdgeIter.hasNext/0	<Vertex$EdgeIter3: boolean hasNext()>	@ (MSTPrim /\ (EdgeObjects /\ GEN_Edges))
Vertex$EdgeIter2	<Graph: Graph prim(Vertex)>/EdgeIter.hasNext/0	<Vertex$EdgeIter2: boolean hasNext()>	@ (MSTPrim /\ (EdgeObjects /\ GN_OnlyNeighbors))
Vertex$EdgeIter1	<Graph: Graph prim(Vertex)>/EdgeIter.hasNext/0	<Vertex$EdgeIter1: boolean hasNext()>	@ (MSTPrim /\ (EdgeObjects /\ G_NoEdges))
Graph	<Graph: Graph prim(Vertex)>/Graph.getVertices/2	<Graph: VertexIter getVertices()>	@ MSTPrim
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.next/2	<VertexIter: Vertex next()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.next/2	<Vertex$VertexIter1: Vertex next()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.next/2	<Vertex$VertexIter2: Vertex next()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.next/2	<Vertex$VertexIter3: Vertex next()>	@ (MSTPrim /\ GEN_Edges)
Vertex	<Graph: Graph prim(Vertex)>/Vertex.assignName/0	<Vertex: Vertex assignName(java.lang.String)>	@ MSTPrim
Graph	<Graph: Graph prim(Vertex)>/Graph.addVertex/0	<Graph: void addVertex(Vertex)>	@ MSTPrim
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/2	<VertexIter: boolean hasNext()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/2	<Vertex$VertexIter1: boolean hasNext()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/2	<Vertex$VertexIter2: boolean hasNext()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/2	<Vertex$VertexIter3: boolean hasNext()>	@ (MSTPrim /\ GEN_Edges)
Graph	<Graph: Graph prim(Vertex)>/Graph.getVertices/3	<Graph: VertexIter getVertices()>	@ MSTPrim
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.next/3	<VertexIter: Vertex next()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.next/3	<Vertex$VertexIter1: Vertex next()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.next/3	<Vertex$VertexIter2: Vertex next()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.next/3	<Vertex$VertexIter3: Vertex next()>	@ (MSTPrim /\ GEN_Edges)
Graph	<Graph: Graph prim(Vertex)>/Graph.findsVertex/0	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTPrim
Graph	<Graph: Graph prim(Vertex)>/Graph.findsVertex/1	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTPrim
Graph	<Graph: Graph prim(Vertex)>/Graph.findsVertex/2	<Graph: Vertex findsVertex(java.lang.String)>	@ MSTPrim
Graph	<Graph: Graph prim(Vertex)>/Graph.addEdge/0	<Graph: EdgeIfc addEdge(Vertex,Vertex,int)>	@ MSTPrim
Graph	<Graph: Graph prim(Vertex)>/Graph.findsEdge/0	<Graph: EdgeIfc findsEdge(Vertex,Vertex)>	@ (((MSTPrim /\ EdgeObjects) /\ MSTPrim) /\ EdgeObjects)
Vertex	<Graph: Graph prim(Vertex)>/EdgeIfc.adjustAdorns/0	<Vertex: void adjustAdorns(EdgeIfc)>	@ (MSTPrim /\ G_NoEdges)
Edge	<Graph: Graph prim(Vertex)>/EdgeIfc.adjustAdorns/0	<Edge: void adjustAdorns(EdgeIfc)>	@ (MSTPrim /\ EdgeObjects)
Neighbor	<Graph: Graph prim(Vertex)>/EdgeIfc.adjustAdorns/0	<Neighbor: void adjustAdorns(EdgeIfc)>	@ (MSTPrim /\ GN_OnlyNeighbors)
VertexIter	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/3	<VertexIter: boolean hasNext()>	@ MSTPrim
Vertex$VertexIter1	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/3	<Vertex$VertexIter1: boolean hasNext()>	@ (MSTPrim /\ G_NoEdges)
Vertex$VertexIter2	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/3	<Vertex$VertexIter2: boolean hasNext()>	@ (MSTPrim /\ GN_OnlyNeighbors)
Vertex$VertexIter3	<Graph: Graph prim(Vertex)>/VertexIter.hasNext/3	<Vertex$VertexIter3: boolean hasNext()>	@ (MSTPrim /\ GEN_Edges)
Graph$Comparator2	<Graph$Comparator2: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator2.compare/0	<Graph$Comparator2: int compare(Vertex,Vertex)>	@ MSTPrim
Vertex	<Edge: void adjustAdorns(EdgeIfc)>/EdgeIfc.getWeight/0	<Vertex: int getWeight()>	@ (((EdgeObjects /\ (EdgeObjects /\ Weighted)) /\ EdgeObjects) /\ G_NoEdges)
Edge	<Edge: void adjustAdorns(EdgeIfc)>/EdgeIfc.getWeight/0	<Edge: int getWeight()>	@ (((EdgeObjects /\ (EdgeObjects /\ Weighted)) /\ EdgeObjects) /\ (EdgeObjects /\ Weighted))
Neighbor	<Edge: void adjustAdorns(EdgeIfc)>/EdgeIfc.getWeight/0	<Neighbor: int getWeight()>	@ (((EdgeObjects /\ (EdgeObjects /\ Weighted)) /\ EdgeObjects) /\ (Weighted /\ GN_OnlyNeighbors))
Edge	<Edge: void adjustAdorns(EdgeIfc)>/Edge.setWeight/0	<Edge: void setWeight(int)>	@ (((((EdgeObjects /\ (EdgeObjects /\ Weighted)) /\ (EdgeObjects /\ Weighted)) /\ (EdgeObjects /\ (EdgeObjects /\ Weighted))) /\ EdgeObjects) /\ (EdgeObjects /\ Weighted))
java.io.PrintStream	<Edge: void display()>/java.io.PrintStream.print/0	<java.io.PrintStream: void print(java.lang.String)>	@ ((EdgeObjects /\ (EdgeObjects /\ Weighted)) /\ EdgeObjects)
Vertex	<Edge: void display()>/Vertex.getName/0	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Vertex	<Edge: void display()>/Vertex.getName/1	<Vertex: java.lang.String getName()>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
java.io.PrintStream	<Edge: void display()>/java.io.PrintStream.println/0	<java.io.PrintStream: void println(java.lang.String)>	@ ((EdgeObjects /\ EdgeObjects) /\ EdgeObjects)
Graph$Comparator1	<Graph$Comparator1: int compare(java.lang.Object,java.lang.Object)>/Graph$Comparator1.compare/0	<Graph$Comparator1: int compare(Vertex,Vertex)>	@ StronglyConnected
java.io.PrintStream	<Neighbor: void display()>/java.io.PrintStream.print/0	<java.io.PrintStream: void print(java.lang.String)>	@ ((GN_OnlyNeighbors /\ GN_OnlyNeighbors) /\ GN_OnlyNeighbors)
