0000000000000000
0x
Non-blocking lock was denied.
je.disable.java5.latches	@Latches
java.util.concurrent.locks.ReentrantLock	@Latches
java.util.concurrent.locks.ReentrantReadWriteLock	@Latches
LatchImpl	@Latches
<dbId id=\\\"
\\\"/>
<<\\"Pass 1: \\">>
,
,	@Transactions
<<\\"Pass 2: \\">>
<<\\"End: \\">>
<<\\"processing file \\">>
<<\\".jdb  \\">>
<<\\"\\">>
<<\\"Not Exception or Error: \\">>
\\"DupRootRecover:\\"
\\"LNRedo:\\"
\\"LNUndo\\"
\\"INRecover:\\"
\\"RootRecover:\\"
\\"INDelReplay:\\"
\\"INDupDelReplay:\\"
\\"RootDelete:\\"
<<\\"Already name mapped for dbId: \\">>
<<\\"Already saw dupSort entry for dbId: \\">>
lsn=
Recovery underway, found end of log	@Logging_Config
<<\\"Recovery checkpoint search, \\">>	@Logging_Config
db
Recovery w/no files.	@Logging_Config
<<\\"There are \\">>	@Transactions /\ Logging_Info
recovery
RecoveryManager	@Logging_Severe
recover	@Logging_Severe
Couldn\'t recover	@Logging_Severe
<<\\"Couldn\'t recover: \\">>
<<\\"Recovery finished: \\">>
DATA=END
<<\\"Recovery finished: \\">>
lastUsed=
Cleaner.addToQueue should never be called.	@Cleaner
\\"<nameLN>\\"
\\"</nameLN>\\"
<nameLN>
</nameLN>
<<HASH:-870535562>>
\\\">
\\\">
TxnCommit
<<\\"CleanerRun \\">>	@Cleaner
Cleaner	@Cleaner /\ Logging_Severe
doClean	@Cleaner /\ Logging_Severe
<<\\"\\">>	@Cleaner /\ Logging_Severe
<<\\"CleanerRun \\">>	@Cleaner
<<\\"CleanerRun \\">>	@Cleaner
<<\\"prepare() has already been called for Transaction \\">>	@Transactions
<<\\"Transaction \\">>	@Transactions
Log statistics:
type
total
provisional
total
min
max
avg
entries
<<\\"\\">>
count
count
bytes
bytes
bytes
bytes
<<\\"Transaction \\">>	@(Transactions) /\ (Transactions)
as % of log
<<\\"Commit of transaction \\">>	@(Transactions) /\ (Transactions /\ Logging_Severe)
key/data
Txn	@(Transactions) /\ (Transactions /\ Logging_Severe)
commit	@(Transactions) /\ (Transactions /\ Logging_Severe)
<<\\"\\">>
<<\\"\\">>
<<\\"Failed while attempting to commit transaction \\">>	@(Transactions) /\ (Transactions)
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
(
<<\\"Failed while attempting to commit transaction \\">>	@(Transactions) /\ (Transactions)
<<\\"\nTotal bytes in portion of log read: \\">>
<<\\"Total number of entries: \\">>
<<\\" \\">>
<<\\"Abort:id = \\">>	@Transactions /\ Logging_Fine
<<\\"Transaction \\">>	@Transactions
Txn undo for node=	@Transactions
\nPer checkpoint interval info:
lnTxn
ln
mapLNTxn
mapLN
end-end
end-start
start-end
maxLNReplay
ckptEnd
CleanLN:	@Cleaner /\ Logging_Cleaner
<<\\"Couldn\'t find lock for Node \\">>	@Transactions
SET
BOTH
SET_RANGE
BOTH_RANGE
SearchMode.
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
<<\\"Can\'t find \\">>	@Transactions
<<\\"Can\'t find \\">>	@Transactions
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanLN:	@Cleaner /\ Logging_Cleaner
CleanIN:	@Cleaner /\ Logging_Cleaner
CleanIN:	@Cleaner /\ Logging_Cleaner
CleanIN:	@Cleaner /\ Logging_Cleaner
<<\\"Transaction \\">>	@Transactions
readMapIns
<<\\"Transaction \\">>	@Transactions
<txn id=\\\"	@(Transactions) /\ (Transactions)
\\\">	@(Transactions) /\ (Transactions)
</txn>	@(Transactions) /\ (Transactions)
readNonMapIns
<<\\"\\">>
\\\"/>	@(Cleaner) /\ (Cleaner)
\\"_jeIdMap\\"
\\"_jeNameMap\\"
\\"_jeUtilization\\"
\\\">
<ckptStart>
</ckptStart>
<root>
</root>
<firstActive>
</firstActive>
</CkptEnd>
_jeIdMap
_jeNameMap
_jeUtilization
<<\\"Found unfinished prepare record: id: \\">>	@Transactions /\ Logging_Info
undoLNs
_jeIdMap
_jeNameMap
_jeIdMap
_jeNameMap
<<\\"Logged item entrySize= \\">>
<TreeLocation bin=\\\"
null
\\\" index=\\\"
\\\" lnKey=\\\"
\\\" childLsn=\\\"
redoLns
\\\">
<<\\" lsnFromLog:\\">>	@Logging_Severe
RecoveryManager	@Logging_Severe
replaceOrInsert	@Logging_Severe
lsnFromLog=
<<\\"can\'t find database \\">>
Trace list:
<<\\"\\">>
<<\\"Attempted to \\">>
\\\"/>
<<\\"Read non-valid log entry type: \\">>
\\"<dupCountLN>\\"
\\"</dupCountLN>\\"
Channel closed, may be due to thread interrupt
lsnFromLog=
RootRecover:	@Logging_Recovery
<<\\"Can\'t \\">>
RootRecover:	@Logging_Recovery
<dupCountLN>
</dupCountLN>
rename	@RenameOp
remove	@DeleteOp
DupRootRecover:	@Logging_Recovery
DupRootRecover:	@Logging_Recovery
\\\"/>
truncate	@TruncateOp
INRecover:	@Logging_Recovery
\\"<bin>\\"
\\"</bin>\\"
INRecover:	@Logging_Recovery
INRecover:	@Logging_Recovery
<<\\"Database \\">>	@TruncateOp
TxnPrepare
LNRedo:	@Logging_Recovery
<<\\"Can\'t truncate database \\">>	@TruncateOp
LNRedo:	@Logging_Recovery
nodeId=
LNRedo:	@Logging_Recovery
\\\">
>
\\\" isProvisional=\\\"true
\\\" prev=\\\"0x
\\\">
</entry>
\\";\\"
<<\\" A configuration parameter name can\'t be null or 0 length\\">>
LNUndo	@Logging_Recovery /\ Logging_Base
LNUndo	@Logging_Recovery /\ Logging_Base
<DbPrintLog>
</DbPrintLog>
.
BIN must be latched before evicting LNs	@Evictor /\ Latches
<<\\"Recovery Pass \\">>
<<\\"Usage: \\">>
<<\\" -h  <envHomeDir>\\">>
<<\\" -e  <end file number, in hex>\\">>
<<\\"Recovery Pass \\">>
<<\\" -k  <binary|text> (format for dumping the key)\\">>
<<\\" -s  <start file number, in hex>\\">>
<<\\" -tx <targetted txn ids, comma separated>\\">>
<<\\" -ty <targetted entry types, comma separated>\\">>
<<\\" -S  show Summary of log entries\\">>
<<\\" -q  if specified, concise version is printed\\">>
<bin>
</bin>
<<\\" node=\\">>	@Logging_Base
<<\\" lsn=\\">>	@Logging_Base
<<\\" found=\\">>	@Logging_Base
<<\\" replaced=\\">>	@Logging_Base
<<\\" inserted=\\">>	@Logging_Base
<<\\" replacedLsn=\\">>	@Logging_Base
<<\\"     Default is verbose version.)\\">>
All arguments are optional
BIN
r
rw
<<\\" abortLsn=\\">>	@Logging_Base
_jeIdMap
_jeNameMap
UTF-8
INDupDelReplay:	@(Logging_Recovery) /\ (Logging_Recovery /\ Logging_Base)
INDelReplay:	@(Logging_Recovery) /\ (Logging_Recovery /\ Logging_Base)
UTF-8
<<\\"last LSN = \\">>	@Logging_Severe
RecoveryManager	@Logging_Severe
last LSN=
RootDelete:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<dbtree lastId = \\\"
\\\">
<idDb>
</idDb><nameDb>
</nameDb>
</dbtree>
<dbTree lastDbId =\\\"
\\\">
</dbtree>
<DbLsn val=\\\"0x
\\"Delete\\"
\\"Mod:\\"
0x
<<\\"Cannot read backward over cleaned file from \\">>
<<\\"FileReader read invalid log entry type: \\">>
\\"je.properties\\"
Already closed
key
<<\\"JoinCursor.getNext(key): \\">>	@Logging_Finest
key
data
<<\\"JoinCursor.getNext(key,data): \\">>	@Logging_Finest
envHome
Secondary corrupt
je.properties
<<\\"An error occurred when reading \\">>
<<\\"There \\">>
is 1 open Database in the Environment.\n
<<\\"are \\">>
<<\\" open Database in the Environment.\n\\">>
Closing the following databases:\n
<<\\" \\">>
<<\\"There \\">>	@Transactions
is 1 existing transaction opened against	@Transactions
<<\\" the Environment.\n\\">>	@Transactions
<<\\"are \\">>	@Transactions
<<\\" existing transactions opened against\\">>	@Transactions
<<\\" the Environment.\n\\">>	@Transactions
Aborting open transactions ...\n	@Transactions
<DatabaseEntry
databaseName
Environment.open:  name=	@Logging_Finest
<<\\"Problem in fillReadBuffer, readBufferFileNum = \\">>	@Latches
<<\\"Database \\">>
<<\\"Database \\">>
<<\\"Attempted to open Database \\">>	@Transactions
ABORT
CASCADE
NULLIFY
ForeignKeyDeleteAction.
\\"RootSplit:\\"
\\"DupRootSplit:\\"
\\"Mut:\\"
\\"Ins:\\"
\\"InsD:\\"
>
Delete	@Logging_Finer /\ Latches
<<\\"Attempted to open Database \\">>
databaseName	@DeleteOp
databaseName	@RenameOp
newName	@RenameOp
databaseName	@TruncateOp
RootLatch	@(Latches) /\ (Latches)
Transactions can not be used in a non-transactional environment	@Transactions
Only one may be specified: SerializableIsolation, ReadCommitted or ReadUncommitted	@Transactions
putNoDupData() called, but database is not configured for duplicate data.
api
sync
mutableConfig
.	@(Memory_Budget) /\ (Memory_Budget)
\\"je.info\\"
Attempt to use non-open Environment object().
Can\'t replace a duplicate with different data.	@Latches
<<\\"Problem parsing parameter \\">>
Mod:	@Logging_Finer /\ Latches
<Dbg time=\\\"	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
\\\">	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
<msg val=\\\"	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
\\\"/>	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
</Dbg>	@(Logging_DbLogHandler) /\ (Logging_DbLogHandler)
getFirstNode passed null root
getLastNode passed null root
getParentNode passed null
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<<\\"\\">>
<
<<\\" exists = \\\"\\">>
\\\">
\\\"/>
This statement would have triggered an Exception: virtualinvoke searchResult#1.<com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>()
exactParentFound=
null
<<\\"Attempt to \\">>	@DeleteOp
Unexpected interrupt while waiting for fsync	@FSync
<<\\"usage: \\">>	@Cleaner
subtree did not have a BIN for leaf	@Latches
RootSplit:	@Logging_Fine
<<\\"Error Key \\">>
UNKNOWN
<<\\"Error Data \\">>
UNKNOWN
-h requires an argument	@Cleaner
-h is a required argument	@Cleaner
<<\\"maxBytes parameter to Database.preload() was specified as \\">>	@Memory_Budget
File 0x	@Cleaner
searchSubTree passed key and left/right search
<<\\"  File    Size (KB)  % Used\n--------  ---------  ------\\">>	@Cleaner
<database id=\\\"
\\\"
<<\\" btc=\\\"\\">>
<<\\"Invalid value of searchType: \\">>
\\\"
<<\\" dupc=\\\"\\">>
\\\"
/>
Btree
Duplicate
couldn\'t instantiate class comparator
<database>
\\\"/>
<btcf name=\\\"
\\\"/>
<dupcf name=\\\"
\\\"/>
</database>
<<\\"\\">>
<<\\"Exception while trying to load \\">>
<<\\"Exception while trying to load \\">>
<<\\"Error in \\">>	@Cleaner
,-	@Cleaner
,	@Cleaner
-	@Cleaner
Cannot write file summary in a read-only environment	@Cleaner
.jdb	@Cleaner
BIN cursorSet is inconsistent.	@Verifier
Cursor Not Initialized.
Cursor has been closed.
<<\\"Unknown cursor status: \\">>
CURSOR_NOT_INITIALIZED
CURSOR_INITIALIZED
CURSOR_CLOSED
UNKNOWN (
\\\"
\\\"
\\\"
>\n
<<\\"\\">>
<<\\"\\">>
\n</Cursor>
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" lnIdx=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" oldLnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" newLnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
.
<<\\"A per-thread transaction was created in \\">>
true	@Logging_ConsoleHandler
false	@Logging_DbLogHandler
false	@Evictor
1000	@Evictor
<<\\"Files cleaned: \\">>	@Cleaner
<<\\"\nrecovery time = \\">>
<<\\"action time = \\">>
_jeUtilization	@Transactions /\ Cleaner
_jeUtilization	@Transactions /\ Cleaner
<<\\"\nrecovery time = \\">>
<<\\"action time = \\">>
<<\\"\nrecovery time = \\">>
Cleaner duplicate key sequence file=0x	@Cleaner /\ Logging_Base /\ Logging_Severe
<<\\"action time = \\">>
A Transaction cannot be used because the environment was opened non-transactionally	@Transactions
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
<<\\"lsn \\">>	@Cleaner /\ Latches
cleanedCount=	@Cleaner /\ DeleteOp
<<\\"Remove of \\">>	@DeleteOp
<<\\"null buffer given to checksum validation, probably  result of 0\'s in log file. \\">>	@Checksum
<<\\"Location \\">>	@Checksum
<<\\"Location \\">>	@Checksum
A Transaction cannot be used because the database was opened non-transactionally	@Transactions
Preload starting
<<\\"Preloaded \\">>
NULL_LSN without KnownDeleted
evict time=	@Evictor
This statement would have triggered an Exception: virtualinvoke dupRoot#4.<com.sleepycat.je.tree.DIN: void releaseLatch()>()
<<\\"Usage: \n \\">>
<<\\"  -h <environment home> \\">>
neither LN or DIN found in BIN
<<\\"  -a <clean|compress|evict|checkpoint|removedb>\\">>
<<\\"  -ro (read-only - defaults to read-write)\\">>
<<\\"  -s <dbName> (for preloading of evict or db remove)\\">>
\\"<in>\\"
\\"</in>\\"
\\"Split:\\"
\\"Delete:\\"
\\\"/>	@(Checkpointer_Daemon) /\ (Checkpointer_Daemon)
\\\">
DupRootSplit:	@Logging_Fine
</ref>
<lsn/>
daemon	@Checkpointer_Daemon
<key/>
<target/>
<knownDeleted val=\\\"
\\\"/>
<pendingDeleted val=\\\"
\\\"/>
\\\"/>
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
\n
allowDuplicates passed to insert but database doesn\'t have allow duplicates set.
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\" lastCkpt=\\">>	@Logging_Finest
<<\\"usage: \\">>	@Statistics /\ Verifier
<<\\"usage: \\">>	@(Statistics /\ Verifier) /\ (Statistics /\ Verifier)
-h requires an argument	@Statistics /\ Verifier
-s requires an argument	@Statistics /\ Verifier
-v requires a positive argument	@Statistics /\ Verifier
-v requires an argument	@Statistics /\ Verifier
-h is a required argument	@Statistics /\ Verifier
-s is a required argument	@Statistics /\ Verifier
<<\\"DbStat.stats of \\">>	@(Statistics /\ Verifier) /\ (Logging_Info /\ Verifier /\ Statistics)
<<\\"SubtreeRemoval: subtreeRoot = \\">>	@Logging_Fine
<<\\"DbStat.stats of \\">>	@(Statistics /\ Verifier) /\ (Logging_Info /\ Verifier /\ Statistics)
<root>
</root>
<tree>
\\\"/>
<in/>
</tree>
<<\\"IN \\">>
<<\\"IN \\">>
<<\\"IN \\">>
<<\\"Shutting down \\">>
Exiting
Continuing
NULL_LSN without KnownDeleted
<<\\"fetchTarget of \\">>
null lsn
Mut:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" existingLn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newLn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newLnLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dupCountLN=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dupRootLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" rootdin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" ddinLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dbin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" dbinLsn=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<key v=\\\"
<null>
<null>
<<\\" bin=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\"\\">>
\\\"/>
key=
<<\\"-Warning: Out of sync. Should be \\">>	@Memory_Budget
Ins:	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" lnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" index=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
.
.
.
.
<<\\" (\\">>
)
InsD:	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" dbin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
\\"<node>\\"
\\"</node>\\"
<<\\" bin=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" ln=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
<<\\" lnLsn=\\">>	@(Logging_Finer) /\ (Logging_Finer /\ Logging_Base)
matchLNByNodeId called on non DIN/DBIN
<node>
</node>
<
<node>
</node>
<<\\"Node \\">>
<<\\"failed adding in \\">>	@Memory_Budget
idkey is null
NEW
WAIT_NEW
PROMOTION
WAIT_PROMOTION
EXISTING
DENIED
WAIT_RESTART
NONE_NEEDED
size=
<<\\"usage: \\">>
db=
SUCCESS
FILLED_CACHE
EXCEEDED_TIME
PreloadStatus.
Bad value for timeout:
-f requires an argument
-h requires an argument
-s requires an argument
<<\\"-c: \\">>
-c requires an argument
Bad value for timeout:
-h is a required argument
-v requires -f
<<\\"IN \\">>
<<\\"IN \\">>
allowCreate=
<<\\"Found non-deletable IN \\">>
<<\\"DbLoad.load of \\">>	@Logging_Info
<<\\"Load start: \\">>
Must supply a database name if -l not supplied.
<<\\"DbLoad.load of \\">>	@Logging_Info
<<\\"Load end: \\">>
All nodes should have been loaded	@Cleaner
<<\\"Invalid header parameter: \\">>
<<\\"Version \\">>
\'
<<\\"Invalid value of searchType: \\">>
<<\\"No data to match key \\">>
<<\\"Key exists: \\">>
<<\\"loaded \\">>
No \\\"DATA=END\\\"
Corrupted file
Corrupted file
<<\\"Cursor.count: \\">>	@Logging_Finest
delete
<<\\"Cursor.delete: \\">>	@Logging_Finest
\\"daemon\\"
\\"manual\\"
key
\\"critical\\"
data
put
<<\\"Cursor.put: \\">>	@Logging_Finest
key
data
putNoOverwrite
<<\\"Cursor.putNoOverwrite: \\">>	@Logging_Finest
key
data
putNoDupData
<<\\"Cursor.putNoDupData: \\">>	@Logging_Finest
\\\"/>	@(Evictor) /\ (Evictor)
data
putCurrent
<<\\"Cursor.putCurrent: \\">>	@Logging_Finest
<<\\"Cursor.getCurrent: \\">>	@Logging_Finest
<<\\"Cursor.getFirst: \\">>	@Logging_Finest
Evictor.addToQueue should never be called.	@Evictor /\ EvictorDaemon
<<\\"Cursor.getLast: \\">>	@Logging_Finest
<Transaction id=\\\"	@(Transactions) /\ (Transactions)
\\\"	@(Transactions) /\ (Transactions)
<<\\" name=\\\"\\">>	@(Transactions) /\ (Transactions)
\\\"	@(Transactions) /\ (Transactions)
>	@(Transactions) /\ (Transactions)
<<\\"Transaction \\">>	@Transactions
<<\\"Cursor.getNext: \\">>	@Logging_Finest
\\"<din>\\"
\\"</din>\\"
daemon	@Evictor /\ EvictorDaemon
<<\\"Cursor.getNextDup: \\">>	@Logging_Finest
<<\\"Cursor.getNextNoDup: \\">>	@Logging_Finest
critical	@Evictor /\ Memory_Budget /\ Critical_Eviction
<<\\"Cursor.getPrev: \\">>	@Logging_Finest
<<\\"Cursor.getPrevDup: \\">>	@Logging_Finest
<<\\"Cursor.getPrevNoDup: \\">>	@Logging_Finest
key
data
<<\\"Cursor.getSearchKey: \\">>	@Logging_Finest
key
data
<<\\"Cursor.getSearchKeyRange: \\">>	@Logging_Finest
<<\\"Cursor.getSearchBoth: \\">>	@Logging_Finest
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
<<\\"Cursor.getSearchBothRange: \\">>	@Logging_Finest
<din>
</din>
<dupkey>
<<\\"\\">>
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
</dupkey>
<dupCountLN/>
DIN
NEXT
PREV
NEXT_DUP
PREV_DUP
Evictor: pass=	@Logging_Evictor /\ Evictor /\ Logging_Base
NEXT_NODUP
PREV_NODUP
<<\\"latches held = \\">>	@Evictor
<isRoot val=\\\"
\\\"/>
<level val=\\\"
\\\"/>
<entries numEntries=\\\"
\\\" length=\\\"
\\\" baseFileNumber=\\\"
\\\">
\\\">
</ref>
</entries>
<in>
</in>
<idkey>
<<\\"\\">>
</idkey>
<<\\" IN type=\\">>	@Evictor
put passed a null DatabaseEntry arg
put passed a null DatabaseEntry arg
\\\"/>
\\\"/>
<level val=\\\"
\\\"/>
unknown PutMode
\\\"/>
<entries nEntries=\\\"
\\\">
<<\\"Database \\">>	@Evictor
<entry id=\\\"
<lsn/>
<key/>
<target/>
\\\"/>
</entry>
</entries>
<knownDeleted val=\\\"
\\\"/>
<pendingDeleted val=\\\"
\\\"/>
IN
Split:	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" parent=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" child=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newSibling=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" parentLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" childLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" newSiblingLsn = \\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" splitIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" idKeyIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
<<\\" childIdx=\\">>	@(Logging_Fine) /\ (Logging_Fine /\ Logging_Base)
Delete:	@(Logging_Finest) /\ (Logging_Finest /\ Logging_Base)
idKey=
<<\\" index=\\">>	@(Logging_Finest) /\ (Logging_Finest /\ Logging_Base)
\\"LatchImpl\\"
DEFAULT
READ_UNCOMMITTED
READ_COMMITTED
RMW
LockMode.
LatchImpl	@Latches
DbState.
TxnAbort
waitTarget.active but not owner	@(Latches) /\ (Latches)
)	@Latches
<<\\"<LATCH \\">>	@Latches
<<\\"] \\">>	@Latches
This statement would have triggered an Exception: $stack45 = result#4.<com.sleepycat.je.dbi.CursorImpl$KeyChangeStatus: com.sleepycat.je.OperationStatus status>
]	@Latches
<<\\" [waiters: \\">>	@Latches
<<\\" \\">>	@Latches
]	@Latches
>	@Latches
\\"!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\"
!\\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
LN_TX
LN
MapLN_TX
MapLN
NameLN_TX
NameLN
DelDupLN_TX
DelDupLN
DupCountLN_TX
DupCountLN
false	@Logging_DbLogHandler
FileSummaryLN	@Cleaner
true	@Logging_ConsoleHandler
SEVERE	@Logging_Base
IN
false
BIN
DIN
DBIN
<<\\"java { \\">>
\\"usage: java <utility> [options...]\\"
\\"com.sleepycat.je.util.\\"
Missing utility name
com.sleepycat.je.util.
Root
Commit
Abort
CkptStart
CkptEnd
INDelete
BINDelta
DupBINDelta
usage: java <utility> [options...]
Trace
FileHeader
INDupDelete
Prepare
non LogEntryType passed to LogEntryType.compare
<<\\"usage: \\">>	@(Statistics /\ Verifier) /\ (Statistics /\ Verifier)
fsyncLatch	@FSync /\ Latches
<<\\"Exit status = \\">>	@Statistics /\ Verifier
<<\\"Exit status = \\">>	@Statistics /\ Verifier
<<\\"Exit status = \\">>	@Statistics /\ Verifier
READ
WRITE
-h requires an argument	@Statistics /\ Verifier
RANGE_READ
RANGE_WRITE
-s requires an argument	@Statistics /\ Verifier
RANGE_INSERT
NONE
RESTART
-v requires a positive argument	@Statistics /\ Verifier
-v requires an argument	@Statistics /\ Verifier
-h is a required argument	@Statistics /\ Verifier
-s is a required argument	@Statistics /\ Verifier
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
Checking obsolete offsets ...	@Statistics /\ Verifier
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
<<\\"DbVerify.verify of \\">>	@Logging_Info /\ Verifier /\ Statistics
\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\"
copy.remaining=
foreignKeyDeleteAction
.
The SecondaryConfig argument is null.
<<\\"Usage: \\">>
<<\\"                 -h <environment home>\\">>
(optional)
<<\\"                 -f <file number, in hex>\\">>
<<\\"                 -o <offset, in hex>\\">>
Log file is truncated at position starting at and inclusive of the offset. Beware, not  for general purpose use yet!
The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
<<\\" SecondaryKeyCreator\n\\">>
<<\\" SecondaryMultiKeyCreator\n\\">>
<<\\" ForeignKeyDelete\n\\">>
<<\\" ForeignKeyDeleteAction\n\\">>
<<\\" ForeignKeyNullifier\n\\">>
<<\\" ForeignMultiKeyNullifier\n\\">>
<<\\" ImmutableSecondaryKey\n\\">>
No value after -records	@(Memory_Budget) /\ (Memory_Budget)
No value after -key	@(Memory_Budget) /\ (Memory_Budget)
No value after -data	@(Memory_Budget) /\ (Memory_Budget)
No value after -nodemax	@(Memory_Budget) /\ (Memory_Budget)
No value after -density	@(Memory_Budget) /\ (Memory_Budget)
No value after -overhead	@(Memory_Budget) /\ (Memory_Budget)
No value after -measure	@(Memory_Budget) /\ (Memory_Budget)
<<\\"Unknown arg: \\">>	@(Memory_Budget) /\ (Memory_Budget)
unknown GetMode
-records not specified	@(Memory_Budget) /\ (Memory_Budget)
-key not specified	@(Memory_Budget) /\ (Memory_Budget)
<lastFullLsn>
</lastFullLsn>
\\\"/>
<<\\"usage:\njava \\">>	@Memory_Budget
\\".jdb\\"
\\".cif\\"
\\".del\\"
\\".bad\\"
\\".lck\\"
.del
.jdb
.jdb
.del
Inputs: records=	@Memory_Budget
<<\\"    Cache Size      Btree Size  Description\n--------------  --------------  -----------\\">>	@Memory_Budget
Minimum, internal nodes only	@Memory_Budget
Maximum, internal nodes only	@Memory_Budget
Minimum, internal nodes and leaf nodes	@Memory_Budget
Maximum, internal nodes and leaf nodes	@Memory_Budget
\nTo get leaf node sizing specify -data	@Memory_Budget
<<\\"\nBtree levels: \\">>	@Memory_Budget
<<\\"Environment home \\">>
<<\\"Directory is not empty: \\">>	@Memory_Budget
<<\\"\nMeasuring with cache size: \\">>	@Memory_Budget
Stats for internal and leaf nodes (after insert)	@Memory_Budget /\ Statistics
<<\\"A transaction was not supplied when opening this cursor: \\">>
<<\\"\nPreloading with cache size: \\">>	@Memory_Budget
Stats for internal nodes only (after preload)	@Memory_Budget /\ Statistics
key
data
<<\\"During close: \\">>	@Memory_Budget
key
<<\\"During close: \\">>	@Memory_Budget
data
foo	@Memory_Budget
*** Key doesn\'t fit value=	@Memory_Budget
Random key already exists -- retrying	@Memory_Budget
.jdb
<<\\"*** \\">>	@Memory_Budget
<<\\"*** Ran out of cache memory at record \\">>	@Memory_Budget /\ Statistics
.	@Memory_Budget
.jdb
CacheSize=	@Memory_Budget /\ Statistics
*** All records did not fit in the cache ***	@Memory_Budget /\ Statistics
<<\\"usage: \\">>
<<\\"\\">>
.
<<\\"Couldn\'t rename \\">>
<<\\"Couldn\'t delete \\">>
<<\\"Environment invalid because of previous exception: \\">>
\\"<fileSummaryLN>\\"
\\"</fileSummaryLN>\\"
-f requires an argument
-h requires an argument
UTF-8	@Cleaner
-d requires an argument
-s requires an argument
-h is a required argument
Must supply a database name if -l not supplied.
remaining=
<fileSummaryLN>	@(Cleaner) /\ (Cleaner)
<<\\"Couldn\'t open file \\">>
true
false
</fileSummaryLN>	@(Cleaner) /\ (Cleaner)
<<\\"Couldn\'t open file \\">>
<<\\"DbDump.dump of \\">>	@Logging_Info
Txnl access to UP db not allowed	@(Cleaner) /\ (Cleaner)
DATA=END
<<\\"DbDump.dump of \\">>	@Logging_Info
VERSION=3
\n
format=print
format=bytevalue
type=btree
dupsort=
1
Channel closed, may be due to thread interrupt
0
<<\\"IOException caught: \\">>
HEADER=END
<<\\"File \\">>
\\"je.disable.java.adler32\\"
Channel closed, may be due to thread interrupt
<<\\"Cache percent is not a valid integer: \\">>
FileManager would overwrite non-empty file 0x
MapTreeRoot	@Latches
generated for testing
\\\">
File closed, may be due to thread interrupt
</INDeleteEntry>
generated for testing	@DiskFullErro
Can\'t set \'je.env.isNoLocking\' and \'je.env.isTransactional\';	@Transactions
<<\\"Enviroment creation isn\'t allowed,  but there is no pre-existing  environment in \\">>
\\"sun.arch.data.model\\"
\\"je.forceJVMArch\\"
TriggerLatch	@Latches
1.4 based 64 bit JVM not supported	@Memory_Budget
Evictor	@Evictor
Checkpointer	@Checkpointer_Daemon
INCompressor	@INCompressor
Cleaner	@Cleaner
Mac OS X
je.lck	@(Environment_Locking) /\ (Environment_Locking)
rw	@(Environment_Locking) /\ (Environment_Locking)
<<\\"A je.lckfile exists in \\">>	@(Environment_Locking) /\ (Environment_Locking)
shared	@(Environment_Locking) /\ (Environment_Locking)
single writer	@(Environment_Locking) /\ (Environment_Locking)
\n	@(Statistics) /\ (Statistics)
<<\\"The Environment directory \\">>
numBottomInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
numInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
numDuplicateInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
numDuplicateBottomInternalNodes=	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
\n	@(Statistics) /\ (Statistics)
Attempt to use a Environment that has been closed.
Write after RunRecoveryException
Randomly generated for testing
<<\\"Close of environment \\">>	@Logging_Fine
close
<<\\"\nException shutting down daemon threads: \\">>
\n
<<\\"Env \\">>	@Logging_Fine
<<\\"\nException clearing file manager: \\">>
\n
<<\\"\nException clearing file manager: \\">>
\n
<<\\"\\">>
<<\\"Problem: \\">>	@Statistics /\ CheckLeaks
<<\\"Problem: \\">>	@Transactions /\ CheckLeaks /\ Statistics
Some latches held at env close.	@CheckLeaks /\ Latches
Lock, transaction, or latch left behind at environment close
File Flip	@Logging_FileHandler /\ Logging_Base
manual	@Evictor
txnId=
<<\\"No transaction found for \\">>	@Transactions
beginTransaction called,  but Environment was not opened with transactional cpabilities	@Transactions
<<\\"environmentImpl is null for target db \\">>
<<\\"No transaction found for \\">>	@(Transactions) /\ (Transactions)
<<\\"No transaction found for \\">>	@(Transactions) /\ (Transactions)
\\"                                                                                                                                \\"
<<\\"                                                                                                                                \\">>
<<\\" \\">>
null
primaryDatabase
Can\'t use as primary:
<<\\"Duplicates must not be allowed for a primary database: \\">>
Primary and secondary databases must be in the same environment
secConfig.getKeyCreator() and getMultiKeyCreator() may not both be non-null
secConfig and getKeyCreator()/getMultiKeyCreator() may be null only if the primary database is read-only
secConfig.getForeignKeyNullifier() and getForeignMultiKeyNullifier() may not both be non-null
ForeignKeyNullifier or ForeignMultiKeyNullifier must be non-null when ForeignKeyDeleteAction is NULLIFY
ForeignKeyNullifier may not be used with SecondaryMultiKeyCreator -- use ForeignMultiKeyNullifier instead
<<\\"Duplicates must not be allowed for a foreign key  database: \\">>
<<\\"Secondary is already associated with a different primary: \\">>
SecondaryDatabase open	@Logging_Finest
<<\\"txnId = \\">>	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
Usage: EnvironmentParams <samplePropertyFile>
####################################################\n# Example Berkeley DB, Java Edition property file\n# Each parameter is set to its default value\n####################################################\n\n
#
key
Can\'t call SecondaryDatabase.delete:
SecondaryDatabase.delete	@Logging_Finest
key
initialized
.bad
open
closed
invalid
<<\\"Can\'t go from environment state \\">>
pKey
data
Can\'t call SecondaryDatabase.get:
SecondaryDatabase.get	@Logging_Finest
\\"CleanIN:\\"
\\"CleanLN:\\"
\\"CleanMigrateLN:\\"
\\"CleanPendingLN:\\"
nGets=	@(Statistics) /\ (Statistics)
key
pKey
data
Can\'t call SecondaryDatabase.getSearchBoth:
SecondaryDatabase.getSearchBoth	@Logging_Finest
<<\\"Both \\">>	@Cleaner
<<\\"\\">>	@Cleaner
<knownDeleted val=\\\"
true
false
\\\"/>
<<\\"Cleaner has \\">>	@Cleaner /\ Environment_Locking /\ Logging_Severe
.del	@Cleaner /\ Environment_Locking
Cleaner deleted file 0x	@Cleaner /\ Environment_Locking /\ Logging_Severe
Log file 0x	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
deleted	@Cleaner /\ Logging_Severe
renamed	@Cleaner /\ Logging_Severe
Cleaner	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
deleteSafeToDeleteFiles	@(Cleaner /\ Logging_Severe) /\ (Cleaner /\ Logging_Severe)
\n
<<\\"Secondary \\">>
SUCCESS
KEYEXIST
KEYEMPTY
NOTFOUND
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
<<\\"Secondary \\">>
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
<<\\"Could not insert secondary key in \\">>
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
OperationStatus.
CleanPendingLN:	@Cleaner
CleanPendingLN:	@Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanPendingLN:	@Cleaner /\ Logging_Cleaner
CleanMigrateLN:	@Cleaner
<<\\"Secondary \\">>
OPEN
CleanMigrateLN:	@Cleaner
CLOSED
INVALID
DatabaseConfig.setReadOnly() must be set to false when creating a Database
CleanMigrateLN:	@Cleaner
<<\\"Secondary \\">>
Operation not allowed on a secondary
<<\\"You can\'t open a Database with a duplicatesAllowed configuration of \\">>
<<\\"You can\'t open a Database with a transactional configuration of \\">>	@Transactions
Can\'t close Database:
<<\\"Database.close: \\">>	@Logging_Finest
There are open cursors against the database.\n
They will be closed.\n
key
Can\'t call Database.openSequence:
openSequence
Database.openSequence	@Logging_Finest
Can\'t open a cursor
Only one may be specified: ReadCommitted or ReadUncommitted
Database.openCursor	@Logging_Finest
key
Can\'t call Database.delete:
delete
Database.delete	@Logging_Finest
<LockInfo locker=\\\"
\\\" type=\\\"
\\\"/>
<<\\" lock taken at: \\">>
key
data
Can\'t call Database.get:
Database.get	@Logging_Finest
key
data
Can\'t call Database.getSearchBoth:
Database.getSearchBoth	@Logging_Finest
key
data
Can\'t call Database.put
put
Database.put	@Logging_Finest
key
data
Nested transactions are not supported yet.	@Transactions
Can\'t call Database.putNoOverWrite
putNoOverwrite
Database.putNoOverwrite	@Logging_Finest
key
data
Can\'t call Database.putNoDupData
putNoDupData
Database.putNoDupData	@Logging_Finest
<<\\"XA Transaction \\">>	@Transactions
Can\'t call Database.join
cursors
At least one cursor is required.
All cursors must use the same transaction.	@Transactions
All cursors must use the same environment.	@Transactions
All cursors must use the same transaction.	@Transactions
Can\'t call Database.truncate	@TruncateOp
truncate	@TruncateOp
Database.truncate: txnId=	@Logging_Finest /\ TruncateOp
null	@Latches /\ TruncateOp
couldn\'t find database - truncate	@TruncateOp
truncate	@DeleteOp /\ TruncateOp
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.preload
preload	@DeleteOp
Can\'t call Database.stat	@Statistics
stat	@DeleteOp /\ Statistics
Can\'t call Database.verify	@Statistics /\ Verifier
verify	@DeleteOp /\ Verifier /\ Statistics
<<\\"CleanAddPendingDB \\">>	@(Cleaner /\ DeleteOp) /\ (DeleteOp /\ Cleaner /\ Logging_Cleaner)
activeTxns=[	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
]\n	@(Transactions /\ Statistics) /\ (Transactions /\ Statistics)
<<\\" node=\\">>	@Cleaner /\ Logging_Cleaner /\ Logging_Base
<<\\" logLsn=\\">>	@Cleaner /\ Logging_Cleaner /\ Logging_Base
<<\\"Database is Read Only: \\">>
\\"<mapLN>\\"
\\"</mapLN>\\"
<mapLN>
</mapLN>
\\\">
<<\\" name=\\">>	@Logging_Finest /\ Logging_Base
<offsets size=\\\"
\\\">
0x
</offsets>
<offsets size=\\\"0\\\"/>
<<\\"Obsolete lsns contains valid lsn \\">>	@Verifier
<<\\"Tree contains obsolete lsn \\">>	@Verifier
<summary totalCount=\\\"	@Cleaner
Lsn mismatch	@Verifier
\\\" totalSize=\\\"	@Cleaner
\\\" totalINCount=\\\"	@Cleaner
\\\" totalINSize=\\\"	@Cleaner
\\\" totalLNCount=\\\"	@Cleaner
\\\" totalLNSize=\\\"	@Cleaner
\\\" obsoleteINCount=\\\"	@Cleaner
\\\" obsoleteLNCount=\\\"	@Cleaner
\\\"/>	@Cleaner
\\\">
</INDupDeleteEntry>
<<\\"DatabaseEntry \\">>
<<\\"Data field for DatabaseEntry \\">>
A partial key DatabaseEntry is not allowed
\\\">
>
<<\\"Wrong filenum in header for file \\">>
<<\\"Expected log version 3 or earlier but found \\">>
<FileHeader num=\\\"0x
\\\" lastEntryInPrevFileOffset=\\\"0x
\\\" logVersion=\\\"0x
\\\"/>
\\\" gTxnId=\\\"
null
\\\" bqual=\\\"
null
\\\"/>
.
.
A checksum error was found in the log.
<<\\"Corruption begins at LSN:\n   \\">>
<<\\"Last known good record before corruption is at LSN:\n   \\">>
<<\\"Next known good record after corruption is at LSN:\n   \\">>
\\"  File    Size (KB)  % Used\n--------  ---------  ------\\"
<<\\" TOTALS \\">>	@(Cleaner) /\ (Cleaner)
<<\\"  \\">>	@(Cleaner) /\ (Cleaner)
<<\\"     \\">>	@(Cleaner) /\ (Cleaner)
<<\\"Dup Offset \\">>
\\"<dbin>\\"
\\"</dbin>\\"
Btree
Duplicate
The following DatabaseConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n
<<\\" Transactional\n\\">>	@Transactions
<<\\" Read-Only\n\\">>
<<\\" Sorted Duplicates\n\\">>
<<\\" Btree Comparator\n\\">>
<dbin>
<<\\" Duplicate Comparator\n\\">>
</dbin>
<dupkey>
<<\\"\\">>
</dupkey>
DBIN
delete
<<\\"SecondaryCursor.delete: \\">>	@Logging_Finest
<<\\"<LatchWaiter: \\">>	@(Latches) /\ (Latches)
\\"<ln>\\"
\\"</ln>\\"
<<\\"SecondaryCursor.getCurrent: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getFirst: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getLast: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getNext: \\">>	@Logging_Finest
<ln>
</ln>
<data>
</data>
<<\\"SecondaryCursor.getNextDup: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getNextNoDup: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getPrev: \\">>	@Logging_Finest
<<\\"SecondaryCursor.getPrevDup: \\">>	@Logging_Finest
<data>
</data>
<<\\"SecondaryCursor.getPrevNoDup: \\">>	@Logging_Finest
key
pKey
data
<<\\"SecondaryCursor.getSearchKey: \\">>	@Logging_Finest
\\"INCompress:\\"
key
pKey
data
<<\\"SecondaryCursor.getSearchKeyRange: \\">>	@Logging_Finest
\\\"/>	@(INCompressor) /\ (INCompressor)
key
pKey
data
<<\\"SecondaryCursor.getSearchBoth: \\">>	@Logging_Finest
INCompressor.addToQueue should never be called.	@INCompressor
key
pKey
data
<<\\"SecondaryCursor.getSearchBothRange: \\">>	@Logging_Finest
key
pKey
<<\\"InCompress.doCompress called, queue size: \\">>	@INCompressor /\ Logging_Fine
data
Sequences not supported in databases configured for duplicates
Minimum sequence value must be less than the maximum
Initial sequence value is out of range
The cache size is larger than the sequence range
ExclusiveCreate=true and the sequence record already exists.
Sequence record removed during openSequence.
AllowCreate=false and the sequence record does not exist.
Sequence delta must be greater than zero
Sequence delta is larger than the range
<<\\"Sequence overflow \\">>
Sequence.get value=	@Logging_Finest /\ Logging_Base
The sequence record has been deleted while it is open.
<<\\"locker \\">>
<<\\"locker \\">>
<<\\" Owners:\\">>
<<\\" (none)\\">>
<<\\" Waiters:\\">>
<<\\" (none)\\">>
Recovery Info
<<\\" lastUsed=\\">>
<<\\" nextAvail=\\">>
<<\\" ckptStart=\\">>
<<\\" firstActive=\\">>
<<\\" ckptEnd=\\">>
<<\\" useRoot=\\">>
>
----- Event Dump -----
<<\\"Lock Table \\">>	@Latches
Transaction
Lock
Transaction
++++++++++ begin lock table dump ++++++++++
++++++++++ end lock table dump ++++++++++
: waited for lock
\n
<<\\"Transfer, lock \\">>
<<\\"Transfer, lock \\">>
----\n
\n
<<\\" waits for \\">>
<<\\" nothing\\">>
<<\\" node \\">>
\n
<<\\"Transaction \\">>
